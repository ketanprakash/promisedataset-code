ID,Type,Name,LongName,Parent,Component,Path,Line,Column,EndLine,EndColumn,CC,CCL,CCO,CI,CLC,CLLC,LDC,LLDC,LCOM5,NL,NLE,WMC,CBO,CBOI,NII,NOI,RFC,AD,CD,CLOC,DLOC,PDA,PUA,TCD,TCLOC,DIT,NOA,NOC,NOD,NOP,LLOC,LOC,NA,NG,NLA,NLG,NLM,NLPA,NLPM,NLS,NM,NOS,NPA,NPM,NS,TLLOC,TLOC,TNA,TNG,TNLA,TNLG,TNLM,TNLPA,TNLPM,TNLS,TNM,TNOS,TNPA,TNPM,TNS,name,version,name.1,wmc,dit,noc,cbo,rfc,lcom,ca,ce,npm,lcom3,loc,dam,moa,mfa,cam,ic,cbm,amc,max_cc,avg_cc,bug,code
L384,Class,A,A,L216,L103,src/etc/testcases/taskdefs/optional/depend/src1/A.java,1,1,3,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,2,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A extends B {
    private D d = new D();
}

"
L405,Class,A,A,L216,L103,src/etc/testcases/taskdefs/optional/depend/src2/A.java,1,1,4,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner extends B {
    }
}

"
L411,Class,A,A,L216,L103,src/etc/testcases/taskdefs/optional/depend/src3/A.java,1,1,6,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner {
        static private class Inner2 extends B {
        }
    }
}

"
L419,Class,A,A,L216,L103,src/etc/testcases/taskdefs/optional/depend/src5/A.java,1,1,3,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    APrivate dependency = new APrivate();
}

class APrivate extends B {
}
"
L407,Class,A$Inner,A$Inner,L405,L103,src/etc/testcases/taskdefs/optional/depend/src2/A.java,2,5,3,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner extends B {
    }
}

"
L413,Class,A$Inner,A$Inner,L411,L103,src/etc/testcases/taskdefs/optional/depend/src3/A.java,2,5,5,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner {
        static private class Inner2 extends B {
        }
    }
}

"
L415,Class,A$Inner$Inner2,A$Inner$Inner2,L413,L103,src/etc/testcases/taskdefs/optional/depend/src3/A.java,3,9,4,10,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner {
        static private class Inner2 extends B {
        }
    }
}

"
L422,Class,APrivate,APrivate,L216,L103,src/etc/testcases/taskdefs/optional/depend/src5/A.java,5,1,6,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    APrivate dependency = new APrivate();
}

class APrivate extends B {
}
"
L434,Class,AssertionTest,AssertionTest,L216,L103,src/etc/testcases/types/assertions/AssertionTest.java,59,1,66,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,0,0,0,1,0.5,0.903226,56,56,1,1,0.903226,56,0,0,0,0,0,6,8,0,0,0,0,1,0,1,0,1,2,0,1,0,6,8,0,0,0,0,1,0,1,0,1,2,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
 


public class AssertionTest {
    
    public static void main(String args[]) {
		assert true == false : ""there exist no facts that are both true and false"";
		System.out.println(""Assertions are disabled"");
    }
    
}
"
L385,Class,B,B,L216,L103,src/etc/testcases/taskdefs/optional/depend/src1/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,4,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,4,4,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B extends C {
}

"
L409,Class,B,B,L216,L103,src/etc/testcases/taskdefs/optional/depend/src2/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B {
}

"
L417,Class,B,B,L216,L103,src/etc/testcases/taskdefs/optional/depend/src3/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B {
}

"
L426,Class,B,B,L216,L103,src/etc/testcases/taskdefs/optional/depend/src5/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B {
}

"
L395,Class,C,C,L216,L103,src/etc/testcases/taskdefs/optional/depend/src1/C.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,1,5,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class C {
}

"
L392,Class,D,D,L216,L103,src/etc/testcases/taskdefs/optional/depend/src1/D.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class D {
}

"
L401,Class,E,E,L216,L103,src/etc/testcases/taskdefs/optional/depend/src1/E.java,1,1,5,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,0,0,0,1,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,0,0,1,1,0,0,0,5,5,0,0,0,0,1,0,0,0,1,1,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class E {
    E() {
        System.out.println(A.class);
    }
}

"
L263,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk1.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,2,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L282,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk2.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L288,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk3.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L294,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk4.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L300,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk5.java,1,1,13,1,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.411765,7,0,0,3,0.411765,7,0,0,0,0,0,10,13,1,0,1,0,1,1,1,0,1,4,1,1,0,10,13,1,0,1,0,1,1,1,0,1,4,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have      a tab"");
        
        if (mybool) {   char mychar = '   ';      
        } 
        
    } 
}
"
L306,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk6.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L312,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk7.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L318,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk8.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L324,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk9.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L330,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk1.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L336,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk2.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L342,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk3.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L348,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk4.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L354,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk5.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L360,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk6.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L366,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk7.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L372,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk8.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L378,Class,Junk1,Junk1,L216,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk9.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L261,Class,Task1,Task1,L216,L103,src/etc/testcases/core/loaderref/src/Task1.java,3,1,4,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,9,9,0,0,0,0,0,0,35,0,0,25,7,2,2,9,9,0,0,0,0,0,0,35,0,0,25,7,,,,,,,,,,,,,,,,,,,,,,,,,"import org.apache.tools.ant.Task;

public class Task1 extends Task {
}

"
L428,Class,jsharp,jsharp,L216,L103,src/etc/testcases/taskdefs/optional/dotnet/jsharp.java,59,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,0,0,0,1,0.5,0.918033,56,56,1,1,0.918033,56,0,0,0,0,0,5,7,0,0,0,0,1,0,1,0,1,1,0,1,0,5,7,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
 


public class jsharp {
    
    public static void main(String args[]) {
		System.out.println(""hello, I look like Java, but I'm really J#"");
    }
    
}
"
L46079,Class,AntClassLoaderTest,org.apache.tools.ant.AntClassLoaderTest,L443,L103,src/testcases/org/apache/tools/ant/AntClassLoaderTest.java,64,1,111,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,8,4,0,0,7,10,0.25,0.255319,12,5,1,3,0.255319,12,0,0,0,0,0,35,48,1,0,1,0,3,0,3,1,3,18,0,3,1,35,48,1,0,1,0,3,0,3,1,3,18,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;
import org.apache.tools.ant.types.Path;
import junit.framework.TestCase;


public class AntClassLoaderTest extends TestCase {

    private Project p;

    public AntClassLoaderTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
    }

    public void testCleanup() throws BuildException {
        Path path = new Path(p, ""."");
        AntClassLoader loader = new AntClassLoader(p, path);
        try {
            
            loader.findClass(""fubar"");
            fail(""Did not expect to find fubar class"");
        } catch (ClassNotFoundException e) {
            
        }
        
        loader.cleanup();
        try {
            
            loader.findClass(""fubar"");
            fail(""Did not expect to find fubar class"");
        } catch (ClassNotFoundException e) {
            
        } catch (NullPointerException e) {
            fail(""loader should not fail even if cleaned up"");
        }
        
        
        p.fireBuildFinished(null);
        try {
            
            loader.findClass(""fubar"");
            fail(""Did not expect to find fubar class"");
        } catch (ClassNotFoundException e) {
            
        } catch (NullPointerException e) {
            fail(""loader should not fail even if project finished"");
        }
    }
}

"
L3661,Class,BuildFileTest,org.apache.tools.ant.BuildFileTest,L443,L103,src/testcases/org/apache/tools/ant/BuildFileTest.java,73,1,517,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,37,5,120,1053,10,38,1.0,0.454839,141,141,2,0,0.4825,193,0,0,119,119,0,169,349,6,8,6,8,28,0,1,0,28,90,0,1,0,207,445,8,8,8,8,38,0,11,0,38,98,0,11,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.TestCase;
import org.apache.tools.ant.Project;
import java.io.File;
import java.io.PrintStream;
import java.net.URL;


public abstract class BuildFileTest extends TestCase {

    protected Project project;

    private StringBuffer logBuffer;
    private StringBuffer fullLogBuffer;
    private StringBuffer outBuffer;
    private StringBuffer errBuffer;
    private BuildException buildException;

    
    public BuildFileTest(String name) {
        super(name);
    }

    
    protected void expectBuildException(String target, String cause) {
        expectSpecificBuildException(target, cause, null);
    }

    
    protected void expectLog(String target, String log) {
        executeTarget(target);
        String realLog = getLog();
        assertEquals(log, realLog);
    }
    
    

    protected void assertLogContaining(String substring) {
        String realLog = getLog();
        assertTrue(""expecting log to contain \"""" + substring + ""\"" log was \""""
                   + realLog + ""\"""",
                   realLog.indexOf(substring) >= 0);
    }
    
    
    protected void expectLogContaining(String target, String log) {
        executeTarget(target);
        assertLogContaining(log);
    }

    
    protected String getLog() {
        return logBuffer.toString();
    }

    
    protected void expectDebuglog(String target, String log) {
        executeTarget(target);
        String realLog = getFullLog();
        assertEquals(log, realLog);
    }

    
    protected String getFullLog() {
        return fullLogBuffer.toString();
    }

    

    protected void expectOutput(String target, String output) {
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput.trim());
    }

    

    protected void expectOutputAndError(String target, String output, String error) {
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
        String realError = getError();
        assertEquals(error, realError);
    }

    protected String getOutput() {
        return cleanBuffer(outBuffer);
    }

    protected String getError() {
        return cleanBuffer(errBuffer);
    }

    protected BuildException getBuildException() {
        return buildException;
    }

    private String cleanBuffer(StringBuffer buffer) {
        StringBuffer cleanedBuffer = new StringBuffer();
        boolean cr = false;
        for (int i = 0; i < buffer.length(); i++) {
            char ch = buffer.charAt(i);
            if (ch == '\r') {
                cr = true;
                continue;
            }

            if (!cr) {
                cleanedBuffer.append(ch);
            } else {
                cleanedBuffer.append(ch);
            }
        }
        return cleanedBuffer.toString();
    }

    
    protected void configureProject(String filename) throws BuildException {
        configureProject(filename, Project.MSG_DEBUG);
    }

    
    protected void configureProject(String filename, int logLevel)
        throws BuildException {
        logBuffer = new StringBuffer();
        fullLogBuffer = new StringBuffer();
        project = new Project();
        project.init();
        project.setUserProperty( ""ant.file"" , new File(filename).getAbsolutePath() );
        project.addBuildListener(new AntTestListener(logLevel));
        ProjectHelper.configureProject(project, new File(filename));
    }

    
    protected void executeTarget(String targetName) {
        PrintStream sysOut = System.out;
        PrintStream sysErr = System.err;
        try {
            sysOut.flush();
            sysErr.flush();
            outBuffer = new StringBuffer();
            PrintStream out = new PrintStream(new AntOutputStream(outBuffer));
            System.setOut(out);
            errBuffer = new StringBuffer();
            PrintStream err = new PrintStream(new AntOutputStream(errBuffer));
            System.setErr(err);
            logBuffer = new StringBuffer();
            fullLogBuffer = new StringBuffer();
            buildException = null;
            project.executeTarget(targetName);
        } finally {
            System.setOut(sysOut);
            System.setErr(sysErr);
        }

    }

    
    protected Project getProject() {
        return project;
    }

    
    protected File getProjectDir() {
        return project.getBaseDir();
    }

    
    protected void expectSpecificBuildException(String target, String cause, String msg) {
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != msg) && (!ex.getMessage().equals(msg))) {
                fail(""Should throw BuildException because '"" + cause
                        + ""' with message '"" + msg
                        + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }

    
    protected void expectBuildExceptionContaining(String target, String cause, String contains) {
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {
                fail(""Should throw BuildException because '"" + cause + ""' with message containing '"" + contains + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }


    

    protected void expectPropertySet(String target, String property, String value) {
        executeTarget(target);
        assertPropertyEquals(property, value);
    }

    
    protected void assertPropertyEquals(String property, String value) {
        String result = project.getProperty(property);
        assertEquals(""property "" + property,value,result);
    }

    
    protected void assertPropertySet(String property) {
        assertPropertyEquals(property, ""true"");
    }

    
    protected void assertPropertyUnset(String property) {
        assertPropertyEquals(property, null);
    }


    
    protected void expectPropertySet(String target, String property) {
        expectPropertySet(target, property, ""true"");
    }


    
    protected void expectPropertyUnset(String target, String property) {
        expectPropertySet(target, property, null);
    }

    
    protected URL getResource(String resource){
        URL url = getClass().getResource(resource);
        assertNotNull(""Could not find resource :"" + resource, url);
        return url;
    }

    
    private static class AntOutputStream extends java.io.OutputStream {
        private StringBuffer buffer;
        
        public AntOutputStream( StringBuffer buffer ) {
            this.buffer = buffer;
        }
        
        public void write(int b) { 
            buffer.append((char)b);
        }
    }

    
    private class AntTestListener implements BuildListener {
        private int logLevel;

        
        public AntTestListener(int logLevel) {
            this.logLevel = logLevel;
        }

        
        public void buildStarted(BuildEvent event) {
        }

        
        public void buildFinished(BuildEvent event) {
        }

        
        public void targetStarted(BuildEvent event) {
            
        }

        
        public void targetFinished(BuildEvent event) {
            
        }

        
        public void taskStarted(BuildEvent event) {
            
        }

        
        public void taskFinished(BuildEvent event) {
            
        }

        
        public void messageLogged(BuildEvent event) {
            if (event.getPriority() > logLevel) {
                
                return;
            }

            if (event.getPriority() == Project.MSG_INFO ||
                event.getPriority() == Project.MSG_WARN ||
                event.getPriority() == Project.MSG_ERR) {
                logBuffer.append(event.getMessage());
            }
            fullLogBuffer.append(event.getMessage());

        }
    }


}
"
L46141,Class,BuildFileTest$AntOutputStream,org.apache.tools.ant.BuildFileTest$AntOutputStream,L3661,L103,src/testcases/org/apache/tools/ant/BuildFileTest.java,415,5,425,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,1,0,2,0.333333,0.25,3,3,1,2,0.25,3,0,0,0,0,0,9,11,1,0,1,0,2,0,2,0,2,2,0,2,0,9,11,1,0,1,0,2,0,2,0,2,2,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.TestCase;
import org.apache.tools.ant.Project;
import java.io.File;
import java.io.PrintStream;
import java.net.URL;


public abstract class BuildFileTest extends TestCase {

    protected Project project;

    private StringBuffer logBuffer;
    private StringBuffer fullLogBuffer;
    private StringBuffer outBuffer;
    private StringBuffer errBuffer;
    private BuildException buildException;

    
    public BuildFileTest(String name) {
        super(name);
    }

    
    protected void expectBuildException(String target, String cause) {
        expectSpecificBuildException(target, cause, null);
    }

    
    protected void expectLog(String target, String log) {
        executeTarget(target);
        String realLog = getLog();
        assertEquals(log, realLog);
    }
    
    

    protected void assertLogContaining(String substring) {
        String realLog = getLog();
        assertTrue(""expecting log to contain \"""" + substring + ""\"" log was \""""
                   + realLog + ""\"""",
                   realLog.indexOf(substring) >= 0);
    }
    
    
    protected void expectLogContaining(String target, String log) {
        executeTarget(target);
        assertLogContaining(log);
    }

    
    protected String getLog() {
        return logBuffer.toString();
    }

    
    protected void expectDebuglog(String target, String log) {
        executeTarget(target);
        String realLog = getFullLog();
        assertEquals(log, realLog);
    }

    
    protected String getFullLog() {
        return fullLogBuffer.toString();
    }

    

    protected void expectOutput(String target, String output) {
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput.trim());
    }

    

    protected void expectOutputAndError(String target, String output, String error) {
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
        String realError = getError();
        assertEquals(error, realError);
    }

    protected String getOutput() {
        return cleanBuffer(outBuffer);
    }

    protected String getError() {
        return cleanBuffer(errBuffer);
    }

    protected BuildException getBuildException() {
        return buildException;
    }

    private String cleanBuffer(StringBuffer buffer) {
        StringBuffer cleanedBuffer = new StringBuffer();
        boolean cr = false;
        for (int i = 0; i < buffer.length(); i++) {
            char ch = buffer.charAt(i);
            if (ch == '\r') {
                cr = true;
                continue;
            }

            if (!cr) {
                cleanedBuffer.append(ch);
            } else {
                cleanedBuffer.append(ch);
            }
        }
        return cleanedBuffer.toString();
    }

    
    protected void configureProject(String filename) throws BuildException {
        configureProject(filename, Project.MSG_DEBUG);
    }

    
    protected void configureProject(String filename, int logLevel)
        throws BuildException {
        logBuffer = new StringBuffer();
        fullLogBuffer = new StringBuffer();
        project = new Project();
        project.init();
        project.setUserProperty( ""ant.file"" , new File(filename).getAbsolutePath() );
        project.addBuildListener(new AntTestListener(logLevel));
        ProjectHelper.configureProject(project, new File(filename));
    }

    
    protected void executeTarget(String targetName) {
        PrintStream sysOut = System.out;
        PrintStream sysErr = System.err;
        try {
            sysOut.flush();
            sysErr.flush();
            outBuffer = new StringBuffer();
            PrintStream out = new PrintStream(new AntOutputStream(outBuffer));
            System.setOut(out);
            errBuffer = new StringBuffer();
            PrintStream err = new PrintStream(new AntOutputStream(errBuffer));
            System.setErr(err);
            logBuffer = new StringBuffer();
            fullLogBuffer = new StringBuffer();
            buildException = null;
            project.executeTarget(targetName);
        } finally {
            System.setOut(sysOut);
            System.setErr(sysErr);
        }

    }

    
    protected Project getProject() {
        return project;
    }

    
    protected File getProjectDir() {
        return project.getBaseDir();
    }

    
    protected void expectSpecificBuildException(String target, String cause, String msg) {
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != msg) && (!ex.getMessage().equals(msg))) {
                fail(""Should throw BuildException because '"" + cause
                        + ""' with message '"" + msg
                        + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }

    
    protected void expectBuildExceptionContaining(String target, String cause, String contains) {
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {
                fail(""Should throw BuildException because '"" + cause + ""' with message containing '"" + contains + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }


    

    protected void expectPropertySet(String target, String property, String value) {
        executeTarget(target);
        assertPropertyEquals(property, value);
    }

    
    protected void assertPropertyEquals(String property, String value) {
        String result = project.getProperty(property);
        assertEquals(""property "" + property,value,result);
    }

    
    protected void assertPropertySet(String property) {
        assertPropertyEquals(property, ""true"");
    }

    
    protected void assertPropertyUnset(String property) {
        assertPropertyEquals(property, null);
    }


    
    protected void expectPropertySet(String target, String property) {
        expectPropertySet(target, property, ""true"");
    }


    
    protected void expectPropertyUnset(String target, String property) {
        expectPropertySet(target, property, null);
    }

    
    protected URL getResource(String resource){
        URL url = getClass().getResource(resource);
        assertNotNull(""Could not find resource :"" + resource, url);
        return url;
    }

    
    private static class AntOutputStream extends java.io.OutputStream {
        private StringBuffer buffer;
        
        public AntOutputStream( StringBuffer buffer ) {
            this.buffer = buffer;
        }
        
        public void write(int b) { 
            buffer.append((char)b);
        }
    }

    
    private class AntTestListener implements BuildListener {
        private int logLevel;

        
        public AntTestListener(int logLevel) {
            this.logLevel = logLevel;
        }

        
        public void buildStarted(BuildEvent event) {
        }

        
        public void buildFinished(BuildEvent event) {
        }

        
        public void targetStarted(BuildEvent event) {
            
        }

        
        public void targetFinished(BuildEvent event) {
            
        }

        
        public void taskStarted(BuildEvent event) {
            
        }

        
        public void taskFinished(BuildEvent event) {
            
        }

        
        public void messageLogged(BuildEvent event) {
            if (event.getPriority() > logLevel) {
                
                return;
            }

            if (event.getPriority() == Project.MSG_INFO ||
                event.getPriority() == Project.MSG_WARN ||
                event.getPriority() == Project.MSG_ERR) {
                logBuffer.append(event.getMessage());
            }
            fullLogBuffer.append(event.getMessage());

        }
    }


}
"
L46134,Class,BuildFileTest$AntTestListener,org.apache.tools.ant.BuildFileTest$AntTestListener,L3661,L103,src/testcases/org/apache/tools/ant/BuildFileTest.java,430,5,514,6,0.0,0,0,0,0.0,0.0,0,0,7,1,1,12,4,1,1,2,10,1.0,0.628205,49,44,9,0,0.628205,49,1,1,0,0,1,29,85,1,0,1,0,8,0,8,0,8,6,0,8,0,29,85,1,0,1,0,8,0,8,0,8,6,0,8,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.TestCase;
import org.apache.tools.ant.Project;
import java.io.File;
import java.io.PrintStream;
import java.net.URL;


public abstract class BuildFileTest extends TestCase {

    protected Project project;

    private StringBuffer logBuffer;
    private StringBuffer fullLogBuffer;
    private StringBuffer outBuffer;
    private StringBuffer errBuffer;
    private BuildException buildException;

    
    public BuildFileTest(String name) {
        super(name);
    }

    
    protected void expectBuildException(String target, String cause) {
        expectSpecificBuildException(target, cause, null);
    }

    
    protected void expectLog(String target, String log) {
        executeTarget(target);
        String realLog = getLog();
        assertEquals(log, realLog);
    }
    
    

    protected void assertLogContaining(String substring) {
        String realLog = getLog();
        assertTrue(""expecting log to contain \"""" + substring + ""\"" log was \""""
                   + realLog + ""\"""",
                   realLog.indexOf(substring) >= 0);
    }
    
    
    protected void expectLogContaining(String target, String log) {
        executeTarget(target);
        assertLogContaining(log);
    }

    
    protected String getLog() {
        return logBuffer.toString();
    }

    
    protected void expectDebuglog(String target, String log) {
        executeTarget(target);
        String realLog = getFullLog();
        assertEquals(log, realLog);
    }

    
    protected String getFullLog() {
        return fullLogBuffer.toString();
    }

    

    protected void expectOutput(String target, String output) {
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput.trim());
    }

    

    protected void expectOutputAndError(String target, String output, String error) {
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
        String realError = getError();
        assertEquals(error, realError);
    }

    protected String getOutput() {
        return cleanBuffer(outBuffer);
    }

    protected String getError() {
        return cleanBuffer(errBuffer);
    }

    protected BuildException getBuildException() {
        return buildException;
    }

    private String cleanBuffer(StringBuffer buffer) {
        StringBuffer cleanedBuffer = new StringBuffer();
        boolean cr = false;
        for (int i = 0; i < buffer.length(); i++) {
            char ch = buffer.charAt(i);
            if (ch == '\r') {
                cr = true;
                continue;
            }

            if (!cr) {
                cleanedBuffer.append(ch);
            } else {
                cleanedBuffer.append(ch);
            }
        }
        return cleanedBuffer.toString();
    }

    
    protected void configureProject(String filename) throws BuildException {
        configureProject(filename, Project.MSG_DEBUG);
    }

    
    protected void configureProject(String filename, int logLevel)
        throws BuildException {
        logBuffer = new StringBuffer();
        fullLogBuffer = new StringBuffer();
        project = new Project();
        project.init();
        project.setUserProperty( ""ant.file"" , new File(filename).getAbsolutePath() );
        project.addBuildListener(new AntTestListener(logLevel));
        ProjectHelper.configureProject(project, new File(filename));
    }

    
    protected void executeTarget(String targetName) {
        PrintStream sysOut = System.out;
        PrintStream sysErr = System.err;
        try {
            sysOut.flush();
            sysErr.flush();
            outBuffer = new StringBuffer();
            PrintStream out = new PrintStream(new AntOutputStream(outBuffer));
            System.setOut(out);
            errBuffer = new StringBuffer();
            PrintStream err = new PrintStream(new AntOutputStream(errBuffer));
            System.setErr(err);
            logBuffer = new StringBuffer();
            fullLogBuffer = new StringBuffer();
            buildException = null;
            project.executeTarget(targetName);
        } finally {
            System.setOut(sysOut);
            System.setErr(sysErr);
        }

    }

    
    protected Project getProject() {
        return project;
    }

    
    protected File getProjectDir() {
        return project.getBaseDir();
    }

    
    protected void expectSpecificBuildException(String target, String cause, String msg) {
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != msg) && (!ex.getMessage().equals(msg))) {
                fail(""Should throw BuildException because '"" + cause
                        + ""' with message '"" + msg
                        + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }

    
    protected void expectBuildExceptionContaining(String target, String cause, String contains) {
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {
                fail(""Should throw BuildException because '"" + cause + ""' with message containing '"" + contains + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }


    

    protected void expectPropertySet(String target, String property, String value) {
        executeTarget(target);
        assertPropertyEquals(property, value);
    }

    
    protected void assertPropertyEquals(String property, String value) {
        String result = project.getProperty(property);
        assertEquals(""property "" + property,value,result);
    }

    
    protected void assertPropertySet(String property) {
        assertPropertyEquals(property, ""true"");
    }

    
    protected void assertPropertyUnset(String property) {
        assertPropertyEquals(property, null);
    }


    
    protected void expectPropertySet(String target, String property) {
        expectPropertySet(target, property, ""true"");
    }


    
    protected void expectPropertyUnset(String target, String property) {
        expectPropertySet(target, property, null);
    }

    
    protected URL getResource(String resource){
        URL url = getClass().getResource(resource);
        assertNotNull(""Could not find resource :"" + resource, url);
        return url;
    }

    
    private static class AntOutputStream extends java.io.OutputStream {
        private StringBuffer buffer;
        
        public AntOutputStream( StringBuffer buffer ) {
            this.buffer = buffer;
        }
        
        public void write(int b) { 
            buffer.append((char)b);
        }
    }

    
    private class AntTestListener implements BuildListener {
        private int logLevel;

        
        public AntTestListener(int logLevel) {
            this.logLevel = logLevel;
        }

        
        public void buildStarted(BuildEvent event) {
        }

        
        public void buildFinished(BuildEvent event) {
        }

        
        public void targetStarted(BuildEvent event) {
            
        }

        
        public void targetFinished(BuildEvent event) {
            
        }

        
        public void taskStarted(BuildEvent event) {
            
        }

        
        public void taskFinished(BuildEvent event) {
            
        }

        
        public void messageLogged(BuildEvent event) {
            if (event.getPriority() > logLevel) {
                
                return;
            }

            if (event.getPriority() == Project.MSG_INFO ||
                event.getPriority() == Project.MSG_WARN ||
                event.getPriority() == Project.MSG_ERR) {
                logBuffer.append(event.getMessage());
            }
            fullLogBuffer.append(event.getMessage());

        }
    }


}
"
L46210,Class,CaseTest,org.apache.tools.ant.CaseTest,L443,L103,src/testcases/org/apache/tools/ant/CaseTest.java,64,1,91,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,4,1,0,0,4,8,0.6,0.448276,13,13,3,2,0.448276,13,1,1,0,0,1,16,28,6,8,0,0,4,0,4,1,32,4,0,5,1,16,28,6,8,0,0,4,0,4,1,32,4,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.BuildFileTest;


public class CaseTest extends BuildFileTest {

    public CaseTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/core/case.xml"");
    }

    
    public void testCaseSensitivity() {
        executeTarget(""case-sensitivity"");
    }

    
    public void testTaskCase() {
        expectBuildExceptionContaining(""taskcase"",
            ""Task names are case sensitive"",
            ""Could not create task or type of type: ecHO"");
    }
}

"
L46219,Class,DirectoryScannerTest,org.apache.tools.ant.DirectoryScannerTest,L443,L103,src/testcases/org/apache/tools/ant/DirectoryScannerTest.java,73,1,468,2,0.247619,7,16,10,0.222222,0.253012,88,84,2,5,4,41,5,0,0,16,41,0.16,0.070028,25,16,4,21,0.070028,25,1,1,0,0,1,332,396,7,8,1,0,25,0,24,1,53,207,0,25,1,332,396,7,8,1,0,25,0,24,1,53,207,0,25,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.taskdefs.condition.Os;
import org.apache.tools.ant.types.Resource;
import org.apache.tools.ant.util.JavaEnvUtils;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;
import java.io.File;
import java.io.IOException;
import java.util.TreeSet;
import java.util.Iterator;


public class DirectoryScannerTest extends BuildFileTest {

    public DirectoryScannerTest(String name) {super(name);}

    
    private boolean supportsSymlinks = Os.isFamily(""unix"")
        && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1);

    public void setUp() {
        configureProject(""src/etc/testcases/core/directoryscanner.xml"");
        getProject().executeTarget(""setup"");
    }

    public void tearDown() {
        getProject().executeTarget(""cleanup"");
    }

    public void test1() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha""});
        ds.scan();
        compareFiles(ds, new String[] {} ,new String[] {""alpha""});
    }

    public void test2() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/""});
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/beta.xml"", 
                                       ""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
    }

    public void test3() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/beta.xml"", 
                                       ""alpha/beta/gamma/gamma.xml""},
                     new String[] {"""", ""alpha"", ""alpha/beta"", 
                                   ""alpha/beta/gamma""});
    }

    public void testFullPathMatchesCaseSensitive() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/GAMMA.XML""});
        ds.scan();
        compareFiles(ds, new String[] {}, new String[] {});
    }

    public void testFullPathMatchesCaseInsensitive() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setCaseSensitive(false);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/GAMMA.XML""});
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
            new String[] {});
    }

    public void test2ButCaseInsensitive() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""ALPHA/""});
        ds.setCaseSensitive(false);
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                       ""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
    }

    public void testAllowSymlinks() {
        if (!supportsSymlinks) {
            return;
        }
        
        getProject().executeTarget(""symlink-setup"");
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha/beta/gamma""});
    }

    public void testProhibitSymlinks() {
        if (!supportsSymlinks) {
            return;
        }
        
        getProject().executeTarget(""symlink-setup"");
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(false);
        ds.scan();
        compareFiles(ds, new String[] {}, new String[] {});
    }

    
    public void testOrderOfIncludePatternsIrrelevant() {
        String [] expectedFiles = {""alpha/beta/beta.xml"", 
                                   ""alpha/beta/gamma/gamma.xml""};
        String [] expectedDirectories = {""alpha/beta"", ""alpha/beta/gamma"" };
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/be?a

    public void testSetFollowLinks() {
        if (supportsSymlinks) {
            try {
                
                String[] command = new String[] {
                    ""ln"", ""-s"", ""ant"", ""src/main/org/apache/tools/ThisIsALink""
                };
                try {
                    Runtime.getRuntime().exec(command);
                    
                    
                    
                    Thread.sleep(1000);
                } catch (IOException ioe) {
                    fail(""IOException making link ""+ioe);
                } catch (InterruptedException ie) {
                }

                File dir = new File(""src/main/org/apache/tools"");
                DirectoryScanner ds = new DirectoryScanner();

                
                
                ds.setFollowSymlinks(true);

                ds.setBasedir(dir);
                ds.setExcludes(new String[] {""ant*.xml""
        });
        ds.setExcludes(new String[] {
            ""alpha/beta/b*xml""
        });
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {});
    }
    public void testExcludeHasPrecedence() {
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {
            ""alpha
    public void testChildrenOfExcludedDirectory() {
        getProject().executeTarget(""children-of-excluded-dir-setup"");
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setExcludes(new String[] {""alpha/**""});
        ds.setFollowSymlinks(false);
        ds.scan();
        compareFiles(ds, new String[] {""delta/delta.xml""},
                    new String[] {"""", ""delta""});

        ds = new DirectoryScanner();
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setExcludes(new String[] {""alpha""});
        ds.setFollowSymlinks(false);
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                       ""alpha/beta/gamma/gamma.xml"",
                                        ""delta/delta.xml""},
                     new String[] {"""", ""alpha/beta"", ""alpha/beta/gamma"", ""delta""});

    }

    private void compareFiles(DirectoryScanner ds, String[] expectedFiles, 
                              String[] expectedDirectories) {
        String includedFiles[] = ds.getIncludedFiles();
        String includedDirectories[] = ds.getIncludedDirectories();
        assertEquals(""file present: "", expectedFiles.length,  
                     includedFiles.length);
        assertEquals(""directories present: "", expectedDirectories.length,  
                     includedDirectories.length);

        TreeSet files = new TreeSet();
        for (int counter=0; counter < includedFiles.length; counter++) {
            files.add(includedFiles[counter].replace(File.separatorChar, '/'));
        }
        TreeSet directories = new TreeSet();
        for (int counter=0; counter < includedDirectories.length; counter++) {
            directories.add(includedDirectories[counter]
                            .replace(File.separatorChar, '/'));
        }

        String currentfile;
        Iterator i = files.iterator();
        int counter = 0;
        while (i.hasNext()) {
            currentfile = (String) i.next();
            assertEquals(expectedFiles[counter], currentfile);
            counter++;
        }
        String currentdirectory;
        Iterator dirit = directories.iterator();
        counter = 0;
        while (dirit.hasNext()) {
            currentdirectory = (String) dirit.next();
            assertEquals(expectedDirectories[counter], currentdirectory);
            counter++;
        }
    }

}
"
L46266,Class,DummyTaskAbstract,org.apache.tools.ant.DummyTaskAbstract,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskAbstract.java,59,1,68,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,1,1,0,1,4,0.0,0.0,0,0,0,4,0.0,0,2,2,0,0,1,7,10,9,9,0,0,3,0,3,0,38,0,0,28,7,7,10,9,9,0,0,3,0,3,0,38,0,0,28,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public abstract class DummyTaskAbstract extends Task {

    public DummyTaskAbstract() {
    }

    public void execute() {
    }
    
    public abstract void abstractDummy();
}
"
L46270,Interface,DummyTaskInterface,org.apache.tools.ant.DummyTaskInterface,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskInterface.java,57,1,61,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,3,5,0,0,0,0,1,0,1,0,1,0,0,1,0,3,5,0,0,0,0,1,0,1,0,1,0,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public interface DummyTaskInterface {

    void execute();

}
"
L46272,Class,DummyTaskOk,org.apache.tools.ant.DummyTaskOk,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskOk.java,59,1,67,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,6,9,9,9,0,0,2,0,2,0,37,0,0,27,7,6,9,9,9,0,0,2,0,2,0,37,0,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public class DummyTaskOk extends Task {

    public DummyTaskOk() {
    }

    public void execute() {
    }
    
}
"
L46275,Class,DummyTaskOkNonTask,org.apache.tools.ant.DummyTaskOkNonTask,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskOkNonTask.java,57,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskOkNonTask {

    public DummyTaskOkNonTask() {
    }

    public void execute() {
    }
    
}
"
L46481,Class,DummyTaskPackage,org.apache.tools.ant.DummyTaskPackage,L443,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,255,1,258,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,4,4,9,9,0,0,2,0,2,0,37,0,0,27,7,4,4,9,9,0,0,2,0,2,0,37,0,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L46278,Class,DummyTaskWithNonPublicExecute,org.apache.tools.ant.DummyTaskWithNonPublicExecute,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskWithNonPublicExecute.java,57,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,6,9,0,0,0,0,2,0,1,0,2,0,0,1,0,6,9,0,0,0,0,2,0,1,0,2,0,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskWithNonPublicExecute {

    public DummyTaskWithNonPublicExecute() {
    }

    void execute() {
    }
    
}
"
L46281,Class,DummyTaskWithNonVoidExecute,org.apache.tools.ant.DummyTaskWithNonVoidExecute,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskWithNonVoidExecute.java,57,1,66,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,7,10,0,0,0,0,2,0,2,0,2,1,0,2,0,7,10,0,0,0,0,2,0,2,0,2,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskWithNonVoidExecute {

    public DummyTaskWithNonVoidExecute() {
    }

    public int execute() {
        return 0;
    }
    
}
"
L46284,Class,DummyTaskWithoutDefaultConstructor,org.apache.tools.ant.DummyTaskWithoutDefaultConstructor,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskWithoutDefaultConstructor.java,59,1,67,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,6,9,9,9,0,0,2,0,2,0,37,0,0,27,7,6,9,9,9,0,0,2,0,2,0,37,0,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public class DummyTaskWithoutDefaultConstructor extends Task {

    public DummyTaskWithoutDefaultConstructor(int dummy) {
    }

    public void execute() {
    }
    
}
"
L46288,Class,DummyTaskWithoutExecute,org.apache.tools.ant.DummyTaskWithoutExecute,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskWithoutExecute.java,57,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskWithoutExecute {

    public DummyTaskWithoutExecute() {
    }

    public void execute(String dummy) {
    }
    
}
"
L46292,Class,DummyTaskWithoutPublicConstructor,org.apache.tools.ant.DummyTaskWithoutPublicConstructor,L443,L103,src/testcases/org/apache/tools/ant/DummyTaskWithoutPublicConstructor.java,59,1,67,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,2,0.0,0,2,2,0,0,1,6,9,9,9,0,0,2,0,1,0,37,0,0,26,7,6,9,9,9,0,0,2,0,1,0,37,0,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public class DummyTaskWithoutPublicConstructor extends Task {

    DummyTaskWithoutPublicConstructor() {
    }

    public void execute() {
    }
    
}
"
L46295,Class,ImmutableTest,org.apache.tools.ant.ImmutableTest,L443,L103,src/testcases/org/apache/tools/ant/ImmutableTest.java,62,1,114,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,9,2,0,0,4,13,0.8,0.208333,10,10,8,2,0.208333,10,1,1,0,0,1,38,53,6,8,0,0,9,0,9,1,37,18,0,10,1,38,53,6,8,0,0,9,0,9,1,37,18,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.BuildFileTest;


public class ImmutableTest extends BuildFileTest { 

    public ImmutableTest(String name) { 
        super(name);
    }
    
    public void setUp() { 
        configureProject(""src/etc/testcases/core/immutable.xml"");
    }
    
    
    public void test1() { 
        executeTarget(""test1"");
        assertEquals(""override"", project.getProperty(""test""));
    }
    
    
    public void test2() {
        executeTarget(""test2"");
        assertNotNull(project.getProperty(""DSTAMP""));
        assertNotNull(project.getProperty(""start.DSTAMP""));
    }

    
    public void test3() {
        executeTarget(""test3"");
        assertEquals(""original"", project.getProperty(""DSTAMP""));
    }

    
    public void test4() {
        executeTarget(""test4"");
        assertEquals(""original"", project.getProperty(""test""));
    }
    
    public void test5() {
        executeTarget(""test5"");
        assertEquals(""original"", project.getProperty(""test""));
    }

    
    public void test6() {
        executeTarget(""test6"");
        assertEquals(""original"", project.getProperty(""test1""));
        assertEquals(""original"", project.getProperty(""test2""));
    }

    
    public void test7() {
        executeTarget(""test7"");
        assertEquals(""original"", project.getProperty(""test""));
    }
}

"
L46314,Class,IncludeTest,org.apache.tools.ant.IncludeTest,L443,L103,src/testcases/org/apache/tools/ant/IncludeTest.java,64,1,163,2,0.664516,2,8,4,0.49,0.569767,49,49,1,1,1,17,3,0,0,6,19,0.0714286,0.0549451,5,5,1,13,0.0549451,5,1,1,0,0,1,86,100,6,8,0,0,13,0,13,0,41,37,0,14,0,86,100,6,8,0,0,13,0,13,0,41,37,0,14,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.BuildFileTest;


public class IncludeTest extends BuildFileTest { 
    
    public IncludeTest(String name) { 
        super(name);
    }    
    
    public void test1() { 
        configureProject(""src/etc/testcases/core/include/basic/include.xml"");
        expectLog(""test1"", ""from included entity"");
    }
    
    public void test2() { 
        configureProject(""src/etc/testcases/core/include/frag#ment/include.xml"");
        expectLog(""test1"", ""from included entity"");
    }
    
    public void test3() { 
        configureProject(""src/etc/testcases/core/include/frag#ment/simple.xml"");
        expectLog(""test1"", ""from simple buildfile"");
    }
    
    public void test4() { 
        configureProject(""src/etc/testcases/core/include/basic/relative.xml"");
        expectLog(""test1"", ""from included entity"");
    }
    
    public void test5() { 
        configureProject(""src/etc/testcases/core/include/frag#ment/relative.xml"");
        expectLog(""test1"", ""from included entity"");
    }

    public void testParseErrorInIncluding() {
        try {
            configureProject(""src/etc/testcases/core/include/including_file_parse_error/build.xml"");
            fail(""should have caused a parser exception"");
        } catch (BuildException e) {
            assertTrue(e.getLocation().toString() 
                       + "" should refer to build.xml"",
                       e.getLocation().toString().indexOf(""build.xml:"") > -1);
        }
    }

    public void testTaskErrorInIncluding() {
        configureProject(""src/etc/testcases/core/include/including_file_task_error/build.xml"");
        try {
            executeTarget(""test"");
            fail(""should have cause a build failure"");
        } catch (BuildException e) {
            assertTrue(e.getMessage() 
                       + "" should start with \'Warning: Could not find"",
                         e.getMessage().startsWith(""Warning: Could not find file ""));
            assertTrue(e.getLocation().toString() 
                       + "" should end with build.xml:14: "",
                       e.getLocation().toString().endsWith(""build.xml:14: ""));
        }
    }

    public void testParseErrorInIncluded() {
        try {
            configureProject(""src/etc/testcases/core/include/included_file_parse_error/build.xml"");
            fail(""should have caused a parser exception"");
        } catch (BuildException e) {
            assertTrue(e.getLocation().toString() 
                       + "" should refer to included_file.xml"",
                       e.getLocation().toString()
                       .indexOf(""included_file.xml:"") > -1);
        }
    }

    public void testTaskErrorInIncluded() {
        configureProject(""src/etc/testcases/core/include/included_file_task_error/build.xml"");
        try {
            executeTarget(""test"");
            fail(""should have cause a build failure"");
        } catch (BuildException e) {
            assertTrue(e.getMessage() 
                       + "" should start with \'Warning: Could not find"",
                         e.getMessage().startsWith(""Warning: Could not find file ""));
            assertTrue(e.getLocation().toString() 
                       + "" should end with included_file.xml:2: "",
                       e.getLocation().toString().endsWith(""included_file.xml:2: ""));
        }
    }

    public void testWithSpaceInclude() { 
        configureProject(""src/etc/testcases/core/include/with space/include.xml"");
        expectLog(""test1"", ""from included entity in 'with space'"");
    }
    
    public void testWithSpaceSimple() { 
        configureProject(""src/etc/testcases/core/include/with space/simple.xml"");
        expectLog(""test1"", ""from simple buildfile in 'with space'"");
    }
    
    public void testWithSpaceRelative() { 
        configureProject(""src/etc/testcases/core/include/with space/relative.xml"");
        expectLog(""test1"", ""from included entity in 'with space'"");
    }

}
"
L46330,Class,IntrospectionHelperTest,org.apache.tools.ant.IntrospectionHelperTest,L443,L103,src/testcases/org/apache/tools/ant/IntrospectionHelperTest.java,69,1,494,2,0.545819,16,191,53,0.471831,0.540541,201,200,19,2,1,81,4,0,0,13,54,0.0238095,0.0339426,13,5,1,41,0.0339426,13,0,0,0,0,0,370,426,2,0,2,0,41,0,41,19,41,217,0,41,19,370,426,2,0,2,0,41,0,41,19,41,217,0,41,19,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;
import java.io.File;
import java.util.*;
import org.apache.tools.ant.taskdefs.condition.Os;



public class IntrospectionHelperTest extends TestCase {

    private Project p;
    private static final String projectBasedir = File.separator;

    public IntrospectionHelperTest(String name) {
        super(name);
    }
    
    public void setUp() {
        p = new Project();
        p.setBasedir(projectBasedir);
    }

    public void testAddText() throws BuildException {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(java.lang.String.class);
        try {
            ih.addText(p, """", ""test"");
            fail(""String doesn\'t support addText"");
        } catch (BuildException be) {
        }

        ih = IntrospectionHelper.getHelper(getClass());
        ih.addText(p, this, ""test"");
        try {
            ih.addText(p, this, ""test2"");
            fail(""test2 shouldn\'t be equal to test"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
    }

    public void testSupportsCharacters() {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(java.lang.String.class);
        assertTrue(""String doesn\'t support addText"", !ih.supportsCharacters());
        ih = IntrospectionHelper.getHelper(getClass());
        assertTrue(""IntrospectionHelperTest supports addText"", 
               ih.supportsCharacters());
    }

    public void addText(String text) {
        assertEquals(""test"", text);
    }
    
    public void testElementCreators() throws BuildException {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        try {
            ih.getElementType(""one"");
            fail(""don't have element type one"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""two"");
            fail(""createTwo takes arguments"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""three"");
            fail(""createThree returns void"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""four"");
            fail(""createFour returns array"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""five"");
            fail(""createFive returns primitive type"");
        } catch (BuildException be) {
        }
        assertEquals(java.lang.String.class, ih.getElementType(""six""));
        assertEquals(""test"", ih.createElement(p, this, ""six""));

        try {
            ih.getElementType(""seven"");
            fail(""addSeven takes two arguments"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""eight"");
            fail(""addEight takes no arguments"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""nine"");
            fail(""nine return non void"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""ten"");
            fail(""addTen takes array argument"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""eleven"");
            fail(""addEleven takes primitive argument"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""twelve"");
            fail(""no primitive constructor for java.lang.Class"");
        } catch (BuildException be) {
        }
        assertEquals(java.lang.StringBuffer.class, ih.getElementType(""thirteen""));
        assertEquals(""test"", ih.createElement(p, this, ""thirteen"").toString());

        try {
            ih.createElement(p, this, ""fourteen"");
            fail(""fourteen throws NullPointerException"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof NullPointerException);
        }

        try {
            ih.createElement(p, this, ""fourteen"");
            fail(""fifteen throws NullPointerException"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof NullPointerException);
        }
    }
    
    public void testGetNestedElements() {
        Hashtable h = new Hashtable();
        h.put(""six"", java.lang.String.class);
        h.put(""thirteen"", java.lang.StringBuffer.class);
        h.put(""fourteen"", java.lang.StringBuffer.class);
        h.put(""fifteen"", java.lang.StringBuffer.class);
        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        Enumeration enum = ih.getNestedElements();
        while (enum.hasMoreElements()) {
            String name = (String) enum.nextElement();
            Class expect = (Class) h.get(name);
            assertNotNull(""Support for ""+name+"" in IntrospectioNHelperTest?"",
                          expect);
            assertEquals(""Return type of ""+name, expect, ih.getElementType(name));
            h.remove(name);
        }
        assertTrue(""Found all"", h.isEmpty());
    }

    public Object createTwo(String s) {
        return null;
    }

    public void createThree() {}

    public Object[] createFour() {
        return null;
    }

    public int createFive() {
        return 0;
    }

    public String createSix() {
        return ""test"";
    }

    public StringBuffer createFifteen() {
        throw new NullPointerException();
    }

    public void addSeven(String s, String s2) {}

    public void addEight() {}

    public String addNine(String s) {
        return null;
    }

    public void addTen(String[] s) {}

    public void addEleven(int i) {}

    public void addTwelve(Class c) {}

    public void addThirteen(StringBuffer sb) {
        sb.append(""test"");
    }
    
    public void addFourteen(StringBuffer s) {
        throw new NullPointerException();
    }

    public void testAttributeSetters() throws BuildException {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        try {
            ih.setAttribute(p, this, ""one"", ""test"");
            fail(""setOne doesn't exist"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""two"", ""test"");
            fail(""setTwo returns non void"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""three"", ""test"");
            fail(""setThree takes no args"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""four"", ""test"");
            fail(""setFour takes two args"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""five"", ""test"");
            fail(""setFive takes array arg"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""six"", ""test"");
            fail(""Project doesn't have a String constructor"");
        } catch (BuildException be) {
        }
        ih.setAttribute(p, this, ""seven"", ""2"");
        try {
            ih.setAttribute(p, this, ""seven"", ""3"");
            fail(""2 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""eight"", ""2"");
        try {
            ih.setAttribute(p, this, ""eight"", ""3"");
            fail(""2 shouldn't be equals to three - as int"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""nine"", ""2"");
        try {
            ih.setAttribute(p, this, ""nine"", ""3"");
            fail(""2 shouldn't be equals to three - as Integer"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""ten"", ""2"");
        try {
            ih.setAttribute(p, this, ""ten"", ""3"");
            fail(projectBasedir+""2 shouldn't be equals to ""+projectBasedir+""3"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""eleven"", ""2"");
        try {
            ih.setAttribute(p, this, ""eleven"", ""on"");
            fail(""on shouldn't be false"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""twelve"", ""2"");
        try {
            ih.setAttribute(p, this, ""twelve"", ""on"");
            fail(""on shouldn't be false"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""thirteen"", ""org.apache.tools.ant.Project"");
        try {
            ih.setAttribute(p, this, ""thirteen"", ""org.apache.tools.ant.ProjectHelper"");
            fail(""org.apache.tools.ant.Project shouldn't be equal to org.apache.tools.ant.ProjectHelper"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        try {
            ih.setAttribute(p, this, ""thirteen"", ""org.apache.tools.ant.Project2"");
            fail(""org.apache.tools.ant.Project2 doesn't exist"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof ClassNotFoundException);
        }
        ih.setAttribute(p, this, ""fourteen"", ""2"");
        try {
            ih.setAttribute(p, this, ""fourteen"", ""on"");
            fail(""2 shouldn't be equals to three - as StringBuffer"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""fifteen"", ""abcd"");
        try {
            ih.setAttribute(p, this, ""fifteen"", ""on"");
            fail(""o shouldn't be equal to a"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""sixteen"", ""abcd"");
        try {
            ih.setAttribute(p, this, ""sixteen"", ""on"");
            fail(""o shouldn't be equal to a"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""seventeen"", ""17"");
        try {
            ih.setAttribute(p, this, ""seventeen"", ""3"");
            fail(""17 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""eightteen"", ""18"");
        try {
            ih.setAttribute(p, this, ""eightteen"", ""3"");
            fail(""18 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""nineteen"", ""19"");
        try {
            ih.setAttribute(p, this, ""nineteen"", ""3"");
            fail(""19 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
    }

    public void testGetAttributes() {
        Hashtable h = new Hashtable();
        h.put(""seven"", java.lang.String.class);
        h.put(""eight"", java.lang.Integer.TYPE);
        h.put(""nine"", java.lang.Integer.class);
        h.put(""ten"", java.io.File.class);
        h.put(""eleven"", java.lang.Boolean.TYPE);
        h.put(""twelve"", java.lang.Boolean.class);
        h.put(""thirteen"", java.lang.Class.class);
        h.put(""fourteen"", java.lang.StringBuffer.class);
        h.put(""fifteen"", java.lang.Character.TYPE);
        h.put(""sixteen"", java.lang.Character.class);
        h.put(""seventeen"", java.lang.Byte.TYPE);
        h.put(""eightteen"", java.lang.Short.TYPE);
        h.put(""nineteen"", java.lang.Double.TYPE);

        
        h.put(""name"", java.lang.String.class);

        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        Enumeration enum = ih.getAttributes();
        while (enum.hasMoreElements()) {
            String name = (String) enum.nextElement();
            Class expect = (Class) h.get(name);
            assertNotNull(""Support for ""+name+"" in IntrospectionHelperTest?"",
                          expect);
            assertEquals(""Type of ""+name, expect, ih.getAttributeType(name));
            h.remove(name);
        }
        h.remove(""name"");
        assertTrue(""Found all"", h.isEmpty());
    }

    public int setTwo(String s) {
        return 0;
    }

    public void setThree() {}

    public void setFour(String s1, String s2) {}

    public void setFive(String[] s) {}

    public void setSix(Project p) {}

    public void setSeven(String s) {
        assertEquals(""2"", s);
    }

    public void setEight(int i) {
        assertEquals(2, i);
    }

    public void setNine(Integer i) {
        assertEquals(2, i.intValue());
    }

    public void setTen(File f) {
        if (Os.isFamily(""unix"") || Os.isFamily(""openvms"")) {
            assertEquals(projectBasedir+""2"", f.getAbsolutePath());
        } else if (Os.isFamily(""netware"")) {
            assertEquals(projectBasedir+""2"", f.getAbsolutePath().toLowerCase(Locale.US));
        } else {
            assertEquals("":""+projectBasedir+""2"", f.getAbsolutePath().toLowerCase(Locale.US).substring(1));
        }
    }

    public void setEleven(boolean b) {
        assertTrue(!b);
    }

    public void setTwelve(Boolean b) {
        assertTrue(!b.booleanValue());
    }

    public void setThirteen(Class c) {
        assertEquals(Project.class, c);
    }

    public void setFourteen(StringBuffer sb) {
        assertEquals(""2"", sb.toString());
    }

    public void setFifteen(char c) {
        assertEquals(c, 'a');
    }

    public void setSixteen(Character c) {
        assertEquals(c.charValue(), 'a');
    }

    public void setSeventeen(byte b) {
        assertEquals(17, b);
    }

    public void setEightteen(short s) {
        assertEquals(18, s);
    }

    public void setNineteen(double d) {
        assertEquals(19, d, 1e-6);
    }

}
"
L46410,Class,LoaderRefTest,org.apache.tools.ant.LoaderRefTest,L443,L103,src/testcases/org/apache/tools/ant/LoaderRefTest.java,62,1,81,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,4,1,0,0,4,8,0.4,0.210526,4,4,2,3,0.210526,4,1,1,0,0,1,15,20,6,8,0,0,4,0,4,1,32,4,0,5,1,15,20,6,8,0,0,4,0,4,1,32,4,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.BuildFileTest;


public class LoaderRefTest extends BuildFileTest {

    public LoaderRefTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/core/loaderref/loaderref.xml"");
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testBadRef() {
        expectBuildExceptionContaining(""testbadref"", ""Should fail due to ref ""
            + ""not being a class loader"", ""does not reference a class loader"");
    }
}

"
L46418,Class,MockBuildListener,org.apache.tools.ant.MockBuildListener,L443,L103,src/testcases/org/apache/tools/ant/MockBuildListener.java,61,1,99,2,0.0,0,0,0,0.0,0.0,0,0,7,1,1,11,3,1,3,5,15,0.0,0.0,0,0,0,11,0.0,0,1,1,0,0,1,31,39,2,0,2,0,10,0,10,0,10,13,0,10,0,31,39,2,0,2,0,10,0,10,0,10,13,0,10,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import java.util.Vector;

import junit.framework.Assert;

public class MockBuildListener extends Assert implements BuildListener {
  
    private final Vector buffer = new Vector();
    private final Project project;
    
    public MockBuildListener(final Project project) {
        this.project = project;
    }
    
    public void buildStarted(BuildEvent event) {}
    public void buildFinished(BuildEvent event) {}
    public void targetStarted(BuildEvent event) {}
    public void targetFinished(BuildEvent event) {}
    public void taskStarted(BuildEvent event) {}
    public void taskFinished(BuildEvent event) {}
            
    public void messageLogged(final BuildEvent actual) {
        if(actual.getPriority()==Project.MSG_DEBUG)
            return;
        assertTrue(""unexpected messageLogged: ""+actual.getMessage(), !buffer.isEmpty());
        assertEquals(""unexpected project "", project, actual.getProject());

        BuildEvent expected = (BuildEvent) buffer.elementAt(0);
        buffer.removeElementAt(0);
        assertEquals(""unexpected messageLogged "", expected.getMessage(), actual.getMessage());
        assertEquals(""unexpected priority "", expected.getPriority(), actual.getPriority());
    }
    
    public void assertEmpty() {
        assertTrue(""MockBuildListener is not empty"", buffer.isEmpty());
    }
    
    public void addBuildEvent(final String message, final int priority) {
        final BuildEvent be = new BuildEvent(project);
        be.setMessage(message, priority);
        buffer.addElement(be);
    }
    
}
"
L46443,Class,ProjectTest,org.apache.tools.ant.ProjectTest,L443,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,75,1,253,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,12,23,0,0,14,24,0.222222,0.193333,29,11,2,7,0.183544,29,0,0,0,0,0,121,171,3,0,3,0,10,0,8,1,10,69,0,8,1,129,179,12,18,3,0,14,0,12,1,84,69,0,62,15,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L46475,Class,ProjectTest$DummyTaskPrivate,org.apache.tools.ant.ProjectTest$DummyTaskPrivate,L46443,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,243,5,246,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,4,4,9,9,0,0,2,0,2,0,37,0,0,27,7,4,4,9,9,0,0,2,0,2,0,37,0,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L46478,Class,ProjectTest$DummyTaskProtected,org.apache.tools.ant.ProjectTest$DummyTaskProtected,L46443,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,248,5,251,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,4,4,9,9,0,0,2,0,2,0,37,0,0,27,7,4,4,9,9,0,0,2,0,2,0,37,0,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L46507,Class,PropertyExpansionTest,org.apache.tools.ant.PropertyExpansionTest,L443,L103,src/testcases/org/apache/tools/ant/PropertyExpansionTest.java,61,1,126,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,2,0,0,4,10,0.833333,0.333333,20,19,5,1,0.333333,20,1,1,0,0,1,40,66,6,8,0,0,6,0,5,1,34,26,0,6,1,40,66,6,8,0,0,6,0,5,1,34,26,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"


package org.apache.tools.ant;


public class PropertyExpansionTest extends BuildFileTest {


    public PropertyExpansionTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/core/immutable.xml"");
    }

    
    public void testPropertyExpansion() {
        assertExpandsTo("""","""");
        assertExpandsTo(""$"",""$"");
        assertExpandsTo(""$$-"",""$-"");
        assertExpandsTo(""$$"",""$"");
        project.setProperty(""expanded"",""EXPANDED"");
        assertExpandsTo(""a${expanded}b"",""aEXPANDEDb"");
        assertExpandsTo(""${expanded}${expanded}"",""EXPANDEDEXPANDED"");
        assertExpandsTo(""$$$"",""$$"");
        assertExpandsTo(""$$$$-"",""$$-"");
        assertExpandsTo("""","""");
        assertExpandsTo(""Class$$subclass"",""Class$subclass"");    
    }
    
    
    public void testDollarPassthru() {
        assertExpandsTo(""$-"",""$-"");    
        assertExpandsTo(""Class$subclass"",""Class$subclass"");    
        assertExpandsTo(""$$$-"",""$$-"");
        assertExpandsTo(""$$$$$"",""$$$"");
        assertExpandsTo(""${unassigned.property}"",""${unassigned.property}"");
        assertExpandsTo(""a$b"",""a$b"");
        assertExpandsTo(""$}}"",""$}}"");
    }

    
    
    public void oldtestQuirkyLegacyBehavior() {
        assertExpandsTo(""Class$subclass"",""Classsubclass"");    
        assertExpandsTo(""$$$-"",""$-"");
        assertExpandsTo(""a$b"",""ab"");
        assertExpandsTo(""$}}"",""}}"");
    }

    
    private void assertExpandsTo(String source,String expected) {
        String actual=project.replaceProperties(source);
        assertEquals(source,expected,actual);
    }


}
"
L46524,Class,TaskContainerTest,org.apache.tools.ant.TaskContainerTest,L443,L103,src/testcases/org/apache/tools/ant/TaskContainerTest.java,57,1,97,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,1,0,0,4,10,0.0,0.0,0,0,0,7,0.0,0,1,1,0,0,1,34,41,6,8,0,0,6,0,6,1,34,13,0,7,1,34,41,6,8,0,0,6,0,6,1,34,13,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class TaskContainerTest extends BuildFileTest {

    public TaskContainerTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/core/taskcontainer.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testPropertyExpansion() {
        executeTarget(""testPropertyExpansion"");
        assertTrue(""attribute worked"",
                   getLog().indexOf(""As attribute: it worked"") > -1);
        assertTrue(""nested text worked"",
                   getLog().indexOf(""As nested text: it worked"") > -1);
    }

    public void testTaskdef() {
        executeTarget(""testTaskdef"");
        assertTrue(""attribute worked"",
                   getLog().indexOf(""As attribute: it worked"") > -1);
        assertTrue(""nested text worked"",
                   getLog().indexOf(""As nested text: it worked"") > -1);
        assertTrue(""nested text worked"",
                   getLog().indexOf(""As nested task: it worked"") > -1);
    }

    public void testCaseInsensitive() {
        executeTarget(""testCaseInsensitive"");
        assertTrue(""works outside of container"",
                   getLog().indexOf(""hello "") > -1);
        assertTrue(""works inside of container"",
                   getLog().indexOf(""world"") > -1);
    }

}
"
L46532,Class,TopLevelTaskTest,org.apache.tools.ant.TopLevelTaskTest,L443,L103,src/testcases/org/apache/tools/ant/TopLevelTaskTest.java,66,1,86,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,3,7,0.2,0.32,8,8,1,4,0.32,8,1,1,0,0,1,17,21,6,8,0,0,4,0,4,0,32,7,0,5,0,17,21,6,8,0,0,4,0,4,0,32,7,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;





public class TopLevelTaskTest extends BuildFileTest {

    public TopLevelTaskTest(String name) {
        super(name);
    }

    public void testNoTarget() {
        configureProject(""src/etc/testcases/core/topleveltasks/notarget.xml"");
        expectLog("""", ""Called"");
    }

    public void testCalledFromTopLevelAnt() {
        configureProject(""src/etc/testcases/core/topleveltasks/toplevelant.xml"");
        expectLog("""", ""Called"");
    }

    public void testCalledFromTargetLevelAnt() {
        configureProject(""src/etc/testcases/core/topleveltasks/targetlevelant.xml"");
        expectLog(""foo"", ""Called"");
    }
}
"
L3659,Class,ConcatFilterTest,org.apache.tools.ant.filters.ConcatFilterTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/ConcatFilterTest.java,67,1,190,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,14,3,0,0,8,21,0.0833333,0.179245,19,19,1,11,0.179245,19,1,1,0,0,1,87,124,12,8,6,0,13,0,11,1,41,27,0,12,1,87,124,12,8,6,0,13,0,11,1,41,27,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class ConcatFilterTest extends BuildFileTest {

    private static FileUtils fu = FileUtils.newFileUtils();
    private static final String lSep = System.getProperty(""line.separator"");

    private static final String FILE_PREPEND_WITH =
          ""this-should-be-the-first-line"" + lSep
        + ""Line  1"" + lSep
        + ""Line  2"" + lSep
        + ""Line  3"" + lSep
        + ""Line  4"" + lSep
    ;

    private static final String FILE_PREPEND =
          ""Line  1"" + lSep
        + ""Line  2"" + lSep
        + ""Line  3"" + lSep
        + ""Line  4"" + lSep
        + ""Line  5"" + lSep
    ;

    private static final String FILE_APPEND_WITH =
          ""Line 57"" + lSep
        + ""Line 58"" + lSep
        + ""Line 59"" + lSep
        + ""Line 60"" + lSep
        + ""this-should-be-the-last-line"" + lSep
    ;

    private static final String FILE_APPEND =
          ""Line 56"" + lSep
        + ""Line 57"" + lSep
        + ""Line 58"" + lSep
        + ""Line 59"" + lSep
        + ""Line 60"" + lSep
    ;


    public ConcatFilterTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/concat.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testFilterReaderNoArgs() throws IOException {
        executeTarget(""testFilterReaderNoArgs"");
        File expected = getProject().resolveFile(""input/concatfilter.test"");
        File result = getProject().resolveFile(""result/concat.FilterReaderNoArgs.test"");
        assertTrue(""testFilterReaderNoArgs: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testFilterReaderBefore() {
        doTest(""testFilterReaderPrepend"", FILE_PREPEND_WITH, FILE_APPEND);
    }

    public void testFilterReaderAfter() {
        doTest(""testFilterReaderAppend"", FILE_PREPEND, FILE_APPEND_WITH);
    }

    public void testFilterReaderBeforeAfter() {
        doTest(""testFilterReaderPrependAppend"", FILE_PREPEND_WITH, FILE_APPEND_WITH);
    }

    public void testConcatFilter() {
        doTest(""testConcatFilter"", FILE_PREPEND, FILE_APPEND);
    }

    public void testConcatFilterBefore() {
        doTest(""testConcatFilterPrepend"", FILE_PREPEND_WITH, FILE_APPEND);
    }

    public void testConcatFilterAfter() {
        doTest(""testConcatFilterAppend"", FILE_PREPEND, FILE_APPEND_WITH);
    }

    public void testConcatFilterBeforeAfter() {
        doTest(""testConcatFilterPrependAppend"", FILE_PREPEND_WITH, FILE_APPEND_WITH);
    }


    
    protected void doTest(String target, String expectedStart, String expectedEnd) {
        executeTarget(target);
        String resultContent = read(""result/concat."" + target.substring(4) + "".test"");
        assertTrue(""First 5 lines differs."", resultContent.startsWith(expectedStart));
        assertTrue(""Last 5 lines differs."", resultContent.endsWith(expectedEnd));
    }


    
    protected String read(String filename) {
        String content = null;
        try {
            File file = getProject().resolveFile(filename);
            java.io.FileReader rdr = new java.io.FileReader(file);
            content = fu.readFully(rdr);
            rdr.close();
            rdr = null;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return content;
    }

}
"
L3710,Class,DynamicFilterTest,org.apache.tools.ant.filters.DynamicFilterTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/DynamicFilterTest.java,69,1,167,2,0.178261,1,2,1,0.131313,0.151899,13,12,3,2,2,11,3,0,0,7,17,0.2,0.0952381,6,6,1,4,0.0697674,6,1,1,0,0,1,57,73,6,10,0,2,10,0,4,1,38,19,0,5,1,80,99,11,12,2,2,14,0,8,3,52,26,0,14,5,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.Reader;
import java.io.FileReader;
import java.io.IOException;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class DynamicFilterTest extends BuildFileTest {

    public DynamicFilterTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/dynamicfilter.xml"");
        executeTarget(""init"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    public void testCustomFilter() throws IOException {
        expectFileContains(""dynamicfilter"", ""result/dynamicfilter"",
                           ""hellO wOrld"");
    }

    
    
    


    private void assertStringContains(String string, String contains) {
        assertTrue(""["" + string + ""] does not contain ["" + contains +""]"",
                   string.indexOf(contains) > -1);
    }

    private void assertStringNotContains(String string, String contains) {
        assertTrue(""["" + string + ""] does contain ["" + contains +""]"",
                   string.indexOf(contains) == -1);
    }

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }

    }

    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }

    private void expectFileContains(String name, String contains)
        throws IOException
    {
        String content = getFileString(name);
        assertTrue(
            ""expecting file "" + name + "" to contain "" + contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

    private void expectFileContains(
        String target, String name, String contains)
        throws IOException
    {
        executeTarget(target);
        expectFileContains(name, contains);
    }

    public static class CustomFilter implements ChainableReader {
        char replace = 'x';
        char with    = 'y';

        public void setReplace(char replace) {
            this.replace = replace;
        }

        public void setWith(char with) {
            this.with = with;
        }

        public Reader chain(final Reader rdr) {
            return new BaseFilterReader(rdr) {
                public int read()
                    throws IOException
                {
                    int c = in.read();
                    if (c == replace)
                        return with;
                    else
                        return c;
                }
            };
        }
    }
}
"
L3741,Class,DynamicFilterTest$CustomFilter,org.apache.tools.ant.filters.DynamicFilterTest$CustomFilter,L3710,L103,src/testcases/org/apache/tools/ant/filters/DynamicFilterTest.java,141,5,166,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,1,0,0,3,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,14,17,2,0,2,0,3,0,3,2,3,3,0,3,2,23,26,5,2,2,0,4,0,4,2,14,7,0,9,4,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.Reader;
import java.io.FileReader;
import java.io.IOException;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class DynamicFilterTest extends BuildFileTest {

    public DynamicFilterTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/dynamicfilter.xml"");
        executeTarget(""init"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    public void testCustomFilter() throws IOException {
        expectFileContains(""dynamicfilter"", ""result/dynamicfilter"",
                           ""hellO wOrld"");
    }

    
    
    


    private void assertStringContains(String string, String contains) {
        assertTrue(""["" + string + ""] does not contain ["" + contains +""]"",
                   string.indexOf(contains) > -1);
    }

    private void assertStringNotContains(String string, String contains) {
        assertTrue(""["" + string + ""] does contain ["" + contains +""]"",
                   string.indexOf(contains) == -1);
    }

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }

    }

    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }

    private void expectFileContains(String name, String contains)
        throws IOException
    {
        String content = getFileString(name);
        assertTrue(
            ""expecting file "" + name + "" to contain "" + contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

    private void expectFileContains(
        String target, String name, String contains)
        throws IOException
    {
        executeTarget(target);
        expectFileContains(name, contains);
    }

    public static class CustomFilter implements ChainableReader {
        char replace = 'x';
        char with    = 'y';

        public void setReplace(char replace) {
            this.replace = replace;
        }

        public void setWith(char with) {
            this.with = with;
        }

        public Reader chain(final Reader rdr) {
            return new BaseFilterReader(rdr) {
                public int read()
                    throws IOException
                {
                    int c = in.read();
                    if (c == replace)
                        return with;
                    else
                        return c;
                }
            };
        }
    }
}
"
L3755,Class,DynamicFilterTest$CustomFilter$1,org.apache.tools.ant.filters.DynamicFilterTest$CustomFilter$1,L3751,L103,src/testcases/org/apache/tools/ant/filters/DynamicFilterTest.java,154,46,164,14,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,2,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,11,11,3,2,0,0,1,0,1,0,11,4,0,6,2,11,11,3,2,0,0,1,0,1,0,11,4,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.Reader;
import java.io.FileReader;
import java.io.IOException;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class DynamicFilterTest extends BuildFileTest {

    public DynamicFilterTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/dynamicfilter.xml"");
        executeTarget(""init"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    public void testCustomFilter() throws IOException {
        expectFileContains(""dynamicfilter"", ""result/dynamicfilter"",
                           ""hellO wOrld"");
    }

    
    
    


    private void assertStringContains(String string, String contains) {
        assertTrue(""["" + string + ""] does not contain ["" + contains +""]"",
                   string.indexOf(contains) > -1);
    }

    private void assertStringNotContains(String string, String contains) {
        assertTrue(""["" + string + ""] does contain ["" + contains +""]"",
                   string.indexOf(contains) == -1);
    }

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }

    }

    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }

    private void expectFileContains(String name, String contains)
        throws IOException
    {
        String content = getFileString(name);
        assertTrue(
            ""expecting file "" + name + "" to contain "" + contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

    private void expectFileContains(
        String target, String name, String contains)
        throws IOException
    {
        executeTarget(target);
        expectFileContains(name, contains);
    }

    public static class CustomFilter implements ChainableReader {
        char replace = 'x';
        char with    = 'y';

        public void setReplace(char replace) {
            this.replace = replace;
        }

        public void setWith(char with) {
            this.with = with;
        }

        public Reader chain(final Reader rdr) {
            return new BaseFilterReader(rdr) {
                public int read()
                    throws IOException
                {
                    int c = in.read();
                    if (c == replace)
                        return with;
                    else
                        return c;
                }
            };
        }
    }
}
"
L3758,Class,EscapeUnicodeTest,org.apache.tools.ant.filters.EscapeUnicodeTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/EscapeUnicodeTest.java,65,1,87,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,3,0,0,7,11,0.2,0.1,2,2,1,4,0.1,2,1,1,0,0,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class EscapeUnicodeTest extends BuildFileTest {

    public EscapeUnicodeTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/filters/build.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void testEscapeUnicode() throws IOException {
        executeTarget(""testEscapeUnicode"");
        File expected = getProject().resolveFile(""expected/escapeunicode.test"");
        File result = getProject().resolveFile(""result/escapeunicode.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(fu.contentEquals(expected, result));
    }

}
"
L3765,Class,HeadTailTest,org.apache.tools.ant.filters.HeadTailTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/HeadTailTest.java,69,1,177,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,14,3,0,0,7,21,0.0666667,0.06,6,6,1,14,0.06,6,1,1,0,0,1,94,109,6,8,0,0,14,0,14,1,42,58,0,15,1,94,109,6,8,0,0,14,0,14,1,42,58,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;



public class HeadTailTest extends BuildFileTest {

    public HeadTailTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/head-tail.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testHead() throws IOException {
        executeTarget(""testHead"");
        File expected = getProject().resolveFile(""expected/head-tail.head.test"");
        File result = getProject().resolveFile(""result/head-tail.head.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testHead: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testHeadLines() throws IOException {
        executeTarget(""testHeadLines"");
        File expected = getProject().resolveFile(""expected/head-tail.headLines.test"");
        File result = getProject().resolveFile(""result/head-tail.headLines.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testHeadLines: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testHeadSkip() throws IOException {
        executeTarget(""testHeadSkip"");
        File expected = getProject().resolveFile(""expected/head-tail.headSkip.test"");
        File result = getProject().resolveFile(""result/head-tail.headSkip.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testHeadSkip: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testHeadLinesSkip() throws IOException {
        executeTarget(""testHeadLinesSkip"");
        File expected = getProject().resolveFile(""expected/head-tail.headLinesSkip.test"");
        File result = getProject().resolveFile(""result/head-tail.headLinesSkip.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testHeadLinesSkip: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testFilterReaderHeadLinesSkip() throws IOException {
        executeTarget(""testFilterReaderHeadLinesSkip"");
        File expected = getProject().resolveFile(
            ""expected/head-tail.headLinesSkip.test"");
        File result = getProject().resolveFile(
            ""result/head-tail.filterReaderHeadLinesSkip.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testFilterReaderHeadLinesSkip: Result not like expected"",
                   fu.contentEquals(expected, result));
    }

    public void testTail() throws IOException {
        executeTarget(""testTail"");
        File expected = getProject().resolveFile(""expected/head-tail.tail.test"");
        File result = getProject().resolveFile(""result/head-tail.tail.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testTail: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testTailLines() throws IOException {
        executeTarget(""testTailLines"");
        File expected = getProject().resolveFile(""expected/head-tail.tailLines.test"");
        File result = getProject().resolveFile(""result/head-tail.tailLines.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testTailLines: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testTailSkip() throws IOException {
        executeTarget(""testTailSkip"");
        File expected = getProject().resolveFile(""expected/head-tail.tailSkip.test"");
        File result = getProject().resolveFile(""result/head-tail.tailSkip.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testTailSkip: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testTailLinesSkip() throws IOException {
        executeTarget(""testTailLinesSkip"");
        File expected = getProject().resolveFile(""expected/head-tail.tailLinesSkip.test"");
        File result = getProject().resolveFile(""result/head-tail.tailLinesSkip.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testTailLinesSkip: Result not like expected"", fu.contentEquals(expected, result));
    }

    public void testFilterReaderTailLinesSkip() throws IOException {
        executeTarget(""testFilterReaderTailLinesSkip"");
        File expected = getProject().resolveFile(
            ""expected/head-tail.tailLinesSkip.test"");
        File result = getProject().resolveFile(
            ""result/head-tail.filterReaderTailLinesSkip.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testFilterReaderTailLinesSkip: Result not like expected"",
                   fu.contentEquals(expected, result));
    }

    public void testHeadTail() throws IOException {
        executeTarget(""testHeadTail"");
        File expected = getProject().resolveFile(""expected/head-tail.headtail.test"");
        File result = getProject().resolveFile(""result/head-tail.headtail.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""testHeadTail: Result not like expected"", fu.contentEquals(expected, result));
    }

}
"
L3783,Class,LineContainsTest,org.apache.tools.ant.filters.LineContainsTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/LineContainsTest.java,66,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,3,0,0,7,11,0.2,0.142857,3,3,1,4,0.142857,3,1,1,0,0,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class LineContainsTest extends BuildFileTest {

    public LineContainsTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/filters/build.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void testLineContains() throws IOException { 
        executeTarget(""testLineContains"");
        File expected = getProject().resolveFile(""expected/linecontains.test"");
        File result = getProject().resolveFile(""result/linecontains.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(fu.contentEquals(expected, result));
    }
    
}
"
L3790,Class,NoNewLineTest,org.apache.tools.ant.filters.NoNewLineTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/NoNewLineTest.java,68,1,87,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,3,7,0.2,0.176471,3,3,1,4,0.176471,3,1,1,0,0,1,14,20,6,8,0,0,4,0,4,1,32,4,0,5,1,14,20,6,8,0,0,4,0,4,1,32,4,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;




public class NoNewLineTest extends BuildFileTest {

    public NoNewLineTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/build.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testNoAddNewLine() throws IOException {
        executeTarget(""testNoAddNewLine"");
    }


}

"
L3797,Class,ReplaceTokensTest,org.apache.tools.ant.filters.ReplaceTokensTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/ReplaceTokensTest.java,66,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,3,0,0,7,11,0.2,0.142857,3,3,1,4,0.142857,3,1,1,0,0,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class ReplaceTokensTest extends BuildFileTest {

    public ReplaceTokensTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/filters/build.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void testReplaceTokens() throws IOException { 
        executeTarget(""testReplaceTokens"");
        File expected = getProject().resolveFile(""expected/replacetokens.test"");
        File result = getProject().resolveFile(""result/replacetokens.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(fu.contentEquals(expected, result));
    }
    
}
"
L3804,Class,StripJavaCommentsTest,org.apache.tools.ant.filters.StripJavaCommentsTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/StripJavaCommentsTest.java,66,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,3,0,0,7,11,0.2,0.142857,3,3,1,4,0.142857,3,1,1,0,0,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,18,23,6,8,0,0,4,0,4,1,32,8,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class StripJavaCommentsTest extends BuildFileTest {

    public StripJavaCommentsTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/build.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testStripJavaComments() throws IOException {
        executeTarget(""testStripJavaComments"");
        File expected = getProject().resolveFile(""expected/stripjavacomments.test"");
        File result = getProject().resolveFile(""result/stripjavacomments.test"");
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(fu.contentEquals(expected, result));
    }

}
"
L3811,Class,TokenFilterTest,org.apache.tools.ant.filters.TokenFilterTest,L2321,L103,src/testcases/org/apache/tools/ant/filters/TokenFilterTest.java,68,1,324,2,0.0602056,1,2,1,0.0505837,0.0560748,13,12,2,2,2,43,3,0,0,8,40,0.08,0.0330189,7,7,2,23,0.0315315,7,1,1,0,0,1,205,247,6,10,0,2,32,0,24,1,60,95,0,25,1,215,257,6,10,0,2,33,0,25,1,61,98,0,26,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.Reader;
import java.io.FileReader;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class TokenFilterTest extends BuildFileTest {

    public TokenFilterTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/tokenfilter.xml"");
        executeTarget(""init"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    
    public void testTokenfilter() throws IOException {
        executeTarget(""tokenfilter"");
    }

    public void testTrimignore() throws IOException {
        expectLogContaining(""trimignore"", ""Hello-World"");
    }

    public void testStringTokenizer() throws IOException {
        expectLogContaining(
            ""stringtokenizer"", ""#This#is#a#number#of#words#"");
    }

    public void testUnixLineOutput() throws IOException {
        expectFileContains(
            ""unixlineoutput"", ""result/unixlineoutput"",
            ""\nThis\nis\na\nnumber\nof\nwords\n"");
    }

    public void testDosLineOutput() throws IOException {
        expectFileContains(
            ""doslineoutput"", ""result/doslineoutput"",
            ""\r\nThis\r\nis\r\na\r\nnumber\r\nof\r\nwords\r\n"");
    }

    public void testFileTokenizer() throws IOException {
        String contents = getFileString(
            ""filetokenizer"", ""result/filetokenizer"");
        assertStringContains(contents, ""   of words"");
        assertStringNotContains(contents, "" This is"");
    }

    public void testReplaceString() throws IOException {
        expectFileContains(
            ""replacestring"", ""result/replacestring"",
            ""this is the moon"");
    }

    public void testContainsString() throws IOException {
        String contents = getFileString(
            ""containsstring"", ""result/containsstring"");
        assertStringContains(contents, ""this is a line contains foo"");
        assertStringNotContains(contents, ""this line does not"");
    }

    public void testReplaceRegex() throws IOException {
        if (! hasRegex(""testReplaceRegex""))
            return;
        String contents = getFileString(
            ""replaceregex"", ""result/replaceregex"");
        assertStringContains(contents, ""world world world world"");
        assertStringContains(contents, ""dog Cat dog"");
        assertStringContains(contents, ""moon Sun Sun"");
        assertStringContains(contents, ""found WhiteSpace"");
        assertStringContains(contents, ""Found digits [1234]"");
        assertStringNotContains(contents, ""This is a line with digits"");
    }

    public void testFilterReplaceRegex() throws IOException {
        if (! hasRegex(""testFilterReplaceRegex""))
            return;
        String contents = getFileString(
            ""filterreplaceregex"", ""result/filterreplaceregex"");
        assertStringContains(contents, ""world world world world"");
    }

    public void testHandleDollerMatch() throws IOException {
        if (! hasRegex(""testFilterReplaceRegex""))
            return;
        executeTarget(""dollermatch"");
    }
    
    public void testTrimFile() throws IOException {
        String contents = getFileString(
            ""trimfile"", ""result/trimfile"");
        assertTrue(""no ws at start"", contents.startsWith(""This is th""));
        assertTrue(""no ws at end"", contents.endsWith(""second line.""));
        assertStringContains(contents, ""  This is the second"");
    }

    public void testTrimFileByLine() throws IOException {
        String contents = getFileString(
            ""trimfilebyline"", ""result/trimfilebyline"");
        assertFalse(""no ws at start"", contents.startsWith(""This is th""));
        assertFalse(""no ws at end"", contents.endsWith(""second line.""));
        assertStringNotContains(contents, ""  This is the second"");
        assertStringContains(contents, ""file.\nThis is the second"");
    }

    public void testFilterReplaceString() throws IOException {
        String contents = getFileString(
            ""filterreplacestring"", ""result/filterreplacestring"");
        assertStringContains(contents, ""This is the moon"");
    }

    public void testContainsRegex() throws IOException {
        if (! hasRegex(""testContainsRegex""))
            return;
        String contents = getFileString(
            ""containsregex"", ""result/containsregex"");
        assertStringContains(contents, ""hello world"");
        assertStringNotContains(contents, ""this is the moon"");
        assertStringContains(contents, ""World here"");
    }

    public void testFilterContainsRegex() throws IOException {
        if (! hasRegex(""testFilterContainsRegex""))
            return;
        String contents = getFileString(
            ""filtercontainsregex"", ""result/filtercontainsregex"");
        assertStringContains(contents, ""hello world"");
        assertStringNotContains(contents, ""this is the moon"");
        assertStringContains(contents, ""World here"");
    }

    public void testContainsRegex2() throws IOException {
        if (! hasRegex(""testContainsRegex2""))
            return;
        String contents = getFileString(
            ""containsregex2"", ""result/containsregex2"");
        assertStringContains(contents, ""void register_bits();"");
    }

    public void testDeleteCharacters() throws IOException {
        String contents = getFileString(
            ""deletecharacters"", ""result/deletechars"");
        assertStringNotContains(contents, ""#"");
        assertStringNotContains(contents, ""*"");
        assertStringContains(contents, ""This is some "");
    }

    public void testScriptFilter() throws IOException {
        if (! hasScript(""testScriptFilter""))
            return;

        expectFileContains(""scriptfilter"", ""result/scriptfilter"",
                           ""HELLO WORLD"");
    }


    public void testScriptFilter2() throws IOException {
        if (! hasScript(""testScriptFilter""))
            return;

        expectFileContains(""scriptfilter2"", ""result/scriptfilter2"",
                           ""HELLO MOON"");
    }

    public void testCustomTokenFilter() throws IOException {
        expectFileContains(""customtokenfilter"", ""result/custom"",
                           ""Hello World"");
    }

    
    
    
    private boolean hasScript(String test) {
        try {
            executeTarget(""hasscript"");
        }
        catch (Throwable ex) {
            System.out.println(
                test + "": skipped - script not present "");
            return false;
        }
        return true;
    }

    private boolean hasRegex(String test) {
        try {
            executeTarget(""hasregex"");
            expectFileContains(""result/replaceregexp"", ""bye world"");
        }
        catch (Throwable ex) {
            System.out.println(test + "": skipped - regex not present ""
                               + ex);
            return false;
        }
        return true;
    }

    private void assertStringContains(String string, String contains) {
        assertTrue(""["" + string + ""] does not contain ["" + contains +""]"",
                   string.indexOf(contains) > -1);
    }

    private void assertStringNotContains(String string, String contains) {
        assertTrue(""["" + string + ""] does contain ["" + contains +""]"",
                   string.indexOf(contains) == -1);
    }

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }

    }

    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }

    private void expectFileContains(String name, String contains)
        throws IOException
    {
        String content = getFileString(name);
        assertTrue(
            ""expecting file "" + name + "" to contain "" + contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

    private void expectFileContains(
        String target, String name, String contains)
        throws IOException
    {
        executeTarget(target);
        expectFileContains(name, contains);
    }

    public static class Capitalize
        implements TokenFilter.Filter
    {
        public String filter(String token) {
            if (token.length() == 0)
                return token;
            return token.substring(0, 1).toUpperCase() +
                token.substring(1);
        }
    }

}
"
L3874,Class,TokenFilterTest$Capitalize,org.apache.tools.ant.filters.TokenFilterTest$Capitalize,L3811,L103,src/testcases/org/apache/tools/ant/filters/TokenFilterTest.java,313,5,322,6,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,2,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,10,10,0,0,0,0,1,0,1,0,1,3,0,1,0,10,10,0,0,0,0,1,0,1,0,1,3,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.filters;

import java.io.File;
import java.io.Reader;
import java.io.FileReader;
import java.io.IOException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class TokenFilterTest extends BuildFileTest {

    public TokenFilterTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/filters/tokenfilter.xml"");
        executeTarget(""init"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    
    public void testTokenfilter() throws IOException {
        executeTarget(""tokenfilter"");
    }

    public void testTrimignore() throws IOException {
        expectLogContaining(""trimignore"", ""Hello-World"");
    }

    public void testStringTokenizer() throws IOException {
        expectLogContaining(
            ""stringtokenizer"", ""#This#is#a#number#of#words#"");
    }

    public void testUnixLineOutput() throws IOException {
        expectFileContains(
            ""unixlineoutput"", ""result/unixlineoutput"",
            ""\nThis\nis\na\nnumber\nof\nwords\n"");
    }

    public void testDosLineOutput() throws IOException {
        expectFileContains(
            ""doslineoutput"", ""result/doslineoutput"",
            ""\r\nThis\r\nis\r\na\r\nnumber\r\nof\r\nwords\r\n"");
    }

    public void testFileTokenizer() throws IOException {
        String contents = getFileString(
            ""filetokenizer"", ""result/filetokenizer"");
        assertStringContains(contents, ""   of words"");
        assertStringNotContains(contents, "" This is"");
    }

    public void testReplaceString() throws IOException {
        expectFileContains(
            ""replacestring"", ""result/replacestring"",
            ""this is the moon"");
    }

    public void testContainsString() throws IOException {
        String contents = getFileString(
            ""containsstring"", ""result/containsstring"");
        assertStringContains(contents, ""this is a line contains foo"");
        assertStringNotContains(contents, ""this line does not"");
    }

    public void testReplaceRegex() throws IOException {
        if (! hasRegex(""testReplaceRegex""))
            return;
        String contents = getFileString(
            ""replaceregex"", ""result/replaceregex"");
        assertStringContains(contents, ""world world world world"");
        assertStringContains(contents, ""dog Cat dog"");
        assertStringContains(contents, ""moon Sun Sun"");
        assertStringContains(contents, ""found WhiteSpace"");
        assertStringContains(contents, ""Found digits [1234]"");
        assertStringNotContains(contents, ""This is a line with digits"");
    }

    public void testFilterReplaceRegex() throws IOException {
        if (! hasRegex(""testFilterReplaceRegex""))
            return;
        String contents = getFileString(
            ""filterreplaceregex"", ""result/filterreplaceregex"");
        assertStringContains(contents, ""world world world world"");
    }

    public void testHandleDollerMatch() throws IOException {
        if (! hasRegex(""testFilterReplaceRegex""))
            return;
        executeTarget(""dollermatch"");
    }
    
    public void testTrimFile() throws IOException {
        String contents = getFileString(
            ""trimfile"", ""result/trimfile"");
        assertTrue(""no ws at start"", contents.startsWith(""This is th""));
        assertTrue(""no ws at end"", contents.endsWith(""second line.""));
        assertStringContains(contents, ""  This is the second"");
    }

    public void testTrimFileByLine() throws IOException {
        String contents = getFileString(
            ""trimfilebyline"", ""result/trimfilebyline"");
        assertFalse(""no ws at start"", contents.startsWith(""This is th""));
        assertFalse(""no ws at end"", contents.endsWith(""second line.""));
        assertStringNotContains(contents, ""  This is the second"");
        assertStringContains(contents, ""file.\nThis is the second"");
    }

    public void testFilterReplaceString() throws IOException {
        String contents = getFileString(
            ""filterreplacestring"", ""result/filterreplacestring"");
        assertStringContains(contents, ""This is the moon"");
    }

    public void testContainsRegex() throws IOException {
        if (! hasRegex(""testContainsRegex""))
            return;
        String contents = getFileString(
            ""containsregex"", ""result/containsregex"");
        assertStringContains(contents, ""hello world"");
        assertStringNotContains(contents, ""this is the moon"");
        assertStringContains(contents, ""World here"");
    }

    public void testFilterContainsRegex() throws IOException {
        if (! hasRegex(""testFilterContainsRegex""))
            return;
        String contents = getFileString(
            ""filtercontainsregex"", ""result/filtercontainsregex"");
        assertStringContains(contents, ""hello world"");
        assertStringNotContains(contents, ""this is the moon"");
        assertStringContains(contents, ""World here"");
    }

    public void testContainsRegex2() throws IOException {
        if (! hasRegex(""testContainsRegex2""))
            return;
        String contents = getFileString(
            ""containsregex2"", ""result/containsregex2"");
        assertStringContains(contents, ""void register_bits();"");
    }

    public void testDeleteCharacters() throws IOException {
        String contents = getFileString(
            ""deletecharacters"", ""result/deletechars"");
        assertStringNotContains(contents, ""#"");
        assertStringNotContains(contents, ""*"");
        assertStringContains(contents, ""This is some "");
    }

    public void testScriptFilter() throws IOException {
        if (! hasScript(""testScriptFilter""))
            return;

        expectFileContains(""scriptfilter"", ""result/scriptfilter"",
                           ""HELLO WORLD"");
    }


    public void testScriptFilter2() throws IOException {
        if (! hasScript(""testScriptFilter""))
            return;

        expectFileContains(""scriptfilter2"", ""result/scriptfilter2"",
                           ""HELLO MOON"");
    }

    public void testCustomTokenFilter() throws IOException {
        expectFileContains(""customtokenfilter"", ""result/custom"",
                           ""Hello World"");
    }

    
    
    
    private boolean hasScript(String test) {
        try {
            executeTarget(""hasscript"");
        }
        catch (Throwable ex) {
            System.out.println(
                test + "": skipped - script not present "");
            return false;
        }
        return true;
    }

    private boolean hasRegex(String test) {
        try {
            executeTarget(""hasregex"");
            expectFileContains(""result/replaceregexp"", ""bye world"");
        }
        catch (Throwable ex) {
            System.out.println(test + "": skipped - regex not present ""
                               + ex);
            return false;
        }
        return true;
    }

    private void assertStringContains(String string, String contains) {
        assertTrue(""["" + string + ""] does not contain ["" + contains +""]"",
                   string.indexOf(contains) > -1);
    }

    private void assertStringNotContains(String string, String contains) {
        assertTrue(""["" + string + ""] does contain ["" + contains +""]"",
                   string.indexOf(contains) == -1);
    }

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }

    }

    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }

    private void expectFileContains(String name, String contains)
        throws IOException
    {
        String content = getFileString(name);
        assertTrue(
            ""expecting file "" + name + "" to contain "" + contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

    private void expectFileContains(
        String target, String name, String contains)
        throws IOException
    {
        executeTarget(target);
        expectFileContains(name, contains);
    }

    public static class Capitalize
        implements TokenFilter.Filter
    {
        public String filter(String token) {
            if (token.length() == 0)
                return token;
            return token.substring(0, 1).toUpperCase() +
                token.substring(1);
        }
    }

}
"
L37973,Class,AbstractCvsTaskTest,org.apache.tools.ant.taskdefs.AbstractCvsTaskTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/AbstractCvsTaskTest.java,65,1,100,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,2,0,0,6,13,0.125,0.147059,5,5,1,7,0.147059,5,1,1,0,0,1,29,36,6,8,0,0,7,0,7,1,35,13,0,8,1,29,36,6,8,0,0,7,0,7,1,35,13,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;
 
import java.io.File;

import org.apache.tools.ant.BuildFileTest;


public class AbstractCvsTaskTest extends BuildFileTest {

    public AbstractCvsTaskTest() {
        this( ""AbstractCvsTaskTest"" );
    }

    public AbstractCvsTaskTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/abstractcvstask.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testAbstractCvsTask() {
        executeTarget( ""all"" );
    }

    public void testPackageAttribute() {
        File f = getProject().resolveFile(""tmpdir/ant/build.xml"");
        assertTrue(""starting empty"", !f.exists());
        expectLogContaining(""package-attribute"", ""U ant/build.xml"");
        assertTrue(""now it is there"", f.exists());
    }

    public void testTagAttribute() {
        File f = getProject().resolveFile(""tmpdir/ant/build.xml"");
        assertTrue(""starting empty"", !f.exists());
        expectLogContaining(""tag-attribute"", ""ANT_141 (revision: 1.175.2.13)"");
        assertTrue(""now it is there"", f.exists());
    }
}
"
L37999,Class,AntLikeTasksAtTopLevelTest,org.apache.tools.ant.taskdefs.AntLikeTasksAtTopLevelTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/AntLikeTasksAtTopLevelTest.java,63,1,98,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,7,2,0,0,2,6,0.2,0.111111,4,3,1,4,0.111111,4,1,1,0,0,1,32,36,6,8,0,0,4,0,4,0,32,13,0,5,0,32,36,6,8,0,0,4,0,4,0,32,13,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;


public class AntLikeTasksAtTopLevelTest extends BuildFileTest {
    public AntLikeTasksAtTopLevelTest(String name) {
        super(name);
    }
    
    public void testAnt() {
        try {
            configureProject(""src/etc/testcases/taskdefs/toplevelant.xml"");
            fail(""no exception thrown"");
        } catch (BuildException e) {
            assertEquals(""ant task at the top level must not invoke its own""
                         + "" build file."", e.getMessage());
        }
    }

    public void testSubant() {
        try {
            configureProject(""src/etc/testcases/taskdefs/toplevelsubant.xml"");
            fail(""no exception thrown"");
        } catch (BuildException e) {
            assertEquals(""subant task at the top level must not invoke its own""
                         + "" build file."", e.getMessage());
        }
    }

    public void testAntcall() {
        try {
            configureProject(""src/etc/testcases/taskdefs/toplevelantcall.xml"");
            fail(""no exception thrown"");
        } catch (BuildException e) {
            assertEquals(""antcall must not be used at the top level."",
                         e.getMessage());
        }
    }

}
"
L38006,Class,AntStructureTest,org.apache.tools.ant.taskdefs.AntStructureTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/AntStructureTest.java,61,1,74,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,1,0,0,3,6,0.25,0.214286,3,3,1,3,0.214286,3,1,1,0,0,1,11,14,6,8,0,0,3,0,3,1,31,3,0,4,1,11,14,6,8,0,0,3,0,3,1,31,3,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class AntStructureTest extends BuildFileTest { 
    
    public AntStructureTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/antstructure.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }
}
"
L38012,Class,AntTest,org.apache.tools.ant.taskdefs.AntTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,73,1,509,2,0.037308,1,4,1,0.0297483,0.0347594,13,13,3,1,1,37,10,0,0,29,60,0.1,0.0324074,7,7,3,27,0.0209424,8,1,1,0,0,1,209,250,6,8,0,0,31,0,29,1,59,101,0,30,1,374,437,20,12,14,4,68,0,57,1,96,162,0,58,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest {

    public AntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() {
        expectBuildException(""test4"", ""target attribute must not be empty"");
    }

    public void test4b() {
        expectBuildException(""test4b"", ""target doesn't exist"");
    }

    public void test5() {
        executeTarget(""test5"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys,
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }

        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc =
            new PropertyChecker(""testprop"",
                                new String[] {null,
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testPropertySet() {
        executeTarget(""test-propertyset"");
        assertTrue(getLog().indexOf(""test1 is ${test1}"") > -1);
        assertTrue(getLog().indexOf(""test2 is ${test2}"") > -1);
        assertTrue(getLog().indexOf(""test1.x is 1"") > -1);
    }

    public void testInfiniteLoopViaDepends() {
        expectBuildException(""infinite-loop-via-depends"", ""recursive call"");
    }

    public void testMultiSameProperty() {
        expectLog(""multi-same-property"", ""prop is two"");
    }

    public void testTopLevelTarget() {
        expectLog(""topleveltarget"", ""Hello world"");
    }
    
    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    String msg =
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L38036,Class,AntTest$BasedirChecker,org.apache.tools.ant.taskdefs.AntTest$BasedirChecker,L38012,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,317,5,351,6,0.566667,1,4,1,0.371429,0.433333,13,13,7,2,2,12,4,1,1,4,13,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,30,35,3,1,3,1,9,0,7,0,9,8,0,7,0,30,35,3,1,3,1,9,0,7,0,9,8,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest {

    public AntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() {
        expectBuildException(""test4"", ""target attribute must not be empty"");
    }

    public void test4b() {
        expectBuildException(""test4b"", ""target doesn't exist"");
    }

    public void test5() {
        executeTarget(""test5"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys,
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }

        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc =
            new PropertyChecker(""testprop"",
                                new String[] {null,
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testPropertySet() {
        executeTarget(""test-propertyset"");
        assertTrue(getLog().indexOf(""test1 is ${test1}"") > -1);
        assertTrue(getLog().indexOf(""test2 is ${test2}"") > -1);
        assertTrue(getLog().indexOf(""test1.x is 1"") > -1);
    }

    public void testInfiniteLoopViaDepends() {
        expectBuildException(""infinite-loop-via-depends"", ""recursive call"");
    }

    public void testMultiSameProperty() {
        expectLog(""multi-same-property"", ""prop is two"");
    }

    public void testTopLevelTarget() {
        expectLog(""topleveltarget"", ""Hello world"");
    }
    
    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    String msg =
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L38066,Class,AntTest$InputHandlerChecker,org.apache.tools.ant.taskdefs.AntTest$InputHandlerChecker,L38012,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,422,5,468,6,0.0,0,0,0,0.0,0.0,0,0,1,2,2,12,4,1,1,2,12,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,41,47,2,1,2,1,10,0,7,0,10,14,0,7,0,41,47,2,1,2,1,10,0,7,0,10,14,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest {

    public AntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() {
        expectBuildException(""test4"", ""target attribute must not be empty"");
    }

    public void test4b() {
        expectBuildException(""test4b"", ""target doesn't exist"");
    }

    public void test5() {
        executeTarget(""test5"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys,
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }

        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc =
            new PropertyChecker(""testprop"",
                                new String[] {null,
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testPropertySet() {
        executeTarget(""test-propertyset"");
        assertTrue(getLog().indexOf(""test1 is ${test1}"") > -1);
        assertTrue(getLog().indexOf(""test2 is ${test2}"") > -1);
        assertTrue(getLog().indexOf(""test1.x is 1"") > -1);
    }

    public void testInfiniteLoopViaDepends() {
        expectBuildException(""infinite-loop-via-depends"", ""recursive call"");
    }

    public void testMultiSameProperty() {
        expectLog(""multi-same-property"", ""prop is two"");
    }

    public void testTopLevelTarget() {
        expectLog(""topleveltarget"", ""Hello world"");
    }
    
    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    String msg =
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L38074,Class,AntTest$PropertyChecker,org.apache.tools.ant.taskdefs.AntTest$PropertyChecker,L38012,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,470,5,506,6,0.0,0,0,0,0.0,0.0,0,0,7,2,2,12,4,1,1,4,13,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,32,37,4,1,4,1,9,0,7,0,9,9,0,7,0,32,37,4,1,4,1,9,0,7,0,9,9,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest {

    public AntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() {
        expectBuildException(""test4"", ""target attribute must not be empty"");
    }

    public void test4b() {
        expectBuildException(""test4b"", ""target doesn't exist"");
    }

    public void test5() {
        executeTarget(""test5"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys,
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }

        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc =
            new PropertyChecker(""testprop"",
                                new String[] {null,
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testPropertySet() {
        executeTarget(""test-propertyset"");
        assertTrue(getLog().indexOf(""test1 is ${test1}"") > -1);
        assertTrue(getLog().indexOf(""test2 is ${test2}"") > -1);
        assertTrue(getLog().indexOf(""test1.x is 1"") > -1);
    }

    public void testInfiniteLoopViaDepends() {
        expectBuildException(""infinite-loop-via-depends"", ""recursive call"");
    }

    public void testMultiSameProperty() {
        expectLog(""multi-same-property"", ""prop is two"");
    }

    public void testTopLevelTarget() {
        expectLog(""topleveltarget"", ""Hello world"");
    }
    
    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    String msg =
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L38054,Class,AntTest$ReferenceChecker,org.apache.tools.ant.taskdefs.AntTest$ReferenceChecker,L38012,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,353,5,420,6,0.0,0,0,0,0.0,0.0,0,0,7,7,7,18,5,1,1,5,14,0.0,0.015873,1,0,0,8,0.015873,1,1,1,0,0,1,62,68,5,1,5,1,9,0,7,0,9,30,0,7,0,62,68,5,1,5,1,9,0,7,0,9,30,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest {

    public AntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() {
        expectBuildException(""test4"", ""target attribute must not be empty"");
    }

    public void test4b() {
        expectBuildException(""test4b"", ""target doesn't exist"");
    }

    public void test5() {
        executeTarget(""test5"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"",
                     new String[] {dir1.getAbsolutePath(),
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"",
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys,
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }

        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc =
            new PropertyChecker(""testprop"",
                                new String[] {null,
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testPropertySet() {
        executeTarget(""test-propertyset"");
        assertTrue(getLog().indexOf(""test1 is ${test1}"") > -1);
        assertTrue(getLog().indexOf(""test2 is ${test2}"") > -1);
        assertTrue(getLog().indexOf(""test1.x is 1"") > -1);
    }

    public void testInfiniteLoopViaDepends() {
        expectBuildException(""infinite-loop-via-depends"", ""recursive call"");
    }

    public void testMultiSameProperty() {
        expectLog(""multi-same-property"", ""prop is two"");
    }

    public void testTopLevelTarget() {
        expectLog(""topleveltarget"", ""Hello world"");
    }
    
    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    String msg =
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L37984,Class,AntlibTest,org.apache.tools.ant.taskdefs.AntlibTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/AntlibTest.java,64,1,102,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,1,0,0,3,8,0.333333,0.32,8,8,2,4,0.228571,8,1,1,0,0,1,17,29,6,8,0,0,5,0,5,1,33,5,0,6,1,27,39,15,26,0,0,7,0,7,1,105,7,0,58,15,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class AntlibTest extends BuildFileTest {
    public AntlibTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/antlib.xml"");
    }

    public void testAntlibFile() {
        expectLog(""antlib.file"", ""MyTask called"");
    }
    
    
    public void testAntlibResource() {
        expectLog(""antlib.resource"", ""MyTask called-and-then-MyTask2 called"");
    }

    public void testNsCurrent() {
        expectLog(""ns.current"", ""Echo2 inside a macroHello from x:p"");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }

    public static class MyTask2 extends Task {
        public void execute() {
            log(""MyTask2 called"");
        }
    }

}

"
L37993,Class,AntlibTest$MyTask,org.apache.tools.ant.taskdefs.AntlibTest$MyTask,L37984,L103,src/testcases/org/apache/tools/ant/taskdefs/AntlibTest.java,90,5,94,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,1,2,0.0,0.0,0,0,0,2,0.0,0,2,2,0,0,1,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class AntlibTest extends BuildFileTest {
    public AntlibTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/antlib.xml"");
    }

    public void testAntlibFile() {
        expectLog(""antlib.file"", ""MyTask called"");
    }
    
    
    public void testAntlibResource() {
        expectLog(""antlib.resource"", ""MyTask called-and-then-MyTask2 called"");
    }

    public void testNsCurrent() {
        expectLog(""ns.current"", ""Echo2 inside a macroHello from x:p"");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }

    public static class MyTask2 extends Task {
        public void execute() {
            log(""MyTask2 called"");
        }
    }

}

"
L37996,Class,AntlibTest$MyTask2,org.apache.tools.ant.taskdefs.AntlibTest$MyTask2,L37984,L103,src/testcases/org/apache/tools/ant/taskdefs/AntlibTest.java,96,5,100,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,1,2,0.0,0.0,0,0,0,2,0.0,0,2,2,0,0,1,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class AntlibTest extends BuildFileTest {
    public AntlibTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/antlib.xml"");
    }

    public void testAntlibFile() {
        expectLog(""antlib.file"", ""MyTask called"");
    }
    
    
    public void testAntlibResource() {
        expectLog(""antlib.resource"", ""MyTask called-and-then-MyTask2 called"");
    }

    public void testNsCurrent() {
        expectLog(""ns.current"", ""Echo2 inside a macroHello from x:p"");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }

    public static class MyTask2 extends Task {
        public void execute() {
            log(""MyTask2 called"");
        }
    }

}

"
L38183,Class,AvailableTest,org.apache.tools.ant.taskdefs.AvailableTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/AvailableTest.java,64,1,237,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,28,2,0,0,5,33,0.931035,0.263514,39,39,27,2,0.263514,39,1,1,0,0,1,109,174,6,8,0,0,28,0,28,1,56,51,0,29,1,109,174,6,8,0,0,28,0,28,1,56,51,0,29,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.JavaEnvUtils;


public class AvailableTest extends BuildFileTest {

    public AvailableTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/available.xml"");
    }

    
    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test3"", ""required argument not specified"");
    }

    
    public void test4() {
        executeTarget(""test4"");
        assertTrue(project.getProperty(""test"") == null);
    }

    
    public void test5() {
        executeTarget(""test5"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test6() {
        executeTarget(""test6"");
        assertTrue(project.getProperty(""test"") == null);
    }

    
    public void test7() {
        executeTarget(""test7"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test8() {
        executeTarget(""test8"");
        assertTrue(project.getProperty(""test"") == null);
    }

    
    public void test9() {
        executeTarget(""test9"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test10() {
        executeTarget(""test10"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test11() {
        executeTarget(""test11"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test12() {
        executeTarget(""test12"");
        assertNull(project.getProperty(""test""));
        assertEquals(""true"", project.getProperty(""""));
    }

    
    public void test13() {
        executeTarget(""test13"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test13b() {
        executeTarget(""test13b"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    





    
    public void test15() {
        executeTarget(""test15"");
        assertNull(project.getProperty(""test""));
    }

    
    
    public void test16() {
        executeTarget(""test16"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    
    public void test17() {
        executeTarget(""test17"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test18() {
        executeTarget(""test18"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test19() {
        expectBuildException(""test19"", ""Invalid value for type attribute."");
    }

    
    public void test20() {
        executeTarget(""test20"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test21() {
        executeTarget(""test21"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void test22() {
        executeTarget(""test22"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void test23() {
        executeTarget(""test23"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void test24() {
        executeTarget(""test24"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void testSearchInPathNotThere() {
        executeTarget(""searchInPathNotThere"");
        assertNull(project.getProperty(""test""));
    }

    
    public void testSearchInPathIsThere() {
        executeTarget(""searchInPathIsThere"");
        assertEquals(""true"",project.getProperty(""test""));
    }
}
"
L38262,Class,BUnzip2Test,org.apache.tools.ant.taskdefs.BUnzip2Test,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/BUnzip2Test.java,66,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,3,0,0,6,10,0.2,0.173913,4,4,1,4,0.173913,4,1,1,0,0,1,19,23,6,8,0,0,4,0,4,1,32,7,0,5,1,19,23,6,8,0,0,4,0,4,1,32,7,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.IOException;


public class BUnzip2Test extends BuildFileTest {

    public BUnzip2Test(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/bunzip2.xml"");
        executeTarget(""prepare"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(""File content mismatch after bunzip2"",
            fileUtils.contentEquals(project.resolveFile(""expected/asf-logo-huge.tar""),
                                    project.resolveFile(""asf-logo-huge.tar"")));
    }
}
"
L38269,Class,BZip2Test,org.apache.tools.ant.taskdefs.BZip2Test,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/BZip2Test.java,66,1,97,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,3,0,0,7,12,0.166667,0.133333,4,4,1,5,0.133333,4,1,1,0,0,1,26,32,6,8,0,0,5,0,5,1,33,10,0,6,1,26,32,6,8,0,0,5,0,5,1,33,10,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.IOException;


public class BZip2Test extends BuildFileTest {

    public BZip2Test(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/bzip2.xml"");
        executeTarget(""prepare"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(""File content mismatch"",
            fileUtils.contentEquals(project.resolveFile(""expected/asf-logo-huge.tar.bz2""),
                                    project.resolveFile(""asf-logo-huge.tar.bz2"")));
    }

    public void testDateCheck(){
        executeTarget(""testDateCheck"");
        String log = getLog();
        assertTrue(
            ""Expecting message ending with 'asf-logo.gif.bz2 is up to date.' but got '"" + log + ""'"",
            log.endsWith(""asf-logo.gif.bz2 is up to date.""));
    }

}
"
L38248,Class,BasenameTest,org.apache.tools.ant.taskdefs.BasenameTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/BasenameTest.java,63,1,121,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,11,2,0,0,5,16,0.0833333,0.06,3,3,1,11,0.06,3,1,1,0,0,1,47,59,6,8,0,0,11,0,11,1,39,23,0,12,1,47,59,6,8,0,0,11,0,11,1,39,23,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class BasenameTest extends BuildFileTest { 
    
    public BasenameTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/basename.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required attribute missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required attribute missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required attribute missing"");
    }

    public void test4() { 
        executeTarget(""test4"");
        String checkprop = project.getProperty(""file.w.suf"");
        assertEquals(""foo.txt"", checkprop);
    }
    
    public void test5() { 
        executeTarget(""test5"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals(""foo"", checkprop);
    }
    
    public void testMultipleDots() { 
        executeTarget(""testMultipleDots"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals(""foo.bar"", checkprop);
    }
    
    public void testNoDots() { 
        executeTarget(""testNoDots"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals(""foo.bar"", checkprop);
    }

    public void testValueEqualsSuffixWithDot() { 
        executeTarget(""testValueEqualsSuffixWithDot"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals("""", checkprop);
    }

    public void testValueEqualsSuffixWithoutDot() { 
        executeTarget(""testValueEqualsSuffixWithoutDot"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals("""", checkprop);
    }

}
"
L38464,Class,CVSPassTest,org.apache.tools.ant.taskdefs.CVSPassTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/CVSPassTest.java,66,1,159,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,13,2,0,0,4,13,0.111111,0.0625,5,5,1,8,0.0625,5,1,1,0,0,1,75,94,10,8,4,0,9,0,8,1,37,33,0,9,1,75,94,10,8,4,0,9,0,8,1,37,33,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.*;
import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;


public class CVSPassTest extends BuildFileTest { 
    private final String EOL = System.getProperty(""line.separator"");
    private final String JAKARTA_URL =
        "":pserver:anoncvs@jakarta.apache.org:/home/cvspublic Ay=0=h<Z"";
    private final String XML_URL =
        "":pserver:anoncvs@xml.apache.org:/home/cvspublic Ay=0=h<Z"";
    private final String TIGRIS_URL =
        "":pserver:guest@cvs.tigris.org:/cvs AIbdZ,"";
    
    
    public CVSPassTest(String name) { 
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/cvspass.xml"");
    }

    public void testNoCVSRoot() { 
        try{
            executeTarget(""test1"");
            fail(""BuildException not thrown"");
        }catch(BuildException e){
            assertEquals(""cvsroot is required"", e.getMessage());
        }
    }

    public void testNoPassword() { 
        try{
            executeTarget(""test2"");
            fail(""BuildException not thrown"");
        }catch(BuildException e){
            assertEquals(""password is required"", e.getMessage());
        }
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testPassFile() throws Exception { 
        executeTarget(""test3"");
        File f = new File(getProjectDir(), ""testpassfile.tmp"");

        assertTrue( ""Passfile ""+f+"" not created"", f.exists());

        assertEquals(JAKARTA_URL+EOL, readFile(f));

    }

    public void testPassFileDuplicateEntry() throws Exception { 
        executeTarget(""test4"");
        File f = new File(getProjectDir(), ""testpassfile.tmp"");

        assertTrue( ""Passfile ""+f+"" not created"", f.exists());

        assertEquals(
            JAKARTA_URL+ EOL+
            TIGRIS_URL+ EOL,
            readFile(f));
    }

    public void testPassFileMultipleEntry() throws Exception { 
        executeTarget(""test5"");
        File f = new File(getProjectDir(), ""testpassfile.tmp"");

        assertTrue( ""Passfile ""+f+"" not created"", f.exists());

        assertEquals(
            JAKARTA_URL+ EOL+
            XML_URL+ EOL+
            TIGRIS_URL+ EOL,
            readFile(f));
    }

    private String readFile(File f) throws Exception {
        BufferedReader reader = null; 
        
        try {
            reader = new BufferedReader(new FileReader(f));

            StringBuffer buf = new StringBuffer();
            String line=null;
            while((line=reader.readLine())!=null){
                buf.append(line + EOL);
            }
            return buf.toString();
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }
}
"
L38277,Class,CallTargetTest,org.apache.tools.ant.taskdefs.CallTargetTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/CallTargetTest.java,66,1,99,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,2,0,0,6,12,0.571429,0.225806,7,7,4,3,0.225806,7,1,1,0,0,1,24,34,6,8,0,0,6,0,6,1,34,10,0,7,1,24,34,6,8,0,0,6,0,6,1,34,10,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.util.Vector;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.JavaEnvUtils;


public class CallTargetTest extends BuildFileTest {

    public CallTargetTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/calltarget.xml"");
    }

    
    public void testInheritRefFileSet() {
        expectLogContaining(""testinheritreffileset"", ""calltarget.xml"");
    }

    
    public void testInheritFilterset() {
        project.executeTarget(""testinheritreffilterset"");
    }

    
    
    public void testMultiCall() {
        Vector v = new Vector();
        v.add(""call-multi"");
        v.add(""call-multi"");
        project.executeTargets(v);
        assertLogContaining(""multi is SETmulti is SET"");
    }
    
    public void tearDown() {
        project.executeTarget(""cleanup"");
    }
}
"
L38292,Class,ChecksumTest,org.apache.tools.ant.taskdefs.ChecksumTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ChecksumTest.java,68,1,139,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,12,3,0,0,9,21,0.0833333,0.0769231,5,5,1,11,0.0769231,5,1,1,0,0,1,60,72,6,8,0,0,12,0,11,1,40,30,0,12,1,60,72,6,8,0,0,12,0,11,1,40,30,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.IOException;
import java.io.File;


public class ChecksumTest extends BuildFileTest {

    public ChecksumTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/checksum.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testCreateMd5() throws IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""createMd5"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""expected/asf-logo.gif.md5""),
                                           project.resolveFile(""../asf-logo.gif.MD5"")));
    }

    public void testSetProperty() {
        executeTarget(""setProperty"");
        assertEquals(""0541d3df42520911f268abc730f3afe0"",
                     project.getProperty(""logo.MD5""));
        assertTrue(!project.resolveFile(""../asf-logo.gif.MD5"").exists());
    }

    public void testVerifyTotal() {
        executeTarget(""verifyTotal"");
        assertEquals(""ef8f1477fcc9bf93832c1a74f629c626"",
                     project.getProperty(""total""));
    }

    public void testVerifyChecksumdir() {
        executeTarget(""verifyChecksumdir"");
        assertEquals(""ef8f1477fcc9bf93832c1a74f629c626"",
                     project.getProperty(""total""));
        File shouldExist = project.resolveFile(""checksum/checksums/foo/zap/Eenie.MD5"");
        File shouldNotExist = project.resolveFile(""checksum/foo/zap/Eenie.MD5"");
        assertTrue( ""Checksums should be written to "" + shouldExist.getAbsolutePath(), shouldExist.exists());
        assertTrue( ""Checksums should not be written to "" + shouldNotExist.getAbsolutePath(), !shouldNotExist.exists());
    }

    public void testVerifyAsTask() {
        testVerify(""verifyAsTask"");
        assertNotNull(project.getProperty(""no.logo.MD5""));
        assertEquals(""false"", project.getProperty(""no.logo.MD5""));
    }

    public void testVerifyAsCondition() {
        testVerify(""verifyAsCondition"");
        assertNull(project.getProperty(""no.logo.MD5""));
    }

    public void testVerifyFromProperty() {
        assertNull(getProject().getProperty(""verify""));
        expectPropertySet(""verifyFromProperty"", ""verify"", ""true"");
    }

    public void testVerifyChecksumdirNoTotal() {
        executeTarget(""verifyChecksumdirNoTotal"");
    }
    private void testVerify(String target) {
        assertNull(project.getProperty(""logo.MD5""));
        assertNull(project.getProperty(""no.logo.MD5""));
        executeTarget(target);
        assertNotNull(project.getProperty(""logo.MD5""));
        assertEquals(""true"", project.getProperty(""logo.MD5""));
    }

}
"
L38311,Class,ConcatTest,org.apache.tools.ant.taskdefs.ConcatTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ConcatTest.java,71,1,314,2,0.304432,3,5,4,0.204918,0.268456,50,40,3,2,2,28,3,0,0,13,39,0.583333,0.273171,56,56,14,10,0.273171,56,1,1,0,0,1,149,244,8,10,2,2,26,0,23,1,54,69,0,24,1,149,244,8,10,2,2,26,0,23,1,54,69,0,24,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;


public class ConcatTest 
    extends BuildFileTest {

    
    private static final String tempFile = ""concat.tmp"";

    
    private static final String tempFile2 = ""concat.tmp.2"";

    
    public ConcatTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/concat.xml"");
    }

    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    
    public void test1() {
        expectBuildException(""test1"", ""Insufficient information."");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""Invalid destination file."");
    }

    
    public void test3() {

        File file = new File(getProjectDir(), tempFile);
        if (file.exists()) {
            file.delete();
        }

        executeTarget(""test3"");

        assertTrue(file.exists());
    }

    
    public void test4() {
        test3();

        File file = new File(getProjectDir(), tempFile);
        final long origSize = file.length();

        executeTarget(""test4"");

        File file2 = new File(getProjectDir(), tempFile2);
        final long newSize = file2.length();

        assertEquals(origSize * 3, newSize);
    }

    
    public void test5() {
        expectLog(""test5"", ""Hello, World!"");
    }

    public void test6() {
        String filename = ""src/etc/testcases/taskdefs/thisfiledoesnotexist""
            .replace('/', File.separatorChar);
        expectLogContaining(""test6"", filename +"" does not exist."");
    }

    public void testConcatNoNewline() {
        expectLog(""testConcatNoNewline"", ""ab"");
    }

    public void testConcatNoNewlineEncoding() {
        expectLog(""testConcatNoNewlineEncoding"", ""ab"");
    }

    public void testPath() {
        test3();

        File file = new File(getProjectDir(), tempFile);
        final long origSize = file.length();

        executeTarget(""testPath"");

        File file2 = new File(getProjectDir(), tempFile2);
        final long newSize = file2.length();

        assertEquals(origSize, newSize);
        
    }
    public void testAppend() {
        test3();

        File file = new File(getProjectDir(), tempFile);
        final long origSize = file.length();

        executeTarget(""testAppend"");

        File file2 = new File(getProjectDir(), tempFile2);
        final long newSize = file2.length();

        assertEquals(origSize*2, newSize);
        
    }

    public void testFilter() {
        executeTarget(""testfilter"");
        assertTrue(getLog().indexOf(""REPLACED"") > -1);
    }

    public void testNoOverwrite() {
        executeTarget(""testnooverwrite"");
        File file2 = new File(getProjectDir(), tempFile2);
        long size = file2.length();
        assertEquals(size, 0);
    }

    public void testheaderfooter() {
        test3();
        expectLog(""testheaderfooter"", ""headerHello, World!footer"");
    }

    public void testfileheader() {
        test3();
        expectLog(""testfileheader"", ""Hello, World!Hello, World!"");
    }

    
    public void testsame() {
        expectBuildException(""samefile"", ""output file same as input"");
    }

    
    public void testfilterinline() {
        executeTarget(""testfilterinline"");
        assertTrue(getLog().indexOf(""REPLACED"") > -1);
    }

    
    public void testmultireader() {
        executeTarget(""testmultireader"");
        assertTrue(getLog().indexOf(""Bye"") > -1);
        assertTrue(getLog().indexOf(""Hello"") == -1);
    }        
    
    public void testfixlastline()
        throws IOException
    {
        expectFileContains(
            ""testfixlastline"", ""concat.line4"",
            ""end of line"" + System.getProperty(""line.separator"")
            + ""This has"");
    }        

    
    public void testfixlastlineeol()
        throws IOException
    {
        expectFileContains(
            ""testfixlastlineeol"", ""concat.linecr"",
            ""end of line\rThis has"");
    }        

    
    
    

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }
        
    }
        
    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }
    
    private void expectFileContains(
        String target, String filename, String contains)
        throws IOException
    {
        String content = getFileString(target, filename);
        assertTrue(
            ""expecting file "" + filename + "" to contain "" +
            contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

    public void testTranscoding() throws IOException {
        executeTarget(""testTranscoding"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File f1 = getProject().resolveFile(""copy/expected/utf-8"");
        File f2 = getProject().resolveFile(""concat.utf8"");
        assertTrue(fileUtils.contentEquals(f1, f2));
    }
}
"
L38372,Class,ConditionTest,org.apache.tools.ant.taskdefs.ConditionTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ConditionTest.java,65,1,267,2,0.0,0,0,0,0.0,0.0,0,0,5,0,0,41,1,0,0,7,48,0.0952381,0.0949367,15,15,4,38,0.0949367,15,1,1,0,0,1,143,203,6,8,0,0,41,0,41,1,69,41,0,42,1,143,203,6,8,0,0,41,0,41,1,69,41,0,42,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import java.lang.reflect.InvocationTargetException;


public class ConditionTest extends BuildFileTest {

    
    public ConditionTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/condition.xml"");
    }


    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testBasic() {
       expectPropertySet(""basic"",""basic""); 
    }

    public void testConditionIncomplete() {
        expectSpecificBuildException(""condition-incomplete"", 
                                     ""property attribute has been omitted"",
                                     ""The property attribute is required.""); 
    }
    
    public void testConditionEmpty() {
        expectSpecificBuildException(""condition-empty"", 
                                     ""no conditions"",
                                     ""You must nest a condition into <condition>""); 
    }    

    public void testShortcut() {
        expectPropertySet(""shortcut"",""shortcut"",""set""); 
    }
    
    public void testUnset() {
        expectPropertyUnset(""dontset"",""dontset""); 
    }
  
    public void testSetValue() {
        expectPropertySet(""setvalue"",""setvalue"",""woowoo""); 
    }
    
    public void testNegation() {
        expectPropertySet(""negation"",""negation""); 
    }
    
    public void testNegationFalse() {
        expectPropertyUnset(""negationfalse"",""negationfalse""); 
    }
    
    public void testNegationIncomplete() {
        expectSpecificBuildException(""negationincomplete"", 
                                     ""no conditions in <not>"",
                                     ""You must nest a condition into <not>""); 
    }
    
    public void testAnd() {
        expectPropertySet(""and"",""and""); 
    }   
        
    public void testAndFails() {
        expectPropertyUnset(""andfails"",""andfails""); 
    }   
 
    public void testAndIncomplete() {
        expectPropertyUnset(""andincomplete"",""andincomplete""); 
    } 

    public void testAndempty() {
        expectPropertySet(""andempty"",""andempty""); 
    }   
    
    public void testOr() {
        expectPropertySet(""or"",""or""); 
    }

    public void testOrincomplete() {
        expectPropertySet(""or"",""or""); 
    } 
  
    public void testOrFails() {
        expectPropertyUnset(""orfails"",""orfails""); 
    }   
 
    public void testOrboth() {
        expectPropertySet(""orboth"",""orboth""); 
    }   

    public void testFilesmatchIdentical() {
        expectPropertySet(""filesmatch-identical"",""filesmatch-identical""); 
    }       
    
    
    public void testFilesmatchIncomplete() {
        expectSpecificBuildException(""filesmatch-incomplete"", 
                                     ""Missing file2 attribute"",
                                     ""both file1 and file2 are required in filesmatch""); 
    }
    
    public void testFilesmatchOddsizes() {
        expectPropertyUnset(""filesmatch-oddsizes"",""filesmatch-oddsizes""); 
    }    
    
    public void testFilesmatchExistence() {
        expectPropertyUnset(""filesmatch-existence"", ""filesmatch-existence""); 
    } 

    public void testFilesmatchDifferent() {
        expectPropertyUnset(""filesmatch-different"",""filesmatch-different""); 
    } 
    
    public void testFilesmatchMatch() {
        expectPropertySet(""filesmatch-match"",""filesmatch-match""); 
    }   
    
    public void testFilesmatchDifferentSizes() {
        expectPropertyUnset(""filesmatch-different-sizes"",
            ""filesmatch-different-sizes""); 
    } 

    public void testFilesmatchDifferentOnemissing() {
        expectPropertyUnset(""filesmatch-different-onemissing"",
            ""filesmatch-different-onemissing""); 
    } 
    
    public void testContains() {
        expectPropertySet(""contains"",""contains""); 
    }   
        
    
    public void testContainsDoesnt() {
        expectPropertyUnset(""contains-doesnt"",""contains-doesnt""); 
    }   

    public void testContainsAnycase() {
        expectPropertySet(""contains-anycase"",""contains-anycase""); 
    } 

    
    public void testContainsIncomplete1() {
        expectSpecificBuildException(""contains-incomplete1"", 
                    ""Missing contains attribute"",
                    ""both string and substring are required in contains""); 
    } 
    
    public void testContainsIncomplete2() {
        expectSpecificBuildException(""contains-incomplete2"", 
                    ""Missing contains attribute"",
                    ""both string and substring are required in contains""); 
    } 
    
    public void testIstrue() {
        expectPropertySet(""istrue"",""istrue""); 
    } 

    public void testIstrueNot() {
        expectPropertyUnset(""istrue-not"",""istrue-not""); 
    } 
 
    public void testIstrueFalse() {
        expectPropertyUnset(""istrue-false"",""istrue-false""); 
    } 

    
    public void testIstrueIncomplete1() {
        expectSpecificBuildException(""istrue-incomplete"", 
                    ""Missing attribute"",
                    ""Nothing to test for truth""); 
    } 

    public void testIsfalseTrue() {
        expectPropertyUnset(""isfalse-true"",""isfalse-true""); 
    } 

    public void testIsfalseNot() {
        expectPropertySet(""isfalse-not"",""isfalse-not""); 
    } 
 
    public void testIsfalseFalse() {
        expectPropertySet(""isfalse-false"",""isfalse-false""); 
    } 

    
    public void testIsfalseIncomplete1() {
        expectSpecificBuildException(""isfalse-incomplete"", 
                    ""Missing attribute"",
                    ""Nothing to test for falsehood""); 
    }     
    
}

"
L38445,Class,CopyTest,org.apache.tools.ant.taskdefs.CopyTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/CopyTest.java,69,1,181,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,20,4,0,0,12,26,0.0666667,0.0693069,7,5,1,14,0.0693069,7,1,1,0,0,1,94,113,6,8,0,0,14,0,14,1,42,55,0,15,1,94,113,6,8,0,0,14,0,14,1,42,55,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.util.JavaEnvUtils;
import java.io.File;
import java.io.IOException;


public class CopyTest extends BuildFileTest {

    public CopyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/copy.xml"");
    }

    public void test1() {
        executeTarget(""test1"");
        File f = new File(getProjectDir(), ""copytest1.tmp"");
        if ( !f.exists()) {
            fail(""Copy failed"");
        }
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test2() {
        executeTarget(""test2"");
        File f = new File(getProjectDir(), ""copytest1dir/copy.xml"");
        if ( !f.exists()) {
            fail(""Copy failed"");
        }
    }

    public void test3() {
        executeTarget(""test3"");
        File file3  = new File(getProjectDir(), ""copytest3.tmp"");
        assertTrue(file3.exists());
        File file3a = new File(getProjectDir(), ""copytest3a.tmp"");
        assertTrue(file3a.exists());
        File file3b = new File(getProjectDir(), ""copytest3b.tmp"");
        assertTrue(file3b.exists());
        File file3c = new File(getProjectDir(), ""copytest3c.tmp"");
        assertTrue(file3c.exists());

        
        if(file3.length()==0) {
            fail(""could not overwrite an existing, older file"");
        }
        if(file3c.length()!=0) {
            fail(""could not force overwrite an existing, newer file"");
        }
        if(file3b.length()==0) {
            fail(""unexpectedly overwrote an existing, newer file"");
        }

        
        if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            assertTrue(file3a.lastModified()==file3.lastModified());
            assertTrue(file3c.lastModified()<file3a.lastModified());
        }

    }

    public void testFilterSet() throws IOException {
        executeTarget(""testFilterSet"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""copy.filterset.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    public void testFilterChain() throws IOException {
        executeTarget(""testFilterChain"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""copy.filterchain.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    public void testSingleFileFileset() {
        executeTarget(""test_single_file_fileset"");
        File file  = new File(getProjectDir(),
                                        ""copytest_single_file_fileset.tmp"");
        assertTrue(file.exists());
    }

    public void testTranscoding() throws IOException {
        executeTarget(""testTranscoding"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File f1 = getProject().resolveFile(""copy/expected/utf-8"");
        File f2 = getProject().resolveFile(""copytest1.tmp"");
        assertTrue(fileUtils.contentEquals(f1, f2));
    }

    public void testMissingFileIgnore() {
        expectLogContaining(""testMissingFileIgnore"", 
                            ""Warning: Could not find file "");        
    }

    public void testMissingFileBail() {
        expectBuildException(""testMissingFileBail"", ""not-there doesn't exist"");
        assertTrue(getBuildException().getMessage()
                   .startsWith(""Warning: Could not find file ""));
    }

    public void testMissingDirIgnore() {
        expectLogContaining(""testMissingDirIgnore"", ""Warning: "");        
    }

    public void testMissingDirBail() {
        expectBuildException(""testMissingDirBail"", ""not-there doesn't exist"");
        assertTrue(getBuildException().getMessage().endsWith("" not found.""));
    }
}
"
L38421,Class,CopydirTest,org.apache.tools.ant.taskdefs.CopydirTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/CopydirTest.java,63,1,106,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,11,1,0,0,6,15,0.1,0.108108,4,3,1,9,0.108108,4,1,1,0,0,1,33,44,6,8,0,0,9,0,9,1,37,12,0,10,1,33,44,6,8,0,0,9,0,9,1,37,12,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class CopydirTest extends BuildFileTest { 
    
    public CopydirTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/copydir.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectLog(""test4"", ""DEPRECATED - The copydir task is deprecated.  Use copy instead.Warning: src == dest"");
    }
    
    public void test5() { 
        executeTarget(""test5"");
        java.io.File f = new java.io.File(getProjectDir(), ""../taskdefs.tmp"");
        if (!f.exists() || !f.isDirectory()) { 
            fail(""Copy failed"");
        }
        
    }

    public void test6() { 
        expectBuildException(""test6"", ""target is file"");
    }
    
}
"
L38433,Class,CopyfileTest,org.apache.tools.ant.taskdefs.CopyfileTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/CopyfileTest.java,63,1,106,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,10,1,0,0,6,15,0.1,0.0789474,3,3,1,9,0.0789474,3,1,1,0,0,1,35,44,6,8,0,0,9,0,9,1,37,13,0,10,1,35,44,6,8,0,0,9,0,9,1,37,13,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class CopyfileTest extends BuildFileTest { 
    
    public void test6() { 
        expectBuildException(""test6"", ""target is directory"");
    }

    public CopyfileTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/copyfile.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectLog(""test4"", ""DEPRECATED - The copyfile task is deprecated.  Use copy instead.Warning: src == dest"");
    }

    public void test5() { 
        executeTarget(""test5"");
        java.io.File f = new java.io.File(getProjectDir(), ""copyfile.tmp"");
        if (f.exists()) { 
            f.delete();
        } else {
            fail(""Copy failed"");
        }
    }
}
"
L38486,Class,DefaultExcludesTest,org.apache.tools.ant.taskdefs.DefaultExcludesTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DefaultExcludesTest.java,63,1,144,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,7,3,0,0,4,10,0.666667,0.101266,8,6,4,2,0.101266,8,1,1,0,0,1,71,82,6,8,0,0,6,0,5,1,34,16,0,6,1,71,82,6,8,0,0,6,0,5,1,34,16,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.DirectoryScanner;


public class DefaultExcludesTest extends BuildFileTest {

    public DefaultExcludesTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/defaultexcludes.xml"");
    }

    
    public void test1() {
        String[] expected = {
                          ""**#*#"",
                          ""**/.#*"",
                          ""**/%*%"",
                          ""**/._*"",
                          ""**/CVS"",
                          ""**/CVS.cvsignore"",
                          ""**/SCCS"",
                          ""**/SCCSvssver.scc"",
                          ""**/.svn"",
                          ""**/.svn.DS_Store""};
        project.executeTarget(""test1"");
        assertEquals(""current default excludes"", expected, DirectoryScanner.getDefaultExcludes());
    }

    
    public void test2() {
        String[] expected = {
                          ""**#*#"",
                          ""**/.#*"",
                          ""**/%*%"",
                          ""**/._*"",
                          ""**/CVS"",
                          ""**/CVS.cvsignore"",
                          ""**/SCCS"",
                          ""**/SCCSvssver.scc"",
                          ""**/.svn"",
                          ""**/.svn.DS_Store"",
                          ""foo""};
        project.executeTarget(""test2"");
        assertEquals(""current default excludes"", expected, DirectoryScanner.getDefaultExcludes());
    }

    
    public void test3() {
        String[] expected = {
                          ""**#*#"",
                          ""**/.#*"",
                          ""**/%*%"",
                          ""**/._*"",
                          
                          ""**/CVS.cvsignore"",
                          ""**/SCCS"",
                          ""**/SCCSvssver.scc"",
                          ""**/.svn"",
                          ""**/.svn.DS_Store""};
        project.executeTarget(""test3"");
        assertEquals(""current default excludes"", expected, DirectoryScanner.getDefaultExcludes());
    }
    private void assertEquals(String message, String[] expected, String[] actual) {
        
        assertEquals(message + "" : string array length match"", expected.length, actual.length);
        for (int counter=0; counter <expected.length; counter++) {
            assertEquals(message + "" : "" + counter + ""th element in array match"", expected[counter], actual[counter]);
        }

    }
}
"
L38502,Class,DeleteTest,org.apache.tools.ant.taskdefs.DeleteTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DeleteTest.java,62,1,87,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,1,0,0,4,10,0.142857,0.130435,3,3,1,6,0.130435,3,1,1,0,0,1,20,26,6,8,0,0,6,0,6,1,34,6,0,7,1,20,26,6,8,0,0,6,0,6,1,34,6,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class DeleteTest extends BuildFileTest { 
    
    public DeleteTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/delete.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        executeTarget(""test2"");
    }

    public void test4() { 
        executeTarget(""test4"");
    }
}
"
L38511,Class,DeltreeTest,org.apache.tools.ant.taskdefs.DeltreeTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DeltreeTest.java,62,1,81,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,4,1,0,0,4,8,0.2,0.222222,4,3,1,4,0.222222,4,1,1,0,0,1,14,20,6,8,0,0,4,0,4,1,32,4,0,5,1,14,20,6,8,0,0,4,0,4,1,32,4,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class DeltreeTest extends BuildFileTest { 
    
    public DeltreeTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/deltree.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        
        executeTarget(""test2"");
    }

}
"
L38518,Class,DemuxOutputTask,org.apache.tools.ant.taskdefs.DemuxOutputTask,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DemuxOutputTask.java,69,1,110,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,9,2,1,0,1,4,0.5,0.195652,9,9,1,1,0.195652,9,2,2,0,0,1,37,42,13,9,4,0,3,0,1,0,38,19,0,26,7,37,42,13,9,4,0,3,0,1,0,38,19,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;
import java.util.Random;


public class DemuxOutputTask extends Task {
    private String randomOutValue;
    private String randomErrValue;
    private boolean outputReceived = false;
    private boolean errorReceived = false;

    public void execute() {
        Random generator = new Random();
        randomOutValue = ""Output Value is "" + generator.nextInt();
        randomErrValue = ""Error Value is "" + generator.nextInt();

        System.out.println(randomOutValue);
        System.err.println(randomErrValue);
        if (!outputReceived) {
            throw new BuildException(""Did not receive output"");
        }

        if (!errorReceived) {
            throw new BuildException(""Did not receive error"");
        }
    }

    protected void handleOutput(String line) {
        line = line.trim();
        if (line.length() != 0 && !line.equals(randomOutValue)) {
            String message = ""Received = ["" + line + ""], expected = [""
                + randomOutValue + ""]"";
            throw new BuildException(message);
        }
        outputReceived = true;
    }

    protected void handleErrorOutput(String line) {
        line = line.trim();
        if (line.length() != 0 && !line.equals(randomErrValue)) {
            String message = ""Received = ["" + line + ""], expected = [""
                + randomErrValue + ""]"";
            throw new BuildException(message);
        }
        errorReceived = true;
    }
}

"
L38536,Class,DependSetTest,org.apache.tools.ant.taskdefs.DependSetTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DependSetTest.java,64,1,102,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,1,0,0,5,13,0.111111,0.142857,5,5,1,8,0.142857,5,1,1,0,0,1,30,39,6,8,0,0,8,0,8,1,36,11,0,9,1,30,39,6,8,0,0,8,0,8,1,36,11,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class DependSetTest extends BuildFileTest { 
    
    public DependSetTest(String name) { 
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/dependset.xml"");
    }

    public void test1() { 
       expectBuildException(""test1"",""At least one <srcfileset> or <srcfilelist> element must be set"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test2() { 
       expectBuildException(""test2"",""At least one <targetfileset> or <targetfilelist> element must be set"");
    }

    public void test3() { 
       expectBuildException(""test1"",""At least one <srcfileset> or <srcfilelist> element must be set"");
    }

    public void test4() { 
        executeTarget(""test4"");
    }

    public void test5() { 
        executeTarget(""test5"");
        java.io.File f = new java.io.File(getProjectDir(), ""older.tmp"");
        if (f.exists()) {
           fail(""dependset failed to remove out of date file "" + f.toString());
        }
    }

}
"
L38574,Class,DirnameTest,org.apache.tools.ant.taskdefs.DirnameTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DirnameTest.java,63,1,104,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,2,0,0,5,12,0.125,0.0810811,3,3,1,7,0.0810811,3,1,1,0,0,1,34,42,6,8,0,0,7,0,7,1,35,16,0,8,1,34,42,6,8,0,0,7,0,7,1,35,16,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class DirnameTest extends BuildFileTest { 
    
    public DirnameTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/dirname.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required attribute missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required attribute missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required attribute missing"");
    }

    public void test4() { 
        executeTarget(""test4"");
        String filesep = System.getProperty(""file.separator"");
        String expected = filesep + ""usr"" + filesep + ""local"";
        String checkprop = project.getProperty(""local.dir"");
        if (!checkprop.equals(expected)) { 
            fail(""dirname failed"");
        }
    }
    
    public void test5() { 
        executeTarget(""test5"");
        String expected = project.getProperty(""basedir"");
        String checkprop = project.getProperty(""base.dir"");
        if (!checkprop.equals(expected)) { 
            fail(""dirname failed"");
        }
    }
    
}
"
L38584,Class,DynamicTask,org.apache.tools.ant.taskdefs.DynamicTask,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DynamicTask.java,60,1,82,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,5,0,0,2,5,0.0,0.0,0,0,0,4,0.0,0,2,3,0,0,2,10,14,9,9,0,0,3,0,3,1,38,2,0,28,8,18,23,9,9,0,0,5,0,5,2,40,4,0,30,9,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.DynamicConfigurator;
import org.apache.tools.ant.Task;

public class DynamicTask extends Task implements DynamicConfigurator {

    public void execute() {
    }

    public void setDynamicAttribute(String name, String value) {
        getProject().setNewProperty(name, value);
    }

    public Object createDynamicElement(String name) {
        return new Sub();
    }

    public class Sub implements DynamicConfigurator {
        public void setDynamicAttribute(String name, String value) {
            getProject().setNewProperty(name, value);
        }

        public Object createDynamicElement(String name) {
            return null;
        }
    }
}
"
L38592,Class,DynamicTask$Sub,org.apache.tools.ant.taskdefs.DynamicTask$Sub,L38584,L103,src/testcases/org/apache/tools/ant/taskdefs/DynamicTask.java,73,5,81,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,3,1,0,2,4,0.0,0.0,0,0,0,3,0.0,0,1,1,0,0,1,8,9,0,0,0,0,2,0,2,1,2,2,0,2,1,8,9,0,0,0,0,2,0,2,1,2,2,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.DynamicConfigurator;
import org.apache.tools.ant.Task;

public class DynamicTask extends Task implements DynamicConfigurator {

    public void execute() {
    }

    public void setDynamicAttribute(String name, String value) {
        getProject().setNewProperty(name, value);
    }

    public Object createDynamicElement(String name) {
        return new Sub();
    }

    public class Sub implements DynamicConfigurator {
        public void setDynamicAttribute(String name, String value) {
            getProject().setNewProperty(name, value);
        }

        public Object createDynamicElement(String name) {
            return null;
        }
    }
}
"
L38602,Class,DynamicTest,org.apache.tools.ant.taskdefs.DynamicTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/DynamicTest.java,59,1,76,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,4,7,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,15,18,6,8,0,0,3,0,3,1,31,7,0,4,1,15,18,6,8,0,0,3,0,3,1,31,7,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class DynamicTest extends BuildFileTest { 
    
    public DynamicTest(String name) { 
        super(name);
    }
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/dynamictask.xml"");
    }

    public void testSimple() {
        executeTarget(""simple"");
        assertEquals(""1"", project.getProperty(""prop1""));
        assertEquals(""2"", project.getProperty(""prop2""));
        assertEquals(""3"", project.getProperty(""prop3""));
        assertEquals(""4"", project.getProperty(""prop4""));
    }
}
"
L38607,Class,EchoTest,org.apache.tools.ant.taskdefs.EchoTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/EchoTest.java,62,1,91,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,1,0,0,3,8,0.5,0.178571,5,5,3,3,0.178571,5,1,1,0,0,1,23,30,6,8,0,0,5,0,5,1,33,5,0,6,1,23,30,6,8,0,0,5,0,5,1,33,5,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class EchoTest extends BuildFileTest { 
    
    public EchoTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/echo.xml"");
    }
    
    
    public void test1() { 
        expectLog(""test1"", """");
    }

    
    public void test2() { 
        expectLog(""test2"", ""OUTPUT OF ECHO"");
    }
    
    public void test3() { 
        expectLog(""test3"", ""\n""+
                              ""    This \n""+
                              ""    is\n""+
                              ""    a \n""+
                              ""    multiline\n""+
                              ""    message\n""+
                              ""    "");
    }
}
"
L38617,Class,ExecTaskTest,org.apache.tools.ant.taskdefs.ExecTaskTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecTaskTest.java,69,1,215,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,10,5,1,0,13,17,0.2,0.173913,12,5,1,4,0.116788,16,1,1,0,0,1,57,69,14,8,8,0,4,0,4,1,32,31,0,5,1,121,147,22,9,16,1,19,0,18,3,47,52,0,19,3,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;

import java.io.File;
import java.io.OutputStream;
import java.util.GregorianCalendar;

import junit.framework.Assert;


public class ExecTaskTest extends BuildFileTest {
    private static final String BUILD_PATH = ""src/etc/testcases/taskdefs/exec/"";
    private static final String BUILD_FILE = BUILD_PATH + ""exec.xml"";
    private final int TIME_TO_WAIT = 4;
    
    private final int MAX_BUILD_TIME = 4000;
    private final int SECURITY_MARGIN = 1000; 
    
    private File logFile;
    private MonitoredBuild myBuild = null;
    volatile private boolean buildFinished = false;
    public ExecTaskTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(BUILD_FILE);
    }

    public void tearDown() {
        if (logFile != null) {
            logFile.delete();
        }
    }

    public void testspawn() {
        project.executeTarget(""init"");
        if (project.getProperty(""test.can.run"") == null) {
            return;
        }
        myBuild = new MonitoredBuild(new File(BUILD_FILE), ""spawn"");
        FileUtils fileutils  = FileUtils.newFileUtils();
        logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        
        myBuild.setTimeToWait(TIME_TO_WAIT);
        myBuild.setLogFile(logFile.getAbsolutePath());
        myBuild.addBuildListener(new MonitoredBuildListener());
        myBuild.start();
        GregorianCalendar startwait = new GregorianCalendar();
        
        while (!buildFinished) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                System.out.println(""my sleep was interrupted"");
            }
            GregorianCalendar now = new GregorianCalendar();
            
            if (now.getTime().getTime() - startwait.getTime().getTime() > MAX_BUILD_TIME) {
                System.out.println(""aborting wait, too long "" + (now.getTime().getTime() - startwait.getTime().getTime()) + ""milliseconds"");
                break;
            }
        }
        
        try {
            Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);
        } catch (InterruptedException e) {
            System.out.println(""my sleep was interrupted"");
        }
        
        long elapsed = myBuild.getTimeElapsed();
        assertTrue(""we waited more than the process lasted"", TIME_TO_WAIT * 1000 > elapsed);
        logFile = new File(logFile.getAbsolutePath());
        assertTrue(""log file found after spawn"", logFile.exists());
    }

    private static class MonitoredBuild implements Runnable {
        private Thread worker;
        private File myBuildFile = null;
        private String target = null;
        private Project project = null;
        private int timeToWait = 0;
        private String logFile = null;
        private GregorianCalendar timeStarted = null;
        private GregorianCalendar timeFinished = null;

        public void setLogFile(String logFile) {
            this.logFile = logFile;
            project.setProperty(""logFile"", logFile);
        }


        public void setTimeToWait(int timeToWait) {
            this.timeToWait = timeToWait;
            project.setProperty(""timeToWait"", Long.toString(timeToWait));
        }

        public void addBuildListener(BuildListener bl) {
            project.addBuildListener(bl);
        }
        public MonitoredBuild(File buildFile, String target) {
            myBuildFile = buildFile;
            this.target = target;
            project=new Project();
            project = new Project();
            project.init();
            project.setUserProperty( ""ant.file"" , myBuildFile.getAbsolutePath() );
            ProjectHelper.configureProject(project, myBuildFile);
        }
        
        public long getTimeElapsed() {
            return timeFinished.getTime().getTime() - timeStarted.getTime().getTime();
        }
        public void start() {
            worker = new Thread(this, myBuildFile.toString() + ""/"" + target);
            worker.start();
        }
        public void run() {
            startProject();
        }
        private void startProject() {
            timeStarted = new GregorianCalendar();
            project.executeTarget(target);
            timeFinished = new GregorianCalendar();
        }
    }
    private class MonitoredBuildListener implements BuildListener {
        public void buildStarted(BuildEvent event) {
        }

        public void buildFinished(BuildEvent event) {
        }

        public void targetStarted(BuildEvent event) {
        }

        public void targetFinished(BuildEvent event) {
            if (event.getTarget().getName().equals(""spawn"")) {
                buildFinished = true;
            }
        }

        public void taskStarted(BuildEvent event) {
        }

        public void taskFinished(BuildEvent event) {
        }

        public void messageLogged(BuildEvent event) {
        }
    }
}
"
L38629,Class,ExecTaskTest$MonitoredBuild,org.apache.tools.ant.taskdefs.ExecTaskTest$MonitoredBuild,L38617,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecTaskTest.java,137,5,189,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,8,3,1,1,7,15,0.125,0.0816327,4,4,1,7,0.0816327,4,0,0,0,0,0,45,53,8,1,8,1,8,0,7,2,8,19,0,7,2,45,53,8,1,8,1,8,0,7,2,8,19,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;

import java.io.File;
import java.io.OutputStream;
import java.util.GregorianCalendar;

import junit.framework.Assert;


public class ExecTaskTest extends BuildFileTest {
    private static final String BUILD_PATH = ""src/etc/testcases/taskdefs/exec/"";
    private static final String BUILD_FILE = BUILD_PATH + ""exec.xml"";
    private final int TIME_TO_WAIT = 4;
    
    private final int MAX_BUILD_TIME = 4000;
    private final int SECURITY_MARGIN = 1000; 
    
    private File logFile;
    private MonitoredBuild myBuild = null;
    volatile private boolean buildFinished = false;
    public ExecTaskTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(BUILD_FILE);
    }

    public void tearDown() {
        if (logFile != null) {
            logFile.delete();
        }
    }

    public void testspawn() {
        project.executeTarget(""init"");
        if (project.getProperty(""test.can.run"") == null) {
            return;
        }
        myBuild = new MonitoredBuild(new File(BUILD_FILE), ""spawn"");
        FileUtils fileutils  = FileUtils.newFileUtils();
        logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        
        myBuild.setTimeToWait(TIME_TO_WAIT);
        myBuild.setLogFile(logFile.getAbsolutePath());
        myBuild.addBuildListener(new MonitoredBuildListener());
        myBuild.start();
        GregorianCalendar startwait = new GregorianCalendar();
        
        while (!buildFinished) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                System.out.println(""my sleep was interrupted"");
            }
            GregorianCalendar now = new GregorianCalendar();
            
            if (now.getTime().getTime() - startwait.getTime().getTime() > MAX_BUILD_TIME) {
                System.out.println(""aborting wait, too long "" + (now.getTime().getTime() - startwait.getTime().getTime()) + ""milliseconds"");
                break;
            }
        }
        
        try {
            Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);
        } catch (InterruptedException e) {
            System.out.println(""my sleep was interrupted"");
        }
        
        long elapsed = myBuild.getTimeElapsed();
        assertTrue(""we waited more than the process lasted"", TIME_TO_WAIT * 1000 > elapsed);
        logFile = new File(logFile.getAbsolutePath());
        assertTrue(""log file found after spawn"", logFile.exists());
    }

    private static class MonitoredBuild implements Runnable {
        private Thread worker;
        private File myBuildFile = null;
        private String target = null;
        private Project project = null;
        private int timeToWait = 0;
        private String logFile = null;
        private GregorianCalendar timeStarted = null;
        private GregorianCalendar timeFinished = null;

        public void setLogFile(String logFile) {
            this.logFile = logFile;
            project.setProperty(""logFile"", logFile);
        }


        public void setTimeToWait(int timeToWait) {
            this.timeToWait = timeToWait;
            project.setProperty(""timeToWait"", Long.toString(timeToWait));
        }

        public void addBuildListener(BuildListener bl) {
            project.addBuildListener(bl);
        }
        public MonitoredBuild(File buildFile, String target) {
            myBuildFile = buildFile;
            this.target = target;
            project=new Project();
            project = new Project();
            project.init();
            project.setUserProperty( ""ant.file"" , myBuildFile.getAbsolutePath() );
            ProjectHelper.configureProject(project, myBuildFile);
        }
        
        public long getTimeElapsed() {
            return timeFinished.getTime().getTime() - timeStarted.getTime().getTime();
        }
        public void start() {
            worker = new Thread(this, myBuildFile.toString() + ""/"" + target);
            worker.start();
        }
        public void run() {
            startProject();
        }
        private void startProject() {
            timeStarted = new GregorianCalendar();
            project.executeTarget(target);
            timeFinished = new GregorianCalendar();
        }
    }
    private class MonitoredBuildListener implements BuildListener {
        public void buildStarted(BuildEvent event) {
        }

        public void buildFinished(BuildEvent event) {
        }

        public void targetStarted(BuildEvent event) {
        }

        public void targetFinished(BuildEvent event) {
            if (event.getTarget().getName().equals(""spawn"")) {
                buildFinished = true;
            }
        }

        public void taskStarted(BuildEvent event) {
        }

        public void taskFinished(BuildEvent event) {
        }

        public void messageLogged(BuildEvent event) {
        }
    }
}
"
L38650,Class,ExecTaskTest$MonitoredBuildListener,org.apache.tools.ant.taskdefs.ExecTaskTest$MonitoredBuildListener,L38617,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecTaskTest.java,190,5,214,6,0.0,0,0,0,0.0,0.0,0,0,7,1,1,8,4,1,0,2,9,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,19,25,0,0,0,0,7,0,7,0,7,2,0,7,0,19,25,0,0,0,0,7,0,7,0,7,2,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;

import java.io.File;
import java.io.OutputStream;
import java.util.GregorianCalendar;

import junit.framework.Assert;


public class ExecTaskTest extends BuildFileTest {
    private static final String BUILD_PATH = ""src/etc/testcases/taskdefs/exec/"";
    private static final String BUILD_FILE = BUILD_PATH + ""exec.xml"";
    private final int TIME_TO_WAIT = 4;
    
    private final int MAX_BUILD_TIME = 4000;
    private final int SECURITY_MARGIN = 1000; 
    
    private File logFile;
    private MonitoredBuild myBuild = null;
    volatile private boolean buildFinished = false;
    public ExecTaskTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(BUILD_FILE);
    }

    public void tearDown() {
        if (logFile != null) {
            logFile.delete();
        }
    }

    public void testspawn() {
        project.executeTarget(""init"");
        if (project.getProperty(""test.can.run"") == null) {
            return;
        }
        myBuild = new MonitoredBuild(new File(BUILD_FILE), ""spawn"");
        FileUtils fileutils  = FileUtils.newFileUtils();
        logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        
        myBuild.setTimeToWait(TIME_TO_WAIT);
        myBuild.setLogFile(logFile.getAbsolutePath());
        myBuild.addBuildListener(new MonitoredBuildListener());
        myBuild.start();
        GregorianCalendar startwait = new GregorianCalendar();
        
        while (!buildFinished) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                System.out.println(""my sleep was interrupted"");
            }
            GregorianCalendar now = new GregorianCalendar();
            
            if (now.getTime().getTime() - startwait.getTime().getTime() > MAX_BUILD_TIME) {
                System.out.println(""aborting wait, too long "" + (now.getTime().getTime() - startwait.getTime().getTime()) + ""milliseconds"");
                break;
            }
        }
        
        try {
            Thread.sleep((TIME_TO_WAIT) * 1000 + SECURITY_MARGIN);
        } catch (InterruptedException e) {
            System.out.println(""my sleep was interrupted"");
        }
        
        long elapsed = myBuild.getTimeElapsed();
        assertTrue(""we waited more than the process lasted"", TIME_TO_WAIT * 1000 > elapsed);
        logFile = new File(logFile.getAbsolutePath());
        assertTrue(""log file found after spawn"", logFile.exists());
    }

    private static class MonitoredBuild implements Runnable {
        private Thread worker;
        private File myBuildFile = null;
        private String target = null;
        private Project project = null;
        private int timeToWait = 0;
        private String logFile = null;
        private GregorianCalendar timeStarted = null;
        private GregorianCalendar timeFinished = null;

        public void setLogFile(String logFile) {
            this.logFile = logFile;
            project.setProperty(""logFile"", logFile);
        }


        public void setTimeToWait(int timeToWait) {
            this.timeToWait = timeToWait;
            project.setProperty(""timeToWait"", Long.toString(timeToWait));
        }

        public void addBuildListener(BuildListener bl) {
            project.addBuildListener(bl);
        }
        public MonitoredBuild(File buildFile, String target) {
            myBuildFile = buildFile;
            this.target = target;
            project=new Project();
            project = new Project();
            project.init();
            project.setUserProperty( ""ant.file"" , myBuildFile.getAbsolutePath() );
            ProjectHelper.configureProject(project, myBuildFile);
        }
        
        public long getTimeElapsed() {
            return timeFinished.getTime().getTime() - timeStarted.getTime().getTime();
        }
        public void start() {
            worker = new Thread(this, myBuildFile.toString() + ""/"" + target);
            worker.start();
        }
        public void run() {
            startProject();
        }
        private void startProject() {
            timeStarted = new GregorianCalendar();
            project.executeTarget(target);
            timeFinished = new GregorianCalendar();
        }
    }
    private class MonitoredBuildListener implements BuildListener {
        public void buildStarted(BuildEvent event) {
        }

        public void buildFinished(BuildEvent event) {
        }

        public void targetStarted(BuildEvent event) {
        }

        public void targetFinished(BuildEvent event) {
            if (event.getTarget().getName().equals(""spawn"")) {
                buildFinished = true;
            }
        }

        public void taskStarted(BuildEvent event) {
        }

        public void taskFinished(BuildEvent event) {
        }

        public void messageLogged(BuildEvent event) {
        }
    }
}
"
L38701,Class,ExecuteJavaTest,org.apache.tools.ant.taskdefs.ExecuteJavaTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecuteJavaTest.java,73,1,149,2,0.249084,1,3,1,0.220779,0.245614,17,14,1,1,1,8,7,0,0,13,19,0.5,0.185714,13,12,2,2,0.185714,13,0,0,0,0,0,57,77,5,2,5,2,6,0,3,1,6,29,0,3,1,57,77,5,2,5,2,6,0,3,1,6,29,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.TestCase;


public class ExecuteJavaTest extends TestCase {

    private final static int TIME_OUT = 5000;

    private final static int CLOCK_ERROR=200;
    private final static int TIME_OUT_TEST=TIME_OUT-CLOCK_ERROR;
    
    private ExecuteJava ej;
    private Project project;

    public ExecuteJavaTest(String name) {
        super(name);
    }

    protected void setUp(){
        ej = new ExecuteJava();
        ej.setTimeout(new Long(TIME_OUT));
        project = new Project();
        project.setBasedir(""."");
        ej.setClasspath(new Path(project, getTestClassPath()));
    }

    private Commandline getCommandline(int timetorun) throws Exception {
        Commandline cmd = new Commandline();
        cmd.setExecutable(TimeProcess.class.getName());
        cmd.createArgument().setValue(String.valueOf(timetorun));
        return cmd;
    }

    public void testNoTimeOut() throws Exception {
        Commandline cmd = getCommandline(TIME_OUT/2);
        ej.setJavaCommand(cmd);
        ej.execute(project);
        assertTrue(""process should not have been killed"", !ej.killedProcess());
    }

    
    public void testTimeOut() throws Exception {
        Commandline cmd = getCommandline(TIME_OUT*2);
        ej.setJavaCommand(cmd);
        long now = System.currentTimeMillis();
        ej.execute(project);
        long elapsed = System.currentTimeMillis() - now;
        assertTrue(""process should have been killed"", ej.killedProcess());

        assertTrue(""elapse time of ""+elapsed
                   +"" ms is less than timeout value of ""+TIME_OUT_TEST+"" ms"", 
                   elapsed >= TIME_OUT_TEST);
        assertTrue(""elapse time of ""+elapsed
                   +"" ms is greater than run value of ""+(TIME_OUT*2)+"" ms"", 
                   elapsed < TIME_OUT*2);
    }


    
    private static String getTestClassPath(){
        String classpath = System.getProperty(""build.tests"");
        if (classpath == null) {
            System.err.println(""WARNING: 'build.tests' property is not available !"");
            classpath = System.getProperty(""java.class.path"");
        }

        
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            classpath +=   File.pathSeparator
                + System.getProperty(""java.home"")
                + File.separator + ""lib""
                + File.separator + ""classes.zip"";
        }

        return classpath;
    }

}
"
L38728,Class,ExecuteWatchdogTest,org.apache.tools.ant.taskdefs.ExecuteWatchdogTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecuteWatchdogTest.java,68,1,200,2,0.146868,1,3,1,0.12782,0.14433,17,14,1,2,2,15,3,0,0,6,16,0.5,0.181818,20,11,3,3,0.177966,21,0,0,0,0,0,90,125,5,3,5,3,10,0,5,1,10,51,0,5,1,97,133,5,3,5,3,11,0,6,1,11,54,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.util.JavaEnvUtils;

import java.net.*;
import junit.framework.*;
import java.io.*;


public class ExecuteWatchdogTest extends TestCase {

    private final static int TIME_OUT = 5000;

    private final static String TEST_CLASSPATH = getTestClassPath();

    private final static int CLOCK_ERROR=200;
    private final static int TIME_OUT_TEST=TIME_OUT-CLOCK_ERROR;
    
    private ExecuteWatchdog watchdog;

    public ExecuteWatchdogTest(String name) {
        super(name);
    }

    protected void setUp(){
        watchdog = new ExecuteWatchdog(TIME_OUT);
    }

    
    private static String getTestClassPath(){
        String classpath = System.getProperty(""build.tests"");
        if (classpath == null) {
            System.err.println(""WARNING: 'build.tests' property is not available !"");
            classpath = System.getProperty(""java.class.path"");
        }

        
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            classpath +=   File.pathSeparator
                + System.getProperty(""java.home"")
                + File.separator + ""lib""
                + File.separator + ""classes.zip"";
        }

        return classpath;
    }

    private Process getProcess(int timetorun) throws Exception {
        String[] cmdArray = {
            JavaEnvUtils.getJreExecutable(""java""), ""-classpath"", TEST_CLASSPATH,
            TimeProcess.class.getName(), String.valueOf(timetorun)
        };
        
        return Runtime.getRuntime().exec(cmdArray);
    }

    private String getErrorOutput(Process p) throws Exception {
        BufferedReader err = new BufferedReader( new InputStreamReader(p.getErrorStream()) );
        StringBuffer buf = new StringBuffer();
        String line;
        while ( (line = err.readLine()) != null){
            buf.append(line);
        }
        return buf.toString();
    }
    
    private int waitForEnd(Process p) throws Exception {
        int retcode = p.waitFor();
        if (retcode != 0){
            String err = getErrorOutput(p);
            if (err.length() > 0){
                System.err.println(""ERROR:"");
                System.err.println(err);
            }
        }
        return retcode;
    }

    public void testNoTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT/2);
        watchdog.start(process);
        int retCode = waitForEnd(process);
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertEquals(0, retCode);
    }

    
    public void testTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT*2);
        long now = System.currentTimeMillis();
        watchdog.start(process);
        int retCode = process.waitFor();
        long elapsed = System.currentTimeMillis() - now;
        assertTrue(""process should have been killed"", watchdog.killedProcess());
                
        assertTrue(""elapse time of ""+elapsed+"" ms is less than timeout value of ""+TIME_OUT_TEST+"" ms"", elapsed >= TIME_OUT_TEST);
        assertTrue(""elapse time of ""+elapsed+"" ms is greater than run value of ""+(TIME_OUT*2)+"" ms"", elapsed < TIME_OUT*2);
    }

    
    public void testFailed() throws Exception {
        Process process = getProcess(-1); 
        watchdog.start(process);
        int retCode = process.waitFor();
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertTrue(""return code is invalid: "" + retCode, retCode!=0);
    }

    public void testManualStop() throws Exception {
        final Process process = getProcess(TIME_OUT*2);
        watchdog.start(process);

        
        Thread thread = new Thread(){
                public void run(){
                    try {
                        process.waitFor();
                    } catch(InterruptedException e){
                        
                        fail(""process interrupted in thread"");
                    }
                }
        };
        thread.start();

        
        thread.join(TIME_OUT/2);

         
        watchdog.stop();

        
        thread.join();

        
        assertEquals(0, process.exitValue());
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
    }
}
"
L38765,Class,ExecuteWatchdogTest$1,org.apache.tools.ant.taskdefs.ExecuteWatchdogTest$1,L38762,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecuteWatchdogTest.java,175,37,184,10,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.1,1,0,0,2,0.1,1,0,0,0,0,0,9,10,0,0,0,0,1,0,1,0,1,3,0,1,0,9,10,0,0,0,0,1,0,1,0,1,3,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.util.JavaEnvUtils;

import java.net.*;
import junit.framework.*;
import java.io.*;


public class ExecuteWatchdogTest extends TestCase {

    private final static int TIME_OUT = 5000;

    private final static String TEST_CLASSPATH = getTestClassPath();

    private final static int CLOCK_ERROR=200;
    private final static int TIME_OUT_TEST=TIME_OUT-CLOCK_ERROR;
    
    private ExecuteWatchdog watchdog;

    public ExecuteWatchdogTest(String name) {
        super(name);
    }

    protected void setUp(){
        watchdog = new ExecuteWatchdog(TIME_OUT);
    }

    
    private static String getTestClassPath(){
        String classpath = System.getProperty(""build.tests"");
        if (classpath == null) {
            System.err.println(""WARNING: 'build.tests' property is not available !"");
            classpath = System.getProperty(""java.class.path"");
        }

        
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            classpath +=   File.pathSeparator
                + System.getProperty(""java.home"")
                + File.separator + ""lib""
                + File.separator + ""classes.zip"";
        }

        return classpath;
    }

    private Process getProcess(int timetorun) throws Exception {
        String[] cmdArray = {
            JavaEnvUtils.getJreExecutable(""java""), ""-classpath"", TEST_CLASSPATH,
            TimeProcess.class.getName(), String.valueOf(timetorun)
        };
        
        return Runtime.getRuntime().exec(cmdArray);
    }

    private String getErrorOutput(Process p) throws Exception {
        BufferedReader err = new BufferedReader( new InputStreamReader(p.getErrorStream()) );
        StringBuffer buf = new StringBuffer();
        String line;
        while ( (line = err.readLine()) != null){
            buf.append(line);
        }
        return buf.toString();
    }
    
    private int waitForEnd(Process p) throws Exception {
        int retcode = p.waitFor();
        if (retcode != 0){
            String err = getErrorOutput(p);
            if (err.length() > 0){
                System.err.println(""ERROR:"");
                System.err.println(err);
            }
        }
        return retcode;
    }

    public void testNoTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT/2);
        watchdog.start(process);
        int retCode = waitForEnd(process);
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertEquals(0, retCode);
    }

    
    public void testTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT*2);
        long now = System.currentTimeMillis();
        watchdog.start(process);
        int retCode = process.waitFor();
        long elapsed = System.currentTimeMillis() - now;
        assertTrue(""process should have been killed"", watchdog.killedProcess());
                
        assertTrue(""elapse time of ""+elapsed+"" ms is less than timeout value of ""+TIME_OUT_TEST+"" ms"", elapsed >= TIME_OUT_TEST);
        assertTrue(""elapse time of ""+elapsed+"" ms is greater than run value of ""+(TIME_OUT*2)+"" ms"", elapsed < TIME_OUT*2);
    }

    
    public void testFailed() throws Exception {
        Process process = getProcess(-1); 
        watchdog.start(process);
        int retCode = process.waitFor();
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertTrue(""return code is invalid: "" + retCode, retCode!=0);
    }

    public void testManualStop() throws Exception {
        final Process process = getProcess(TIME_OUT*2);
        watchdog.start(process);

        
        Thread thread = new Thread(){
                public void run(){
                    try {
                        process.waitFor();
                    } catch(InterruptedException e){
                        
                        fail(""process interrupted in thread"");
                    }
                }
        };
        thread.start();

        
        thread.join(TIME_OUT/2);

         
        watchdog.stop();

        
        thread.join();

        
        assertEquals(0, process.exitValue());
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
    }
}
"
L38767,Class,FailTest,org.apache.tools.ant.taskdefs.FailTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/FailTest.java,64,1,143,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,12,3,0,0,7,16,0.3,0.213333,16,14,3,7,0.213333,16,1,1,0,0,1,59,80,6,8,0,0,9,0,9,1,37,24,0,10,1,59,80,6,8,0,0,9,0,9,1,37,24,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;


public class FailTest extends BuildFileTest { 
    
    public FailTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/fail.xml"");
    }

    public void test1() { 
        expectBuildExceptionContaining(""test1"",
                ""it is required to fail :-)"",
                ""No message"");
    }

    public void test2() { 
        expectSpecificBuildException(""test2"", 
            ""it is required to fail :-)"",
            ""test2"");
    }
    
    public void testText() { 
        expectSpecificBuildException(""testText"",
            ""it is required to fail :-)"",
            ""testText"");
    }
    
    public void testIf() {
        try {
            executeTarget(""testIf"");
        } catch (BuildException be) {
            fail(""foo has not been defined, testIf must not fail"");
        }
        project.setProperty(""foo"", """");
        expectBuildException(""testIf"", ""testIf must fail if foo has been set"");
    }

    public void testUnless() {
        expectBuildException(""testUnless"", 
                             ""testUnless must fail unless foo has been set"");
        project.setProperty(""foo"", """");
        try {
            executeTarget(""testUnless"");
        } catch (BuildException be) {
            fail(""foo has been defined, testUnless must not fail"");
        }
    }

    
    public void testIfAndUnless() {
        
        executeTarget(""testIfAndUnless"");
        project.setProperty(""if"", """");
        expectBuildExceptionContaining(""testIfAndUnless"",
                ""expect fail on defined(if)"",
                ""if=if and unless=unless"");
        project.setProperty(""unless"", """");
        
        executeTarget(""testIfAndUnless"");
    }
    
    public void testIfAndUnless2() {
        project.setProperty(""unless"", """");
        try {
            executeTarget(""testIfAndUnless"");
        } catch (BuildException be) {
            fail(""defined(if) && !defined(unless); testIfAndUnless must not fail"");
        }
    }

}
"
L38781,Class,FilterTest,org.apache.tools.ant.taskdefs.FilterTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/FilterTest.java,67,1,151,2,0.0,0,0,0,0.0,0.0,0,0,2,2,2,16,1,0,0,5,18,0.0769231,0.0410959,3,3,1,12,0.0410959,3,1,1,0,0,1,70,85,6,9,0,1,13,0,12,1,41,31,0,13,1,70,85,6,9,0,1,13,0,12,1,41,31,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import org.apache.tools.ant.BuildFileTest;


public class FilterTest extends BuildFileTest { 
      
    public FilterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/filter.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }
    
    public void test4() { 
        executeTarget(""test4"");
    }
    
    public void test5() {
        executeTarget(""test5"");
        assertEquals(""2000"",
                     getFilteredFile(""5"", ""filtered.tmp""));
    }
    

    public void test6() {
        executeTarget(""test6"");
        assertEquals(""2000"",
                     getFilteredFile(""6"", ""taskdefs.tmp/filter1.txt""));
    }

    public void test7() {
        executeTarget(""test7"");
        assertEquals(""<%@ include file=\""root/some/include.jsp\""%>"",
                     getFilteredFile(""7"", ""filtered.tmp""));
    }

    public void test8() {
        executeTarget(""test8"");
        assertEquals(""<%@ include file=\""root/some/include.jsp\""%>"",
                     getFilteredFile(""8"", ""taskdefs.tmp/filter2.txt""));
    }
    
    public void test9() {
        executeTarget(""test9"");
        assertEquals(""included"",
                    getFilteredFile(""9"", ""taskdefs.tmp/filter3.txt""));
    }
        
    private String getFilteredFile(String testNumber, String filteredFile) {
    
        String line = null;
        File f = new File(getProjectDir(), filteredFile);
        if (!f.exists()) {
            fail(""filter test""+testNumber+"" failed"");
        } else {
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException fnfe) {
                fail(""filter test""+testNumber+"" failed, filtered file: "" + f.toString() + "" not found"");
            }
            try {
                line = in.readLine();
                in.close();
            } catch (IOException ioe) {
                fail(""filter test""+testNumber+"" failed.  IOException while reading filtered file: "" + ioe);
            }
        }
        f.delete();
        return line;
    }
}
"
L38800,Class,FixCrLfTest,org.apache.tools.ant.taskdefs.FixCrLfTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/FixCrLfTest.java,68,1,243,2,0.225108,1,5,1,0.153409,0.18797,27,25,1,2,2,27,2,0,0,4,25,0.0909091,0.136364,21,10,2,20,0.136364,21,1,1,0,0,1,133,176,6,8,0,0,21,0,21,1,49,62,0,22,1,133,176,6,8,0,0,21,0,21,1,49,62,0,22,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.*;

import junit.framework.AssertionFailedError;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.JavaEnvUtils;


public class FixCrLfTest extends BuildFileTest {

    public FixCrLfTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/fixcrlf/build.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void test1() throws IOException { 
        executeTarget(""test1"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk1.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java""));
    }
    
    public void test2() throws IOException { 
        executeTarget(""test2"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk2.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk2.java""));
    }
    
    public void test3() throws IOException { 
        executeTarget(""test3"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk3.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk3.java""));
    }
    
    public void test4() throws IOException { 
        executeTarget(""test4"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk4.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk4.java""));
    }
    
    public void test5() throws IOException { 
        executeTarget(""test5"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk5.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk5.java""));
    }
    
    public void test6() throws IOException { 
        executeTarget(""test6"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk6.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk6.java""));
    }
    
    public void test7() throws IOException { 
        executeTarget(""test7"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk7.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk7.java""));
    }
    
    public void test8() throws IOException {  
        executeTarget(""test8"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk8.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk8.java""));
    }
    
    public void test9() throws IOException { 
        executeTarget(""test9"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk9.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk9.java""));
    }
    
    public void testMacLines() throws IOException { 
        executeTarget(""testMacLines"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Mac2Unix""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Mac2Unix""));
    }

    public void testNoOverwrite() throws IOException {
        executeTarget(""test1"");
        File result = 
            new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java"");
        long modTime = result.lastModified();

        
        try {
            Thread.currentThread().sleep(5000);
        } catch (InterruptedException ie) {
            fail(ie.getMessage());
        } 

        
        configureProject(""src/etc/testcases/taskdefs/fixcrlf/build.xml"");

        executeTarget(""test1"");
        result = 
            new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java"");
        assertEquals(modTime, result.lastModified());
    }

    public void testEncoding() throws IOException { 
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            
            return;
        }
        executeTarget(""testEncoding"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/input.lf.utf16""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/input.crlf.utf16""));
    }
    
    public void testLongLines() throws IOException { 
        executeTarget(""testLongLines"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/longlines.lf""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/longlines.crlf""));
    }
    
    public void testCrCrLfSequenceUnix() throws IOException {
        executeTarget(""testCrCrLfSequence-unix"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/crcrlf.unix""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/crcrlf""));
    }

    public void testCrCrLfSequenceDos() throws IOException {
        executeTarget(""testCrCrLfSequence-dos"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/crcrlf.dos""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/crcrlf""));
    }

    public void testCrCrLfSequenceMac() throws IOException {
        executeTarget(""testCrCrLfSequence-mac"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/crcrlf.mac""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/crcrlf""));
    }

    
    public void testCreateParentDirs() { 
        executeTarget(""createParentDirs"");
    }

    public void assertEqualContent(File expect, File result) 
        throws AssertionFailedError, IOException {
        if (!result.exists()) {
            fail(""Expected file ""+result+"" doesn\'t exist"");
        }

        InputStream inExpect = null;
        InputStream inResult = null;
        try {
            inExpect = new BufferedInputStream(new FileInputStream(expect));
            inResult = new BufferedInputStream(new FileInputStream(result));

            int expectedByte = inExpect.read();
            while (expectedByte != -1) {
                assertEquals(expectedByte, inResult.read());
                expectedByte = inExpect.read();
            }
            assertEquals(""End of file"", -1, inResult.read());
        } finally {
            if (inResult != null) {
                inResult.close();
            }
            if (inExpect != null) {
                inExpect.close();
            }
        }
    }

}
"
L38839,Class,GUnzipTest,org.apache.tools.ant.taskdefs.GUnzipTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/GUnzipTest.java,65,1,101,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,3,0,0,7,14,0.125,0.147059,5,5,1,7,0.147059,5,1,1,0,0,1,29,37,6,8,0,0,7,0,7,1,35,11,0,8,1,29,37,6,8,0,0,7,0,7,1,35,11,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;
 
import java.io.File;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class GUnzipTest extends BuildFileTest { 
    
    public GUnzipTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/gunzip.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""attribute src invalid"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
    public void testTestGzipTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testGzipTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
}
"
L38828,Class,GetTest,org.apache.tools.ant.taskdefs.GetTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/GetTest.java,63,1,104,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,1,0,0,5,13,0.111111,0.0857143,3,3,1,8,0.0857143,3,1,1,0,0,1,32,42,6,9,0,1,8,0,8,1,36,12,0,9,1,32,42,6,9,0,1,8,0,8,1,36,12,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class GetTest extends BuildFileTest { 
    
    public GetTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/get.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""src invalid"");
    }

    public void test5() { 
        expectBuildException(""test5"", ""dest invalid (or no http-server on local machine)"");
    }

    public void test6() { 
        executeTarget(""test6"");
        java.io.File f = new File(getProjectDir(), ""get.tmp"");
        if (!f.exists()) { 
            fail(""get failed"");
        } else {
            f.delete();
        }
        
    }
    
}
"
L38849,Class,GzipTest,org.apache.tools.ant.taskdefs.GzipTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/GzipTest.java,63,1,110,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,9,1,0,0,5,14,0.1,0.0731707,3,3,1,9,0.0731707,3,1,1,0,0,1,38,48,6,8,0,0,9,0,9,1,37,14,0,10,1,38,48,6,8,0,0,9,0,9,1,37,14,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;
 

public class GzipTest extends BuildFileTest { 
    
    public GzipTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/gzip.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""zipfile must not point to a directory"");
    }

    public void testGZip(){
        executeTarget(""realTest"");
        String log = getLog();
        assertTrue(""Expecting message starting with 'Building:' but got '""
            + log + ""'"", log.startsWith(""Building:""));
        assertTrue(""Expecting message ending with 'asf-logo.gif.gz' but got '""
            + log + ""'"", log.endsWith(""asf-logo.gif.gz""));
    }

    public void testDateCheck(){
        executeTarget(""testDateCheck"");
        String log = getLog();
        assertTrue(
            ""Expecting message ending with 'asf-logo.gif.gz is up to date.' but got '"" + log + ""'"",
            log.endsWith(""asf-logo.gif.gz is up to date.""));
    }

    public void tearDown(){
        executeTarget(""cleanup"");
    }

}
"
L38861,Class,ImportTest,org.apache.tools.ant.taskdefs.ImportTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ImportTest.java,65,1,146,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,12,4,0,0,12,23,0.25,0.0675676,5,5,3,9,0.0675676,5,1,1,0,0,1,69,82,6,8,0,0,11,0,11,1,39,27,0,12,1,69,82,6,8,0,0,11,0,11,1,39,27,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Location;
import org.apache.tools.ant.Project;


public class ImportTest extends BuildFileTest {

    public ImportTest(String name) {
        super(name);
    }

    public void setUp() {
    }

    public void tearDown() {
    }

    public void testSimpleImport() {
        configureProject(""src/etc/testcases/taskdefs/import/import.xml"");
        assertLogContaining(""Before importIn imported topAfter import"");
    }

    public void testUnnamedNesting() {
        configureProject(""src/etc/testcases/taskdefs/import/unnamedImport.xml"",
                         Project.MSG_WARN);
        String log = getLog();
        assertTrue(""Warnings logged when not expected: "" + log,
                    log.length() == 0);
    }

    public void testSerial() {
        configureProject(""src/etc/testcases/taskdefs/import/subdir/serial.xml"");
        assertLogContaining(
            ""Unnamed2.xmlUnnamed1.xmlSkipped already imported file"");
    }

    
    public void testImportInTargetNoEffect() {
        configureProject(""src/etc/testcases/taskdefs/import/subdir/importintarget.xml"");
        expectPropertyUnset(""no-import"", ""foo"");
        assertTrue(null == getProject().getReference(""baz""));
    }

    
    public void notTestImportInTargetWithEffect() {
        configureProject(""src/etc/testcases/taskdefs/import/subdir/importintarget.xml"");
        expectPropertySet(""do-import"", ""foo"", ""bar"");
        assertNotNull(getProject().getReference(""baz""));
    }
    
    public void testImportInTargetNotAllowed() {
        configureProject(
            ""src/etc/testcases/taskdefs/import/subdir/importintarget.xml"");
        expectBuildExceptionContaining(
            ""do-import"", ""not a top level task"",
            ""import only allowed as a top-level task"");
    }

    public void testImportInSequential() {
        configureProject(
            ""src/etc/testcases/taskdefs/import/subdir/importinsequential.xml"");
        expectPropertySet(""within-imported"", ""foo"", ""bar"");
        assertNotNull(getProject().getReference(""baz""));
    }

    public void testImportError() {
        try {
            configureProject(
                ""src/etc/testcases/taskdefs/import/import_bad_import.xml"");
        } catch (BuildException ex) {
            Location lo = ex.getLocation();
            assertTrue(
                ""expected location of build exception to be set"",
                (lo != null));
            assertTrue(
                ""expected location to contain calling file"",
                lo.getFileName().indexOf(""import_bad_import.xml"") != -1);
            assertTrue(
                ""expected message of ex to contain called file"",
                ex.getMessage().indexOf(""bad.xml"") != -1);
            return;
        }
        assertTrue(
            ""Did not see build exception"",
            false);
    }
}

"
L38879,Class,InitializeClassTest,org.apache.tools.ant.taskdefs.InitializeClassTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/InitializeClassTest.java,71,1,101,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,4,3,0,0,6,10,0.2,0.181818,6,6,1,4,0.181818,6,1,1,0,0,1,27,31,6,8,0,0,4,0,4,1,32,17,0,5,1,27,31,6,8,0,0,4,0,4,1,32,17,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class InitializeClassTest extends BuildFileTest {

    public InitializeClassTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/initializeclass.xml"");
    }

    public void testAll() throws IOException {
        executeTarget(""forked"");
        PrintStream ps = System.out;
        File f1 = new File(""src/etc/testcases/taskdefs/forkedout"");
        File f2 = new File(""src/etc/testcases/taskdefs/unforkedout"");
        PrintStream newps = new PrintStream(new FileOutputStream(f2));
        System.setOut(newps);
        project.executeTarget(""unforked"");
        System.setOut(ps);
        newps.close();
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(""Forked - non-forked mismatch"", fu.contentEquals(f1, f2));
    }

    public void tearDown() {
        File f1 = new File(""src/etc/testcases/taskdefs/forkedout"");
        File f2 = new File(""src/etc/testcases/taskdefs/unforkedout"");
        f1.delete();
        f2.delete();
    }
}
"
L38886,Class,InputTest,org.apache.tools.ant.taskdefs.InputTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/InputTest.java,65,1,118,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,10,4,0,0,10,18,0.125,0.0833333,4,4,1,7,0.0833333,4,1,1,0,0,1,44,54,7,9,1,1,8,0,7,1,36,15,0,8,1,44,54,7,9,1,1,8,0,7,1,36,15,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.util.JavaEnvUtils;


public class InputTest extends BuildFileTest {

    private String targetPostfix = """";

    public InputTest(String name) {
        super(name);
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            targetPostfix = "".1"";
        }
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/input.xml"");
        System.getProperties()
            .put(PropertyFileInputHandler.FILE_NAME_KEY,
                 getProject().resolveFile(""input.properties"")
                 .getAbsolutePath());
        getProject().setInputHandler(new PropertyFileInputHandler());
    }

    public void test1() {
        executeTarget(""test1"" + targetPostfix);
    }

    public void test2() {
        executeTarget(""test2"" + targetPostfix);
    }

    public void test3() {
        expectSpecificBuildException(""test3"" + targetPostfix, ""invalid input"",
                                     ""Found invalid input test for \'""
                                     + getKey(""All data is""
                                              + "" going to be deleted from DB""
                                              + "" continue?"")
                                     + ""\'"");
    }

    public void test5() {
        executeTarget(""test5"" + targetPostfix);
    }

    public void test6() {
        executeTarget(""test6"" + targetPostfix);
        assertEquals(""scott"", project.getProperty(""db.user""));
    }

    private String getKey(String key) {
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            key = key.replace(' ', '_');
        }
        return key;
    }

}
"
L38901,Class,JarTest,org.apache.tools.ant.taskdefs.JarTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/JarTest.java,74,1,298,2,0.052795,1,5,1,0.0533333,0.0631579,12,12,2,5,3,43,5,0,0,9,37,0.111111,0.035533,7,5,3,24,0.035533,7,1,1,0,0,1,190,225,10,8,4,0,28,0,26,1,56,96,0,27,1,190,225,10,8,4,0,28,0,26,1,56,96,0,27,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Date;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.taskdefs.condition.Os;


public class JarTest extends BuildFileTest {

    private static String tempJar = ""tmp.jar"";
    private static String tempDir = ""jartmp/"";
    private Reader r1, r2;

    public JarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/jar.xml"");
    }

    public void tearDown() {
        if (r1 != null) {
            try {
                r1.close();
            } catch (IOException e) {
            }
        }
        if (r2 != null) {
            try {
                r2.close();
            } catch (IOException e) {
            }
        }
        
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() {
        expectBuildException(""test2"", ""manifest file does not exist"");
    }

    public void test3() {
        expectBuildException(""test3"", ""Unrecognized whenempty attribute: format C: /y"");
    }

    public void test4() {
        executeTarget(""test4"");
        File jarFile = new File(getProjectDir(), tempJar);
        assertTrue(jarFile.exists());
    }

    public void testNoRecreateWithoutUpdate() {
        testNoRecreate(""test4"");
    }

    public void testNoRecreateWithUpdate() {
        testNoRecreate(""testNoRecreateWithUpdate"");
    }

    private void testNoRecreate(String secondTarget) {
        executeTarget(""test4"");
        File jarFile = new File(getProjectDir(), tempJar);
        long jarModifiedDate = jarFile.lastModified();
        try {
            Thread.currentThread().sleep(2500);
        } catch (InterruptedException e) {
        } 
        executeTarget(secondTarget);
        assertEquals(""jar has not been recreated in "" + secondTarget,
                     jarModifiedDate, jarFile.lastModified());
    }

    public void testRecreateWithoutUpdateAdditionalFiles() {
        testRecreate(""test4"", ""testRecreateWithoutUpdateAdditionalFiles"");
    }

    public void testRecreateWithUpdateAdditionalFiles() {
        testRecreate(""test4"", ""testRecreateWithUpdateAdditionalFiles"");
    }

    public void testRecreateWithoutUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateWithoutUpdateNewerFile"");
    }

    public void testRecreateWithUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateWithUpdateNewerFile"");
    }

    private void testRecreate(String firstTarget, String secondTarget) {
        executeTarget(firstTarget);
        int sleeptime = 2500;
        if (Os.isFamily(""windows"")) {
            sleeptime += 2500;
        }
        try {
            Thread.currentThread().sleep(sleeptime);
        } catch (InterruptedException e) {
        } 
        File jarFile = new File(getProjectDir(), tempJar);
        long jarModifiedDate = jarFile.lastModified();
        executeTarget(secondTarget);
        jarFile = new File(getProjectDir(), tempJar);
        assertTrue(""jar has been recreated in "" + secondTarget,
                   jarModifiedDate < jarFile.lastModified());
    }

    public void testManifestStaysIntact() 
        throws IOException, ManifestException {
        executeTarget(""testManifestStaysIntact"");

        r1 = new FileReader(getProject()
                            .resolveFile(tempDir + ""manifest""));
        r2 = new FileReader(getProject()
                            .resolveFile(tempDir + ""META-INF/MANIFEST.MF""));
        Manifest mf1 = new Manifest(r1);
        Manifest mf2 = new Manifest(r2);
        assertEquals(mf1, mf2);
    }

    public void testNoRecreateBasedirExcludesWithUpdate() {
        testNoRecreate(""testNoRecreateBasedirExcludesWithUpdate"");
    }

    public void testNoRecreateBasedirExcludesWithoutUpdate() {
        testNoRecreate(""testNoRecreateBasedirExcludesWithoutUpdate"");
    }

    public void testNoRecreateZipfilesetExcludesWithUpdate() {
        testNoRecreate(""testNoRecreateZipfilesetExcludesWithUpdate"");
    }

    public void testNoRecreateZipfilesetExcludesWithoutUpdate() {
        testNoRecreate(""testNoRecreateZipfilesetExcludesWithoutUpdate"");
    }

    public void testRecreateZipfilesetWithoutUpdateAdditionalFiles() {
        testRecreate(""test4"",
                     ""testRecreateZipfilesetWithoutUpdateAdditionalFiles"");
    }

    public void testRecreateZipfilesetWithUpdateAdditionalFiles() {
        testRecreate(""test4"",
                     ""testRecreateZipfilesetWithUpdateAdditionalFiles"");
    }

    public void testRecreateZipfilesetWithoutUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateZipfilesetWithoutUpdateNewerFile"");
    }

    public void testRecreateZipfilesetWithUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateZipfilesetWithUpdateNewerFile"");
    }

    public void testCreateWithEmptyFileset() {
        executeTarget(""testCreateWithEmptyFilesetSetUp"");
        executeTarget(""testCreateWithEmptyFileset"");
        executeTarget(""testCreateWithEmptyFileset"");
    }

    public void testUpdateIfOnlyManifestHasChanged() {
        executeTarget(""testUpdateIfOnlyManifestHasChanged"");
        File jarXml = getProject().resolveFile(tempDir + ""jar.xml"");
        assertTrue(jarXml.exists());
    }

    
    public void testNoDuplicateIndex() throws IOException {
        ZipFile archive = null;
        try {
            executeTarget(""testIndexTests"");
            archive = new ZipFile(getProject().resolveFile(tempJar));
            Enumeration enum = archive.entries();
            int numberOfIndexLists = 0;
            while (enum.hasMoreElements()) {
                ZipEntry ze = (ZipEntry) enum.nextElement();
                if (ze.getName().equals(""META-INF/INDEX.LIST"")) {
                    numberOfIndexLists++;
                }
            }
            assertEquals(1, numberOfIndexLists);
        } finally {
            if (archive != null) {
                archive.close();
            }
        }
    }

    
    public void testRootFilesInIndex() throws IOException {
        ZipFile archive = null;
        try {
            executeTarget(""testIndexTests"");
            archive = new ZipFile(getProject().resolveFile(tempJar));
            ZipEntry ze = archive.getEntry(""META-INF/INDEX.LIST"");
            InputStream is = archive.getInputStream(ze);
            BufferedReader r = new BufferedReader(new InputStreamReader(is,
                                                                        ""UTF8""));
            boolean foundSub = false;
            boolean foundSubFoo = false;
            boolean foundFoo = false;
            
            String line = r.readLine();
            while (line != null) {
                if (line.equals(""foo"")) {
                    foundFoo = true;
                } else if (line.equals(""sub"")) {
                    foundSub = true;
                } else if (line.equals(""sub/foo"")) {
                    foundSubFoo = true;
                }
                line = r.readLine();
            }

            assertTrue(foundSub);
            assertTrue(!foundSubFoo);
            assertTrue(foundFoo);
        } finally {
            if (archive != null) {
                archive.close();
            }
        }
    }
}
"
L38973,Class,JavaTest,org.apache.tools.ant.taskdefs.JavaTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,69,1,310,2,0.0,0,0,0,0.0,0.0,0,0,6,1,1,27,3,0,0,12,34,0.130435,0.164286,23,17,3,20,0.209302,45,1,1,0,0,1,117,174,9,8,3,0,22,0,22,1,50,43,0,23,1,170,242,9,8,3,0,25,0,25,1,53,72,0,26,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;


public class JavaTest extends BuildFileTest {

    private static final int TIME_TO_WAIT = 4;
    
    
    private static final int SECURITY_MARGIN = 1000;

    private boolean runFatalTests=false;

    public JavaTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/java.xml"");

        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
        
        project.executeTarget(""cleanup"");
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. ""
                + ""Please set fork='true'. "");
    }

    public void testJarAndClassName() {
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }


    public void testClassnameAndJar() {
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }



    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }

    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"",
                            ""Exception raised inside called program"");
    }

    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"",
                            ""Java Result:"");
    }

    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }

    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");
    }

    public void testResultPropertyZero() {
        executeTarget(""testResultPropertyZero"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZero() {
        executeTarget(""testResultPropertyNonZero"");
        assertEquals(""2"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyZeroNoFork() {
        executeTarget(""testResultPropertyZeroNoFork"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZeroNoFork() {
        executeTarget(""testResultPropertyNonZeroNoFork"");
         assertEquals(""-1"",project.getProperty(""exitcode""));
     }

    public void testRunFailWithFailOnError() {
        expectBuildExceptionContaining(""testRunFailWithFailOnError"",
            ""non zero return code"",
            ""Java returned:"");
    }

    public void testRunSuccessWithFailOnError() {
        executeTarget(""testRunSuccessWithFailOnError"");
    }

    public void testSpawn() {
        FileUtils fileutils  = FileUtils.newFileUtils();
        File logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        project.setProperty(""logFile"", logFile.getAbsolutePath());
        project.setProperty(""timeToWait"", Long.toString(TIME_TO_WAIT));
        project.executeTarget(""testSpawn"");
        try {
            Thread.sleep(TIME_TO_WAIT * 1000 + SECURITY_MARGIN);
        } catch (Exception ex) {
            System.out.println(""my sleep was interrupted"");
        }
        
        if (!logFile.exists()) {
            System.out.println(""suggestion: increase the constant""
            + "" SECURITY_MARGIN to give more time for java to start."");
        }
        assertTrue(""log file exists"", logFile.exists());
    }

    
    public static class EntryPoint {

    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }

    
    public static class ExceptingEntryPoint {

        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
    
    public static class SpawnEntryPoint {
        public static void main(String [] argv) {
            int sleepTime = 10;
            String logFile = ""spawn.log"";
            if (argv.length >= 1) {
                sleepTime = Integer.parseInt(argv[0]);
            }
            if (argv.length >= 2)
            {
                logFile = argv[1];
            }
            OutputStreamWriter out = null;
            try {
                Thread.sleep(sleepTime * 1000);
            } catch (InterruptedException ex) {
                System.out.println(""my sleep was interrupted"");
            }

            try {
                File dest = new File(logFile);
                FileOutputStream fos = new FileOutputStream(dest);
                out = new OutputStreamWriter(fos);
                out.write(""bye bye\n"");
            } catch (Exception ex) {}
            finally {
                try {out.close();} catch (IOException ioe) {}}

        }
    }
}
"
L39008,Class,JavaTest$EntryPoint,org.apache.tools.ant.taskdefs.JavaTest$EntryPoint,L38973,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,234,5,262,6,0.0,0,0,0,0.0,0.0,0,0,1,2,2,6,0,0,0,0,1,1.0,0.34375,11,11,2,0,0.34375,11,0,0,0,0,0,21,29,0,0,0,0,1,0,1,0,1,11,0,1,0,21,29,0,0,0,0,1,0,1,0,1,11,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;


public class JavaTest extends BuildFileTest {

    private static final int TIME_TO_WAIT = 4;
    
    
    private static final int SECURITY_MARGIN = 1000;

    private boolean runFatalTests=false;

    public JavaTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/java.xml"");

        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
        
        project.executeTarget(""cleanup"");
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. ""
                + ""Please set fork='true'. "");
    }

    public void testJarAndClassName() {
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }


    public void testClassnameAndJar() {
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }



    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }

    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"",
                            ""Exception raised inside called program"");
    }

    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"",
                            ""Java Result:"");
    }

    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }

    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");
    }

    public void testResultPropertyZero() {
        executeTarget(""testResultPropertyZero"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZero() {
        executeTarget(""testResultPropertyNonZero"");
        assertEquals(""2"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyZeroNoFork() {
        executeTarget(""testResultPropertyZeroNoFork"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZeroNoFork() {
        executeTarget(""testResultPropertyNonZeroNoFork"");
         assertEquals(""-1"",project.getProperty(""exitcode""));
     }

    public void testRunFailWithFailOnError() {
        expectBuildExceptionContaining(""testRunFailWithFailOnError"",
            ""non zero return code"",
            ""Java returned:"");
    }

    public void testRunSuccessWithFailOnError() {
        executeTarget(""testRunSuccessWithFailOnError"");
    }

    public void testSpawn() {
        FileUtils fileutils  = FileUtils.newFileUtils();
        File logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        project.setProperty(""logFile"", logFile.getAbsolutePath());
        project.setProperty(""timeToWait"", Long.toString(TIME_TO_WAIT));
        project.executeTarget(""testSpawn"");
        try {
            Thread.sleep(TIME_TO_WAIT * 1000 + SECURITY_MARGIN);
        } catch (Exception ex) {
            System.out.println(""my sleep was interrupted"");
        }
        
        if (!logFile.exists()) {
            System.out.println(""suggestion: increase the constant""
            + "" SECURITY_MARGIN to give more time for java to start."");
        }
        assertTrue(""log file exists"", logFile.exists());
    }

    
    public static class EntryPoint {

    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }

    
    public static class ExceptingEntryPoint {

        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
    
    public static class SpawnEntryPoint {
        public static void main(String [] argv) {
            int sleepTime = 10;
            String logFile = ""spawn.log"";
            if (argv.length >= 1) {
                sleepTime = Integer.parseInt(argv[0]);
            }
            if (argv.length >= 2)
            {
                logFile = argv[1];
            }
            OutputStreamWriter out = null;
            try {
                Thread.sleep(sleepTime * 1000);
            } catch (InterruptedException ex) {
                System.out.println(""my sleep was interrupted"");
            }

            try {
                File dest = new File(logFile);
                FileOutputStream fos = new FileOutputStream(dest);
                out = new OutputStreamWriter(fos);
                out.write(""bye bye\n"");
            } catch (Exception ex) {}
            finally {
                try {out.close();} catch (IOException ioe) {}}

        }
    }
}
"
L39014,Class,JavaTest$ExceptingEntryPoint,org.apache.tools.ant.taskdefs.JavaTest$ExceptingEntryPoint,L38973,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,268,5,277,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,0,0,0,1,1.0,0.615385,8,8,2,0,0.615385,8,0,0,0,0,0,5,10,0,0,0,0,1,0,1,0,1,1,0,1,0,5,10,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;


public class JavaTest extends BuildFileTest {

    private static final int TIME_TO_WAIT = 4;
    
    
    private static final int SECURITY_MARGIN = 1000;

    private boolean runFatalTests=false;

    public JavaTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/java.xml"");

        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
        
        project.executeTarget(""cleanup"");
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. ""
                + ""Please set fork='true'. "");
    }

    public void testJarAndClassName() {
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }


    public void testClassnameAndJar() {
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }



    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }

    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"",
                            ""Exception raised inside called program"");
    }

    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"",
                            ""Java Result:"");
    }

    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }

    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");
    }

    public void testResultPropertyZero() {
        executeTarget(""testResultPropertyZero"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZero() {
        executeTarget(""testResultPropertyNonZero"");
        assertEquals(""2"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyZeroNoFork() {
        executeTarget(""testResultPropertyZeroNoFork"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZeroNoFork() {
        executeTarget(""testResultPropertyNonZeroNoFork"");
         assertEquals(""-1"",project.getProperty(""exitcode""));
     }

    public void testRunFailWithFailOnError() {
        expectBuildExceptionContaining(""testRunFailWithFailOnError"",
            ""non zero return code"",
            ""Java returned:"");
    }

    public void testRunSuccessWithFailOnError() {
        executeTarget(""testRunSuccessWithFailOnError"");
    }

    public void testSpawn() {
        FileUtils fileutils  = FileUtils.newFileUtils();
        File logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        project.setProperty(""logFile"", logFile.getAbsolutePath());
        project.setProperty(""timeToWait"", Long.toString(TIME_TO_WAIT));
        project.executeTarget(""testSpawn"");
        try {
            Thread.sleep(TIME_TO_WAIT * 1000 + SECURITY_MARGIN);
        } catch (Exception ex) {
            System.out.println(""my sleep was interrupted"");
        }
        
        if (!logFile.exists()) {
            System.out.println(""suggestion: increase the constant""
            + "" SECURITY_MARGIN to give more time for java to start."");
        }
        assertTrue(""log file exists"", logFile.exists());
    }

    
    public static class EntryPoint {

    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }

    
    public static class ExceptingEntryPoint {

        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
    
    public static class SpawnEntryPoint {
        public static void main(String [] argv) {
            int sleepTime = 10;
            String logFile = ""spawn.log"";
            if (argv.length >= 1) {
                sleepTime = Integer.parseInt(argv[0]);
            }
            if (argv.length >= 2)
            {
                logFile = argv[1];
            }
            OutputStreamWriter out = null;
            try {
                Thread.sleep(sleepTime * 1000);
            } catch (InterruptedException ex) {
                System.out.println(""my sleep was interrupted"");
            }

            try {
                File dest = new File(logFile);
                FileOutputStream fos = new FileOutputStream(dest);
                out = new OutputStreamWriter(fos);
                out.write(""bye bye\n"");
            } catch (Exception ex) {}
            finally {
                try {out.close();} catch (IOException ioe) {}}

        }
    }
}
"
L39020,Class,JavaTest$SpawnEntryPoint,org.apache.tools.ant.taskdefs.JavaTest$SpawnEntryPoint,L38973,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,281,5,309,6,0.0,0,0,0,0.0,0.0,0,0,1,2,2,6,0,0,0,0,1,0.5,0.1,3,3,1,1,0.1,3,0,0,0,0,0,27,29,0,0,0,0,1,0,1,0,1,17,0,1,0,27,29,0,0,0,0,1,0,1,0,1,17,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;
import org.apache.tools.ant.util.FileUtils;


public class JavaTest extends BuildFileTest {

    private static final int TIME_TO_WAIT = 4;
    
    
    private static final int SECURITY_MARGIN = 1000;

    private boolean runFatalTests=false;

    public JavaTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/java.xml"");

        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
        
        project.executeTarget(""cleanup"");
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. ""
                + ""Please set fork='true'. "");
    }

    public void testJarAndClassName() {
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }


    public void testClassnameAndJar() {
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }



    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }

    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"",
                            ""Exception raised inside called program"");
    }

    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"",
                            ""Java Result:"");
    }

    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }

    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");
    }

    public void testResultPropertyZero() {
        executeTarget(""testResultPropertyZero"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZero() {
        executeTarget(""testResultPropertyNonZero"");
        assertEquals(""2"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyZeroNoFork() {
        executeTarget(""testResultPropertyZeroNoFork"");
        assertEquals(""0"",project.getProperty(""exitcode""));
    }

    public void testResultPropertyNonZeroNoFork() {
        executeTarget(""testResultPropertyNonZeroNoFork"");
         assertEquals(""-1"",project.getProperty(""exitcode""));
     }

    public void testRunFailWithFailOnError() {
        expectBuildExceptionContaining(""testRunFailWithFailOnError"",
            ""non zero return code"",
            ""Java returned:"");
    }

    public void testRunSuccessWithFailOnError() {
        executeTarget(""testRunSuccessWithFailOnError"");
    }

    public void testSpawn() {
        FileUtils fileutils  = FileUtils.newFileUtils();
        File logFile = fileutils.createTempFile(""spawn"",""log"", project.getBaseDir());
        
        assertTrue(""log file not existing"", !logFile.exists());
        project.setProperty(""logFile"", logFile.getAbsolutePath());
        project.setProperty(""timeToWait"", Long.toString(TIME_TO_WAIT));
        project.executeTarget(""testSpawn"");
        try {
            Thread.sleep(TIME_TO_WAIT * 1000 + SECURITY_MARGIN);
        } catch (Exception ex) {
            System.out.println(""my sleep was interrupted"");
        }
        
        if (!logFile.exists()) {
            System.out.println(""suggestion: increase the constant""
            + "" SECURITY_MARGIN to give more time for java to start."");
        }
        assertTrue(""log file exists"", logFile.exists());
    }

    
    public static class EntryPoint {

    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }

    
    public static class ExceptingEntryPoint {

        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
    
    public static class SpawnEntryPoint {
        public static void main(String [] argv) {
            int sleepTime = 10;
            String logFile = ""spawn.log"";
            if (argv.length >= 1) {
                sleepTime = Integer.parseInt(argv[0]);
            }
            if (argv.length >= 2)
            {
                logFile = argv[1];
            }
            OutputStreamWriter out = null;
            try {
                Thread.sleep(sleepTime * 1000);
            } catch (InterruptedException ex) {
                System.out.println(""my sleep was interrupted"");
            }

            try {
                File dest = new File(logFile);
                FileOutputStream fos = new FileOutputStream(dest);
                out = new OutputStreamWriter(fos);
                out.write(""bye bye\n"");
            } catch (Exception ex) {}
            finally {
                try {out.close();} catch (IOException ioe) {}}

        }
    }
}
"
L38947,Class,JavacTest,org.apache.tools.ant.taskdefs.JavacTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/JavacTest.java,74,1,250,2,0.206704,1,1,1,0.163842,0.186567,29,25,1,1,1,17,11,0,0,20,27,0.625,0.141026,22,19,5,3,0.141026,22,0,0,0,0,0,134,177,2,0,2,0,7,0,7,1,7,96,0,7,1,134,177,2,0,2,0,7,0,7,1,7,96,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.compilers.CompilerAdapter;
import org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory;
import org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter;
import org.apache.tools.ant.taskdefs.compilers.Javac12;
import org.apache.tools.ant.taskdefs.compilers.Javac13;
import org.apache.tools.ant.taskdefs.compilers.JavacExternal;
import org.apache.tools.ant.util.JavaEnvUtils;

import junit.framework.TestCase;


public class JavacTest extends TestCase {

    private Project project;
    private Javac javac;

    public JavacTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        javac = new Javac();
        javac.setProject(project);
    }

    
    public void testForkedExecutableName() {
        assertNull(""no fork means no executable"", javac.getJavacExecutable());

        project.setProperty(""build.compiler"", ""modern"");
        assertNull(""no fork means no executable"", javac.getJavacExecutable());

        javac.setFork(true);
        assertNotNull(""normal fork"", javac.getJavacExecutable());
        assertTrue(""name should contain \""javac\"""", 
                   javac.getJavacExecutable().indexOf(""javac"") > -1);

        project.setProperty(""build.compiler"", ""extJavac"");
        javac.setFork(false);
        assertNotNull(""fork via property"", javac.getJavacExecutable());
        assertTrue(""name should contain \""javac\"""", 
                   javac.getJavacExecutable().indexOf(""javac"") > -1);

        project.setProperty(""build.compiler"", ""whatever"");
        assertNull(""no fork and not extJavac means no executable"", 
                   javac.getJavacExecutable());

        String myJavac = ""Slartibartfast"";
        javac.setFork(true);
        javac.setExecutable(myJavac);
        assertEquals(myJavac, javac.getJavacExecutable());
    }

    
    public void testCompilerArg() {
        String[] args = javac.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""no args"", 0, args.length);

        Javac.ImplementationSpecificArgument arg = javac.createCompilerArg();
        String ford = ""Ford"";
        String prefect = ""Prefect"";
        String testArg = ford + "" "" + prefect;
        arg.setValue(testArg);
        args = javac.getCurrentCompilerArgs();
        assertEquals(""unconditional single arg"", 1, args.length);
        assertEquals(testArg, args[0]);

        arg.setCompiler(""jikes"");
        args = javac.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is jikes but build.compiler is null"", 
                     0, args.length);

        project.setProperty(""build.compiler"", ""jvc"");
        args = javac.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is jikes but build.compiler is jvc"", 
                     0, args.length);

        project.setProperty(""build.compiler"", ""jikes"");
        args = javac.getCurrentCompilerArgs();
        assertEquals(""both are jikes"", 1, args.length);
        assertEquals(testArg, args[0]);

        arg.setLine(testArg);
        args = javac.getCurrentCompilerArgs();
        assertEquals(""split at space"", 2, args.length);
        assertEquals(ford, args[0]);
        assertEquals(prefect, args[1]);
    }

    
    public void testCompilerArgForForkAndExtJavac() {
        Javac.ImplementationSpecificArgument arg = javac.createCompilerArg();
        String ford = ""Ford"";
        String prefect = ""Prefect"";
        String testArg = ford + "" "" + prefect;
        arg.setValue(testArg);
        arg.setCompiler(""extJavac"");
        javac.setFork(true);
        String[] args = javac.getCurrentCompilerArgs();
        assertEquals(""both are forked javac"", 1, args.length);
        assertEquals(testArg, args[0]);
    }

    
    public void testCompilerAttribute() {
        
        String compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertTrue(""default value"", 
                   ""javac1.1"".equals(compiler) 
                   || ""javac1.2"".equals(compiler) 
                   || ""javac1.3"".equals(compiler) 
                   || ""javac1.4"".equals(compiler) 
                   || ""classic"".equals(compiler));

        javac.setFork(true);
        assertNotNull(javac.getCompiler());
        assertEquals(""extJavac"", javac.getCompiler());
        assertEquals(compiler, javac.getCompilerVersion());

        
        javac = new Javac();
        javac.setProject(project);
        project.setNewProperty(""build.compiler"", ""jikes"");
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jikes"", compiler);

        javac.setFork(true);
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jikes"", compiler);

        
        javac.setFork(false);
        javac.setCompiler(""jvc"");
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jvc"", compiler);

        javac.setFork(true);
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jvc"", compiler);
    }

    public void testCompilerAdapter() {
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {
            javac.setCompiler(""javac1.1"");
        } else {
            javac.setCompiler(""javac1.4"");
        }

        javac.setDepend(true);
        CompilerAdapter adapter = 
            CompilerAdapterFactory.getCompiler(javac.getCompiler(), javac);

        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {
            assertTrue(adapter instanceof Javac12);
        } else {
            assertTrue(adapter instanceof Javac13);
        }

        javac.setFork(true);
        adapter = 
            CompilerAdapterFactory.getCompiler(javac.getCompiler(), javac);
        assertTrue(adapter instanceof JavacExternal);
    }

}
"
L39025,Class,LoadFileTest,org.apache.tools.ant.taskdefs.LoadFileTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/LoadFileTest.java,68,1,196,2,0.0,0,0,0,0.0,0.0,0,0,5,1,1,17,3,0,0,8,21,1.0,0.417391,48,48,14,0,0.417391,48,1,1,0,0,1,67,129,6,8,0,0,13,0,13,1,41,24,0,14,1,67,129,6,8,0,0,13,0,13,1,41,24,0,14,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;
import java.io.File;


public class LoadFileTest extends BuildFileTest {

    
    public LoadFileTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/loadfile.xml"");
    }


    
    public void tearDown() {
        executeTarget(""cleanup"");
    }


    
    public void testNoSourcefileDefined() {
        expectBuildException(""testNoSourcefileDefined"",
                ""source file not defined"");
    }


    
    public void testNoPropertyDefined() {
        expectBuildException(""testNoPropertyDefined"",
                ""output property not defined"");
    }


    
    public void testNoSourcefilefound() {
        expectBuildExceptionContaining(""testNoSourcefilefound"",
                ""File not found"",
                ""Unable to load file"");
    }

    
    public void testFailOnError()
            throws BuildException {
        expectPropertyUnset(""testFailOnError"",""testFailOnError"");
    }


    
    public void testLoadAFile()
            throws BuildException {
        executeTarget(""testLoadAFile"");
        if(project.getProperty(""testLoadAFile"").indexOf(""eh?"")<0) {
            fail(""property is not all in the file"");
        }
    }


    
    public void testLoadAFileEnc()
            throws BuildException {
        executeTarget(""testLoadAFileEnc"");
        if(project.getProperty(""testLoadAFileEnc"")==null) {
            fail(""file load failed"");
        }
    }

    
    public void testEvalProps()
            throws BuildException {
        executeTarget(""testEvalProps"");
        if(project.getProperty(""testEvalProps"").indexOf(""rain"")<0) {
            fail(""property eval broken"");
        }
    }

    
    public void testFilterChain()
            throws BuildException {
        executeTarget(""testFilterChain"");
        if(project.getProperty(""testFilterChain"").indexOf(""World!"")<0) {
            fail(""Filter Chain broken"");
        }
    }

    
    public final void testStripJavaComments()
            throws BuildException {
        executeTarget(""testStripJavaComments"");
        final String expected = project.getProperty(""expected"");
        final String generated = project.getProperty(""testStripJavaComments"");
        assertEquals(expected, generated);
    }

    
    public void testOneLine()
            throws BuildException {
            expectPropertySet(""testOneLine"",""testOneLine"",""1,2,3,4"");

    }
}
"
L39054,Class,LoadPropertiesTest,org.apache.tools.ant.taskdefs.LoadPropertiesTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/LoadPropertiesTest.java,63,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,2,0,0,4,8,0.6,0.36,9,9,3,2,0.36,9,1,1,0,0,1,16,26,6,8,0,0,4,0,4,1,32,6,0,5,1,16,26,6,8,0,0,4,0,4,1,32,6,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;


public class LoadPropertiesTest extends BuildFileTest {

    public LoadPropertiesTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/loadproperties.xml"");
    }

    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testPrefixedProperties() {
        executeTarget(""testPrefixedProperties"");
        String url = project.getProperty(""server1.http.url"");
        assertEquals(""http:
    }
}
"
L39063,Class,MacroDefTest,org.apache.tools.ant.taskdefs.MacroDefTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/MacroDefTest.java,64,1,106,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,9,1,0,0,4,13,0.1,0.0789474,3,3,1,9,0.0789474,3,1,1,0,0,1,35,43,6,8,0,0,9,0,9,1,37,9,0,10,1,35,43,6,8,0,0,9,0,9,1,37,9,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class MacroDefTest extends BuildFileTest {
    public MacroDefTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/macrodef.xml"");
    }

    public void testSimple() {
        expectLog(""simple"", ""Hello World"");
    }

    public void testText() {
        expectLog(""text"", ""Inner Text"");
    }

    public void testDuplicateAttribute() {
        expectBuildException(
            ""duplicate.attribute"",
            ""the attribute text has already been specified"");
    }
    
    public void testDuplicateElement() {
        expectBuildException(
            ""duplicate.element"",
            ""the element text has already been specified"");
    }
    
    public void testUri() {
        expectLog(""uri"", ""Hello World"");
    }

    public void testNested() {
        expectLog(""nested"", ""A nested element"");
    }

    public void testDouble() {
        expectLog(
            ""double"",
            ""@{prop} is 'property', value of ${property} is 'A property value'"");
    }
}

"
L39075,Class,ManifestTest,org.apache.tools.ant.taskdefs.ManifestTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ManifestTest.java,71,1,338,2,0.301887,1,2,2,0.141791,0.19883,38,34,2,1,1,24,6,0,0,20,44,0.875,0.284519,68,68,21,3,0.284519,68,1,1,0,0,1,171,268,8,9,2,1,24,2,23,1,52,102,2,24,1,171,268,8,9,2,1,24,2,23,1,52,102,2,24,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;


public class ManifestTest extends BuildFileTest {

    public static final String EXPANDED_MANIFEST
        = ""src/etc/testcases/taskdefs/manifests/META-INF/MANIFEST.MF"";

    public static final String LONG_LINE
        = ""AReallyLongLineToTestLineBreakingInManifests-ACapabilityWhich"" + 
          ""IsSureToLeadToHundredsOfQuestionsAboutWhyAntMungesManifests"" +
          ""OfCourseTheAnswerIsThatIsWhatTheSpecRequiresAndIfAnythingHas"" +
          ""AProblemWithThatItIsNotABugInAnt"";
        
    public ManifestTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/manifest.xml"");
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void test1() throws ManifestException, IOException {
        executeTarget(""test1"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        String version = manifest.getManifestVersion();
        assertEquals(""Manifest was not created with correct version - "", ""1.0"", version);
    }
    
    
    public void test2() throws ManifestException, IOException {
        executeTarget(""test2"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        String version = manifest.getManifestVersion();
        assertEquals(""Manifest was not created with correct version - "", ""2.0"", version);
    }
    
    
    public void test3() {
        expectBuildExceptionContaining(""test3"", ""Manifest is invalid - no colon on header line"",
                                       ""Invalid Manifest"");
    }

    
    public void test4() {
        expectBuildExceptionContaining(""test4"", ""Manifest is invalid - section starts with continuation line"",
                                       ""Invalid Manifest"");
   }

    
    public void test5() {
        executeTarget(""test5"");
        String output = getLog();
        boolean hasWarning = output.indexOf(""Manifest warning: \""Name\"" attributes should not occur in the main section"") != -1;
        assertEquals(""Expected warning about Name in main section"", true, hasWarning);
    }
    
    
    public void test6() {
        expectBuildExceptionContaining(""test6"", ""Manifest is invalid - section starts with incorrect attribute"",
                                       ""Invalid Manifest"");
        String output = getLog();
        boolean hasWarning = output.indexOf(""Manifest sections should start with a \""Name\"" attribute"") != -1;
        assertEquals(""Expected warning about section not starting with Name: attribute"", true, hasWarning);
    }
     
    
    public void test7() {
        executeTarget(""test7"");

        boolean hasWarning = getLog().indexOf(""Manifest attributes should not start with \""From\"""") != -1;
        assertEquals(""Expected warning about From: attribute"", true, hasWarning);
    }

    
    public void test8() throws IOException, ManifestException {
        executeTarget(""test8"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Manifest.Section mainSection = manifest.getMainSection();
        String classpath = mainSection.getAttributeValue(""class-path"");
        assertEquals(""Class-Path attribute was not set correctly - "", ""fubar"", classpath);
        
        Manifest.Section testSection = manifest.getSection(""Test"");
        String testAttr = testSection.getAttributeValue(""TestAttr"");
        assertEquals(""TestAttr attribute was not set correctly - "", ""Test"", testAttr);
    }
     
    
    public void test9() {
        expectBuildExceptionContaining(""test9"", ""Construction is invalid - Name attribute should not be used"",
                                       ""Specify the section name using the \""name\"" attribute of the <section> element"");
    }
     
    
    public void test10() {
        expectBuildExceptionContaining(""test10"", ""Attribute has no name"",
                                       ""Attributes must have name and value"");
    }
     
    
    public void test11() {
        expectBuildExceptionContaining(""test11"", ""Attribute has no value"",
                                       ""Attributes must have name and value"");
    }
     
    
    public void test12() {
        expectBuildExceptionContaining(""test12"", ""Section with no name"",
                                       ""Sections must have a name"");
    }
     
    
    public void test13() {
        expectBuildExceptionContaining(""test13"", ""Duplicate Attribute"",
                                       ""The attribute \""Test\"" may not occur more than once in the same section"");
    }
     
    
    public void test14() throws IOException, ManifestException {
        executeTarget(""test14"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Manifest.Section mainSection = manifest.getMainSection();
        String classpath = mainSection.getAttributeValue(""class-path"");
        assertEquals(""Class-Path attribute was not set correctly - "", 
            ""Test1 Test2 Test3 Test4"", classpath);
    }
     
    
    public void testLongLine() throws IOException, ManifestException {
        Project project = getProject();
        project.setUserProperty(""test.longline"", LONG_LINE);
        executeTarget(""testLongLine"");

        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Manifest.Section mainSection = manifest.getMainSection();
        String classpath = mainSection.getAttributeValue(""class-path"");
        assertEquals(""Class-Path attribute was not set correctly - "", 
            LONG_LINE, classpath);
    }
     
    
    public void testOrder1() throws IOException, ManifestException {
        executeTarget(""testOrder1"");

        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Enumeration e = manifest.getSectionNames();
        String section1 = (String)e.nextElement();
        String section2 = (String)e.nextElement();
        assertEquals(""First section name unexpected"", ""Test1"", section1);
        assertEquals(""Second section name unexpected"", ""Test2"", section2);
        
        Manifest.Section section = manifest.getSection(""Test1"");
        e = section.getAttributeKeys();
        String attr1Key = (String)e.nextElement();
        String attr2Key = (String)e.nextElement();
        String attr1 = section.getAttribute(attr1Key).getName();
        String attr2 = section.getAttribute(attr2Key).getName();
        assertEquals(""First attribute name unexpected"", ""TestAttr1"", attr1);
        assertEquals(""Second attribute name unexpected"", ""TestAttr2"", attr2);
    }
     
    
    public void testOrder2() throws IOException, ManifestException {
        executeTarget(""testOrder2"");

        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Enumeration e = manifest.getSectionNames();
        String section1 = (String)e.nextElement();
        String section2 = (String)e.nextElement();
        assertEquals(""First section name unexpected"", ""Test2"", section1);
        assertEquals(""Second section name unexpected"", ""Test1"", section2);

        Manifest.Section section = manifest.getSection(""Test1"");
        e = section.getAttributeKeys();
        String attr1Key = (String)e.nextElement();
        String attr2Key = (String)e.nextElement();
        String attr1 = section.getAttribute(attr1Key).getName();
        String attr2 = section.getAttribute(attr2Key).getName();
        assertEquals(""First attribute name unexpected"", ""TestAttr2"", attr1);
        assertEquals(""Second attribute name unexpected"", ""TestAttr1"", attr2);
    }
     
    
    public void testNoFile() {
        expectBuildException(""testNoFile"", ""file is required"");
    }
    
    
    public void testReplace() throws IOException, ManifestException {
        executeTarget(""testReplace"");
        Manifest mf = getManifest(""src/etc/testcases/taskdefs/mftest.mf"");
        assertNotNull(mf);
        assertEquals(Manifest.getDefaultManifest(), mf);
    }

    
    public void testUpdate() throws IOException, ManifestException {
        executeTarget(""testUpdate"");
        Manifest mf = getManifest(""src/etc/testcases/taskdefs/mftest.mf"");
        assertNotNull(mf);
        assertTrue(!Manifest.getDefaultManifest().equals(mf));
        String mfAsString = mf.toString();
        assertNotNull(mfAsString);
        assertTrue(mfAsString.startsWith(""Manifest-Version: 2.0""));
        assertTrue(mfAsString.indexOf(""Foo: Bar"") > -1);

        mf = getManifest(""src/etc/testcases/taskdefs/mftest2.mf"");
        assertNotNull(mf);
        mfAsString = mf.toString();
        assertNotNull(mfAsString);
        assertEquals(-1, mfAsString.indexOf(""Foo: Bar""));
        assertTrue(mfAsString.indexOf(""Foo: Baz"") > -1);
    }

    
    private Manifest getManifest(String filename) throws IOException, ManifestException {
        FileReader r = new FileReader(filename);
        try {
            return new Manifest(r);
        } finally {
            r.close();
        }
    }
}
"
L39133,Class,MkdirTest,org.apache.tools.ant.taskdefs.MkdirTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/MkdirTest.java,61,1,88,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,7,1,0,0,5,10,0.166667,0.115385,3,3,1,5,0.115385,3,1,1,0,0,1,23,28,6,8,0,0,5,0,5,1,33,9,0,6,1,23,28,6,8,0,0,5,0,5,1,33,9,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class MkdirTest extends BuildFileTest { 
    
    public MkdirTest(String name) { 
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/mkdir.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""directory already exists as a file"");
    }

    public void test3() { 
        executeTarget(""test3"");
        java.io.File f = new java.io.File(getProjectDir(), ""testdir.tmp"");
        if (!f.exists() || !f.isDirectory()) { 
            fail(""mkdir failed"");
        } else {
            f.delete();
        }
    }
}
"
L39141,Class,MoveTest,org.apache.tools.ant.taskdefs.MoveTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/MoveTest.java,68,1,129,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,8,3,0,0,8,16,0.333333,0.118644,7,7,3,6,0.118644,7,1,1,0,0,1,52,62,6,8,0,0,8,0,8,1,36,34,0,9,1,52,62,6,8,0,0,8,0,8,1,36,34,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.FileUtils;
import java.io.File;
import java.io.IOException;


public class MoveTest extends BuildFileTest {

    public MoveTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/move.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testFilterSet() throws IOException {
        executeTarget(""testFilterSet"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""move.filterset.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    public void testFilterChain() throws IOException {
        executeTarget(""testFilterChain"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""move.filterchain.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    
    public void testDirectoryRemoval() throws IOException {
        executeTarget(""testDirectoryRemoval"");
        assertTrue(!getProject().resolveFile(""E/B/1"").exists());
        assertTrue(getProject().resolveFile(""E/C/2"").exists());
        assertTrue(getProject().resolveFile(""E/D/3"").exists());
        assertTrue(getProject().resolveFile(""A/B/1"").exists());
        assertTrue(!getProject().resolveFile(""A/C/2"").exists());
        assertTrue(!getProject().resolveFile(""A/D/3"").exists());
        assertTrue(!getProject().resolveFile(""A/C"").exists());
        assertTrue(!getProject().resolveFile(""A/D"").exists());
    }

    
    public void testDirectoryRetaining() throws IOException {
        executeTarget(""testDirectoryRetaining"");
        assertTrue(getProject().resolveFile(""E"").exists());
        assertTrue(getProject().resolveFile(""E/1"").exists());
        assertTrue(!getProject().resolveFile(""A/1"").exists());
        assertTrue(getProject().resolveFile(""A"").exists());
    }

    public void testCompleteDirectoryMove() throws IOException {
        executeTarget(""testCompleteDirectoryMove"");
        assertTrue(getProject().resolveFile(""E"").exists());
        assertTrue(getProject().resolveFile(""E/1"").exists());
        assertTrue(!getProject().resolveFile(""A/1"").exists());
        assertTrue(!getProject().resolveFile(""A"").exists());
    }
}
"
L39154,Class,MultiMapTest,org.apache.tools.ant.taskdefs.MultiMapTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/MultiMapTest.java,67,1,114,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,9,1,0,0,3,12,0.1,0.09375,3,3,1,9,0.0731707,3,1,1,0,0,1,29,39,6,8,0,0,9,0,9,1,37,9,0,10,1,38,48,6,8,0,0,13,0,13,3,41,10,0,14,3,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.util.FileNameMapper;



public class MultiMapTest extends BuildFileTest { 
    
    public MultiMapTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/multimap.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void testMultiCopy() {
        executeTarget(""multicopy"");
    }
    
    public void testMultiMove() {
        executeTarget(""multimove"");
    }
    
    public void testSingleCopy() {
        executeTarget(""singlecopy"");
    }
    
    public void testSingleMove() {
        executeTarget(""singlemove"");
    }
    
    public void testCopyWithEmpty() {
        executeTarget(""copywithempty"");
    }

    public void testMoveWithEmpty() {
        executeTarget(""movewithempty"");
    }
    
    public static class TestMapper implements FileNameMapper {
        public TestMapper() {}
        public void setFrom(String from) {}
        public void setTo(String to) {}
        public String[] mapFileName(final String source_file_name) {
            return new String[] {
                source_file_name, source_file_name+"".copy2"" };
        }
    }
}
"
L39166,Class,MultiMapTest$TestMapper,org.apache.tools.ant.taskdefs.MultiMapTest$TestMapper,L39154,L103,src/testcases/org/apache/tools/ant/taskdefs/MultiMapTest.java,105,5,113,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,0,4,0.0,0.0,0,0,0,5,0.0,0,1,1,0,0,1,9,9,0,0,0,0,4,0,4,2,4,1,0,4,2,9,9,0,0,0,0,4,0,4,2,4,1,0,4,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.util.FileNameMapper;



public class MultiMapTest extends BuildFileTest { 
    
    public MultiMapTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/multimap.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void testMultiCopy() {
        executeTarget(""multicopy"");
    }
    
    public void testMultiMove() {
        executeTarget(""multimove"");
    }
    
    public void testSingleCopy() {
        executeTarget(""singlecopy"");
    }
    
    public void testSingleMove() {
        executeTarget(""singlemove"");
    }
    
    public void testCopyWithEmpty() {
        executeTarget(""copywithempty"");
    }

    public void testMoveWithEmpty() {
        executeTarget(""movewithempty"");
    }
    
    public static class TestMapper implements FileNameMapper {
        public TestMapper() {}
        public void setFrom(String from) {}
        public void setTo(String to) {}
        public String[] mapFileName(final String source_file_name) {
            return new String[] {
                source_file_name, source_file_name+"".copy2"" };
        }
    }
}
"
L39174,Class,ParallelTest,org.apache.tools.ant.taskdefs.ParallelTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ParallelTest.java,70,1,191,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,15,4,0,0,10,17,1.0,0.278261,32,29,7,0,0.278261,32,1,1,0,0,1,83,122,10,8,4,0,7,4,6,1,35,48,4,7,1,83,122,10,8,4,0,7,4,6,1,35,48,4,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;
import java.io.PrintStream;
import junit.framework.AssertionFailedError;
import org.apache.tools.ant.BuildException;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.DemuxOutputStream;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class ParallelTest extends BuildFileTest {
    
    public final static String DIRECT_MESSAGE = ""direct"";
    
    public final static String DELAYED_MESSAGE = ""delayed"";
    
    public final static String FAILURE_MESSAGE = ""failure"";

    
    public final static String TEST_BUILD_FILE
         = ""src/etc/testcases/taskdefs/parallel.xml"";

    
    public ParallelTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(TEST_BUILD_FILE);
    }

    
    public void testBasic() {
        
        Project project = getProject();
        project.setUserProperty(""test.direct"", DIRECT_MESSAGE);
        project.setUserProperty(""test.delayed"", DELAYED_MESSAGE);
        expectOutputAndError(""testBasic"", """", """");
        String log = getLog();
        assertEquals(""parallel tasks didn't output correct data"", log,
            DIRECT_MESSAGE + DELAYED_MESSAGE);

    }

    
    public void testThreadCount() {
        
        Project project = getProject();
        project.setUserProperty(""test.direct"", DIRECT_MESSAGE);
        project.setUserProperty(""test.delayed"", DELAYED_MESSAGE);
        expectOutputAndError(""testThreadCount"", """", """");
        String log = getLog();
        int pos = 0;
        while (pos > -1) {
            pos = countThreads(log, pos);
        }
    }
    
    
    static int countThreads(String s, int start) {
        int firstPipe = s.indexOf('|', start);
        int beginSlash = s.indexOf('/', firstPipe);
        int lastPipe = s.indexOf('|', beginSlash);
        if ((firstPipe == -1) || (beginSlash == -1) || (lastPipe == -1)) {
            return -1;
        }
        
        int max = Integer.parseInt(s.substring(firstPipe + 1, beginSlash));
        int current = 0;
        int pos = beginSlash + 1;
        while (pos < lastPipe) {
            switch (s.charAt(pos++)) {
                case '+': 
                    current++;
                    break;
                case '-':
                    current--;
                    break;
                default:
                    throw new AssertionFailedError(""Only expect '+-' in result count, found "" 
                        + s.charAt(--pos) + "" at position "" + pos);
            }
            if (current > max) {
                throw new AssertionFailedError(""Number of executing threads exceeded number allowed: "" 
                    + current + "" > "" + max);
            }
        }
        return lastPipe;
    }
    

    
    public void testFail() {
        
        Project project = getProject();
        project.setUserProperty(""test.failure"", FAILURE_MESSAGE);
        project.setUserProperty(""test.delayed"", DELAYED_MESSAGE);
        expectBuildExceptionContaining(""testFail"",
            ""fail task in one parallel branch"", FAILURE_MESSAGE);
    }

    
    public void testDemux() {
        Project project = getProject();
        project.addTaskDefinition(""demuxtest"", DemuxOutputTask.class);
        PrintStream out = System.out;
        PrintStream err = System.err;
        System.setOut(new PrintStream(new DemuxOutputStream(project, false)));
        System.setErr(new PrintStream(new DemuxOutputStream(project, true)));

        try {
            project.executeTarget(""testDemux"");
        } finally {
            System.setOut(out);
            System.setErr(err);
        }
    }
    
}

"
L39210,Class,PreSetDefTest,org.apache.tools.ant.taskdefs.PreSetDefTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/PreSetDefTest.java,65,1,124,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,10,1,0,0,3,13,0.0909091,0.0857143,3,3,1,10,0.115385,6,1,1,0,0,1,32,45,6,8,0,0,10,0,10,1,38,10,0,11,1,46,60,17,17,2,0,12,0,12,2,75,15,0,38,9,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class PreSetDefTest extends BuildFileTest {
    public PreSetDefTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/presetdef.xml"");
    }

    public void testSimple() {
        expectLog(""simple"", ""Hello world"");
    }

    public void testText() {
        expectLog(""text"", ""Inner Text"");
    }

    public void testUri() {
        expectLog(""uri"", ""Hello world"");
    }

    public void testDefaultTest() {
        expectLog(""defaulttest"", ""attribute is false"");
    }

    public void testDoubleDefault() {
        expectLog(""doubledefault"", ""attribute is falseattribute is true"");
    }

    public void testTextOptional() {
        expectLog(""text.optional"", ""MyTextoverride text"");
    }

    public void testElementOrder() {
        expectLog(""element.order"", ""Line 1Line 2"");
    }

    public void testElementOrder2() {
        expectLog(""element.order2"", ""Line 1Line 2Line 3"");
    }
    
    
    public static class DefaultTest extends Task {
        boolean isSet = false;
        boolean attribute = false;
        public void setAttribute(boolean b) {
            if (isSet) {
                throw new BuildException(""Attribute Already set"");
            }
            attribute = b;
            isSet = true;
        }

        public void execute() {
            getProject().log(""attribute is "" + attribute);
        }
    }
}

"
L39223,Class,PreSetDefTest$DefaultTest,org.apache.tools.ant.taskdefs.PreSetDefTest$DefaultTest,L39210,L103,src/testcases/org/apache/tools/ant/taskdefs/PreSetDefTest.java,109,5,123,6,0.0,0,0,0,0.0,0.0,0,0,1,1,1,3,4,0,0,3,5,0.333333,0.176471,3,3,1,2,0.176471,3,2,2,0,0,1,14,15,11,9,2,0,2,0,2,1,37,5,0,27,8,14,15,11,9,2,0,2,0,2,1,37,5,0,27,8,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class PreSetDefTest extends BuildFileTest {
    public PreSetDefTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/presetdef.xml"");
    }

    public void testSimple() {
        expectLog(""simple"", ""Hello world"");
    }

    public void testText() {
        expectLog(""text"", ""Inner Text"");
    }

    public void testUri() {
        expectLog(""uri"", ""Hello world"");
    }

    public void testDefaultTest() {
        expectLog(""defaulttest"", ""attribute is false"");
    }

    public void testDoubleDefault() {
        expectLog(""doubledefault"", ""attribute is falseattribute is true"");
    }

    public void testTextOptional() {
        expectLog(""text.optional"", ""MyTextoverride text"");
    }

    public void testElementOrder() {
        expectLog(""element.order"", ""Line 1Line 2"");
    }

    public void testElementOrder2() {
        expectLog(""element.order2"", ""Line 1Line 2Line 3"");
    }
    
    
    public static class DefaultTest extends Task {
        boolean isSet = false;
        boolean attribute = false;
        public void setAttribute(boolean b) {
            if (isSet) {
                throw new BuildException(""Attribute Already set"");
            }
            attribute = b;
            isSet = true;
        }

        public void execute() {
            getProject().log(""attribute is "" + attribute);
        }
    }
}

"
L39233,Class,ProcessDestroyerTest,org.apache.tools.ant.taskdefs.ProcessDestroyerTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ProcessDestroyerTest.java,69,1,122,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,7,2,0,0,5,8,0.5,0.142857,7,7,2,2,0.142857,7,0,0,0,0,0,42,54,0,0,0,0,3,0,3,0,3,18,0,3,0,42,54,0,0,0,0,3,0,3,0,3,18,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"


package org.apache.tools.ant.taskdefs;

import java.io.IOException;

import org.apache.tools.ant.util.JavaEnvUtils;

import junit.framework.TestCase;


public class ProcessDestroyerTest extends TestCase {

    
    public ProcessDestroyerTest(String arg0) {
        super(arg0);
    }
    
    public void testProcessDestroyer(){
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)) {
            return;
        }
        
        try {
            ProcessDestroyer processDestroyer = new ProcessDestroyer();
            Process process =
                Runtime.getRuntime().exec(
                    ""java -cp ""
                        + System.getProperty(""java.class.path"")
                        + "" ""
                        + getClass().getName());
            
            assertFalse(""Not registered as shutdown hook"",
                        processDestroyer.isAddedAsShutdownHook());

            processDestroyer.add(process);
            
            assertTrue(""Registered as shutdown hook"",
                       processDestroyer.isAddedAsShutdownHook());
            try {
                process.destroy();
            } finally {
                processDestroyer.remove(process);
            }
            
            assertFalse(""Not registered as shutdown hook"",
                        processDestroyer.isAddedAsShutdownHook());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public static void main(String[] args){
        new ProcessDestroyerTest(""testProcessDestroyer"").testProcessDestroyer();
        try{
            Thread.sleep(60000);
        }catch(InterruptedException ie){
            ie.printStackTrace();
        }
    }
}
"
L39247,Class,PropertyTest,org.apache.tools.ant.taskdefs.PropertyTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/PropertyTest.java,67,1,148,2,0.473684,1,6,3,0.402439,0.478261,33,33,3,1,1,15,4,0,0,11,22,0.0833333,0.0547945,4,3,1,11,0.0547945,4,1,1,0,0,1,69,82,6,8,0,0,11,0,11,1,39,29,0,12,1,69,82,6,8,0,0,11,0,11,1,39,29,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.net.URL;
import java.io.File;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.util.FileUtils;


public class PropertyTest extends BuildFileTest {

    public PropertyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/property.xml"");
    }

    public void test1() {
        
        expectOutputAndError(""test1"", """", """");
    }

    public void test2() {
        expectLog(""test2"", ""testprop1=aa, testprop3=xxyy, testprop4=aazz"");
    }

    public void test3() {
        try {
            executeTarget(""test3"");
        }
        catch (BuildException e) {
            assertEquals(""Circular definition not detected - "", true,
                     e.getMessage().indexOf(""was circularly defined"") != -1);
            return;
        }
        fail(""Did not throw exception on circular exception"");
    }

    public void test4() {
        expectLog(""test4"", ""http.url is http:
    }

    public void test5() {
        String baseDir = getProject().getProperty(""basedir"");
        try {
            String uri = FileUtils.newFileUtils().toURI(
                baseDir + ""/property3.properties"");
            getProject().setNewProperty(
                ""test5.url"", uri);
        } catch (Exception ex) {
            throw new BuildException(ex);
        }
        expectLog(""test5"", ""http.url is http:
    }

    public void testPrefixSuccess() {
        executeTarget(""prefix.success"");
        assertEquals(""80"", project.getProperty(""server1.http.port""));
    }

    public void testPrefixFailure() {
       try {
            executeTarget(""prefix.fail"");
        }
        catch (BuildException e) {
            assertEquals(""Prefix allowed on non-resource/file load - "", true,
                     e.getMessage().indexOf(""Prefix is only valid"") != -1);
            return;
        }
        fail(""Did not throw exception on invalid use of prefix"");
    }

    public void testCircularReference() {
        try {
            executeTarget(""testCircularReference"");
        } catch (BuildException e) {
            assertEquals(""Circular definition not detected - "", true,
                         e.getMessage().indexOf(""was circularly defined"") 
                         != -1);
            return;
        }
        fail(""Did not throw exception on circular exception"");
    }

    public void testThisIsNotACircularReference() {
        expectLog(""thisIsNotACircularReference"", ""b is A/A/A"");
    }

}
"
L39261,Class,RenameTest,org.apache.tools.ant.taskdefs.RenameTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/RenameTest.java,61,1,92,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,1,0,0,4,10,0.285714,0.354839,11,11,2,5,0.354839,11,1,1,0,0,1,20,32,6,8,0,0,6,0,6,1,34,6,0,7,1,20,32,6,8,0,0,6,0,6,1,34,6,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;


public class RenameTest extends BuildFileTest { 
    
    public RenameTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/rename.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }
    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }
    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }

    public void test6() {
        executeTarget(""test6"");
    }
    
}
"
L39271,Class,ReplaceTest,org.apache.tools.ant.taskdefs.ReplaceTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ReplaceTest.java,66,1,145,2,0.479263,1,5,1,0.3375,0.373134,27,25,2,2,2,17,2,0,0,5,18,0.0714286,0.0428571,3,3,1,13,0.0428571,3,1,1,0,0,1,67,80,7,8,1,0,13,0,13,1,41,30,0,14,1,67,80,7,8,1,0,13,0,13,1,41,30,0,14,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

import java.io.*;

import junit.framework.AssertionFailedError;


public class ReplaceTest extends BuildFileTest {

    private static final String TEST_PATH = ""src/etc/testcases/taskdefs/replace/"";
    public ReplaceTest(String name) {
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/replace.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""empty token not allowed"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        expectBuildException(""test6"", ""required argument not specified"");
    }

    public void test7() { 
        expectBuildException(""test7"", ""empty token not allowed"");
    }

    public void test8() { 
        executeTarget(""test8"");
    }

    public void test9() throws IOException{
        executeTarget(""test9"");
        String tmpdir = project.getProperty(""tmp.dir"");
        assertEqualContent(new File(tmpdir, ""result.txt""),
                    new File(tmpdir, ""output.txt""));
    }
    public void tearDown() {
        executeTarget(""cleanup"");
    }
    public void assertEqualContent(File expect, File result)
        throws AssertionFailedError, IOException {
        if (!result.exists()) {
            fail(""Expected file ""+result+"" doesn\'t exist"");
        }

        InputStream inExpect = null;
        InputStream inResult = null;
        try {
            inExpect = new BufferedInputStream(new FileInputStream(expect));
            inResult = new BufferedInputStream(new FileInputStream(result));

            int expectedByte = inExpect.read();
            while (expectedByte != -1) {
                assertEquals(expectedByte, inResult.read());
                expectedByte = inExpect.read();
            }
            assertEquals(""End of file"", -1, inResult.read());
        } finally {
            if (inResult != null) {
                inResult.close();
            }
            if (inExpect != null) {
                inExpect.close();
            }
        }
    }
}
"
L39291,Class,RmicTest,org.apache.tools.ant.taskdefs.RmicTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/RmicTest.java,68,1,141,2,0.569231,1,1,1,0.391892,0.462963,29,25,1,0,0,5,5,0,0,12,16,0.6,0.217391,15,13,3,2,0.217391,15,0,0,0,0,0,54,74,2,0,2,0,4,0,4,1,4,39,0,4,1,54,74,2,0,2,0,4,0,4,1,4,39,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;

import junit.framework.TestCase;


public class RmicTest extends TestCase {

    private Project project;
    private Rmic rmic;

    public RmicTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        rmic = new Rmic();
        rmic.setProject(project);
    }

    
    public void testCompilerArg() {
        String[] args = rmic.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""no args"", 0, args.length);

        Rmic.ImplementationSpecificArgument arg = rmic.createCompilerArg();
        String ford = ""Ford"";
        String prefect = ""Prefect"";
        String testArg = ford + "" "" + prefect;
        arg.setValue(testArg);
        args = rmic.getCurrentCompilerArgs();
        assertEquals(""unconditional single arg"", 1, args.length);
        assertEquals(testArg, args[0]);

        arg.setCompiler(""weblogic"");
        args = rmic.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is weblogic but build.rmic is null"", 
                     0, args.length);

        project.setProperty(""build.rmic"", ""sun"");
        args = rmic.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is weblogic but build.rmic is sun"", 
                     0, args.length);

        project.setProperty(""build.rmic"", ""weblogic"");
        args = rmic.getCurrentCompilerArgs();
        assertEquals(""both are weblogic"", 1, args.length);
        assertEquals(testArg, args[0]);
    }

    
    public void testCompilerAttribute() {
        
        String compiler = rmic.getCompiler();
        assertNotNull(compiler);
        assertTrue(""default value"", 
                   ""sun"".equals(compiler) || ""kaffe"".equals(compiler));

        project.setNewProperty(""build.rmic"", ""weblogic"");
        compiler = rmic.getCompiler();
        assertNotNull(compiler);
        assertEquals(""weblogic"", compiler);

        
        rmic.setCompiler(""kaffe"");
        compiler = rmic.getCompiler();
        assertNotNull(compiler);
        assertEquals(""kaffe"", compiler);
    }

}
"
L39353,Class,SQLExecTest,org.apache.tools.ant.taskdefs.SQLExecTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/SQLExecTest.java,79,1,274,2,0.0,0,0,0,0.0,0.0,0,0,1,3,3,20,6,0,0,14,23,0.5,0.308176,49,45,2,2,0.270718,49,0,0,0,0,0,110,169,10,2,10,2,9,10,3,1,9,67,10,3,1,132,196,10,5,10,5,15,10,9,1,15,73,10,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.sql.Driver;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DriverPropertyInfo;
import java.util.Properties;
import java.io.File;
import java.net.URL;

import junit.framework.TestCase;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;


public class SQLExecTest extends TestCase {

    
    public final static int NULL = 0;
    public final static int ORACLE = 1;
    public final static int MYSQL = 2;

    
    public final static String DRIVER = ""driver"";
    public final static String USER = ""user"";
    public final static String PASSWORD = ""password"";
    public final static String URL = ""url"";
    public final static String PATH = ""path"";
    public final static String SQL = ""sql"";

    public SQLExecTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        
        SQLExec.getLoaderMap().clear();
    }

   
    public void testDriverCaching(){
       SQLExec sql = createTask(getProperties(NULL));
        assertTrue(!SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), SQLExec.getLoaderMap().get(NULL_DRIVER));
        ClassLoader loader1 = sql.getLoader();

        
        sql = createTask(getProperties(NULL));
        
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), sql.getLoaderMap().get(NULL_DRIVER));
        assertSame(loader1, sql.getLoader());
    }

    public void testNull() throws Exception {
        doMultipleCalls(1000, NULL, true, true);
    }

    

    


    
    protected void doMultipleCalls(int calls, int database, boolean caching, boolean catchexception){
        Properties props = getProperties(database);
        for (int i = 0; i < calls; i++){
            SQLExec sql = createTask(props);
            sql.setCaching(caching);
            try  {
                sql.execute();
            } catch (BuildException e){
                if (!catchexception){
                    throw e;
                }
            }
        }
    }

    
    protected SQLExec createTask(Properties props){
        SQLExec sql = new SQLExec();
        sql.setProject( new Project() );
        sql.setDriver( props.getProperty(DRIVER) );
        sql.setUserid( props.getProperty(USER) );
        sql.setPassword( props.getProperty(PASSWORD) );
        sql.setUrl( props.getProperty(URL) );
        sql.createClasspath().setLocation( new File(props.getProperty(PATH)) );
        sql.addText( props.getProperty(SQL) );
        return sql;
    }

    
    protected String findResourcePath(String resource){
        resource = resource.replace('.', '/') + "".class"";
        URL url = getClass().getClassLoader().getResource(resource);
        if (url == null) {
            return null;
        }
        String u = url.toString();
        if (u.startsWith(""jar:file:"")) {
            int pling = u.indexOf(""!"");
            return u.substring(""jar:file:"".length(), pling);
        } else if (u.startsWith(""file:"")) {
            int tail = u.indexOf(resource);
            return u.substring(""file:"".length(), tail);
        }
        return null;
    }

    
    protected Properties getProperties(int database){
        Properties props = null;
        switch (database){
            case ORACLE:
                props = getProperties(""oracle.jdbc.driver.OracleDriver"", ""test"", ""test"", ""jdbc:oracle:thin:@127.0.0.1:1521:orcl"");
                break;
            case MYSQL:
                props = getProperties(""org.gjt.mm.mysql.Driver"", ""test"", ""test"", ""jdbc:mysql:
                break;
            case NULL:
            default:
                props = getProperties(NULL_DRIVER, ""test"", ""test"", ""jdbc:database:
        }
        
        String path = findResourcePath(props.getProperty(DRIVER));
        props.put(PATH, path);
        props.put(SQL, ""create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;"");
        return props;
    }

    
    protected Properties getProperties(String driver, String user, String pwd, String url){
        Properties props = new Properties();
        props.put(DRIVER, driver);
        props.put(USER, user);
        props.put(PASSWORD, pwd);
        props.put(URL, url);
        return props;
    }





    public final static String NULL_DRIVER = NullDriver.class.getName();

    public static class NullDriver implements Driver {
        public Connection connect(String url, Properties info)
                throws SQLException {
            return null;
        }

        public boolean acceptsURL(String url) throws SQLException {
            return false;
        }

        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
                throws SQLException {
            return new DriverPropertyInfo[0];
        }

        public int getMajorVersion() {
            return 0;
        }

        public int getMinorVersion() {
            return 0;
        }

        public boolean jdbcCompliant() {
            return false;
        }
    }

}
"
L39425,Class,SQLExecTest$NullDriver,org.apache.tools.ant.taskdefs.SQLExecTest$NullDriver,L39353,L103,src/testcases/org/apache/tools/ant/taskdefs/SQLExecTest.java,246,5,272,6,0.0,0,0,0,0.0,0.0,0,0,3,0,0,6,0,0,0,0,6,0.0,0.0,0,0,0,7,0.0,0,0,0,0,0,0,22,27,0,3,0,3,6,0,6,0,6,6,0,6,0,22,27,0,3,0,3,6,0,6,0,6,6,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.sql.Driver;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DriverPropertyInfo;
import java.util.Properties;
import java.io.File;
import java.net.URL;

import junit.framework.TestCase;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;


public class SQLExecTest extends TestCase {

    
    public final static int NULL = 0;
    public final static int ORACLE = 1;
    public final static int MYSQL = 2;

    
    public final static String DRIVER = ""driver"";
    public final static String USER = ""user"";
    public final static String PASSWORD = ""password"";
    public final static String URL = ""url"";
    public final static String PATH = ""path"";
    public final static String SQL = ""sql"";

    public SQLExecTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        
        SQLExec.getLoaderMap().clear();
    }

   
    public void testDriverCaching(){
       SQLExec sql = createTask(getProperties(NULL));
        assertTrue(!SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), SQLExec.getLoaderMap().get(NULL_DRIVER));
        ClassLoader loader1 = sql.getLoader();

        
        sql = createTask(getProperties(NULL));
        
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), sql.getLoaderMap().get(NULL_DRIVER));
        assertSame(loader1, sql.getLoader());
    }

    public void testNull() throws Exception {
        doMultipleCalls(1000, NULL, true, true);
    }

    

    


    
    protected void doMultipleCalls(int calls, int database, boolean caching, boolean catchexception){
        Properties props = getProperties(database);
        for (int i = 0; i < calls; i++){
            SQLExec sql = createTask(props);
            sql.setCaching(caching);
            try  {
                sql.execute();
            } catch (BuildException e){
                if (!catchexception){
                    throw e;
                }
            }
        }
    }

    
    protected SQLExec createTask(Properties props){
        SQLExec sql = new SQLExec();
        sql.setProject( new Project() );
        sql.setDriver( props.getProperty(DRIVER) );
        sql.setUserid( props.getProperty(USER) );
        sql.setPassword( props.getProperty(PASSWORD) );
        sql.setUrl( props.getProperty(URL) );
        sql.createClasspath().setLocation( new File(props.getProperty(PATH)) );
        sql.addText( props.getProperty(SQL) );
        return sql;
    }

    
    protected String findResourcePath(String resource){
        resource = resource.replace('.', '/') + "".class"";
        URL url = getClass().getClassLoader().getResource(resource);
        if (url == null) {
            return null;
        }
        String u = url.toString();
        if (u.startsWith(""jar:file:"")) {
            int pling = u.indexOf(""!"");
            return u.substring(""jar:file:"".length(), pling);
        } else if (u.startsWith(""file:"")) {
            int tail = u.indexOf(resource);
            return u.substring(""file:"".length(), tail);
        }
        return null;
    }

    
    protected Properties getProperties(int database){
        Properties props = null;
        switch (database){
            case ORACLE:
                props = getProperties(""oracle.jdbc.driver.OracleDriver"", ""test"", ""test"", ""jdbc:oracle:thin:@127.0.0.1:1521:orcl"");
                break;
            case MYSQL:
                props = getProperties(""org.gjt.mm.mysql.Driver"", ""test"", ""test"", ""jdbc:mysql:
                break;
            case NULL:
            default:
                props = getProperties(NULL_DRIVER, ""test"", ""test"", ""jdbc:database:
        }
        
        String path = findResourcePath(props.getProperty(DRIVER));
        props.put(PATH, path);
        props.put(SQL, ""create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;"");
        return props;
    }

    
    protected Properties getProperties(String driver, String user, String pwd, String url){
        Properties props = new Properties();
        props.put(DRIVER, driver);
        props.put(USER, user);
        props.put(PASSWORD, pwd);
        props.put(URL, url);
        return props;
    }





    public final static String NULL_DRIVER = NullDriver.class.getName();

    public static class NullDriver implements Driver {
        public Connection connect(String url, Properties info)
                throws SQLException {
            return null;
        }

        public boolean acceptsURL(String url) throws SQLException {
            return false;
        }

        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
                throws SQLException {
            return new DriverPropertyInfo[0];
        }

        public int getMajorVersion() {
            return 0;
        }

        public int getMinorVersion() {
            return 0;
        }

        public boolean jdbcCompliant() {
            return false;
        }
    }

}
"
L39308,Class,SignJarTest,org.apache.tools.ant.taskdefs.SignJarTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/SignJarTest.java,71,1,107,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,8,1,0,0,3,11,0.111111,0.151515,5,5,1,8,0.151515,5,1,1,0,0,1,28,37,7,8,1,0,8,1,8,1,36,8,1,9,1,28,37,7,8,1,0,8,1,8,1,36,8,1,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;


public class SignJarTest extends BuildFileTest {

    public static final String EXPANDED_MANIFEST
        = ""src/etc/testcases/taskdefs/manifests/META-INF/MANIFEST.MF"";

    public SignJarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/signjar.xml"");
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    public void testBasicSigning() {
        executeTarget(""basic"");
    }

    public void testSigFile() {
        executeTarget(""sigfile"");
    }

    public void testMaxMemory() {
        executeTarget(""maxmemory"");
    }

    public void testURLKeystoreFile() {
        executeTarget(""urlKeystoreFile"");
    }

    public void testURLKeystoreHTTP() {
        executeTarget(""urlKeystoreHTTP"");
    }
}
"
L39320,Class,SleepTest,org.apache.tools.ant.taskdefs.SleepTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/SleepTest.java,62,1,147,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,14,2,0,0,7,15,0.111111,0.0740741,4,4,1,8,0.0958904,7,1,1,0,0,1,50,66,9,8,3,0,8,0,8,1,36,33,0,9,1,66,86,11,8,5,0,12,0,12,1,40,37,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class SleepTest extends BuildFileTest {


    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/"";
    private final static boolean TRACE=false;
	private final static int ERROR_RANGE=1000;
	
    public SleepTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""sleep.xml"");
    }

    public void test1() {
       Timer timer=new Timer();
        executeTarget(""test1"");
        timer.stop();
        if(TRACE) System.out.println("" test1 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test2() {
        Timer timer=new Timer();
        executeTarget(""test2"");
        timer.stop();
        if(TRACE) System.out.println("" test2 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test3() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test3 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE));
    }

    public void test4() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test4 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE) && timer.time()<60000);
    }

    public void test5() {
        expectBuildException(""test5"",
            ""Negative sleep periods are not supported"");
    }

    public void test6() {
        Timer timer=new Timer();
        executeTarget(""test6"");
        timer.stop();
        if(TRACE) System.out.println("" test6 elapsed time=""+timer.time());
        assertTrue(timer.time()<2000);
    }


    
    private static class Timer {
        long start=0;
        long stop=0;

        public Timer() {
            start();
        }

        public void start() {
            start=System.currentTimeMillis();
        }

        public void stop() {
            stop=System.currentTimeMillis();
        }

        public long time() {
            return stop-start;
        }
    }

}

"
L39330,Class,SleepTest$Timer,org.apache.tools.ant.taskdefs.SleepTest$Timer,L39320,L103,src/testcases/org/apache/tools/ant/taskdefs/SleepTest.java,126,5,145,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,0,1,5,0,4,0.2,0.157895,3,3,1,4,0.157895,3,0,0,0,0,0,16,20,2,0,2,0,4,0,4,0,4,4,0,4,0,16,20,2,0,2,0,4,0,4,0,4,4,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class SleepTest extends BuildFileTest {


    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/"";
    private final static boolean TRACE=false;
	private final static int ERROR_RANGE=1000;
	
    public SleepTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""sleep.xml"");
    }

    public void test1() {
       Timer timer=new Timer();
        executeTarget(""test1"");
        timer.stop();
        if(TRACE) System.out.println("" test1 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test2() {
        Timer timer=new Timer();
        executeTarget(""test2"");
        timer.stop();
        if(TRACE) System.out.println("" test2 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test3() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test3 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE));
    }

    public void test4() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test4 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE) && timer.time()<60000);
    }

    public void test5() {
        expectBuildException(""test5"",
            ""Negative sleep periods are not supported"");
    }

    public void test6() {
        Timer timer=new Timer();
        executeTarget(""test6"");
        timer.stop();
        if(TRACE) System.out.println("" test6 elapsed time=""+timer.time());
        assertTrue(timer.time()<2000);
    }


    
    private static class Timer {
        long start=0;
        long stop=0;

        public Timer() {
            start();
        }

        public void start() {
            start=System.currentTimeMillis();
        }

        public void stop() {
            stop=System.currentTimeMillis();
        }

        public long time() {
            return stop-start;
        }
    }

}

"
L39444,Class,StyleTest,org.apache.tools.ant.taskdefs.StyleTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/StyleTest.java,72,1,161,2,0.431138,2,3,2,0.255556,0.328358,23,22,2,2,2,13,3,0,0,8,20,0.125,0.17284,14,9,1,7,0.17284,14,1,1,0,0,1,67,90,6,10,0,2,12,0,7,1,40,19,0,8,1,67,90,6,10,0,2,12,0,7,1,40,19,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;


import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.FileWriter;



public class StyleTest extends BuildFileTest {

    public StyleTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        configureProject(""src/etc/testcases/taskdefs/style/build.xml"");
        
        
    }

    protected void tearDown() throws Exception {
        executeTarget(""teardown"");
    }

    public void testStyleIsSet() throws Exception {
        expectBuildException(""testStyleIsSet"", ""no stylesheet specified"");
    }

    public void testTransferParameterSet() throws Exception {
        expectFileContains(""testTransferParameterSet"",  
                           ""out/out.xml"",               
                           ""set='myvalue'"");            
    }

    public void testTransferParameterEmpty() throws Exception {
        expectFileContains(""testTransferParameterEmpty"",
                           ""out/out.xml"",
                           ""empty=''"");
    }

    public void testTransferParameterUnset() throws Exception {
        expectFileContains(""testTransferParameterUnset"",
                           ""out/out.xml"",
                           ""undefined='${value}'"");
    }

    public void testTransferParameterUnsetWithIf() throws Exception {
        expectFileContains(""testTransferParameterUnsetWithIf"",
                           ""out/out.xml"",
                           ""undefined='undefined default value'"");
    }

    public void testNewerStylesheet() throws Exception {
        expectFileContains(""testNewerStylesheet"",
                           ""out/out.xml"",
                           ""new-value"");
    }


    

    
    
    

    private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.newFileUtils().readFully(r);
        }
        finally {
            try {r.close();} catch (Throwable ignore) {}
        }

    }

    private String getFileString(String target, String filename)
        throws IOException
    {
        executeTarget(target);
        return getFileString(filename);
    }

    private void expectFileContains(
        String target, String filename, String contains)
        throws IOException
    {
        String content = getFileString(target, filename);
        assertTrue(
            ""expecting file "" + filename + "" to contain "" +
            contains +
            "" but got "" + content, content.indexOf(contains) > -1);
    }

}
"
L39472,Class,SubAntTest,org.apache.tools.ant.taskdefs.SubAntTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/SubAntTest.java,71,1,170,2,0.535714,2,6,3,0.42,0.44,42,33,2,1,1,8,3,0,0,10,17,0.285714,0.166667,9,5,2,5,0.107143,9,1,1,0,0,1,45,65,6,8,0,0,7,0,6,1,35,20,0,7,1,75,100,9,9,3,1,16,0,13,1,44,28,0,14,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.types.Path;


public class SubAntTest extends BuildFileTest {

    public SubAntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/subant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testnodirs() {
        project.executeTarget(""testnodirs"");
        expectLog(""testnodirs"", ""No sub-builds to iterate on"");
    }

    
    public void testgenericantfile() {
        File dir1 = project.resolveFile(""."");
        File dir2 = project.resolveFile(""subant/subant-test1"");
        File dir3 = project.resolveFile(""subant/subant-test2"");

        testBaseDirs(""testgenericantfile"",
                     new String[] { dir1.getAbsolutePath(),
                         dir2.getAbsolutePath(),
                         dir3.getAbsolutePath()

                     });
    }

    public void testantfile() {
        File dir1 = project.resolveFile(""."");
        
        
        File dir2 = project.resolveFile(""subant/subant-test1"");
        
        
        File dir3 = project.resolveFile(""subant"");

        testBaseDirs(""testantfile"",
                     new String[] { dir1.getAbsolutePath(),
                         dir2.getAbsolutePath(),
                         dir3.getAbsolutePath()

                     });

    }

    protected void testBaseDirs(String target, String[] dirs) {
        SubAntTest.BasedirChecker bc = new SubAntTest.BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                            event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L39486,Class,SubAntTest$BasedirChecker,org.apache.tools.ant.taskdefs.SubAntTest$BasedirChecker,L39472,L103,src/testcases/org/apache/tools/ant/taskdefs/SubAntTest.java,133,5,167,6,0.566667,1,4,1,0.371429,0.433333,13,13,7,2,2,12,4,1,1,4,13,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,30,35,3,1,3,1,9,0,7,0,9,8,0,7,0,30,35,3,1,3,1,9,0,7,0,9,8,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.types.Path;


public class SubAntTest extends BuildFileTest {

    public SubAntTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/subant.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testnodirs() {
        project.executeTarget(""testnodirs"");
        expectLog(""testnodirs"", ""No sub-builds to iterate on"");
    }

    
    public void testgenericantfile() {
        File dir1 = project.resolveFile(""."");
        File dir2 = project.resolveFile(""subant/subant-test1"");
        File dir3 = project.resolveFile(""subant/subant-test2"");

        testBaseDirs(""testgenericantfile"",
                     new String[] { dir1.getAbsolutePath(),
                         dir2.getAbsolutePath(),
                         dir3.getAbsolutePath()

                     });
    }

    public void testantfile() {
        File dir1 = project.resolveFile(""."");
        
        
        File dir2 = project.resolveFile(""subant/subant-test1"");
        
        
        File dir3 = project.resolveFile(""subant"");

        testBaseDirs(""testantfile"",
                     new String[] { dir1.getAbsolutePath(),
                         dir2.getAbsolutePath(),
                         dir3.getAbsolutePath()

                     });

    }

    protected void testBaseDirs(String target, String[] dirs) {
        SubAntTest.BasedirChecker bc = new SubAntTest.BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (event.getTarget().getName().equals("""")) {
                return;
            }
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                            event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L39592,Class,TStampTest,org.apache.tools.ant.taskdefs.TStampTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TStampTest.java,69,1,149,2,0.566434,2,4,4,0.382716,0.45614,31,26,1,0,0,6,6,0,0,12,18,0.5,0.197183,14,14,3,3,0.197183,14,0,0,0,0,0,57,81,3,0,3,0,6,0,5,1,6,40,0,5,1,57,81,3,0,3,0,6,0,5,1,6,40,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.util.Calendar;
import java.util.TimeZone;
import java.util.Date;
import java.text.SimpleDateFormat;

import junit.framework.TestCase;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Location;


public class TStampTest extends TestCase {

    protected Tstamp tstamp;
    protected Project project;
    protected Location location;

    public TStampTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        location = new Location(""test.xml"");
        project = new Project();
        tstamp = new Tstamp();
        tstamp.setLocation(location);
        tstamp.setProject(project);
    }

    public void testTimeZone() throws Exception {
        Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""today"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");
        Date date = Calendar.getInstance().getTime();
        format.execute(project, date, location);
        String today = project.getProperty(""today"");

        SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss z"");
        sdf.setTimeZone( TimeZone.getTimeZone(""GMT"") );
        String expected = sdf.format(date);

        assertEquals(expected, today);
    }

    
    public void testWriteOrder() throws Exception {
        Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""TODAY"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");
        Date date = Calendar.getInstance().getTime();
        format.execute(project, date, location);
        String today = project.getProperty(""TODAY"");

        SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss z"");
        sdf.setTimeZone( TimeZone.getTimeZone(""GMT"") );
        String expected = sdf.format(date);

        assertEquals(expected, today);

    }

    
    public void testPrefix() throws Exception {
        tstamp.setPrefix(""prefix"");
        tstamp.execute();
        String prop= project.getProperty(""prefix.DSTAMP"");
        assertNotNull(prop);
    }

    public void testFormatPrefix() throws Exception {
	Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""format"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");

        tstamp.setPrefix(""prefix"");
        tstamp.execute();
        String prop= project.getProperty(""prefix.format"");
        assertNotNull(prop);
    }

}
"
L39516,Class,TarTest,org.apache.tools.ant.taskdefs.TarTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TarTest.java,61,1,153,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,22,1,0,0,4,18,0.0666667,0.038961,3,3,1,14,0.038961,3,1,1,0,0,1,74,93,6,8,0,0,14,0,14,1,42,32,0,15,1,74,93,6,8,0,0,14,0,14,1,42,32,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;


public class TarTest extends BuildFileTest {

    public TarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/tar.xml"");
    }

    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() {
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() {
        expectBuildException(""test4"", ""tar cannot include itself"");
    }

    public void test5() {
        executeTarget(""test5"");
        java.io.File f
            = new java.io.File(""src/etc/testcases/taskdefs/test5.tar"");

        if (!f.exists()) {
            fail(""Tarring a directory failed"");
        }
    }

    public void test6() {
        expectBuildException(""test6"", ""Invalid value specified for longfile attribute."");
    }

    public void test7() {
        executeTarget(""test7"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test7-prefix"");

        if (!(f1.exists() && f1.isDirectory())) {
            fail(""The prefix attribute is not working properly."");
        }

        java.io.File f2
            = new java.io.File(""src/etc/testcases/taskdefs/test7dir"");

        if (!(f2.exists() && f2.isDirectory())) {
            fail(""The prefix attribute is not working properly."");
        }
    }

    public void test8() {
        executeTarget(""test8"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test8.xml"");
        if (! f1.exists()) {
            fail(""The fullpath attribute or the preserveLeadingSlashes attribute does not work propertly"");
        }
    }

    public void test9() {
        expectBuildException(""test9"", ""Invalid value specified for compression attribute."");
    }

    public void test10() {
        executeTarget(""test10"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test10.xml"");
        if (! f1.exists()) {
            fail(""The fullpath attribute or the preserveLeadingSlashes attribute does not work propertly"");
        }
    }

    public void test11() {
        executeTarget(""test11"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test11.xml"");
        if (! f1.exists()) {
            fail(""The fullpath attribute or the preserveLeadingSlashes attribute does not work propertly"");
        }
    }


    public void tearDown() {
        executeTarget(""cleanup"");
    }
}
"
L39537,Class,TaskdefTest,org.apache.tools.ant.taskdefs.TaskdefTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TaskdefTest.java,63,1,119,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,12,2,0,0,6,18,0.0769231,0.0625,3,3,1,12,0.0625,3,1,1,0,0,1,45,57,6,8,0,0,12,0,12,1,40,16,0,13,1,45,57,6,8,0,0,12,0,12,1,40,16,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;


public class TaskdefTest extends BuildFileTest { 
    
    public TaskdefTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/taskdef.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""classname specified doesn't exist"");
    }

    public void test5() { 
        expectBuildException(""test5"", ""No public execute() in "" + Project.class);
    }

    public void test5a() { 
        executeTarget(""test5a"");
    }

    public void test6() {
        expectLog(""test6"", ""simpletask: worked"");
    }

    public void test7() {
        expectLog(""test7"", ""worked"");
    }

    public void testGlobal() {
        expectLog(""testGlobal"", ""worked"");
    }

    public void testOverride() {
        executeTarget(""testOverride"");
        String log = getLog();
        assertTrue(""override warning sent"", 
                   log.indexOf(""Trying to override old definition of task copy"") > -1);
        assertTrue(""task inside target worked"", 
                   log.indexOf(""In target"") > -1);
        assertTrue(""task inside target worked"", 
                   log.indexOf(""In TaskContainer"") > -1);
    }
}
"
L39533,Class,TaskdefsTest,org.apache.tools.ant.taskdefs.TaskdefsTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TaskdefsTest.java,66,1,71,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,0,0,1,2,0.5,0.5,5,5,1,1,0.5,5,1,1,0,0,1,5,6,6,8,0,0,1,0,1,0,29,1,0,2,0,5,6,6,8,0,0,1,0,1,0,29,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public abstract class TaskdefsTest extends BuildFileTest { 
    
    public TaskdefsTest(String name) {
        super(name);
    }
}
"
L39552,Class,TestProcess,org.apache.tools.ant.taskdefs.TestProcess,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TestProcess.java,62,1,123,2,0.0,0,0,0,0.0,0.0,0,0,2,3,3,10,1,1,1,0,4,0.2,0.1,5,5,1,4,0.0862069,5,0,0,0,0,0,45,54,2,1,2,1,4,0,4,0,4,21,0,4,0,53,62,2,1,2,1,5,0,5,0,5,22,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;


public class TestProcess
    implements Runnable
{
    private boolean run = true;
    private boolean done = false;

    public void shutdown()
    {
        if (!done)
        {
            System.out.println(""shutting down TestProcess"");
            run = false;
            
            synchronized(this)
            {
                while (!done)
                {
                    try { wait(); } catch (InterruptedException ie) {}
                }
            }
            
            System.out.println(""TestProcess shut down"");
        }
    }

    public void run()
    {
        for (int i = 0; i < 5 && run; i++)
        {
            System.out.println(Thread.currentThread().getName());
            
            try { Thread.sleep(2000); } catch (InterruptedException ie) {}
        }

        synchronized(this)
        {
            done = true;
            notifyAll();
        }
    }

    public Thread getShutdownHook()
    {
        return new TestProcessShutdownHook();
    }

    private class TestProcessShutdownHook
        extends Thread
    {
        public void run()
        {
            shutdown();
        }
    }

    public static void main(String[] args)
    {
        TestProcess tp = new TestProcess();
        new Thread(tp, ""TestProcess thread"").start();
        Runtime.getRuntime().addShutdownHook(tp.getShutdownHook());
    }
}
"
L39564,Class,TestProcess$TestProcessShutdownHook,org.apache.tools.ant.taskdefs.TestProcess$TestProcessShutdownHook,L39552,L103,src/testcases/org/apache/tools/ant/taskdefs/TestProcess.java,108,5,115,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,1,0,1,2,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,1,0,1,1,0,1,0,8,8,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;


public class TestProcess
    implements Runnable
{
    private boolean run = true;
    private boolean done = false;

    public void shutdown()
    {
        if (!done)
        {
            System.out.println(""shutting down TestProcess"");
            run = false;
            
            synchronized(this)
            {
                while (!done)
                {
                    try { wait(); } catch (InterruptedException ie) {}
                }
            }
            
            System.out.println(""TestProcess shut down"");
        }
    }

    public void run()
    {
        for (int i = 0; i < 5 && run; i++)
        {
            System.out.println(Thread.currentThread().getName());
            
            try { Thread.sleep(2000); } catch (InterruptedException ie) {}
        }

        synchronized(this)
        {
            done = true;
            notifyAll();
        }
    }

    public Thread getShutdownHook()
    {
        return new TestProcessShutdownHook();
    }

    private class TestProcessShutdownHook
        extends Thread
    {
        public void run()
        {
            shutdown();
        }
    }

    public static void main(String[] args)
    {
        TestProcess tp = new TestProcess();
        new Thread(tp, ""TestProcess thread"").start();
        Runtime.getRuntime().addShutdownHook(tp.getShutdownHook());
    }
}
"
L38719,Class,TimeProcess,org.apache.tools.ant.taskdefs.TimeProcess,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TimeProcess.java,63,1,71,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,2,0,0,1,0.5,0.4375,7,7,1,1,0.4375,7,0,0,0,0,0,9,9,0,0,0,0,1,0,1,0,1,4,0,1,0,9,9,0,0,0,0,1,0,1,0,1,4,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;


public class TimeProcess {
    public static void main(String[] args) throws Exception {
        int time = Integer.parseInt(args[0]);
        if (time < 1) {
            throw new IllegalArgumentException(""Invalid time: "" + time);
        }
        Thread.sleep(time);
    }
}
"
L39583,Class,TouchTest,org.apache.tools.ant.taskdefs.TouchTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TouchTest.java,59,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,1,0,0,3,8,0.333333,0.32,8,8,2,4,0.32,8,1,1,0,0,1,17,30,6,8,0,0,5,0,5,1,33,5,0,6,1,17,30,6,8,0,0,5,0,5,1,33,5,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class TouchTest extends BuildFileTest {

    public TouchTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/touch.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    
    public void testNoSeconds() {
        executeTarget(""noSeconds"");
    }

    
    public void testSeconds() {
        executeTarget(""seconds"");
    }
}
"
L39611,Class,TypeAdapterTest,org.apache.tools.ant.taskdefs.TypeAdapterTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TypeAdapterTest.java,69,1,192,2,0.2,1,4,1,0.0967742,0.114286,12,12,3,0,0,8,1,0,0,5,13,0.111111,0.0967742,3,3,1,8,0.0275229,3,1,1,0,0,1,28,40,6,8,0,0,8,0,8,1,36,8,0,9,1,106,124,19,29,4,2,18,0,18,4,118,37,0,71,19,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.TypeAdapter;



public class TypeAdapterTest extends BuildFileTest { 
    
    public TypeAdapterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typeadapter.xml"");
    }
    
    public void testTaskAdapter() {
        expectLogContaining(""taskadapter"", ""MyExec called"");
    }

    public void testRunAdapter() {
        expectLogContaining(""runadapter"", ""MyRunnable called"");
    }

    public void testRunAdapterError() {
        expectBuildExceptionContaining(
            ""runadaptererror"", ""xx"", ""No public run() method in"");
    }

    public void testDelay() {
        expectLogContaining(""delay"", ""MyTask called"");
    }

    public void testOnErrorReport() {
        expectLogContaining(""onerror.report"",
                            ""MyTaskNotPresent cannot be found"");
    }

    public void testOnErrorIgnore() {
        expectLog(""onerror.ignore"","""");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }
    
    public static class MyExec {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void execute() {
            project.log(""MyExec called"");
        }
    }

    public static class MyRunnable {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void run() {
            project.log(""MyRunnable called"");
        }
    }

    public static class RunnableAdapter
        extends Task implements TypeAdapter
    {
        private String execMethodName = ""run"";
        private Object proxy;
    
        public Method getExecuteMethod(Class proxyClass) {
            try {
                Method execMethod = proxyClass.getMethod(
                    execMethodName, null);
                if (!Void.TYPE.equals(execMethod.getReturnType())) {
                    String message =
                        ""return type of "" + execMethodName + ""() should be "" 
                        + ""void but was \"""" + execMethod.getReturnType() +
                        ""\"" in "" 
                        + proxyClass;
                    log(message, Project.MSG_WARN);
                }
                return execMethod;
            } catch (NoSuchMethodException e) {
                String message = ""No public ""+ execMethodName +
                    ""() method in ""
                    + proxyClass;
                log(message, Project.MSG_ERR);
                throw new BuildException(message);
            }
        }
        public void checkProxyClass(Class proxyClass) {
            getExecuteMethod(proxyClass);
        }
        
        public void setProxy(Object o) {
            getExecuteMethod(o.getClass());
            this.proxy = o;
        }

        public Object getProxy() {
            return proxy;
        }
    
        public void execute() {
            getProject().setProjectReference(proxy);
            Method executeMethod = getExecuteMethod(proxy.getClass());
            try {
                executeMethod.invoke(proxy, null);
            } catch (java.lang.reflect.InvocationTargetException ie) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                Throwable t = ie.getTargetException();
                if (t instanceof BuildException) {
                    throw ((BuildException) t);
                } else {
                    throw new BuildException(t);
                }
            } catch (Exception ex) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                throw new BuildException(ex);
            }
        }
    }
}
"
L39625,Class,TypeAdapterTest$MyExec,org.apache.tools.ant.taskdefs.TypeAdapterTest$MyExec,L39611,L103,src/testcases/org/apache/tools/ant/taskdefs/TypeAdapterTest.java,111,5,120,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,1,3,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,9,10,1,0,1,0,2,0,2,1,2,2,0,2,1,9,10,1,0,1,0,2,0,2,1,2,2,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.TypeAdapter;



public class TypeAdapterTest extends BuildFileTest { 
    
    public TypeAdapterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typeadapter.xml"");
    }
    
    public void testTaskAdapter() {
        expectLogContaining(""taskadapter"", ""MyExec called"");
    }

    public void testRunAdapter() {
        expectLogContaining(""runadapter"", ""MyRunnable called"");
    }

    public void testRunAdapterError() {
        expectBuildExceptionContaining(
            ""runadaptererror"", ""xx"", ""No public run() method in"");
    }

    public void testDelay() {
        expectLogContaining(""delay"", ""MyTask called"");
    }

    public void testOnErrorReport() {
        expectLogContaining(""onerror.report"",
                            ""MyTaskNotPresent cannot be found"");
    }

    public void testOnErrorIgnore() {
        expectLog(""onerror.ignore"","""");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }
    
    public static class MyExec {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void execute() {
            project.log(""MyExec called"");
        }
    }

    public static class MyRunnable {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void run() {
            project.log(""MyRunnable called"");
        }
    }

    public static class RunnableAdapter
        extends Task implements TypeAdapter
    {
        private String execMethodName = ""run"";
        private Object proxy;
    
        public Method getExecuteMethod(Class proxyClass) {
            try {
                Method execMethod = proxyClass.getMethod(
                    execMethodName, null);
                if (!Void.TYPE.equals(execMethod.getReturnType())) {
                    String message =
                        ""return type of "" + execMethodName + ""() should be "" 
                        + ""void but was \"""" + execMethod.getReturnType() +
                        ""\"" in "" 
                        + proxyClass;
                    log(message, Project.MSG_WARN);
                }
                return execMethod;
            } catch (NoSuchMethodException e) {
                String message = ""No public ""+ execMethodName +
                    ""() method in ""
                    + proxyClass;
                log(message, Project.MSG_ERR);
                throw new BuildException(message);
            }
        }
        public void checkProxyClass(Class proxyClass) {
            getExecuteMethod(proxyClass);
        }
        
        public void setProxy(Object o) {
            getExecuteMethod(o.getClass());
            this.proxy = o;
        }

        public Object getProxy() {
            return proxy;
        }
    
        public void execute() {
            getProject().setProjectReference(proxy);
            Method executeMethod = getExecuteMethod(proxy.getClass());
            try {
                executeMethod.invoke(proxy, null);
            } catch (java.lang.reflect.InvocationTargetException ie) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                Throwable t = ie.getTargetException();
                if (t instanceof BuildException) {
                    throw ((BuildException) t);
                } else {
                    throw new BuildException(t);
                }
            } catch (Exception ex) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                throw new BuildException(ex);
            }
        }
    }
}
"
L39632,Class,TypeAdapterTest$MyRunnable,org.apache.tools.ant.taskdefs.TypeAdapterTest$MyRunnable,L39611,L103,src/testcases/org/apache/tools/ant/taskdefs/TypeAdapterTest.java,122,5,131,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,1,3,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,9,10,1,0,1,0,2,0,2,1,2,2,0,2,1,9,10,1,0,1,0,2,0,2,1,2,2,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.TypeAdapter;



public class TypeAdapterTest extends BuildFileTest { 
    
    public TypeAdapterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typeadapter.xml"");
    }
    
    public void testTaskAdapter() {
        expectLogContaining(""taskadapter"", ""MyExec called"");
    }

    public void testRunAdapter() {
        expectLogContaining(""runadapter"", ""MyRunnable called"");
    }

    public void testRunAdapterError() {
        expectBuildExceptionContaining(
            ""runadaptererror"", ""xx"", ""No public run() method in"");
    }

    public void testDelay() {
        expectLogContaining(""delay"", ""MyTask called"");
    }

    public void testOnErrorReport() {
        expectLogContaining(""onerror.report"",
                            ""MyTaskNotPresent cannot be found"");
    }

    public void testOnErrorIgnore() {
        expectLog(""onerror.ignore"","""");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }
    
    public static class MyExec {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void execute() {
            project.log(""MyExec called"");
        }
    }

    public static class MyRunnable {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void run() {
            project.log(""MyRunnable called"");
        }
    }

    public static class RunnableAdapter
        extends Task implements TypeAdapter
    {
        private String execMethodName = ""run"";
        private Object proxy;
    
        public Method getExecuteMethod(Class proxyClass) {
            try {
                Method execMethod = proxyClass.getMethod(
                    execMethodName, null);
                if (!Void.TYPE.equals(execMethod.getReturnType())) {
                    String message =
                        ""return type of "" + execMethodName + ""() should be "" 
                        + ""void but was \"""" + execMethod.getReturnType() +
                        ""\"" in "" 
                        + proxyClass;
                    log(message, Project.MSG_WARN);
                }
                return execMethod;
            } catch (NoSuchMethodException e) {
                String message = ""No public ""+ execMethodName +
                    ""() method in ""
                    + proxyClass;
                log(message, Project.MSG_ERR);
                throw new BuildException(message);
            }
        }
        public void checkProxyClass(Class proxyClass) {
            getExecuteMethod(proxyClass);
        }
        
        public void setProxy(Object o) {
            getExecuteMethod(o.getClass());
            this.proxy = o;
        }

        public Object getProxy() {
            return proxy;
        }
    
        public void execute() {
            getProject().setProjectReference(proxy);
            Method executeMethod = getExecuteMethod(proxy.getClass());
            try {
                executeMethod.invoke(proxy, null);
            } catch (java.lang.reflect.InvocationTargetException ie) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                Throwable t = ie.getTargetException();
                if (t instanceof BuildException) {
                    throw ((BuildException) t);
                } else {
                    throw new BuildException(t);
                }
            } catch (Exception ex) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                throw new BuildException(ex);
            }
        }
    }
}
"
L39622,Class,TypeAdapterTest$MyTask,org.apache.tools.ant.taskdefs.TypeAdapterTest$MyTask,L39611,L103,src/testcases/org/apache/tools/ant/taskdefs/TypeAdapterTest.java,105,5,109,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,1,2,0.0,0.0,0,0,0,2,0.0,0,2,2,0,0,1,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.TypeAdapter;



public class TypeAdapterTest extends BuildFileTest { 
    
    public TypeAdapterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typeadapter.xml"");
    }
    
    public void testTaskAdapter() {
        expectLogContaining(""taskadapter"", ""MyExec called"");
    }

    public void testRunAdapter() {
        expectLogContaining(""runadapter"", ""MyRunnable called"");
    }

    public void testRunAdapterError() {
        expectBuildExceptionContaining(
            ""runadaptererror"", ""xx"", ""No public run() method in"");
    }

    public void testDelay() {
        expectLogContaining(""delay"", ""MyTask called"");
    }

    public void testOnErrorReport() {
        expectLogContaining(""onerror.report"",
                            ""MyTaskNotPresent cannot be found"");
    }

    public void testOnErrorIgnore() {
        expectLog(""onerror.ignore"","""");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }
    
    public static class MyExec {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void execute() {
            project.log(""MyExec called"");
        }
    }

    public static class MyRunnable {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void run() {
            project.log(""MyRunnable called"");
        }
    }

    public static class RunnableAdapter
        extends Task implements TypeAdapter
    {
        private String execMethodName = ""run"";
        private Object proxy;
    
        public Method getExecuteMethod(Class proxyClass) {
            try {
                Method execMethod = proxyClass.getMethod(
                    execMethodName, null);
                if (!Void.TYPE.equals(execMethod.getReturnType())) {
                    String message =
                        ""return type of "" + execMethodName + ""() should be "" 
                        + ""void but was \"""" + execMethod.getReturnType() +
                        ""\"" in "" 
                        + proxyClass;
                    log(message, Project.MSG_WARN);
                }
                return execMethod;
            } catch (NoSuchMethodException e) {
                String message = ""No public ""+ execMethodName +
                    ""() method in ""
                    + proxyClass;
                log(message, Project.MSG_ERR);
                throw new BuildException(message);
            }
        }
        public void checkProxyClass(Class proxyClass) {
            getExecuteMethod(proxyClass);
        }
        
        public void setProxy(Object o) {
            getExecuteMethod(o.getClass());
            this.proxy = o;
        }

        public Object getProxy() {
            return proxy;
        }
    
        public void execute() {
            getProject().setProjectReference(proxy);
            Method executeMethod = getExecuteMethod(proxy.getClass());
            try {
                executeMethod.invoke(proxy, null);
            } catch (java.lang.reflect.InvocationTargetException ie) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                Throwable t = ie.getTargetException();
                if (t instanceof BuildException) {
                    throw ((BuildException) t);
                } else {
                    throw new BuildException(t);
                }
            } catch (Exception ex) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                throw new BuildException(ex);
            }
        }
    }
}
"
L39639,Class,TypeAdapterTest$RunnableAdapter,org.apache.tools.ant.taskdefs.TypeAdapterTest$RunnableAdapter,L39611,L103,src/testcases/org/apache/tools/ant/taskdefs/TypeAdapterTest.java,133,5,191,6,0.312195,1,4,1,0.20339,0.222222,12,12,1,2,2,10,5,0,0,5,10,0.0,0.0,0,0,0,6,0.0,0,2,3,0,0,2,55,59,11,12,2,2,5,0,5,1,42,24,0,32,9,55,59,11,12,2,2,5,0,5,1,42,24,0,32,9,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.lang.reflect.Method;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.TypeAdapter;



public class TypeAdapterTest extends BuildFileTest { 
    
    public TypeAdapterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typeadapter.xml"");
    }
    
    public void testTaskAdapter() {
        expectLogContaining(""taskadapter"", ""MyExec called"");
    }

    public void testRunAdapter() {
        expectLogContaining(""runadapter"", ""MyRunnable called"");
    }

    public void testRunAdapterError() {
        expectBuildExceptionContaining(
            ""runadaptererror"", ""xx"", ""No public run() method in"");
    }

    public void testDelay() {
        expectLogContaining(""delay"", ""MyTask called"");
    }

    public void testOnErrorReport() {
        expectLogContaining(""onerror.report"",
                            ""MyTaskNotPresent cannot be found"");
    }

    public void testOnErrorIgnore() {
        expectLog(""onerror.ignore"","""");
    }

    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }
    
    public static class MyExec {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void execute() {
            project.log(""MyExec called"");
        }
    }

    public static class MyRunnable {
        private Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        
        public void run() {
            project.log(""MyRunnable called"");
        }
    }

    public static class RunnableAdapter
        extends Task implements TypeAdapter
    {
        private String execMethodName = ""run"";
        private Object proxy;
    
        public Method getExecuteMethod(Class proxyClass) {
            try {
                Method execMethod = proxyClass.getMethod(
                    execMethodName, null);
                if (!Void.TYPE.equals(execMethod.getReturnType())) {
                    String message =
                        ""return type of "" + execMethodName + ""() should be "" 
                        + ""void but was \"""" + execMethod.getReturnType() +
                        ""\"" in "" 
                        + proxyClass;
                    log(message, Project.MSG_WARN);
                }
                return execMethod;
            } catch (NoSuchMethodException e) {
                String message = ""No public ""+ execMethodName +
                    ""() method in ""
                    + proxyClass;
                log(message, Project.MSG_ERR);
                throw new BuildException(message);
            }
        }
        public void checkProxyClass(Class proxyClass) {
            getExecuteMethod(proxyClass);
        }
        
        public void setProxy(Object o) {
            getExecuteMethod(o.getClass());
            this.proxy = o;
        }

        public Object getProxy() {
            return proxy;
        }
    
        public void execute() {
            getProject().setProjectReference(proxy);
            Method executeMethod = getExecuteMethod(proxy.getClass());
            try {
                executeMethod.invoke(proxy, null);
            } catch (java.lang.reflect.InvocationTargetException ie) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                Throwable t = ie.getTargetException();
                if (t instanceof BuildException) {
                    throw ((BuildException) t);
                } else {
                    throw new BuildException(t);
                }
            } catch (Exception ex) {
                log(""Error in "" + proxy.getClass(), Project.MSG_ERR);
                throw new BuildException(ex);
            }
        }
    }
}
"
L39654,Class,TypedefTest,org.apache.tools.ant.taskdefs.TypedefTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/TypedefTest.java,64,1,114,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,9,2,0,0,6,15,0.2,0.173913,8,8,2,8,0.173913,8,1,1,0,0,1,38,51,6,8,0,0,9,0,9,1,37,15,0,10,1,38,51,6,8,0,0,9,0,9,1,37,15,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;


public class TypedefTest extends BuildFileTest { 
    
    public TypedefTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typedef.xml"");
    }
    
    public void testEmpty() { 
        expectBuildException(""empty"", ""required argument not specified"");
    }

    public void testNoName() { 
        expectBuildException(""noName"", ""required argument not specified"");
    }

    public void testNoClassname() { 
        expectBuildException(""noClassname"", ""required argument not specified"");
    }

    public void testClassNotFound() { 
        expectBuildException(""classNotFound"", 
                             ""classname specified doesn't exist"");
    }

    public void testGlobal() {
        expectLog(""testGlobal"", """");
        Object ref = project.getReferences().get(""global"");
        assertNotNull(""ref is not null"", ref);
        assertEquals(""org.example.types.TypedefTestType"",
                     ref.getClass().getName());
    }

    public void testLocal() {
        expectLog(""testLocal"", """");
        Object ref = project.getReferences().get(""local"");
        assertNotNull(""ref is not null"", ref);
        assertEquals(""org.example.types.TypedefTestType"",
                     ref.getClass().getName());
    }

    
    public void testDoubleNotPresent() {
        expectLogContaining(""double-notpresent"", ""hi"");
    }
}
"
L39667,Class,UntarTest,org.apache.tools.ant.taskdefs.UntarTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/UntarTest.java,63,1,130,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,11,3,0,0,8,19,0.0833333,0.0666667,4,4,1,11,0.0666667,4,1,1,0,0,1,56,68,6,8,0,0,11,0,11,1,39,23,0,12,1,56,68,6,8,0,0,11,0,11,1,39,23,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class UntarTest extends BuildFileTest {

    public UntarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/untar.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testRealGzipTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realGzipTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testRealBzip2Test() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realBzip2Test"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testTestTarTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testTarTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testTestGzipTarTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testGzipTarTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testTestBzip2TarTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testBzip2TarTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testSrcDirTest() {
        expectBuildException(""srcDirTest"", ""Src cannot be a directory."");
    }

    public void testEncoding() {
        expectSpecificBuildException(""encoding"", 
                                     ""<untar> overrides setEncoding."",
                                     ""The untar task doesn't support the ""
                                     + ""encoding attribute"");
    }

}
"
L39681,Class,UnzipTest,org.apache.tools.ant.taskdefs.UnzipTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/UnzipTest.java,63,1,172,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,15,3,0,0,8,23,0.4375,0.229167,22,22,7,9,0.229167,22,1,1,0,0,1,74,110,6,8,0,0,15,0,15,1,43,30,0,16,1,74,110,6,8,0,0,15,0,15,1,43,30,0,16,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class UnzipTest extends BuildFileTest { 
    
    public UnzipTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/unzip.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }


    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
    public void testTestZipTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testZipTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
    public void testTestUncompressedZipTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testUncompressedZipTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
    
    public void testPatternSetExcludeOnly() {
        executeTarget(""testPatternSetExcludeOnly"");
        assertTrue(""1/foo is excluded"",
                   !getProject().resolveFile(""unziptestout/1/foo"").exists());
        assertTrue(""2/bar is not excluded"",
                   getProject().resolveFile(""unziptestout/2/bar"").exists());
    }

    
    public void testPatternSetIncludeOnly() {
        executeTarget(""testPatternSetIncludeOnly"");
        assertTrue(""1/foo is not included"",
                   !getProject().resolveFile(""unziptestout/1/foo"").exists());
        assertTrue(""2/bar is included"",
                   getProject().resolveFile(""unziptestout/2/bar"").exists());
    }

    
    public void testPatternSetIncludeAndExclude() {
        executeTarget(""testPatternSetIncludeAndExclude"");
        assertTrue(""1/foo is not included"",
                   !getProject().resolveFile(""unziptestout/1/foo"").exists());
        assertTrue(""2/bar is excluded"",
                   !getProject().resolveFile(""unziptestout/2/bar"").exists());
    }

    
    public void testSelfExtractingArchive() {
        executeTarget(""selfExtractingArchive"");
    }


    
    public void testPatternSetSlashOnly() {
        executeTarget(""testPatternSetSlashOnly"");
        assertTrue(""1/foo is not included"",
                   !getProject().resolveFile(""unziptestout/1/foo"").exists());
        assertTrue(""2/bar is included"",
                   getProject().resolveFile(""unziptestout/2/bar"").exists());
    }

    
    public void testEncoding() {
        executeTarget(""encodingTest"");
        assertTrue(""foo has been properly named"",
                   getProject().resolveFile(""unziptestout/foo"").exists());
    }

}
"
L39705,Class,WarTest,org.apache.tools.ant.taskdefs.WarTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/WarTest.java,64,1,86,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,3,7,0.4,0.333333,8,8,2,3,0.333333,8,1,1,0,0,1,16,23,7,8,1,0,4,1,4,1,32,4,1,5,1,16,23,7,8,1,0,4,1,4,1,32,4,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class WarTest extends BuildFileTest {
    public static final String TEST_BUILD_FILE
        = ""src/etc/testcases/taskdefs/war.xml"";
    
    public WarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TEST_BUILD_FILE);
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testLibRefs() {
        executeTarget(""testlibrefs"");
    }
}
"
L39729,Class,XmlPropertyTest,org.apache.tools.ant.taskdefs.XmlPropertyTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/XmlPropertyTest.java,75,1,384,2,0.0,0,0,0,0.0,0.0,0,0,3,4,4,44,6,0,0,21,43,0.0625,0.207031,53,32,1,15,0.200758,53,1,1,0,0,1,203,302,7,11,1,3,22,0,15,1,50,110,0,16,1,211,310,7,11,1,3,23,0,16,1,51,113,0,17,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.FileUtils;


public class XmlPropertyTest extends BuildFileTest {
    private static FileUtils fileUtils = FileUtils.newFileUtils();

    public XmlPropertyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/xmlproperty.xml"");
    }

    public void testProperties() {
        executeTarget(""test"");
        assertEquals(""true"", getProject().getProperty(""root-tag(myattr)""));
        assertEquals(""Text"", getProject().getProperty(""root-tag.inner-tag""));
        assertEquals(""val"",
                     getProject().getProperty(""root-tag.inner-tag(someattr)""));
        assertEquals(""false"", getProject().getProperty(""root-tag.a2.a3.a4""));
        assertEquals(""CDATA failed"",
            ""<test>"", getProject().getProperty(""root-tag.cdatatag""));
    }

    public void testDTD() {
        executeTarget(""testdtd"");
        assertEquals(""Text"", getProject().getProperty(""root-tag.inner-tag""));
    }

    public void testNone () {
        doTest(""testNone"", false, false, false, false, false);
    }

    public void testKeeproot() {
        doTest(""testKeeproot"", true, false, false, false, false);
    }

    public void testCollapse () {
        doTest(""testCollapse"", false, true, false, false, false);
    }

    public void testSemantic () {
        doTest(""testSemantic"", false, false, true, false, false);
    }

    public void testKeeprootCollapse () {
        doTest(""testKeeprootCollapse"", true, true, false, false, false);
    }

    public void testKeeprootSemantic () {
        doTest(""testKeeprootSemantic"", true, false, true, false, false);
    }

    public void testCollapseSemantic () {
        doTest(""testCollapseSemantic"", false, true, true, false, false);
    }

    public void testKeeprootCollapseSemantic () {
        doTest(""testKeeprootCollapseSemantic"", true, true, true, false, false);
    }

    public void testInclude () {
        doTest(""testInclude"", false, false, false, true, false);
    }

    public void testSemanticInclude () {
        doTest(""testSemanticInclude"", false, false, true, true, false);
    }

    public void testSemanticLocal () {
        doTest(""testSemanticInclude"", false, false, true, false, true);
    }

    
    private void doTest(String msg, boolean keepRoot, boolean collapse,
                        boolean semantic, boolean include, boolean localRoot) {
        Enumeration iter =
            getFiles(new File(""src/etc/testcases/taskdefs/xmlproperty/inputs""));
        while (iter.hasMoreElements()) {
            File inputFile = (File) iter.nextElement();
            
            
            File workingDir;
            if ( localRoot ) {
                workingDir = fileUtils.getParentFile(inputFile);
            } else {
                workingDir = fileUtils.resolveFile(new File("".""), ""."");
            }

            try {

                File propertyFile = getGoldfile(inputFile, keepRoot, collapse,
                                                semantic, include, localRoot);
                if (!propertyFile.exists()) {



                    continue;
                }

                

                Project project = new Project();

                XmlProperty xmlproperty = new XmlProperty();
                xmlproperty.setProject(project);
                xmlproperty.setFile(inputFile);

                xmlproperty.setKeeproot(keepRoot);
                xmlproperty.setCollapseAttributes(collapse);
                xmlproperty.setSemanticAttributes(semantic);
                xmlproperty.setIncludeSemanticAttribute(include);
                xmlproperty.setRootDirectory(workingDir);

                
                
                
                project.setNewProperty(""override.property.test"", ""foo"");

                xmlproperty.execute();

                Properties props = new Properties();
                props.load(new FileInputStream(propertyFile));

                

                ensureProperties(msg, inputFile, workingDir, project, props);
                ensureReferences(msg, inputFile, project.getReferences());

            } catch (IOException ex) {
                fail(ex.toString());
            }
        }
    }

    
    private static void ensureProperties (String msg, File inputFile,
                                          File workingDir, Project project,
                                          Properties properties) {
        Hashtable xmlproperties = project.getProperties();
        
        Enumeration propertyKeyEnum = properties.propertyNames();
        while(propertyKeyEnum.hasMoreElements()){
            String currentKey = propertyKeyEnum.nextElement().toString();
            String assertMsg = msg + ""-"" + inputFile.getName()
                + "" Key="" + currentKey;

            String propertyValue = properties.getProperty(currentKey);

            String xmlValue = (String)xmlproperties.get(currentKey);

            if ( propertyValue.indexOf(""ID."") == 0 ) {
                
                
                
                
                
                String id = currentKey;
                Object obj = project.getReferences().get(id);

                if ( obj == null ) {
                    fail(assertMsg + "" Object ID does not exist."");
                }

                
                propertyValue =
                    propertyValue.substring(3, propertyValue.length());
                if (propertyValue.equals(""path"")) {
                    if (!(obj instanceof Path)) {
                        fail(assertMsg + "" Path ID is a ""
                             + obj.getClass().getName());
                    }
                } else {
                    assertEquals(assertMsg, propertyValue, obj.toString());
                }

            } else {

                if (propertyValue.indexOf(""FILE."") == 0) {
                    
                    
                    
                    String fileName =
                        propertyValue.substring(5, propertyValue.length());
                    File f = new File(workingDir, fileName);
                    propertyValue = f.getAbsolutePath();
                }

                assertEquals(assertMsg, propertyValue, xmlValue);
            }

        }
    }

    
    private static void printProperties(Hashtable xmlproperties) {
        Enumeration keyEnum = xmlproperties.keys();
        while (keyEnum.hasMoreElements()) {
            String currentKey = keyEnum.nextElement().toString();
            System.out.println(currentKey + "" = ""
                               + xmlproperties.get(currentKey));
        }
    }

    
    private static void ensureReferences (String msg, File inputFile,
                                          Hashtable references) {
        Enumeration referenceKeyEnum = references.keys();
        while(referenceKeyEnum.hasMoreElements()){
            String currentKey = referenceKeyEnum.nextElement().toString();
            Object currentValue = references.get(currentKey);

            if (currentValue instanceof Path) {
            } else if (currentValue instanceof String) {
            } else {
                if( ! currentKey.startsWith(""ant."") ) {
                    fail(msg + ""-"" + inputFile.getName() + "" Key=""
                         + currentKey + "" is not a recognized type."");
                }
            }
        }
    }

    
    private static File getGoldfile (File input, boolean keepRoot,
                                     boolean collapse, boolean semantic,
                                     boolean include, boolean localRoot) {
        
        String baseName = input.getName().toLowerCase();
        if (baseName.endsWith("".xml"")) {
            baseName = baseName.substring(0, baseName.length() - 4)
                + "".properties"";
        }

        File dir = fileUtils.getParentFile(fileUtils.getParentFile(input));

        String goldFileFolder = ""goldfiles/"";

        if (keepRoot) {
            goldFileFolder += ""keeproot-"";
        } else {
            goldFileFolder += ""nokeeproot-"";
        }

        if (semantic) {
            goldFileFolder += ""semantic-"";
            if (include) {
                goldFileFolder += ""include-"";
            }
        } else {
            if (collapse) {
                goldFileFolder += ""collapse-"";
            } else {
                goldFileFolder += ""nocollapse-"";
            }
        }

        return new File(dir, goldFileFolder + baseName);
    }

    
    private static Enumeration getFiles (final File startingDir) {
        Vector result = new Vector();
        getFiles(startingDir, result);
        return result.elements();
    }

    
    private static void getFiles (final File startingDir, Vector collect) {
        FileFilter filter = new FileFilter() {
            public boolean accept (File file) {
                if (file.isDirectory()) {
                    return true;
                } else {
                    return (file.getPath().indexOf(""taskdefs"") > 0 &&
                            file.getPath().toLowerCase().endsWith("".xml"") );
                }
            }
        };

        File[] files = startingDir.listFiles(filter);
        for (int i=0;i<files.length;i++) {
            File f = files[i];
            if (!f.isDirectory()) {
                collect.addElement(f);
            } else {
                getFiles(f, collect);
            }
        }
    }
}
"
L39808,Class,XmlPropertyTest$1,org.apache.tools.ant.taskdefs.XmlPropertyTest$1,L39798,L103,src/testcases/org/apache/tools/ant/taskdefs/XmlPropertyTest.java,363,46,372,10,0.0,0,0,0,0.0,0.0,0,0,1,1,1,3,0,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,10,10,0,0,0,0,1,0,1,0,1,3,0,1,0,10,10,0,0,0,0,1,0,1,0,1,3,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.FileUtils;


public class XmlPropertyTest extends BuildFileTest {
    private static FileUtils fileUtils = FileUtils.newFileUtils();

    public XmlPropertyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/xmlproperty.xml"");
    }

    public void testProperties() {
        executeTarget(""test"");
        assertEquals(""true"", getProject().getProperty(""root-tag(myattr)""));
        assertEquals(""Text"", getProject().getProperty(""root-tag.inner-tag""));
        assertEquals(""val"",
                     getProject().getProperty(""root-tag.inner-tag(someattr)""));
        assertEquals(""false"", getProject().getProperty(""root-tag.a2.a3.a4""));
        assertEquals(""CDATA failed"",
            ""<test>"", getProject().getProperty(""root-tag.cdatatag""));
    }

    public void testDTD() {
        executeTarget(""testdtd"");
        assertEquals(""Text"", getProject().getProperty(""root-tag.inner-tag""));
    }

    public void testNone () {
        doTest(""testNone"", false, false, false, false, false);
    }

    public void testKeeproot() {
        doTest(""testKeeproot"", true, false, false, false, false);
    }

    public void testCollapse () {
        doTest(""testCollapse"", false, true, false, false, false);
    }

    public void testSemantic () {
        doTest(""testSemantic"", false, false, true, false, false);
    }

    public void testKeeprootCollapse () {
        doTest(""testKeeprootCollapse"", true, true, false, false, false);
    }

    public void testKeeprootSemantic () {
        doTest(""testKeeprootSemantic"", true, false, true, false, false);
    }

    public void testCollapseSemantic () {
        doTest(""testCollapseSemantic"", false, true, true, false, false);
    }

    public void testKeeprootCollapseSemantic () {
        doTest(""testKeeprootCollapseSemantic"", true, true, true, false, false);
    }

    public void testInclude () {
        doTest(""testInclude"", false, false, false, true, false);
    }

    public void testSemanticInclude () {
        doTest(""testSemanticInclude"", false, false, true, true, false);
    }

    public void testSemanticLocal () {
        doTest(""testSemanticInclude"", false, false, true, false, true);
    }

    
    private void doTest(String msg, boolean keepRoot, boolean collapse,
                        boolean semantic, boolean include, boolean localRoot) {
        Enumeration iter =
            getFiles(new File(""src/etc/testcases/taskdefs/xmlproperty/inputs""));
        while (iter.hasMoreElements()) {
            File inputFile = (File) iter.nextElement();
            
            
            File workingDir;
            if ( localRoot ) {
                workingDir = fileUtils.getParentFile(inputFile);
            } else {
                workingDir = fileUtils.resolveFile(new File("".""), ""."");
            }

            try {

                File propertyFile = getGoldfile(inputFile, keepRoot, collapse,
                                                semantic, include, localRoot);
                if (!propertyFile.exists()) {



                    continue;
                }

                

                Project project = new Project();

                XmlProperty xmlproperty = new XmlProperty();
                xmlproperty.setProject(project);
                xmlproperty.setFile(inputFile);

                xmlproperty.setKeeproot(keepRoot);
                xmlproperty.setCollapseAttributes(collapse);
                xmlproperty.setSemanticAttributes(semantic);
                xmlproperty.setIncludeSemanticAttribute(include);
                xmlproperty.setRootDirectory(workingDir);

                
                
                
                project.setNewProperty(""override.property.test"", ""foo"");

                xmlproperty.execute();

                Properties props = new Properties();
                props.load(new FileInputStream(propertyFile));

                

                ensureProperties(msg, inputFile, workingDir, project, props);
                ensureReferences(msg, inputFile, project.getReferences());

            } catch (IOException ex) {
                fail(ex.toString());
            }
        }
    }

    
    private static void ensureProperties (String msg, File inputFile,
                                          File workingDir, Project project,
                                          Properties properties) {
        Hashtable xmlproperties = project.getProperties();
        
        Enumeration propertyKeyEnum = properties.propertyNames();
        while(propertyKeyEnum.hasMoreElements()){
            String currentKey = propertyKeyEnum.nextElement().toString();
            String assertMsg = msg + ""-"" + inputFile.getName()
                + "" Key="" + currentKey;

            String propertyValue = properties.getProperty(currentKey);

            String xmlValue = (String)xmlproperties.get(currentKey);

            if ( propertyValue.indexOf(""ID."") == 0 ) {
                
                
                
                
                
                String id = currentKey;
                Object obj = project.getReferences().get(id);

                if ( obj == null ) {
                    fail(assertMsg + "" Object ID does not exist."");
                }

                
                propertyValue =
                    propertyValue.substring(3, propertyValue.length());
                if (propertyValue.equals(""path"")) {
                    if (!(obj instanceof Path)) {
                        fail(assertMsg + "" Path ID is a ""
                             + obj.getClass().getName());
                    }
                } else {
                    assertEquals(assertMsg, propertyValue, obj.toString());
                }

            } else {

                if (propertyValue.indexOf(""FILE."") == 0) {
                    
                    
                    
                    String fileName =
                        propertyValue.substring(5, propertyValue.length());
                    File f = new File(workingDir, fileName);
                    propertyValue = f.getAbsolutePath();
                }

                assertEquals(assertMsg, propertyValue, xmlValue);
            }

        }
    }

    
    private static void printProperties(Hashtable xmlproperties) {
        Enumeration keyEnum = xmlproperties.keys();
        while (keyEnum.hasMoreElements()) {
            String currentKey = keyEnum.nextElement().toString();
            System.out.println(currentKey + "" = ""
                               + xmlproperties.get(currentKey));
        }
    }

    
    private static void ensureReferences (String msg, File inputFile,
                                          Hashtable references) {
        Enumeration referenceKeyEnum = references.keys();
        while(referenceKeyEnum.hasMoreElements()){
            String currentKey = referenceKeyEnum.nextElement().toString();
            Object currentValue = references.get(currentKey);

            if (currentValue instanceof Path) {
            } else if (currentValue instanceof String) {
            } else {
                if( ! currentKey.startsWith(""ant."") ) {
                    fail(msg + ""-"" + inputFile.getName() + "" Key=""
                         + currentKey + "" is not a recognized type."");
                }
            }
        }
    }

    
    private static File getGoldfile (File input, boolean keepRoot,
                                     boolean collapse, boolean semantic,
                                     boolean include, boolean localRoot) {
        
        String baseName = input.getName().toLowerCase();
        if (baseName.endsWith("".xml"")) {
            baseName = baseName.substring(0, baseName.length() - 4)
                + "".properties"";
        }

        File dir = fileUtils.getParentFile(fileUtils.getParentFile(input));

        String goldFileFolder = ""goldfiles/"";

        if (keepRoot) {
            goldFileFolder += ""keeproot-"";
        } else {
            goldFileFolder += ""nokeeproot-"";
        }

        if (semantic) {
            goldFileFolder += ""semantic-"";
            if (include) {
                goldFileFolder += ""include-"";
            }
        } else {
            if (collapse) {
                goldFileFolder += ""collapse-"";
            } else {
                goldFileFolder += ""nocollapse-"";
            }
        }

        return new File(dir, goldFileFolder + baseName);
    }

    
    private static Enumeration getFiles (final File startingDir) {
        Vector result = new Vector();
        getFiles(startingDir, result);
        return result.elements();
    }

    
    private static void getFiles (final File startingDir, Vector collect) {
        FileFilter filter = new FileFilter() {
            public boolean accept (File file) {
                if (file.isDirectory()) {
                    return true;
                } else {
                    return (file.getPath().indexOf(""taskdefs"") > 0 &&
                            file.getPath().toLowerCase().endsWith("".xml"") );
                }
            }
        };

        File[] files = startingDir.listFiles(filter);
        for (int i=0;i<files.length;i++) {
            File f = files[i];
            if (!f.isDirectory()) {
                collect.addElement(f);
            } else {
                getFiles(f, collect);
            }
        }
    }
}
"
L39715,Class,XmlnsTest,org.apache.tools.ant.taskdefs.XmlnsTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/XmlnsTest.java,64,1,105,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,1,0,0,4,12,0.111111,0.0967742,3,3,1,8,0.0833333,3,1,1,0,0,1,28,37,6,8,0,0,8,0,8,1,36,8,0,9,1,33,42,15,17,0,0,9,0,9,1,72,9,0,35,8,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class XmlnsTest extends BuildFileTest {
    public XmlnsTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/xmlns.xml"");
    }

    public void testXmlns() {
        expectLog(""xmlns"", ""MyTask called"");
    }

    public void testXmlnsFile() {
        expectLog(""xmlns.file"", ""MyTask called"");
    }

    public void testCore() {
        expectLog(""core"", ""MyTask called"");
    }

    public void testExcluded() {
        expectBuildExceptionContaining(
            ""excluded"", ""excluded uri"",
            ""Attempt to use a reserved URI ant:notallowed"");
    }

    public void testOther() {
        expectLog(""other"", ""a message"");
    }

    public void testNsAttributes() {
        expectLog(""ns.attributes"", ""hello world"");
    }
    
    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }

}

"
L39726,Class,XmlnsTest$MyTask,org.apache.tools.ant.taskdefs.XmlnsTest$MyTask,L39715,L103,src/testcases/org/apache/tools/ant/taskdefs/XmlnsTest.java,99,5,103,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,1,2,0.0,0.0,0,0,0,2,0.0,0,2,2,0,0,1,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,5,5,9,9,0,0,1,0,1,0,36,1,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;


public class XmlnsTest extends BuildFileTest {
    public XmlnsTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/xmlns.xml"");
    }

    public void testXmlns() {
        expectLog(""xmlns"", ""MyTask called"");
    }

    public void testXmlnsFile() {
        expectLog(""xmlns.file"", ""MyTask called"");
    }

    public void testCore() {
        expectLog(""core"", ""MyTask called"");
    }

    public void testExcluded() {
        expectBuildExceptionContaining(
            ""excluded"", ""excluded uri"",
            ""Attempt to use a reserved URI ant:notallowed"");
    }

    public void testOther() {
        expectLog(""other"", ""a message"");
    }

    public void testNsAttributes() {
        expectLog(""ns.attributes"", ""hello world"");
    }
    
    public static class MyTask extends Task {
        public void execute() {
            log(""MyTask called"");
        }
    }

}

"
L39813,Class,ZipTest,org.apache.tools.ant.taskdefs.ZipTest,L7223,L103,src/testcases/org/apache/tools/ant/taskdefs/ZipTest.java,67,1,167,2,0.0,0,0,0,0.0,0.0,0,0,3,2,2,17,2,0,0,9,24,0.25,0.123457,10,9,4,12,0.123457,10,1,1,0,0,1,71,101,7,8,1,0,15,0,15,1,43,34,0,16,1,71,101,7,8,1,0,15,0,15,1,43,34,0,16,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;

import java.io.File;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.Enumeration;


public class ZipTest extends BuildFileTest {
    
    ZipFile zfPrefixAddsDir = null;
    public ZipTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/zip.xml"");
    }

    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() {
        expectBuildException(""test3"", ""zip cannot include itself"");
    }





    public void tearDown() {
        try {
            if ( zfPrefixAddsDir != null) {
                zfPrefixAddsDir.close();
            }

        } catch (IOException e) {
            
        }
        executeTarget(""cleanup"");
    }

    public void test5() {
        executeTarget(""test5"");
    }


    public void test6() {
        executeTarget(""test6"");
    }


    public void test7() {
        executeTarget(""test7"");
    }

    public void test8() {
        executeTarget(""test8"");
    }

    public void testZipgroupfileset() throws IOException {
        executeTarget(""testZipgroupfileset"");

        ZipFile zipFile = new ZipFile(new File(getProjectDir(), ""zipgroupfileset.zip""));

        assertTrue(zipFile.getEntry(""ant.xml"") != null);
        assertTrue(zipFile.getEntry(""optional/jspc.xml"") != null);
        assertTrue(zipFile.getEntry(""zip/zipgroupfileset3.zip"") != null);

        assertTrue(zipFile.getEntry(""test6.mf"") == null);
        assertTrue(zipFile.getEntry(""test7.mf"") == null);

        zipFile.close();
    }

    public void testUpdateNotNecessary() {
        executeTarget(""testUpdateNotNecessary"");
        assertEquals(-1, getLog().indexOf(""Updating""));
    }

    public void testUpdateIsNecessary() {
        expectLogContaining(""testUpdateIsNecessary"", ""Updating"");
    }

    
    public void testPrefixAddsDir() throws IOException {
        executeTarget(""testPrefixAddsDir"");
        File archive = getProject().resolveFile(""test3.zip"");
        zfPrefixAddsDir = new ZipFile(archive);
        ZipEntry ze = zfPrefixAddsDir.getEntry(""test/"");
        assertNotNull(""test/ has been added"", ze);

    }

    
    public void testFilesOnlyDoesntCauseRecreate() 
        throws InterruptedException {
        executeTarget(""testFilesOnlyDoesntCauseRecreateSetup"");
        long l = getProject().resolveFile(""test3.zip"").lastModified();
        Thread.currentThread().sleep(3000);
        executeTarget(""testFilesOnlyDoesntCauseRecreate"");
        assertEquals(l, getProject().resolveFile(""test3.zip"").lastModified());
    }
}
"
L9474,Class,ContainsTest,org.apache.tools.ant.taskdefs.condition.ContainsTest,L9120,L103,src/testcases/org/apache/tools/ant/taskdefs/condition/ContainsTest.java,65,1,81,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,4,6,0.333333,0.315789,6,6,1,2,0.315789,6,0,0,0,0,0,13,17,0,0,0,0,2,0,2,0,2,7,0,2,0,13,17,0,0,0,0,2,0,2,0,2,7,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.condition;

import junit.framework.TestCase;


public class ContainsTest extends TestCase {

    public ContainsTest(String name) {
        super(name);
    }

    public void testCaseSensitive() {
        Contains con = new Contains();
        con.setString(""abc"");
        con.setSubstring(""A"");
        assertTrue(!con.eval());

        con.setCasesensitive(false);
        assertTrue(con.eval());
    }

}
"
L9484,Class,EqualsTest,org.apache.tools.ant.taskdefs.condition.EqualsTest,L9120,L103,src/testcases/org/apache/tools/ant/taskdefs/condition/EqualsTest.java,65,1,94,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,1,0,0,5,8,0.25,0.206897,6,6,1,3,0.206897,6,0,0,0,0,0,23,30,0,0,0,0,3,0,3,0,3,15,0,3,0,23,30,0,0,0,0,3,0,3,0,3,15,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.condition;

import junit.framework.TestCase;


public class EqualsTest extends TestCase {

    public EqualsTest(String name) {
        super(name);
    }

    public void testTrim() {
        Equals eq = new Equals();
        eq.setArg1(""a"");
        eq.setArg2("" a"");
        assertTrue(!eq.eval());

        eq.setTrim(true);
        assertTrue(eq.eval());

        eq.setArg2(""a\t"");
        assertTrue(eq.eval());
    }

    public void testCaseSensitive() {
        Equals eq = new Equals();
        eq.setArg1(""a"");
        eq.setArg2(""A"");
        assertTrue(!eq.eval());

        eq.setCasesensitive(false);
        assertTrue(eq.eval());
    }

}
"
L9496,Class,IsReferenceTest,org.apache.tools.ant.taskdefs.condition.IsReferenceTest,L9120,L103,src/testcases/org/apache/tools/ant/taskdefs/condition/IsReferenceTest.java,65,1,98,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,5,1,0,0,6,11,0.333333,0.242424,8,8,2,4,0.242424,8,1,1,0,0,1,25,34,6,8,0,0,5,0,5,1,33,10,0,6,1,25,34,6,8,0,0,5,0,5,1,33,10,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.condition;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;


public class IsReferenceTest extends BuildFileTest {

    public IsReferenceTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/conditions/isreference.xml"");
    }

    public void testBasic() {
       expectPropertySet(""basic"", ""global-path""); 
       assertPropertySet(""target-path"");
       assertPropertyUnset(""undefined"");
    }

    public void testNotEnoughArgs() {
        expectSpecificBuildException(""isreference-incomplete"", 
                                     ""refid attribute has been omitted"",
                                     ""No reference specified for isreference ""
                                     + ""condition"");
    }

    public void testType() {
       expectPropertySet(""type"", ""global-path""); 
       assertPropertyUnset(""global-path-as-fileset"");
       assertPropertyUnset(""global-path-as-foo"");
       assertPropertySet(""global-echo""); 
    }

}
"
L38550,Class,B,org.apache.tools.ant.taskdefs.dir1.B,L38547,L103,src/testcases/org/apache/tools/ant/taskdefs/dir1/B.java,57,1,66,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,9,10,1,0,0,0,1,0,1,0,4,1,0,3,1,9,10,1,0,0,0,1,0,1,0,4,1,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.dir1;

public class B extends org.apache.tools.ant.taskdefs.dir2.A {
    static {
        System.out.println(""B CLASS INITIALIZATION"");
        setA(new B());
    }

    public String toString() {
        return ""I am a B."";
    }
}
"
L38551,Class,A,org.apache.tools.ant.taskdefs.dir2.A,L38564,L103,src/testcases/org/apache/tools/ant/taskdefs/dir2/A.java,57,1,76,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,0,1,0,0,3,0.0,0.0,0,0,0,3,0.0,0,0,0,1,1,0,16,20,1,0,1,0,3,0,2,1,3,4,0,2,1,16,20,1,0,1,0,3,0,2,1,3,4,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.dir2;

public class A {
    public static void main(String [] args) {
        System.out.println(""MAIN"");
        System.out.println(a);
    }

    static A a=new A();

    static {
        System.out.println(""A CLASS INITIALIZATION"");
    }

    protected static void setA(A oa) {
        a=oa;
    }

    public String toString() {
        return ""I am a A."";
    }
}
"
L11324,Class,EmailAddressTest,org.apache.tools.ant.taskdefs.email.EmailAddressTest,L10889,L103,src/testcases/org/apache/tools/ant/taskdefs/email/EmailAddressTest.java,63,1,141,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,18,1,0,0,3,21,0.0625,0.0923077,6,6,1,15,0.0923077,6,0,0,0,0,0,59,79,0,0,0,0,18,0,15,1,18,20,0,15,1,59,79,0,0,0,0,18,0,15,1,18,20,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.email;

import junit.framework.TestCase;


public class EmailAddressTest extends TestCase {
    
    public EmailAddressTest(String name) {
        super(name);
    }    
    
    public void setUp() { 
    }
    
    public void test1() {
        expectNameAddress( new EmailAddress(""address (name)"") );
    }

    public void test2() {
        expectNameAddress( new EmailAddress(""(name) address"") );
    }
    
    public void test3() {
        expectNameAddress( new EmailAddress(""name <address>"") );
    }
                        
    public void test4() {
        expectNameAddress( new EmailAddress(""<address> name"") );
    }
    
    public void test5() {
        expectNameAddress( new EmailAddress(""<address> (name)"") );
    }
        
    public void test6() {
        expectNameAddress( new EmailAddress(""(name) <address>"") );
    }
            
    public void test7() {
        expectNameAddress2( new EmailAddress(""address (<name>)"") );
    }
                
    public void test8() {
        expectNameAddress2( new EmailAddress(""(<name>) address"") );
    }
    
    public void test9() {
        expectNameAddress3( new EmailAddress(""address"") );
    }
        
    public void testA() {
        expectNameAddress3( new EmailAddress(""<address>"") );
    }
  
    public void testB() {
        expectNameAddress3( new EmailAddress("" <address> "") );
    }
  
    public void testC() {
        expectNameAddress3( new EmailAddress(""< address >"") );
    }
        
    public void testD() {
        expectNameAddress3( new EmailAddress("" < address > "") );
    }
        
    private void expectNameAddress(EmailAddress e) {
        assertEquals( ""name"", e.getName() );
        assertEquals( ""address"", e.getAddress() );
    }
    
    
    private void expectNameAddress2(EmailAddress e) {
        assertEquals( ""<name>"", e.getName() );
        assertEquals( ""address"", e.getAddress() );
    }
    
    
    private void expectNameAddress3(EmailAddress e) {
        assertTrue( ""Expected null, found <"" + e.getName() + "">"",
            e.getName() == null );
        assertEquals( ""address"", e.getAddress() );
    }
}
"
L11353,Class,EmailTaskTest,org.apache.tools.ant.taskdefs.email.EmailTaskTest,L10889,L103,src/testcases/org/apache/tools/ant/taskdefs/email/EmailTaskTest.java,64,1,82,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,3,7,0.2,0.263158,5,5,1,4,0.263158,5,1,1,0,0,1,14,19,6,8,0,0,4,0,4,1,32,4,0,5,1,14,19,6,8,0,0,4,0,4,1,32,4,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.email;

import org.apache.tools.ant.BuildFileTest;


public class EmailTaskTest extends BuildFileTest {
    
    public EmailTaskTest(String name) {
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/email/mail.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""SMTP auth only possible with MIME mail"");
    }

    public void test2() {
        expectBuildException(""test2"", ""SSL only possible with MIME mail"");
    }

}
"
L34350,Class,ANTLRTest,org.apache.tools.ant.taskdefs.optional.ANTLRTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ANTLRTest.java,73,1,194,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,19,3,0,0,5,24,0.4,0.347826,40,38,8,12,0.347826,40,1,1,0,0,1,75,122,7,8,1,0,19,0,19,1,47,34,0,20,1,75,122,7,8,1,0,19,0,19,1,47,34,0,20,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public class ANTLRTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/antlr/"";

    public ANTLRTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""antlr.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() {
        expectBuildException(""test1"", ""required argument, target, missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""Invalid output directory"");
    }

    public void test3() {
        executeTarget(""test3"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new CalcFileFilter());
        assertEquals(5, calcFiles.length);
    }

    public void test4() {
        executeTarget(""test4"");
    }

    public void test5() {
        
        
        expectBuildException(""test5"", ""ANTLR returned: 1"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void test7() {
        expectBuildException(""test7"", ""Unable to determine generated class"");
    }

    
    public void test8() {
        expectBuildException(""test8"", ""Invalid super grammar file"");
    }

    
    public void test9() {
        executeTarget(""test9"");
    }

    
    public void test10() {
        executeTarget(""test10"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new HTMLFilter());
        assertTrue(calcFiles.length > 0);
    }

    
    public void test11() {
        executeTarget(""test11"");
    }

    
    public void test12() {
        executeTarget(""test12"");
    }

    
    public void test13() {
        executeTarget(""test13"");
    }

    public void testNoRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""noRecompile"");
        assertTrue(-1 != getFullLog().indexOf(""Skipped grammar file.""));
    }

    public void testNormalRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""normalRecompile"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
    }

    
    public void testSupergrammarChangeRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""supergrammarChangeRecompile"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
    }
}

class CalcFileFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.startsWith(""Calc"");
    }
}

class HTMLFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.endsWith(""html"");
    }
}
"
L34320,Class,AbstractXSLTLiaisonTest,org.apache.tools.ant.taskdefs.optional.AbstractXSLTLiaisonTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/AbstractXSLTLiaisonTest.java,74,1,133,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,8,1,3,6,3,10,0.5,0.155172,9,9,2,2,0.155172,9,0,0,3,3,0,49,60,1,1,1,1,7,0,3,1,7,28,0,3,1,49,60,1,1,1,1,7,0,3,1,7,28,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;



import junit.framework.TestCase;
import org.apache.tools.ant.taskdefs.XSLTLiaison;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;


public abstract class AbstractXSLTLiaisonTest extends TestCase {

    protected XSLTLiaison liaison;

    protected  AbstractXSLTLiaisonTest(String name){
        super(name);
    }

    protected void setUp() throws Exception {
        liaison = createLiaison();
    }

    
    protected abstract XSLTLiaison createLiaison() throws Exception ;

    
    protected File getFile(String name) throws FileNotFoundException {
        URL url = getClass().getResource(name);
        if (url == null){
          throw new FileNotFoundException(""Unable to load '"" + name + ""' from classpath"");
        }
        return new File(url.getFile());
    }

    
    public void testTransform() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        liaison.setStylesheet(xsl);
        liaison.addParam(""param"", ""value"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xml"");
        File out = new File(""xsltliaison.tmp"");
        try {
            liaison.transform(in, out);
        } finally {
            out.delete();
        }
    }

    public void testEncoding() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xsltliaison-encoding-in.xsl"");
        liaison.setStylesheet(xsl);
        File in = getFile(""/taskdefs/optional/xsltliaison-encoding-in.xml"");
        File out = new File(""xsltliaison-encoding.tmp"");
        try {
            liaison.transform(in, out);
            Document doc = parseXML(out);
            assertEquals(""root"",doc.getDocumentElement().getNodeName());
            assertEquals(""message"",doc.getDocumentElement().getFirstChild().getNodeName());
            assertEquals(""\u00E9\u00E0\u00E8\u00EF\u00F9"",doc.getDocumentElement().getFirstChild().getFirstChild().getNodeValue());
        } finally {
            out.delete();
        }
    }

    public Document parseXML(File file) throws Exception {
        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
        return dbuilder.parse(file);
    }
}
"
L34399,Class,BeanShellScriptTest,org.apache.tools.ant.taskdefs.optional.BeanShellScriptTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/BeanShellScriptTest.java,64,1,81,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,1,0,0,3,6,0.5,0.45,9,9,2,2,0.45,9,1,1,0,0,1,11,18,6,8,0,0,3,0,3,1,31,3,0,4,1,11,18,6,8,0,0,3,0,3,1,31,3,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;


public class BeanShellScriptTest extends BuildFileTest {

    public BeanShellScriptTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/script.xml"");
    }

    public void testCanLoad() {
        expectLog(""useBeanshell"", ""I'm here"");
    }

}
"
L34361,Class,CalcFileFilter,org.apache.tools.ant.taskdefs.optional.CalcFileFilter,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ANTLRTest.java,196,1,200,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public class ANTLRTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/antlr/"";

    public ANTLRTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""antlr.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() {
        expectBuildException(""test1"", ""required argument, target, missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""Invalid output directory"");
    }

    public void test3() {
        executeTarget(""test3"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new CalcFileFilter());
        assertEquals(5, calcFiles.length);
    }

    public void test4() {
        executeTarget(""test4"");
    }

    public void test5() {
        
        
        expectBuildException(""test5"", ""ANTLR returned: 1"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void test7() {
        expectBuildException(""test7"", ""Unable to determine generated class"");
    }

    
    public void test8() {
        expectBuildException(""test8"", ""Invalid super grammar file"");
    }

    
    public void test9() {
        executeTarget(""test9"");
    }

    
    public void test10() {
        executeTarget(""test10"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new HTMLFilter());
        assertTrue(calcFiles.length > 0);
    }

    
    public void test11() {
        executeTarget(""test11"");
    }

    
    public void test12() {
        executeTarget(""test12"");
    }

    
    public void test13() {
        executeTarget(""test13"");
    }

    public void testNoRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""noRecompile"");
        assertTrue(-1 != getFullLog().indexOf(""Skipped grammar file.""));
    }

    public void testNormalRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""normalRecompile"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
    }

    
    public void testSupergrammarChangeRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""supergrammarChangeRecompile"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
    }
}

class CalcFileFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.startsWith(""Calc"");
    }
}

class HTMLFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.endsWith(""html"");
    }
}
"
L34408,Class,DotnetTest,org.apache.tools.ant.taskdefs.optional.DotnetTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/DotnetTest.java,67,1,168,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,12,1,0,0,4,16,1.0,0.534091,47,47,13,0,0.534091,47,1,1,0,0,1,41,102,7,8,1,0,12,0,12,1,40,12,0,13,1,41,102,7,8,1,0,12,0,12,1,40,12,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;


public class DotnetTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public DotnetTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""dotnet.xml"");
    }


    
    public void tearDown() {
        executeTarget(""teardown"");
    }


    
    public void testCSC() throws Exception {
        executeTarget(""testCSC"");
    }


    
    public void testCSCintrinsicFileset() throws Exception {
        executeTarget(""testCSCintrinsicFileset"");
    }


    
    public void testCSCdll() throws Exception {
        executeTarget(""testCSCdll"");
    }

    
    public void testCscReferences() throws Exception {
        executeTarget(""testCscReferences"");
    }

    
    public void testILASM() throws Exception {
        executeTarget(""testILASM"");
    }

    
    public void testILDASM() throws Exception {
        executeTarget(""testILDASM"");
    }

    
    public void testILDASM_empty() throws Exception {
        expectBuildExceptionContaining(""testILDASM_empty"",
                ""parameter validation"",
                ""invalid"");
    }

    
    public void testJsharp() throws Exception {
        executeTarget(""jsharp"");
    }

    
    public void testResponseFile() throws Exception {
        executeTarget(""testCSCresponseFile"");
    }

}

"
L34438,Class,EchoPropertiesTest,org.apache.tools.ant.taskdefs.optional.EchoPropertiesTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java,76,1,258,2,0.0,0,0,0,0.0,0.0,0,0,4,3,3,26,2,0,0,8,28,0.0588235,0.202614,31,8,1,16,0.202614,31,1,1,0,0,1,122,183,12,8,6,0,20,0,16,1,48,56,0,17,1,122,183,12,8,6,0,20,0,16,1,48,56,0,17,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;

import java.io.IOException;
import java.io.File;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Properties;


public class EchoPropertiesTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";
    private static final String GOOD_OUTFILE = ""test.properties"";
    private static final String GOOD_OUTFILE_XML = ""test.xml"";
    private static final String PREFIX_OUTFILE = ""test-prefix.properties"";
    private static final String TEST_VALUE = ""isSet"";
    private static final String BAD_OUTFILE = ""."";

    public EchoPropertiesTest(String name) {
        super(name);
    }


    public void setUp() {
        configureProject(TASKDEFS_DIR + ""echoproperties.xml"");
        project.setProperty( ""test.property"", TEST_VALUE );
    }


    public void tearDown() {
        executeTarget(""cleanup"");
    }


    public void testEchoToLog() {
        expectLogContaining(""testEchoToLog"", ""test.property=""+TEST_VALUE);
    }


    public void testReadBadFile() {
        expectBuildExceptionContaining( ""testReadBadFile"",
            ""srcfile is a directory"", ""srcfile is a directory!"" );
    }


    public void testReadBadFileFail() {
        expectBuildExceptionContaining( ""testReadBadFile"",
            ""srcfile is a directory"", ""srcfile is a directory!"" );
    }


    public void testReadBadFileNoFail() {
        expectLog( ""testReadBadFileNoFail"", ""srcfile is a directory!"" );
    }


    public void testEchoToBadFile() {
        expectBuildExceptionContaining( ""testEchoToBadFile"",
            ""destfile is a directory"", ""destfile is a directory!"" );
    }


    public void testEchoToBadFileFail() {
        expectBuildExceptionContaining( ""testEchoToBadFileFail"",
            ""destfile is a directory"", ""destfile is a directory!"" );
    }


    public void testEchoToBadFileNoFail() {
        expectLog( ""testEchoToBadFileNoFail"", ""destfile is a directory!"");
    }


    public void testEchoToGoodFile() throws Exception {
        executeTarget( ""testEchoToGoodFile"" );
        assertGoodFile();
    }


    public void testEchoToGoodFileXml() throws Exception {
        executeTarget( ""testEchoToGoodFileXml"" );

        
        File f = createRelativeFile( GOOD_OUTFILE_XML );
        FileReader fr = new FileReader( f );
        try {
            BufferedReader br = new BufferedReader( fr );
            String read = null;
            while ( (read = br.readLine()) != null) {
                if (read.indexOf(""<property name=\""test.property\"" value=\""""+TEST_VALUE+""\""></property>"") >= 0) {
                    
                    return;
                }
            }
            fail( ""did not encounter set property in generated file."" );
        } finally {
            try {
                fr.close();
            } catch(IOException e) {}
        }
    }


    public void testEchoToGoodFileFail() throws Exception {
        executeTarget( ""testEchoToGoodFileFail"" );
        assertGoodFile();
    }


    public void testEchoToGoodFileNoFail() throws Exception {
        executeTarget( ""testEchoToGoodFileNoFail"" );
        assertGoodFile();
    }


    public void testEchoPrefix() throws Exception {
        executeTarget( ""testEchoPrefix"" );
        Properties props=loadPropFile(PREFIX_OUTFILE);

        assertEquals(""prefix didn't include 'a.set' property"",""true"",props.getProperty(""a.set""));
        assertNull(""prefix failed to filter out property 'b.set'"",
                   props.getProperty(""b.set""));
    }

    public void testEchoPrefixAsPropertyset() throws Exception {
        executeTarget( ""testEchoPrefixAsPropertyset"" );
        Properties props=loadPropFile(PREFIX_OUTFILE);
        assertEquals(""prefix didn't include 'a.set' property"",""true"",props.getProperty(""a.set""));
        assertNull(""prefix failed to filter out property 'b.set'"",
                   props.getProperty(""b.set""));
    }

    protected Properties loadPropFile(String relativeFilename)
            throws IOException {
        File f = createRelativeFile( relativeFilename );
        Properties props=new Properties();
        InputStream in=null;
        try  {
            in=new BufferedInputStream(new FileInputStream(f));
            props.load(in);
        } finally {
            if(in!=null) {
                try { in.close(); } catch(IOException e) {}
            }
        }
        return props;
    }

    protected void assertGoodFile() throws Exception {
        File f = createRelativeFile( GOOD_OUTFILE );
        assertTrue(
            ""Did not create ""+f.getAbsolutePath(),
            f.exists() );
        Properties props=loadPropFile(GOOD_OUTFILE);
        props.list(System.out);
        assertEquals(""test property not found "",
                     TEST_VALUE, props.getProperty(""test.property""));

    }


    protected String toAbsolute( String filename ) {
        return createRelativeFile( filename ).getAbsolutePath();
    }


    protected File createRelativeFile( String filename ) {
        if (filename.equals( ""."" )) {
            return getProjectDir();
        }
        
        return new File( getProjectDir(), filename );
    }
}

"
L34376,Class,HTMLFilter,org.apache.tools.ant.taskdefs.optional.HTMLFilter,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ANTLRTest.java,202,1,206,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public class ANTLRTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/antlr/"";

    public ANTLRTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""antlr.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() {
        expectBuildException(""test1"", ""required argument, target, missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""Invalid output directory"");
    }

    public void test3() {
        executeTarget(""test3"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new CalcFileFilter());
        assertEquals(5, calcFiles.length);
    }

    public void test4() {
        executeTarget(""test4"");
    }

    public void test5() {
        
        
        expectBuildException(""test5"", ""ANTLR returned: 1"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void test7() {
        expectBuildException(""test7"", ""Unable to determine generated class"");
    }

    
    public void test8() {
        expectBuildException(""test8"", ""Invalid super grammar file"");
    }

    
    public void test9() {
        executeTarget(""test9"");
    }

    
    public void test10() {
        executeTarget(""test10"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new HTMLFilter());
        assertTrue(calcFiles.length > 0);
    }

    
    public void test11() {
        executeTarget(""test11"");
    }

    
    public void test12() {
        executeTarget(""test12"");
    }

    
    public void test13() {
        executeTarget(""test13"");
    }

    public void testNoRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""noRecompile"");
        assertTrue(-1 != getFullLog().indexOf(""Skipped grammar file.""));
    }

    public void testNormalRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""normalRecompile"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
    }

    
    public void testSupergrammarChangeRecompile() {
        executeTarget(""test9"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
        executeTarget(""supergrammarChangeRecompile"");
        assertEquals(-1, getFullLog().indexOf(""Skipped grammar file.""));
    }
}

class CalcFileFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.startsWith(""Calc"");
    }
}

class HTMLFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.endsWith(""html"");
    }
}
"
L34478,Class,JspcTest,org.apache.tools.ant.taskdefs.optional.JspcTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/JspcTest.java,74,1,267,2,0.0,0,0,0,0.0,0.0,0,0,5,0,0,16,6,0,0,7,23,0.923077,0.54386,93,85,12,1,0.54386,93,1,1,0,0,1,78,194,9,9,3,1,16,0,12,1,44,33,0,13,1,78,194,9,9,3,1,16,0,12,1,44,33,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.taskdefs.optional.jsp.JspMangler;
import org.apache.tools.ant.taskdefs.optional.jsp.Jasper41Mangler;
import org.apache.tools.ant.taskdefs.optional.jsp.JspC;
import org.apache.tools.ant.taskdefs.optional.jsp.JspNameMangler;
import org.apache.tools.ant.taskdefs.optional.jsp.compilers.JspCompilerAdapterFactory;
import org.apache.tools.ant.taskdefs.optional.jsp.compilers.JspCompilerAdapter;


public class JspcTest extends BuildFileTest {
    
    private File baseDir;
    
    private File outDir;

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public JspcTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""jspc.xml"");
        baseDir = new File(TASKDEFS_DIR);
        outDir = new File(baseDir, ""jsp/java"");
    }


    
    public void tearDown() {
        executeTarget(""cleanup"");
    }


    
    public void testSimple() throws Exception {
        executeJspCompile(""testSimple"", ""simple_jsp.java"");
    }


    
    public void testUriroot() throws Exception {
        executeJspCompile(""testUriroot"", ""uriroot_jsp.java"");
    }


    
    public void testXml() throws Exception {
        executeJspCompile(""testXml"", ""xml_jsp.java"");
    }


    
    public void testKeyword() throws Exception {
        executeJspCompile(""testKeyword"", ""default_jsp.java"");
    }


    
    public void testInvalidClassname() throws Exception {
        executeJspCompile(""testInvalidClassname"", 
                ""_1nvalid_0002dclassname_jsp.java"");
    }

    
    
    public void testNoTld() throws Exception {



         expectBuildExceptionContaining(""testNoTld"",
                 ""not found"",
                 ""Java returned: 9"");
    }


    
    public void testNotAJspFile()  throws Exception {
        executeTarget(""testNotAJspFile"");
    }

    

    
    protected void executeJspCompile(String target, String javafile)
        throws Exception {
        executeTarget(target);
        assertJavaFileCreated(javafile);
    }


    
    protected void assertJavaFileCreated(String filename)
        throws Exception {
        File file = getOutputFile(filename);
        assertTrue(""file "" + filename + "" not found"", file.exists());
        assertTrue(""file "" + filename + "" is empty"", file.length() > 0);
    }

    
    protected File getOutputFile(String subpath) {
        return new File(outDir, subpath);
    }

    
    public void testJasperNameManglerSelection() {
        JspCompilerAdapter adapter=
                JspCompilerAdapterFactory.getCompiler(""jasper"", null,null);
        JspMangler mangler=adapter.createMangler();
        assertTrue(mangler instanceof JspNameMangler);
        adapter= JspCompilerAdapterFactory.getCompiler(""jasper41"", null, null);
        mangler = adapter.createMangler();
        assertTrue(mangler instanceof Jasper41Mangler);
    }

    public void testJasper41() {
        JspMangler mangler = new Jasper41Mangler();
        
        assertMapped(mangler, ""for.jsp"", ""for_jsp"");
        
        assertMapped(mangler, ""0.jsp"", ""_0_jsp"");
        
        assertMapped(mangler, ""_.jsp"", ""___jsp"");
        
        assertMapped(mangler, ""-.jsp"", ""__0002d_jsp"");
        
        char s = File.separatorChar;
        assertMapped(mangler, """" + s + s + ""somewhere"" + s + ""file"" + s + ""index.jsp"", ""index_jsp"");
    }

    
    protected void assertMapped(JspMangler mangler, String filename, String classname) {
        String mappedname = mangler.mapJspToJavaName(new File(filename));
        assertTrue(filename+"" should have mapped to ""+classname
                    +"" but instead mapped to ""+mappedname,
                    classname.equals(mappedname));
    }


}

"
L34534,Class,PropertyFileTest,org.apache.tools.ant.taskdefs.optional.PropertyFileTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/PropertyFileTest.java,73,1,265,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,11,4,0,0,9,20,0.5,0.257485,43,41,4,4,0.257485,43,1,1,0,0,1,124,193,29,9,23,1,11,0,7,1,39,76,0,8,1,124,193,29,9,23,1,11,0,7,1,39,76,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;

import java.util.Properties;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.File;



public class PropertyFileTest extends BuildFileTest {

    public PropertyFileTest(String name) {
        super(name);
    }


    
    public void setUp() throws Exception {
        destroyTempFiles();
        initTestPropFile();
        initBuildPropFile();
        configureProject(projectFilePath);
        project.setProperty(valueDoesNotGetOverwrittenPropertyFileKey,valueDoesNotGetOverwrittenPropertyFile);
    }


    
    public void tearDown() {
        destroyTempFiles();
    }

    public void testNonExistingFile() {
        PropertyFile props = new PropertyFile();
        props.setProject( getProject() );
        File file = new File(""this-file-does-not-exist.properties"");
        props.setFile(file);
        assertFalse(""Properties file exists before test."", file.exists());
        props.execute();
        assertTrue(""Properties file does not exist after test."", file.exists());
        file.delete();
    }

    
    public void testUpdatesExistingProperties() throws Exception {
        Properties beforeUpdate = getTestProperties();
        assertEquals(FNAME, beforeUpdate.getProperty(FNAME_KEY));
        assertEquals(LNAME, beforeUpdate.getProperty(LNAME_KEY));
        assertEquals(EMAIL, beforeUpdate.getProperty(EMAIL_KEY));
        assertEquals(null, beforeUpdate.getProperty(PHONE_KEY));
        assertEquals(null, beforeUpdate.getProperty(AGE_KEY));
        assertEquals(null, beforeUpdate.getProperty(DATE_KEY));

        
        executeTarget(""update-existing-properties"");

        Properties afterUpdate = getTestProperties();
        assertEquals(NEW_FNAME, afterUpdate.getProperty(FNAME_KEY));
        assertEquals(NEW_LNAME, afterUpdate.getProperty(LNAME_KEY));
        assertEquals(NEW_EMAIL, afterUpdate.getProperty(EMAIL_KEY));
        assertEquals(NEW_PHONE, afterUpdate.getProperty(PHONE_KEY));
        assertEquals(NEW_AGE, afterUpdate.getProperty(AGE_KEY));
        assertEquals(NEW_DATE, afterUpdate.getProperty(DATE_KEY));
    }

    public void testExerciseDefaultAndIncrement() throws Exception {
        executeTarget(""exercise"");
        assertEquals(""3"",project.getProperty(""int.with.default""));
        assertEquals(""1"",project.getProperty(""int.without.default""));
        assertEquals(""-->"",project.getProperty(""string.with.default""));
        assertEquals(""."",project.getProperty(""string.without.default""));
        assertEquals(""2002/01/21 12:18"", project.getProperty(""ethans.birth""));
        assertEquals(""2003/01/21"", project.getProperty(""first.birthday""));
        assertEquals(""0124"", project.getProperty(""olderThanAWeek""));
        assertEquals(""37"", project.getProperty(""existing.prop""));
        assertEquals(""6"",project.getProperty(""int.without.value""));
    }

    public void testValueDoesNotGetOverwritten() {
        
        executeTarget(""bugDemo1"");
        executeTarget(""bugDemo2"");
        assertEquals(""5"", project.getProperty(""foo""));
    }


    private Properties getTestProperties() throws Exception {
        Properties testProps = new Properties();
        FileInputStream propsFile = new FileInputStream(testPropsFilePath);
        testProps.load(propsFile);
        propsFile.close();
        return testProps;
    }


    private void initTestPropFile() throws Exception {
        Properties testProps = new Properties();
        testProps.put(FNAME_KEY, FNAME);
        testProps.put(LNAME_KEY, LNAME);
        testProps.put(EMAIL_KEY, EMAIL);
        testProps.put(""existing.prop"", ""37"");

        FileOutputStream fos = new FileOutputStream(testPropsFilePath);
        testProps.store(fos, ""defaults"");
        fos.close();
    }


    private void initBuildPropFile() throws Exception {
        Properties buildProps = new Properties();
        buildProps.put(testPropertyFileKey, testPropertyFile);
        buildProps.put(FNAME_KEY, NEW_FNAME);
        buildProps.put(LNAME_KEY, NEW_LNAME);
        buildProps.put(EMAIL_KEY, NEW_EMAIL);
        buildProps.put(PHONE_KEY, NEW_PHONE);
        buildProps.put(AGE_KEY, NEW_AGE);
        buildProps.put(DATE_KEY, NEW_DATE);

        FileOutputStream fos = new FileOutputStream(buildPropsFilePath);
        buildProps.store(fos, null);
        fos.close();
    }


    private void destroyTempFiles() {
        File tempFile = new File(testPropsFilePath);
        tempFile.delete();
        tempFile = null;

        tempFile = new File(buildPropsFilePath);
        tempFile.delete();
        tempFile = null;

        tempFile = new File(valueDoesNotGetOverwrittenPropsFilePath);
        tempFile.delete();
        tempFile = null;
    }



    private static final String
        projectFilePath     = ""src/etc/testcases/taskdefs/optional/propertyfile.xml"",

        testPropertyFile    = ""propertyfile.test.properties"",
        testPropertyFileKey = ""test.propertyfile"",
        testPropsFilePath   = ""src/etc/testcases/taskdefs/optional/"" + testPropertyFile,

        valueDoesNotGetOverwrittenPropertyFile    = ""overwrite.test.properties"",
        valueDoesNotGetOverwrittenPropertyFileKey = ""overwrite.test.propertyfile"",
        valueDoesNotGetOverwrittenPropsFilePath   = ""src/etc/testcases/taskdefs/optional/"" + valueDoesNotGetOverwrittenPropertyFile,

        buildPropsFilePath  = ""src/etc/testcases/taskdefs/optional/propertyfile.build.properties"",

        FNAME     = ""Bruce"",
        NEW_FNAME = ""Clark"",
        FNAME_KEY = ""firstname"",

        LNAME     = ""Banner"",
        NEW_LNAME = ""Kent"",
        LNAME_KEY = ""lastname"",

        EMAIL     = ""incredible@hulk.com"",
        NEW_EMAIL = ""kc@superman.com"",
        EMAIL_KEY = ""email"",

        NEW_PHONE = ""(520) 555-1212"",
        PHONE_KEY = ""phone"",

        NEW_AGE = ""30"",
        AGE_KEY = ""age"",

        NEW_DATE = ""2001/01/01 12:45"",
        DATE_KEY = ""date"";
}
"
L34605,Class,PvcsTest,org.apache.tools.ant.taskdefs.optional.PvcsTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/PvcsTest.java,63,1,96,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,1,0,0,4,12,0.111111,0.103448,3,3,1,8,0.103448,3,1,1,0,0,1,26,34,6,8,0,0,8,0,8,1,36,8,0,9,1,26,34,6,8,0,0,8,0,8,1,36,8,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public class PvcsTest extends BuildFileTest { 
    
    public PvcsTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/optional/pvcs.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""Required argument repository not specified"");
    }

    public void test2() {
        executeTarget(""test2"");
    }

    public void test3() { 
        executeTarget(""test3"");
    }

    public void test4() { 
        executeTarget(""test4"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        expectBuildException(""test6"", ""Failed executing: /never/heard/of/a/directory/structure/like/this/pcli lvf -z -aw -pr
    }
}
"
L34616,Class,ReplaceRegExpTest,org.apache.tools.ant.taskdefs.optional.ReplaceRegExpTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ReplaceRegExpTest.java,70,1,141,2,0.0,0,0,0,0.0,0.0,0,0,2,2,2,9,3,0,0,7,14,0.25,0.114286,8,7,2,6,0.114286,8,1,1,0,0,1,62,72,7,8,1,0,7,0,7,1,35,32,0,8,1,62,72,7,8,1,0,7,0,7,1,35,32,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.util.Properties;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;


public class ReplaceRegExpTest extends BuildFileTest {
    private static final String PROJECT_PATH = ""src/etc/testcases/taskdefs/optional"";
    public ReplaceRegExpTest(String name) {
        super(name);
    }
    
    public void setUp() { 
        configureProject(PROJECT_PATH + ""/replaceregexp.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void testReplace() throws IOException {
        Properties original = new Properties();
        FileInputStream propsFile = null;
        try {
            propsFile = new FileInputStream(PROJECT_PATH + ""/replaceregexp.properties"");
            original.load(propsFile);
        } finally {
            if (propsFile != null) {
                propsFile.close();
                propsFile = null;
            }
        }

        assertEquals(""Def"", original.get(""OldAbc""));

        executeTarget(""testReplace"");

        Properties after = new Properties();
        try {
            propsFile = new FileInputStream(PROJECT_PATH + ""/test.properties"");
            after.load(propsFile);
        } finally {
            if (propsFile != null) {
                propsFile.close();
                propsFile = null;
            }
        }

        assertNull(after.get(""OldAbc""));
        assertEquals(""AbcDef"", after.get(""NewProp""));
    }
    
    public void testDirectoryDateDoesNotChange() {
        executeTarget(""touchDirectory"");
        File myFile = new File(PROJECT_PATH + ""/"" + getProject().getProperty(""tmpregexp""));
        long timeStampBefore = myFile.lastModified();
        executeTarget(""testDirectoryDateDoesNotChange"");
        long timeStampAfter = myFile.lastModified();
        assertEquals(""directory date should not change"",
            timeStampBefore, timeStampAfter);
    }
    public void testDontAddNewline1() throws IOException {
        executeTarget(""testDontAddNewline1"");
        assertTrue(""Files match"",
                   FileUtils.newFileUtils()
                   .contentEquals(new File(PROJECT_PATH + ""/test.properties""),
                                  new File(PROJECT_PATH + ""/replaceregexp2.result.properties"")));
    }

    public void testDontAddNewline2() throws IOException {
        executeTarget(""testDontAddNewline2"");
        assertTrue(""Files match"",
                   FileUtils.newFileUtils()
                   .contentEquals(new File(PROJECT_PATH + ""/test.properties""),
                                  new File(PROJECT_PATH + ""/replaceregexp2.result.properties"")));
    }

}
"
L34629,Class,RhinoReferenceTest,org.apache.tools.ant.taskdefs.optional.RhinoReferenceTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/RhinoReferenceTest.java,64,1,81,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,1,0,0,3,6,0.5,0.428571,9,9,2,2,0.428571,9,1,1,0,0,1,12,18,6,8,0,0,3,0,3,1,31,3,0,4,1,12,18,6,8,0,0,3,0,3,1,31,3,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;


public class RhinoReferenceTest extends BuildFileTest {

    public RhinoReferenceTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(
            ""src/etc/testcases/taskdefs/optional/script_reference.xml"");
    }

    public void testScript() {
        executeTarget(""script"");
    }
}
"
L34636,Class,RhinoScriptTest,org.apache.tools.ant.taskdefs.optional.RhinoScriptTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/RhinoScriptTest.java,64,1,106,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,4,8,0.4,0.2,9,9,2,3,0.2,9,1,1,0,0,1,36,43,6,8,0,0,4,0,4,1,32,26,0,5,1,36,43,6,8,0,0,4,0,4,1,32,26,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;


public class RhinoScriptTest extends BuildFileTest {

    public RhinoScriptTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/script.xml"");
    }

    public void testExample1() {
        executeTarget(""example1"");
        int index = getLog().indexOf(""1"");
        assertTrue(index > -1);
        index = getLog().indexOf(""4"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""9"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""16"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""25"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""36"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""49"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""64"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""81"", index);
        assertTrue(index > -1);
        index = getLog().indexOf(""100"", index);
        assertTrue(index > -1);
    }

    public void testExample2() {
        executeTarget(""example2"");
        assertTrue(getLog().indexOf(""In sub1"") > -1);
        assertTrue(getLog().indexOf(""In sub2"") > -1);
    }
}
"
L34644,Class,TraXLiaisonTest,org.apache.tools.ant.taskdefs.optional.TraXLiaisonTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java,70,1,137,2,0.204348,1,1,1,0.176471,0.20339,12,12,4,2,2,11,5,0,0,9,16,0.125,0.5,59,58,1,7,0.5,59,1,2,0,0,2,59,68,1,1,0,0,7,0,7,0,13,35,0,9,1,59,68,1,1,0,0,7,0,7,0,13,35,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.taskdefs.XSLTLiaison;
import org.apache.tools.ant.taskdefs.XSLTLogger;
import org.apache.tools.ant.BuildException;

import java.io.File;

import junit.framework.AssertionFailedError;




public class TraXLiaisonTest extends AbstractXSLTLiaisonTest 
    implements XSLTLogger {

    public TraXLiaisonTest(String name){
        super(name);
    }

    public void tearDown() {
        File f = new File(""xalan2-redirect-out.tmp"");
        if (f.exists()) {
            f.delete();
        }
    }

    public XSLTLiaison createLiaison() throws Exception {
        TraXLiaison l = new TraXLiaison();
        l.setLogger(this);
        return l;
    }

    public void testXalan2Redirect() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xalan-redirect-in.xsl"");
        liaison.setStylesheet(xsl);
        File out = new File(""xalan2-redirect-out-dummy.tmp"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        try {
            liaison.addParam(""xalan-version"", ""2"");
            liaison.transform(in, out);
        } finally {
            out.delete();
        }
    }

    public void testMultipleTransform() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        liaison.setStylesheet(xsl);
        liaison.addParam(""param"", ""value"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xml"");
        
        for (int i = 0; i < 50; i++){
            File out = new File(""xsltliaison"" + i + "".tmp"");
            try {
                liaison.transform(in, out);
            } catch (Exception e){
                throw new BuildException(""failed in transform "" + i, e);
            } finally {
                out.delete();
            }
        }
    }

    public void testSystemId(){
        File file = null;
        if ( File.separatorChar == '\\' ){
            file = new File(""d:\\jdk"");
        } else {
            file = new File(""/user/local/bin"");
        }
        String systemid = ((TraXLiaison)liaison).getSystemId(file);
        assertTrue(""SystemIDs should start by file:
        assertTrue(""SystemIDs should not start with file:
    }

    public void log(String message) {
        throw new AssertionFailedError(""Liaison sent message: ""+message);
    }

}
"
L34664,Class,WsdlToDotnetTest,org.apache.tools.ant.taskdefs.optional.WsdlToDotnetTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/WsdlToDotnetTest.java,67,1,196,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,15,1,0,0,4,19,1.0,0.466667,56,56,16,0,0.466667,56,1,1,0,0,1,64,130,7,8,1,0,15,0,15,1,43,15,0,16,1,64,130,7,8,1,0,15,0,15,1,43,15,0,16,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;


public class WsdlToDotnetTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public WsdlToDotnetTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""WsdlToDotnet.xml"");
    }


    
    public void tearDown() {
        executeTarget(""teardown"");
    }


    
    
    public void testNoParams() throws Exception {
        expectBuildExceptionContaining(""testNoParams"",
                ""expected failure"",
                ""destination file must be specified"");
    }

    
    public void testNoSrc() throws Exception {
        expectBuildExceptionContaining(""testNoSrc"",
                ""expected failure"",
                ""you must specify either a source file or a URL"");
    }

    
    public void testDestIsDir() throws Exception {
        expectBuildExceptionContaining(""testDestIsDir"",
                ""expected failure"",
                ""is a directory"");
    }
    
    
    public void testBothSrc() throws Exception {
        expectBuildExceptionContaining(""testBothSrc"",
                ""expected failure"",
                ""both a source file and a URL"");
    } 
     
    public void testSrcIsDir() throws Exception {
        expectBuildExceptionContaining(""testSrcIsDir"",
                ""expected failure"",
                ""is a directory"");
    } 
    
    
    public void testSrcIsMissing() throws Exception {
        expectBuildExceptionContaining(""testSrcIsMissing"",
                ""expected failure"",
                ""does not exist"");
    }
     
    
    public void testLocalWsdl() throws Exception {
        executeTarget(""testLocalWsdl"");
    } 
    
    public void testLocalWsdlServer() throws Exception {
        executeTarget(""testLocalWsdlServer"");
    } 
     
    public void testInvalidExtraOps() throws Exception {
        expectBuildExceptionContaining(""testInvalidExtraOps"",
                ""expected failure"",
                ""WSDL returned: 1"");
    }   
     
    
    public void testLocalWsdlVB() throws Exception {
        executeTarget(""testLocalWsdlVB"");
    } 
    
    public void testLocalWsdlServerVB() throws Exception {
        executeTarget(""testLocalWsdlServerVB"");
    } 
     
    public void testInvalidExtraOpsVB() throws Exception {
        expectBuildExceptionContaining(""testInvalidExtraOpsVB"",
                ""expected failure"",
                ""WSDL returned: 1"");
    }  
}

"
L34700,Class,XalanLiaisonTest,org.apache.tools.ant.taskdefs.optional.XalanLiaisonTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XalanLiaisonTest.java,66,1,94,2,0.573171,1,1,1,0.413793,0.461538,12,12,3,1,1,5,3,0,0,6,10,0.25,0.133333,4,4,1,3,0.133333,4,1,1,0,0,1,26,29,1,1,0,0,4,0,3,0,10,13,0,6,1,26,29,1,1,0,0,4,0,3,0,10,13,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;



import org.apache.tools.ant.taskdefs.XSLTLiaison;

import java.io.File;


public class XalanLiaisonTest extends AbstractXSLTLiaisonTest {
    public XalanLiaisonTest(String name){
        super(name);
    }

    public void tearDown() {
        File f = new File(""xalan1-redirect-out.tmp"");
        if (f.exists()) {
            f.delete();
        }
    }

    protected XSLTLiaison createLiaison() throws Exception {
        return new XalanLiaison();
    }

    public void testXalan1Redirect() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xalan-redirect-in.xsl"");
        liaison.setStylesheet(xsl);
        File out = new File(""xalan1-redirect-out-dummy.tmp"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        try {
            liaison.addParam(""xalan-version"", ""1"");
            liaison.transform(in, out);
        } finally {
            out.delete();
        }
    }
}

"
L34710,Class,XmlValidateCatalogTest,org.apache.tools.ant.taskdefs.optional.XmlValidateCatalogTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XmlValidateCatalogTest.java,70,1,125,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,5,1,0,0,3,8,1.0,0.679245,36,36,6,0,0.679245,36,1,1,0,0,1,17,56,7,8,1,0,5,0,5,1,33,4,0,6,1,17,56,7,8,1,0,5,0,5,1,33,4,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;


public class XmlValidateCatalogTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public XmlValidateCatalogTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""xmlvalidate.xml"");
    }


    
    public void tearDown() {

    }

    
    public void testXmlCatalogFiles() {
        executeTarget(""xmlcatalogfiles"");
    }

    
    public void testXmlCatalogPath() {
        executeTarget(""xmlcatalogpath"");
    }

}
"
L34726,Class,XmlValidateTest,org.apache.tools.ant.taskdefs.optional.XmlValidateTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XmlValidateTest.java,72,1,221,2,0.0,0,0,0,0.0,0.0,0,0,3,2,2,20,2,0,0,5,19,1.0,0.485507,67,67,15,0,0.485507,67,1,1,0,0,1,71,150,7,8,1,0,14,0,14,1,42,23,0,15,1,71,150,7,8,1,0,14,0,14,1,42,23,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;


public class XmlValidateTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public XmlValidateTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""xmlvalidate.xml"");
    }


    
    public void tearDown() {

    }


    
    public void testValidate() throws Exception {
         executeTarget(""testValidate"");
    }
    

    
    public void testDeepValidate() throws Exception {
         executeTarget(""testDeepValidate"");
    }

    
    public void testXmlCatalog() {
        executeTarget(""xmlcatalog"");
    }

    
    public void testXmlCatalogViaRefid() {
        executeTarget(""xmlcatalogViaRefid"");
    }

    
    public void testXmlCatalogFiles() {
        executeTarget(""xmlcatalogfiles-override"");
    }

    
    public void testXmlCatalogPath() {
        executeTarget(""xmlcatalogpath-override"");
    }

    
    public void testXmlCatalogNested() {
        executeTarget(""xmlcatalognested"");
    }

    
    public void testXmlSchemaGood() throws BuildException {
        try {
            executeTarget(""testSchemaGood"");
        } catch (BuildException e) {
            if (e.getMessage()
                .endsWith("" doesn't recognize feature http:
                e.getMessage()
                .endsWith("" doesn't support feature http:
                System.err.println("" skipped, parser doesn't support schema"");
            } else {
                throw e;
            }
        }
    }
    
    public void testXmlSchemaBad() {
        try {
            executeTarget(""testSchemaBad"");
            fail(""Should throw BuildException because 'Bad Schema Validation'"");

            expectBuildExceptionContaining(""testSchemaBad"",
                                           ""Bad Schema Validation"", 
                                           ""not a valid XML document"");
        } catch (BuildException e) {
            if (e.getMessage()
                .endsWith("" doesn't recognize feature http:
                e.getMessage()
                .endsWith("" doesn't support feature http:
                System.err.println("" skipped, parser doesn't support schema"");
            } else {
                assertTrue(e.getMessage()
                           .indexOf(""not a valid XML document"") > -1);
            }
        }
    }

    
    public void testIso2022Jp() {
        executeTarget(""testIso2022Jp"");
    }

    
    public void testUtf8() {
        expectBuildException(""testUtf8"", ""invalid characters in file"");
    }

}
"
L34760,Class,XslpLiaisonTest,org.apache.tools.ant.taskdefs.optional.XslpLiaisonTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XslpLiaisonTest.java,64,1,72,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,3,0,0,2,4,0.5,0.878788,58,58,1,1,0.878788,58,1,1,0,0,1,8,9,1,1,0,0,2,0,1,0,8,2,0,4,1,8,9,1,1,0,0,2,0,1,0,8,2,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.taskdefs.XSLTLiaison;




public class XslpLiaisonTest extends AbstractXSLTLiaisonTest {
    public XslpLiaisonTest(String name){
        super(name);
    }

    protected XSLTLiaison createLiaison() throws Exception {
        return new XslpLiaison();
    }
}
"
L34769,Class,XsltTest,org.apache.tools.ant.taskdefs.optional.XsltTest,L15251,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XsltTest.java,64,1,126,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,1,0,0,4,12,0.666667,0.472727,26,26,6,3,0.472727,26,1,1,0,0,1,29,63,7,8,1,0,8,0,8,1,36,8,0,9,1,29,63,7,8,1,0,8,0,8,1,36,8,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;


public class XsltTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public XsltTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""xslt.xml"");
    }


    
    public void tearDown() {
        executeTarget(""teardown"");
    }


    
    
    public void testCatchNoDtd() throws Exception {
        expectBuildExceptionContaining(""testCatchNoDtd"",
                                       ""expected failure"",
                                       ""Fatal error during transformation"");
    }

    
    public void testCatalog() throws Exception {
         executeTarget(""testCatalog"");
    }

    public void testOutputProperty() throws Exception {
      executeTarget(""testOutputProperty"");
    }

    public void testFactory() throws Exception {
        executeTarget(""testFactory"");
    }

    public void testAttribute() throws Exception {
        executeTarget(""testAttribute"");
    }
}

"
L17396,Class,DependTest,org.apache.tools.ant.taskdefs.optional.depend.DependTest,L16682,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java,74,1,206,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,14,5,0,0,9,22,0.769231,0.327869,40,40,10,3,0.327869,40,1,1,0,0,1,82,133,8,9,2,1,13,2,12,1,41,39,2,13,1,82,133,8,9,2,1,13,2,12,1,41,39,2,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.depend;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.DirectoryScanner;


public class DependTest extends BuildFileTest {
    public static final String RESULT_FILESET = ""result"";

    public static final String TEST_BUILD_FILE
        = ""src/etc/testcases/taskdefs/optional/depend/depend.xml"";

    public DependTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TEST_BUILD_FILE);
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testDirect() {
        Project project = getProject();
        executeTarget(""testdirect"");
        Hashtable files = getResultFiles();
        assertEquals(""Depend did not leave correct number of files"", 3,
            files.size());
        assertTrue(""Result did not contain A.class"",
            files.containsKey(""A.class""));
        assertTrue(""Result did not contain D.class"",
            files.containsKey(""D.class""));
    }

    
    public void testClosure() {
        Project project = getProject();
        executeTarget(""testclosure"");
        Hashtable files = getResultFiles();
        assertEquals(""Depend did not leave correct number of files"", 2,
            files.size());
        assertTrue(""Result did not contain D.class"",
            files.containsKey(""D.class""));
    }

    
    public void testInner() {
        Project project = getProject();
        executeTarget(""testinner"");
        assertEquals(""Depend did not leave correct number of files"", 0,
            getResultFiles().size());
    }

    
    public void testInnerInner() {
        Project project = getProject();
        executeTarget(""testinnerinner"");
        assertEquals(""Depend did not leave correct number of files"", 0,
            getResultFiles().size());
    }

    
    public void testNoSource() {
        expectBuildExceptionContaining(""testnosource"",
            ""No source specified"", ""srcdir attribute must be set"");
    }

    
    public void testEmptySource() {
        expectBuildExceptionContaining(""testemptysource"",
            ""No source specified"", ""srcdir attribute must be non-empty"");
    }

    
    private Hashtable getResultFiles() {
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        return files;
    }


    
    public void testInnerClosure() {
        Project project = getProject();
        executeTarget(""testinnerclosure"");
        assertEquals(""Depend did not leave correct number of files"", 4,
            getResultFiles().size());
    }

    
    public void testCache() {
        executeTarget(""testcache"");
    }

    
    public void testNonPublic() {
        executeTarget(""testnonpublic"");
        String log = getLog();
        assertTrue(""Expected warning about APrivate"",
            log.indexOf(""The class APrivate in file"") != -1);
        assertTrue(""but has not been deleted because its source file ""
            + ""could not be determined"",
            log.indexOf(""The class APrivate in file"") != -1);
    }

}
"
L21901,Class,TranslateTest,org.apache.tools.ant.taskdefs.optional.i18n.TranslateTest,L21743,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/i18n/TranslateTest.java,69,1,132,2,0.792157,1,7,1,0.640625,0.679245,41,36,2,4,4,12,1,0,0,3,8,0.2,0.116667,7,6,1,4,0.116667,7,1,1,0,0,1,53,64,8,8,2,0,5,0,4,1,33,32,0,5,1,53,64,8,8,2,0,5,0,4,1,33,32,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.i18n;

import org.apache.tools.ant.BuildFileTest;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;


public class TranslateTest extends BuildFileTest {
    static private final int BUF_SIZE = 32768;

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/i18n/translate"";

    public TranslateTest(String name) {
        super(name);
    }


    public void setUp() {
        configureProject(TASKDEFS_DIR + ""/translate.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() {
        executeTarget(""test1"");
        assertTrue(""translation of ""+ TASKDEFS_DIR + ""/input/template.txt"",compareFiles(TASKDEFS_DIR+""/expected/de/template.txt"",TASKDEFS_DIR+""/output/de/template.txt""));
    }
    private boolean compareFiles(String name1, String name2) {
        File file1 = new File(name1);
        File file2 = new File(name2);

        try {
            if (!file1.exists() || !file2.exists()) {
                System.out.println(""One or both files do not exist:"" + name1 + "", "" + name2);
                return false;
            }

            if (file1.length() != file2.length()) {
                System.out.println(""File size mismatch:"" + name1 + ""("" + file1.length() + ""), "" +
                                   name2  + ""("" + file2.length() + "")"");
                return false;
            }

            
            byte[] buffer1 = new byte[BUF_SIZE];
            byte[] buffer2 = new byte[BUF_SIZE];

            FileInputStream fis1 = new FileInputStream(file1);
            FileInputStream fis2 = new FileInputStream(file2);
            int index = 0;
            int read = 0;
            while ((read = fis1.read(buffer1)) != -1) {
                fis2.read(buffer2);
                for (int i = 0; i < read; ++i, ++index) {
                    if (buffer1[i] != buffer2[i]) {
                        System.out.println(""Bytes mismatch:"" + name1 + "", "" + name2 +
                                           "" at byte "" + index);
                        return false;
                    }
                }
            }
            return true;
        }
        catch (IOException e) {
            System.out.println(""IOException comparing files: "" + name1 + "", "" + name2);
            return false;
        }
    }
}

"
L23549,Class,ImageTest,org.apache.tools.ant.taskdefs.optional.image.ImageTest,L23462,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/image/ImageTest.java,75,1,152,2,0.0,0,0,0,0.0,0.0,0,0,2,2,2,13,2,0,0,6,15,0.111111,0.102941,7,6,1,8,0.102941,7,1,1,0,0,1,61,78,8,8,2,0,9,0,8,1,37,30,0,9,1,61,78,8,8,2,0,9,0,8,1,37,30,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.image;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.taskdefs.condition.Os;

import java.io.IOException;
import java.io.File;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Properties;


public class ImageTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/image/"";
    private final static String LARGEIMAGE = ""largeimage.jpg"";

    public ImageTest(String name) {
        super(name);
    }


    public void setUp() {
        configureProject(TASKDEFS_DIR + ""image.xml"");
    }


    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testEchoToLog() {
        expectLogContaining(""testEchoToLog"", ""Processing File"");
    }

    public void testSimpleScale(){
      expectLogContaining(""testSimpleScale"", ""Processing File"");
      File f = createRelativeFile( ""/dest/"" + LARGEIMAGE  );
          assertTrue(
              ""Did not create ""+f.getAbsolutePath(),
        f.exists() );

    }

    public void testOverwriteTrue() {
      expectLogContaining(""testSimpleScale"", ""Processing File"");
      File f = createRelativeFile( ""/dest/"" + LARGEIMAGE  );
      long lastModified = f.lastModified();
       if (Os.isFamily(""dos"")) {
           try {
            Thread.sleep(2000);
           }
           catch (InterruptedException e) {}
       }
      expectLogContaining(""testOverwriteTrue"", ""Processing File"");
      f = createRelativeFile( ""/dest/"" + LARGEIMAGE  );
      long overwrittenLastModified = f.lastModified();
      assertTrue(""File was not overwritten."",lastModified < overwrittenLastModified);
    }

    public void testOverwriteFalse() {
      expectLogContaining(""testSimpleScale"", ""Processing File"");
      File f = createRelativeFile( ""/dest/"" + LARGEIMAGE  );
      long lastModified = f.lastModified();
      expectLogContaining(""testOverwriteFalse"", ""Processing File"");
      f = createRelativeFile( ""/dest/"" + LARGEIMAGE  );
      long overwrittenLastModified = f.lastModified();
      assertTrue(""File was overwritten."",lastModified == overwrittenLastModified);
    }


    public void off_testFailOnError() {
      try {
        expectLogContaining(""testFailOnError"", ""Unable to process image stream"");
      }
      catch (RuntimeException re){
        assertTrue(""Run time exception should say 'Unable to process image stream'. :"" + re.toString(),re.toString().indexOf(""Unable to process image stream"") > -1);
      }
    }



  protected File createRelativeFile( String filename ) {
        if (filename.equals( ""."" )) {
            return getProjectDir();
        }
        
        return new File( getProjectDir(), filename );
    }
}

"
L24462,Class,JDependTest,org.apache.tools.ant.taskdefs.optional.jdepend.JDependTest,L24310,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTest.java,74,1,155,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,10,1,0,0,5,15,0.777778,0.405405,30,30,7,2,0.405405,30,1,1,0,0,1,44,82,7,8,1,0,10,1,8,1,38,12,1,9,1,44,82,7,8,1,0,10,1,8,1,38,12,1,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.jdepend;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.DirectoryScanner;


public class JDependTest extends BuildFileTest {
    public static final String RESULT_FILESET = ""result"";

    public JDependTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(
            ""src/etc/testcases/taskdefs/optional/jdepend/jdepend.xml"");
    }

    
    public void testSimple() {
        expectOutputContaining(
            ""simple"", ""Package: org.apache.tools.ant.util.facade"");
    }
    
    
    public void testXml() {
        expectOutputContaining(
            ""xml"", ""<DependsUpon>"");
    }

    
    public void testFork() {
        expectLogContaining(
            ""fork"", ""Package: org.apache.tools.ant.util.facade"");
    }
    
    
    public void testForkXml() {
        expectLogContaining(
            ""fork-xml"", ""<DependsUpon>"");
    }

    
    public void testTimeout() {
        expectLogContaining(
            ""fork-timeout"", ""JDepend FAILED - Timed out"");
    }
    

    
    public void testTimeoutNot() {
        expectLogContaining(
            ""fork-timeout-not"", ""Package: org.apache.tools.ant.util.facade"");
    }

    

    protected void assertOutputContaining(String substring) {
        String realOutput = getOutput();
        assertTrue(""expecting output to contain \"""" + substring + ""\"" output was \""""
                   + realOutput + ""\"""",
                   realOutput.indexOf(substring) >= 0);
    }
    
    
    protected void expectOutputContaining(String target, String substring) {
        executeTarget(target);
        assertOutputContaining(substring);
    }

}
"
L26559,Class,JUnitClassLoaderTest,org.apache.tools.ant.taskdefs.optional.junit.JUnitClassLoaderTest,L25118,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitClassLoaderTest.java,64,1,75,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,0,0,0,2,0.333333,0.375,6,6,1,2,0.375,6,0,0,0,0,0,10,12,0,0,0,0,2,0,2,0,2,4,0,2,0,10,12,0,0,0,0,2,0,2,0,2,4,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.TestCase;


public class JUnitClassLoaderTest extends TestCase {

    public JUnitClassLoaderTest(String s) {
        super(s);
    }

    public void testContextClassLoader(){
        ClassLoader context = Thread.currentThread().getContextClassLoader();
        ClassLoader caller = getClass().getClassLoader();
        assertSame(context, caller);
    }
}
"
L26566,Class,JUnitReportTest,org.apache.tools.ant.taskdefs.optional.junit.JUnitReportTest,L25118,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitReportTest.java,66,1,93,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,5,1,0,0,3,7,0.666667,0.37931,11,11,2,1,0.37931,11,1,1,0,0,1,18,28,6,8,0,0,4,0,2,1,32,6,0,3,1,18,28,6,8,0,0,4,0,2,1,32,6,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class JUnitReportTest extends BuildFileTest {

    public JUnitReportTest(String name){
        super(name);
    }

    protected void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/junitreport.xml"");
    }

    protected void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testNoFileJUnitNoFrames() {
        executeTarget(""reports1"");
        if (new File(""src/etc/testcases/taskdefs/optional/junitreport/test/html/junit-noframes.html"").exists()) 
        {
            fail(""No file junit-noframes.html expected"");
        }
    }

}

"
L26574,Class,JUnitTestRunnerTest,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest,L25118,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,66,1,189,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,9,0,0,6,14,0.875,0.277778,15,13,7,1,0.172414,20,0,0,0,0,0,39,64,0,0,0,0,8,0,7,0,8,21,0,7,0,96,124,21,4,2,2,28,0,24,3,59,37,3,44,4,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26600,Class,JUnitTestRunnerTest$InvalidSuiteTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$InvalidSuiteTestCase,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,180,5,185,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,1,1,0,0,1,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26611,Class,JUnitTestRunnerTest$InvalidTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$InvalidTestCase,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,161,5,166,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,6,6,0,0,0,0,1,0,1,0,1,2,0,1,0,6,6,0,0,0,0,1,0,1,0,1,2,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26586,Class,JUnitTestRunnerTest$NoSuiteTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$NoSuiteTestCase,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,168,5,171,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,3,2,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,2,2,0,4,4,0,0,0,0,2,0,2,0,2,1,0,2,0,4,4,0,0,0,0,2,0,2,0,2,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26606,Class,JUnitTestRunnerTest$NoTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$NoTestCase,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,158,5,159,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26619,Class,JUnitTestRunnerTest$ResultFormatter,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$ResultFormatter,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,134,5,156,6,0.0,0,0,0,0.0,0.0,0,0,7,1,1,12,3,2,5,0,11,0.0909091,0.0416667,1,1,1,10,0.0416667,1,1,1,0,0,1,23,23,1,1,1,1,11,0,10,3,11,6,0,10,3,23,23,1,1,1,1,11,0,10,3,11,6,0,10,3,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26595,Class,JUnitTestRunnerTest$SuiteTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$SuiteTestCase,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,173,5,178,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,1,1,0,0,1,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26581,Class,JUnitTestRunnerTest$TestRunner,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$TestRunner,L26574,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,119,5,131,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,1,6,2,4,1.0,0.285714,4,1,1,0,0.285714,4,1,1,0,0,1,10,13,20,3,1,1,2,0,0,0,29,3,3,16,1,10,13,20,3,1,1,2,0,0,0,29,3,3,16,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L26671,Class,JUnitVersionHelperTest,org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelperTest,L25118,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelperTest.java,64,1,119,2,0.0,0,0,0,0.0,0.0,0,0,6,0,0,7,5,0,0,1,8,0.125,0.125,4,4,1,7,0.0851064,4,0,0,0,0,0,28,41,0,0,0,0,7,0,7,0,7,7,0,7,0,43,56,0,2,0,2,12,0,12,0,20,11,0,20,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestResult;


public class JUnitVersionHelperTest extends TestCase {

    public JUnitVersionHelperTest(String name) {
        super(name);
    }

    public void testMyOwnName() {
        assertEquals(""testMyOwnName"", 
                     JUnitVersionHelper.getTestCaseName(this));
    }

    public void testNonTestCaseName() {
        assertEquals(""I'm a foo"", 
                     JUnitVersionHelper.getTestCaseName(new Foo1()));
    }

    public void testNoStringReturn() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo2()));
    }

    public void testNoGetName() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo3()));
    }

    public void testNameNotGetName() {
        assertEquals(""I'm a foo, too"", 
                     JUnitVersionHelper.getTestCaseName(new Foo4()));
    }

    public void testNull() {
        assertEquals(""unknown"", JUnitVersionHelper.getTestCaseName(null));
    }

    public static class Foo implements Test {
        public int countTestCases() {return 0;}
        public void run(TestResult result) {}
    }

    public static class Foo1 extends Foo {
        public String getName() {return ""I'm a foo"";}
    }

    public static class Foo2 extends Foo {
        public int getName() {return 1;}
    }

    public static class Foo3 extends Foo {
    }

    public static class Foo4 extends Foo {
        public String name() {return ""I'm a foo, too"";}
    }

}
"
L26701,Class,JUnitVersionHelperTest$Foo,org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelperTest$Foo,L26671,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelperTest.java,99,5,102,6,0.0,0,0,0,0.0,0.0,0,0,2,0,0,2,0,4,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,4,4,0,4,4,0,0,0,0,2,0,2,0,2,1,0,2,0,4,4,0,0,0,0,2,0,2,0,2,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestResult;


public class JUnitVersionHelperTest extends TestCase {

    public JUnitVersionHelperTest(String name) {
        super(name);
    }

    public void testMyOwnName() {
        assertEquals(""testMyOwnName"", 
                     JUnitVersionHelper.getTestCaseName(this));
    }

    public void testNonTestCaseName() {
        assertEquals(""I'm a foo"", 
                     JUnitVersionHelper.getTestCaseName(new Foo1()));
    }

    public void testNoStringReturn() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo2()));
    }

    public void testNoGetName() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo3()));
    }

    public void testNameNotGetName() {
        assertEquals(""I'm a foo, too"", 
                     JUnitVersionHelper.getTestCaseName(new Foo4()));
    }

    public void testNull() {
        assertEquals(""unknown"", JUnitVersionHelper.getTestCaseName(null));
    }

    public static class Foo implements Test {
        public int countTestCases() {return 0;}
        public void run(TestResult result) {}
    }

    public static class Foo1 extends Foo {
        public String getName() {return ""I'm a foo"";}
    }

    public static class Foo2 extends Foo {
        public int getName() {return 1;}
    }

    public static class Foo3 extends Foo {
    }

    public static class Foo4 extends Foo {
        public String name() {return ""I'm a foo, too"";}
    }

}
"
L26677,Class,JUnitVersionHelperTest$Foo1,org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelperTest$Foo1,L26671,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelperTest.java,104,5,106,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,3,3,0,1,0,1,1,0,1,0,3,1,0,3,0,3,3,0,1,0,1,1,0,1,0,3,1,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestResult;


public class JUnitVersionHelperTest extends TestCase {

    public JUnitVersionHelperTest(String name) {
        super(name);
    }

    public void testMyOwnName() {
        assertEquals(""testMyOwnName"", 
                     JUnitVersionHelper.getTestCaseName(this));
    }

    public void testNonTestCaseName() {
        assertEquals(""I'm a foo"", 
                     JUnitVersionHelper.getTestCaseName(new Foo1()));
    }

    public void testNoStringReturn() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo2()));
    }

    public void testNoGetName() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo3()));
    }

    public void testNameNotGetName() {
        assertEquals(""I'm a foo, too"", 
                     JUnitVersionHelper.getTestCaseName(new Foo4()));
    }

    public void testNull() {
        assertEquals(""unknown"", JUnitVersionHelper.getTestCaseName(null));
    }

    public static class Foo implements Test {
        public int countTestCases() {return 0;}
        public void run(TestResult result) {}
    }

    public static class Foo1 extends Foo {
        public String getName() {return ""I'm a foo"";}
    }

    public static class Foo2 extends Foo {
        public int getName() {return 1;}
    }

    public static class Foo3 extends Foo {
    }

    public static class Foo4 extends Foo {
        public String name() {return ""I'm a foo, too"";}
    }

}
"
L26683,Class,JUnitVersionHelperTest$Foo2,org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelperTest$Foo2,L26671,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelperTest.java,108,5,110,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,3,3,0,1,0,1,1,0,1,0,3,1,0,3,0,3,3,0,1,0,1,1,0,1,0,3,1,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestResult;


public class JUnitVersionHelperTest extends TestCase {

    public JUnitVersionHelperTest(String name) {
        super(name);
    }

    public void testMyOwnName() {
        assertEquals(""testMyOwnName"", 
                     JUnitVersionHelper.getTestCaseName(this));
    }

    public void testNonTestCaseName() {
        assertEquals(""I'm a foo"", 
                     JUnitVersionHelper.getTestCaseName(new Foo1()));
    }

    public void testNoStringReturn() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo2()));
    }

    public void testNoGetName() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo3()));
    }

    public void testNameNotGetName() {
        assertEquals(""I'm a foo, too"", 
                     JUnitVersionHelper.getTestCaseName(new Foo4()));
    }

    public void testNull() {
        assertEquals(""unknown"", JUnitVersionHelper.getTestCaseName(null));
    }

    public static class Foo implements Test {
        public int countTestCases() {return 0;}
        public void run(TestResult result) {}
    }

    public static class Foo1 extends Foo {
        public String getName() {return ""I'm a foo"";}
    }

    public static class Foo2 extends Foo {
        public int getName() {return 1;}
    }

    public static class Foo3 extends Foo {
    }

    public static class Foo4 extends Foo {
        public String name() {return ""I'm a foo, too"";}
    }

}
"
L26689,Class,JUnitVersionHelperTest$Foo3,org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelperTest$Foo3,L26671,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelperTest.java,112,5,113,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,0,0,1,2,2,0,0,0,0,0,0,0,0,2,0,0,2,0,2,2,0,0,0,0,0,0,0,0,2,0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestResult;


public class JUnitVersionHelperTest extends TestCase {

    public JUnitVersionHelperTest(String name) {
        super(name);
    }

    public void testMyOwnName() {
        assertEquals(""testMyOwnName"", 
                     JUnitVersionHelper.getTestCaseName(this));
    }

    public void testNonTestCaseName() {
        assertEquals(""I'm a foo"", 
                     JUnitVersionHelper.getTestCaseName(new Foo1()));
    }

    public void testNoStringReturn() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo2()));
    }

    public void testNoGetName() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo3()));
    }

    public void testNameNotGetName() {
        assertEquals(""I'm a foo, too"", 
                     JUnitVersionHelper.getTestCaseName(new Foo4()));
    }

    public void testNull() {
        assertEquals(""unknown"", JUnitVersionHelper.getTestCaseName(null));
    }

    public static class Foo implements Test {
        public int countTestCases() {return 0;}
        public void run(TestResult result) {}
    }

    public static class Foo1 extends Foo {
        public String getName() {return ""I'm a foo"";}
    }

    public static class Foo2 extends Foo {
        public int getName() {return 1;}
    }

    public static class Foo3 extends Foo {
    }

    public static class Foo4 extends Foo {
        public String name() {return ""I'm a foo, too"";}
    }

}
"
L26695,Class,JUnitVersionHelperTest$Foo4,org.apache.tools.ant.taskdefs.optional.junit.JUnitVersionHelperTest$Foo4,L26671,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelperTest.java,115,5,117,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,3,3,0,0,0,0,1,0,1,0,3,1,0,3,0,3,3,0,0,0,0,1,0,1,0,3,1,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestResult;


public class JUnitVersionHelperTest extends TestCase {

    public JUnitVersionHelperTest(String name) {
        super(name);
    }

    public void testMyOwnName() {
        assertEquals(""testMyOwnName"", 
                     JUnitVersionHelper.getTestCaseName(this));
    }

    public void testNonTestCaseName() {
        assertEquals(""I'm a foo"", 
                     JUnitVersionHelper.getTestCaseName(new Foo1()));
    }

    public void testNoStringReturn() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo2()));
    }

    public void testNoGetName() {
        assertEquals(""unknown"", 
                     JUnitVersionHelper.getTestCaseName(new Foo3()));
    }

    public void testNameNotGetName() {
        assertEquals(""I'm a foo, too"", 
                     JUnitVersionHelper.getTestCaseName(new Foo4()));
    }

    public void testNull() {
        assertEquals(""unknown"", JUnitVersionHelper.getTestCaseName(null));
    }

    public static class Foo implements Test {
        public int countTestCases() {return 0;}
        public void run(TestResult result) {}
    }

    public static class Foo1 extends Foo {
        public String getName() {return ""I'm a foo"";}
    }

    public static class Foo2 extends Foo {
        public int getName() {return 1;}
    }

    public static class Foo3 extends Foo {
    }

    public static class Foo4 extends Foo {
        public String name() {return ""I'm a foo, too"";}
    }

}
"
L27271,Class,MAuditParserTest,org.apache.tools.ant.taskdefs.optional.metamata.MAuditParserTest,L26712,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/metamata/MAuditParserTest.java,67,1,107,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,3,0,0,3,8,0.2,0.179487,7,5,1,4,0.179487,7,0,0,0,0,0,32,41,1,0,1,0,5,0,4,1,5,17,0,4,1,32,41,1,0,1,0,5,0,4,1,5,17,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.metamata;

import java.io.File;

import junit.framework.TestCase;

import org.apache.tools.ant.util.StringUtils;


public class MAuditParserTest extends TestCase {

    private MAuditParser parser;

    public MAuditParserTest(String s) {
        super(s);
    }

    protected void setUp() {
        parser = new MAuditParser();
    }

    public void testViolation() {
        String line = ""file:\\WebGain\\QA\\examples\\auditexamples\\Vector.java:55: Array declarators (\""[]\"") should be placed with their component types and not after field/method declarations (5.27)."";
        
        
        line = StringUtils.replace(line, ""\\"", File.separator);
        MAuditParser.Violation violation = parser.parseLine(line);
        assertEquals(""\\WebGain\\QA\\examples\\auditexamples\\Vector.java"",
                StringUtils.replace(violation.file, File.separator, ""\\""));
        assertEquals(""55"", violation.line);
        assertEquals(""Array declarators (\""[]\"") should be placed with their component types and not after field/method declarations (5.27)."", violation.error);
    }

    public void testNonViolation(){
        String line = ""Audit completed with 36 violations."";
        Object violation = parser.parseLine(line);
        assertNull(violation);
    }

    public void testFilePathInViolation(){
        String line = ""file:\\WebGain\\QA\\examples\\auditexamples\\Hashtable.java:302: Loop variable defined at file:\\WebGain\\QA\\examples\\auditexamples\\Hashtable.java:300 is being modified (5.16)."";
        line = StringUtils.replace(line, ""\\"", File.separator);
        MAuditParser.Violation violation = parser.parseLine(line);
        assertEquals(""\\WebGain\\QA\\examples\\auditexamples\\Hashtable.java"",
                StringUtils.replace(violation.file, File.separator, ""\\""));
        assertEquals(""302"", violation.line);
        assertEquals(""Loop variable defined at Hashtable.java:300 is being modified (5.16)."", violation.error);
    }

}
"
L28112,Class,FTPTest,org.apache.tools.ant.taskdefs.optional.net.FTPTest,L27331,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java,69,1,620,2,0.449453,15,106,34,0.449275,0.478764,248,248,1,2,2,96,11,0,0,24,55,0.1,0.0192308,10,8,3,27,0.020794,11,1,1,0,0,1,510,542,14,8,8,0,31,0,29,1,59,316,0,30,1,518,552,59,19,8,0,33,0,31,1,137,318,1,80,29,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.net;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.taskdefs.optional.net.FTP;
import org.apache.tools.ant.util.JavaEnvUtils;
import org.apache.tools.ant.taskdefs.condition.Os;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import org.apache.commons.net.ftp.FTPClient;

public class FTPTest extends BuildFileTest{
    
    private boolean supportsSymlinks = Os.isFamily(""unix"")
        && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1);

    private FTPClient ftp;
    private boolean connectionSucceeded = true;
    private boolean loginSuceeded = true;
    private String tmpDir = null;
    private String remoteTmpDir = null;
    private String ftpFileSep = null;
    private myFTP myFTPTask = new myFTP();

    public FTPTest(String name) {
        super(name);
    }
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/net/ftp.xml"");
        getProject().executeTarget(""setup"");
        tmpDir = getProject().getProperty(""tmp.dir"");
        ftp = new FTPClient();
        ftpFileSep = getProject().getProperty(""ftp.filesep"");
        myFTPTask.setSeparator(ftpFileSep);
        myFTPTask.setProject(getProject());
        remoteTmpDir = myFTPTask.resolveFile(tmpDir);
        String remoteHost = getProject().getProperty(""ftp.host"");
        int port = Integer.parseInt(getProject().getProperty(""ftp.port""));
        String remoteUser = getProject().getProperty(""ftp.user"");
        String password = getProject().getProperty(""ftp.password"");
        try {
            ftp.connect(remoteHost, port);
        } catch (Exception ex) {
            connectionSucceeded = false;
            loginSuceeded = false;
            System.out.println(""could not connect to host "" + remoteHost + "" on port "" + port);
        }
        if (connectionSucceeded) {
            try {
                ftp.login(remoteUser, password);
            } catch (IOException ioe) {
                loginSuceeded = false;
                System.out.println(""could not log on to "" + remoteHost + "" as user "" + remoteUser);
            }
        }
    }

    public void tearDown() {
        try {
            ftp.disconnect();
        } catch (IOException ioe) {
            
        }
        getProject().executeTarget(""cleanup"");
    }
    private boolean changeRemoteDir(String remoteDir) {
        boolean result = true;
        try {
            ftp.cwd(remoteDir);
        }
        catch (Exception ex) {
            System.out.println(""could not change directory to "" + remoteTmpDir);
            result = false;
        }
        return result;
    }
    public void test1() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir))  {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha""});
                ds.scan();
                compareFiles(ds, new String[] {} ,new String[] {""alpha""});
            }
        }
    }

    public void test2() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/""});
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                               ""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
            }
        }
    }

    public void test3() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                               ""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha"", ""alpha/beta"",
                                  ""alpha/beta/gamma""});
            }
        }
    }

    public void testFullPathMatchesCaseSensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/beta/gamma/GAMMA.XML""});
                ds.scan();
                compareFiles(ds, new String[] {}, new String[] {});
            }
        }
    }

    public void testFullPathMatchesCaseInsensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setCaseSensitive(false);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/beta/gamma/GAMMA.XML""});
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                    new String[] {});
            }
        }
    }

    public void test2ButCaseInsensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""ALPHA/""});
                ds.setCaseSensitive(false);
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                               ""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
            }
        }
    }
    public void test2bisButCaseInsensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/BETA/gamma/""});
                ds.setCaseSensitive(false);
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha/beta/gamma""});
            }
        }
    }
    public void testGetWithSelector() {
        expectLogContaining(""ftp-get-with-selector"",
            ""selectors are not supported in remote filesets"");
        FileSet fsDestination = (FileSet) getProject().getReference(""fileset-destination-without-selector"");
        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(getProject());
        dsDestination.scan();
        String [] sortedDestinationDirectories = dsDestination.getIncludedDirectories();
        String [] sortedDestinationFiles = dsDestination.getIncludedFiles();
        for (int counter = 0; counter < sortedDestinationDirectories.length; counter++) {
            sortedDestinationDirectories[counter] =
                sortedDestinationDirectories[counter].replace(File.separatorChar, '/');
        }
        for (int counter = 0; counter < sortedDestinationFiles.length; counter++) {
            sortedDestinationFiles[counter] =
                sortedDestinationFiles[counter].replace(File.separatorChar, '/');
        }
        FileSet fsSource =  (FileSet) getProject().getReference(""fileset-source-without-selector"");
        DirectoryScanner dsSource = fsSource.getDirectoryScanner(getProject());
        dsSource.scan();
        compareFiles(dsSource, sortedDestinationFiles, sortedDestinationDirectories);
    }
    public void testGetFollowSymlinksTrue() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""ftp-get-directory-symbolic-link"");
        FileSet fsDestination = (FileSet) getProject().getReference(""fileset-destination-without-selector"");
        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(getProject());
        dsDestination.scan();
        compareFiles(dsDestination, new String[] {""alpha/beta/gamma/gamma.xml""},
            new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
    }
    public void testGetFollowSymlinksFalse() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""ftp-get-directory-no-symbolic-link"");
        FileSet fsDestination = (FileSet) getProject().getReference(""fileset-destination-without-selector"");
        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(getProject());
        dsDestination.scan();
        compareFiles(dsDestination, new String[] {},
            new String[] {});
    }
    public void testAllowSymlinks() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""symlink-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(true);
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha/beta/gamma""});
    }

    public void testProhibitSymlinks() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""symlink-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(false);
        ds.scan();
        compareFiles(ds, new String[] {}, new String[] {});
    }
    public void testFileSymlink() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""symlink-file-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(true);
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha/beta/gamma""});
    }
    
    public void testOrderOfIncludePatternsIrrelevant() {
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        String [] expectedFiles = {""alpha/beta/beta.xml"",
                                   ""alpha/beta/gamma/gamma.xml""};
        String [] expectedDirectories = {""alpha/beta"", ""alpha/beta/gamma"" };
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/be?a*.xml""
        });
        ds.setExcludes(new String[] {
            ""alpha/beta/b*xml""
        });
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {});
    }
    public void testExcludeHasPrecedence() {
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {
            ""alpha
    public void testChildrenOfExcludedDirectory() {
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""children-of-excluded-dir-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setExcludes(new String[] {""alpha
    public void testFTPDelete() {
        getProject().executeTarget(""ftp-delete"");
    }
    private void compareFiles(DirectoryScanner ds, String[] expectedFiles,
                              String[] expectedDirectories) {
        String includedFiles[] = ds.getIncludedFiles();
        String includedDirectories[] = ds.getIncludedDirectories();
        assertEquals(""file present: "", expectedFiles.length,
                     includedFiles.length);
        assertEquals(""directories present: "", expectedDirectories.length,
                     includedDirectories.length);

        for (int counter=0; counter < includedFiles.length; counter++) {
            includedFiles[counter] = includedFiles[counter].replace(File.separatorChar, '/');
        }
        Arrays.sort(includedFiles);
        for (int counter=0; counter < includedDirectories.length; counter++) {
            includedDirectories[counter] = includedDirectories[counter]
                            .replace(File.separatorChar, '/');
        }
        Arrays.sort(includedDirectories);
        for (int counter=0; counter < includedFiles.length; counter++) {
            assertEquals(expectedFiles[counter], includedFiles[counter]);
        }
        for (int counter=0; counter < includedDirectories.length; counter++) {
            assertEquals(expectedDirectories[counter], includedDirectories[counter]);
            counter++;
        }
    }
    private static class myFTP extends FTP {
        public FTP.FTPDirectoryScanner newScanner(FTPClient client) {
            return new FTP.FTPDirectoryScanner(client);
        }
        
        public String resolveFile(String file) {
            return super.resolveFile(file);
        }

    }
}
"
L28122,Class,FTPTest$myFTP,org.apache.tools.ant.taskdefs.optional.net.FTPTest$myFTP,L28112,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java,610,5,619,6,0.0,0,0,0,0.0,0.0,0,0,2,0,0,2,2,1,23,2,4,0.333333,0.111111,1,1,1,2,0.111111,1,3,3,0,0,1,8,10,45,11,0,0,2,0,2,0,78,2,1,50,28,8,10,45,11,0,0,2,0,2,0,78,2,1,50,28,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.net;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.taskdefs.optional.net.FTP;
import org.apache.tools.ant.util.JavaEnvUtils;
import org.apache.tools.ant.taskdefs.condition.Os;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import org.apache.commons.net.ftp.FTPClient;

public class FTPTest extends BuildFileTest{
    
    private boolean supportsSymlinks = Os.isFamily(""unix"")
        && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1);

    private FTPClient ftp;
    private boolean connectionSucceeded = true;
    private boolean loginSuceeded = true;
    private String tmpDir = null;
    private String remoteTmpDir = null;
    private String ftpFileSep = null;
    private myFTP myFTPTask = new myFTP();

    public FTPTest(String name) {
        super(name);
    }
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/net/ftp.xml"");
        getProject().executeTarget(""setup"");
        tmpDir = getProject().getProperty(""tmp.dir"");
        ftp = new FTPClient();
        ftpFileSep = getProject().getProperty(""ftp.filesep"");
        myFTPTask.setSeparator(ftpFileSep);
        myFTPTask.setProject(getProject());
        remoteTmpDir = myFTPTask.resolveFile(tmpDir);
        String remoteHost = getProject().getProperty(""ftp.host"");
        int port = Integer.parseInt(getProject().getProperty(""ftp.port""));
        String remoteUser = getProject().getProperty(""ftp.user"");
        String password = getProject().getProperty(""ftp.password"");
        try {
            ftp.connect(remoteHost, port);
        } catch (Exception ex) {
            connectionSucceeded = false;
            loginSuceeded = false;
            System.out.println(""could not connect to host "" + remoteHost + "" on port "" + port);
        }
        if (connectionSucceeded) {
            try {
                ftp.login(remoteUser, password);
            } catch (IOException ioe) {
                loginSuceeded = false;
                System.out.println(""could not log on to "" + remoteHost + "" as user "" + remoteUser);
            }
        }
    }

    public void tearDown() {
        try {
            ftp.disconnect();
        } catch (IOException ioe) {
            
        }
        getProject().executeTarget(""cleanup"");
    }
    private boolean changeRemoteDir(String remoteDir) {
        boolean result = true;
        try {
            ftp.cwd(remoteDir);
        }
        catch (Exception ex) {
            System.out.println(""could not change directory to "" + remoteTmpDir);
            result = false;
        }
        return result;
    }
    public void test1() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir))  {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha""});
                ds.scan();
                compareFiles(ds, new String[] {} ,new String[] {""alpha""});
            }
        }
    }

    public void test2() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/""});
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                               ""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
            }
        }
    }

    public void test3() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                               ""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha"", ""alpha/beta"",
                                  ""alpha/beta/gamma""});
            }
        }
    }

    public void testFullPathMatchesCaseSensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/beta/gamma/GAMMA.XML""});
                ds.scan();
                compareFiles(ds, new String[] {}, new String[] {});
            }
        }
    }

    public void testFullPathMatchesCaseInsensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setCaseSensitive(false);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/beta/gamma/GAMMA.XML""});
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                    new String[] {});
            }
        }
    }

    public void test2ButCaseInsensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""ALPHA/""});
                ds.setCaseSensitive(false);
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/beta.xml"",
                                               ""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
            }
        }
    }
    public void test2bisButCaseInsensitive() {
        if (loginSuceeded) {
            if (changeRemoteDir(remoteTmpDir)) {
                FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
                ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
                ds.setIncludes(new String[] {""alpha/BETA/gamma/""});
                ds.setCaseSensitive(false);
                ds.scan();
                compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                    new String[] {""alpha/beta/gamma""});
            }
        }
    }
    public void testGetWithSelector() {
        expectLogContaining(""ftp-get-with-selector"",
            ""selectors are not supported in remote filesets"");
        FileSet fsDestination = (FileSet) getProject().getReference(""fileset-destination-without-selector"");
        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(getProject());
        dsDestination.scan();
        String [] sortedDestinationDirectories = dsDestination.getIncludedDirectories();
        String [] sortedDestinationFiles = dsDestination.getIncludedFiles();
        for (int counter = 0; counter < sortedDestinationDirectories.length; counter++) {
            sortedDestinationDirectories[counter] =
                sortedDestinationDirectories[counter].replace(File.separatorChar, '/');
        }
        for (int counter = 0; counter < sortedDestinationFiles.length; counter++) {
            sortedDestinationFiles[counter] =
                sortedDestinationFiles[counter].replace(File.separatorChar, '/');
        }
        FileSet fsSource =  (FileSet) getProject().getReference(""fileset-source-without-selector"");
        DirectoryScanner dsSource = fsSource.getDirectoryScanner(getProject());
        dsSource.scan();
        compareFiles(dsSource, sortedDestinationFiles, sortedDestinationDirectories);
    }
    public void testGetFollowSymlinksTrue() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""ftp-get-directory-symbolic-link"");
        FileSet fsDestination = (FileSet) getProject().getReference(""fileset-destination-without-selector"");
        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(getProject());
        dsDestination.scan();
        compareFiles(dsDestination, new String[] {""alpha/beta/gamma/gamma.xml""},
            new String[] {""alpha"", ""alpha/beta"", ""alpha/beta/gamma""});
    }
    public void testGetFollowSymlinksFalse() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""ftp-get-directory-no-symbolic-link"");
        FileSet fsDestination = (FileSet) getProject().getReference(""fileset-destination-without-selector"");
        DirectoryScanner dsDestination = fsDestination.getDirectoryScanner(getProject());
        dsDestination.scan();
        compareFiles(dsDestination, new String[] {},
            new String[] {});
    }
    public void testAllowSymlinks() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""symlink-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(true);
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha/beta/gamma""});
    }

    public void testProhibitSymlinks() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""symlink-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(false);
        ds.scan();
        compareFiles(ds, new String[] {}, new String[] {});
    }
    public void testFileSymlink() {
        if (!supportsSymlinks) {
            return;
        }
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""symlink-file-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/beta/gamma/""});
        ds.setFollowSymlinks(true);
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {""alpha/beta/gamma""});
    }
    
    public void testOrderOfIncludePatternsIrrelevant() {
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        String [] expectedFiles = {""alpha/beta/beta.xml"",
                                   ""alpha/beta/gamma/gamma.xml""};
        String [] expectedDirectories = {""alpha/beta"", ""alpha/beta/gamma"" };
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {""alpha/be?a*.xml""
        });
        ds.setExcludes(new String[] {
            ""alpha/beta/b*xml""
        });
        ds.scan();
        compareFiles(ds, new String[] {""alpha/beta/gamma/gamma.xml""},
                     new String[] {});
    }
    public void testExcludeHasPrecedence() {
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setIncludes(new String[] {
            ""alpha
    public void testChildrenOfExcludedDirectory() {
        if (!loginSuceeded) {
            return;
        }
        if (!changeRemoteDir(remoteTmpDir)) {
            return;
        }
        getProject().executeTarget(""children-of-excluded-dir-setup"");
        FTP.FTPDirectoryScanner ds = myFTPTask.newScanner(ftp);
        ds.setBasedir(new File(getProject().getBaseDir(), ""tmp""));
        ds.setExcludes(new String[] {""alpha
    public void testFTPDelete() {
        getProject().executeTarget(""ftp-delete"");
    }
    private void compareFiles(DirectoryScanner ds, String[] expectedFiles,
                              String[] expectedDirectories) {
        String includedFiles[] = ds.getIncludedFiles();
        String includedDirectories[] = ds.getIncludedDirectories();
        assertEquals(""file present: "", expectedFiles.length,
                     includedFiles.length);
        assertEquals(""directories present: "", expectedDirectories.length,
                     includedDirectories.length);

        for (int counter=0; counter < includedFiles.length; counter++) {
            includedFiles[counter] = includedFiles[counter].replace(File.separatorChar, '/');
        }
        Arrays.sort(includedFiles);
        for (int counter=0; counter < includedDirectories.length; counter++) {
            includedDirectories[counter] = includedDirectories[counter]
                            .replace(File.separatorChar, '/');
        }
        Arrays.sort(includedDirectories);
        for (int counter=0; counter < includedFiles.length; counter++) {
            assertEquals(expectedFiles[counter], includedFiles[counter]);
        }
        for (int counter=0; counter < includedDirectories.length; counter++) {
            assertEquals(expectedDirectories[counter], includedDirectories[counter]);
            counter++;
        }
    }
    private static class myFTP extends FTP {
        public FTP.FTPDirectoryScanner newScanner(FTPClient client) {
            return new FTP.FTPDirectoryScanner(client);
        }
        
        public String resolveFile(String file) {
            return super.resolveFile(file);
        }

    }
}
"
L29123,Class,P4ChangeTest,org.apache.tools.ant.taskdefs.optional.perforce.P4ChangeTest,L28432,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/perforce/P4ChangeTest.java,63,1,89,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,1,5,0.25,0.16,4,4,1,3,0.16,4,0,0,0,0,0,21,27,1,0,1,0,4,0,3,1,4,10,0,3,1,21,27,1,0,1,0,4,0,3,1,4,10,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.perforce;

import junit.framework.TestCase;
import org.apache.oro.text.perl.Perl5Util;


public class P4ChangeTest extends TestCase {

    protected P4Change p4change;

    public P4ChangeTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        p4change = new P4Change();
    }

    public void testBackslash(){
        String input = ""comment with a / inside"";
        String output = p4change.backslash(input);
        assertEquals(""comment with a \\/ inside"", output);
    }

    public void testSubstitute(){
        Perl5Util util = new Perl5Util();
        String tosubstitute = ""xx<here>xx"";
        String input = p4change.backslash(""/a/b/c/"");
        String output = util.substitute(""s/<here>/"" + input + ""/"", tosubstitute);
        assertEquals(""xx/a/b/c/xx"", output);
    }

}
"
L30060,Class,ScriptDefTest,org.apache.tools.ant.taskdefs.optional.script.ScriptDefTest,L29939,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/script/ScriptDefTest.java,67,1,155,2,0.495726,1,2,2,0.292135,0.323529,26,22,3,0,0,11,4,0,0,9,20,0.166667,0.15,12,9,2,10,0.15,12,1,1,0,0,1,68,89,6,8,0,0,11,0,11,1,39,29,0,12,1,68,89,6,8,0,0,11,0,11,1,39,29,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.script;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import java.io.File;


public class ScriptDefTest extends BuildFileTest {

    public ScriptDefTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/optional/script/scriptdef.xml"");
    }

    public void testSimple() {
        executeTarget(""simple"");
        
        Project project = getProject();
        FileSet fileset = (FileSet) project.getReference(""testfileset"");
        File baseDir = fileset.getDir(project);
        String log = getLog();
        assertTrue(""Expecting attribute value printed"",
            log.indexOf(""Attribute attr1 = test"") != -1);

        assertTrue(""Expecting nested element value printed"",
            log.indexOf(""Fileset basedir = "" + baseDir.getAbsolutePath()) != -1);
    }

    public void testNoLang() {
        expectBuildExceptionContaining(""nolang"",
            ""Absence of language attribute not detected"",
            ""requires a language attribute"");
    }

    public void testNoName() {
        expectBuildExceptionContaining(""noname"",
            ""Absence of name attribute not detected"",
            ""scriptdef requires a name attribute"");
    }

    public void testNestedByClassName() {
        executeTarget(""nestedbyclassname"");
        
        Project project = getProject();
        FileSet fileset = (FileSet) project.getReference(""testfileset"");
        File baseDir = fileset.getDir(project);
        String log = getLog();
        assertTrue(""Expecting attribute value to be printed"",
            log.indexOf(""Attribute attr1 = test"") != -1);

        assertTrue(""Expecting nested element value to be printed"",
            log.indexOf(""Fileset basedir = "" + baseDir.getAbsolutePath()) != -1);
    }

    public void testNoElement() {
        expectOutput(""noelement"", ""Attribute attr1 = test"");
    }

    public void testException() {
        expectBuildExceptionContaining(""exception"",
            ""Should have thrown an exception in the script"",
            ""TypeError"");
    }

    public void testDoubleDef() {
        executeTarget(""doubledef"");
        String log = getLog();
        assertTrue(""Task1 did not execute"",
            log.indexOf(""Task1"") != -1);
        assertTrue(""Task2 did not execute"",
            log.indexOf(""Task2"") != -1);
    }

    public void testDoubleAttribute() {
        expectBuildExceptionContaining(""doubleAttributeDef"",
            ""Should have detected duplicate attribute definition"",
            ""attr1 attribute more than once"");
    }

    public void testProperty() {
        executeTarget(""property"");
        
        Project project = getProject();
        String log = getLog();
        assertTrue(""Expecting property in attribute value replaced"",
            log.indexOf(""Attribute value = test"") != -1);
    }


}
"
L31044,Class,ClassFileTest,org.apache.tools.ant.taskdefs.optional.sitraka.ClassFileTest,L30077,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/ClassFileTest.java,70,1,101,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,5,3,0,0,6,9,0.333333,0.171429,6,6,1,2,0.171429,6,0,0,0,0,0,29,32,0,0,0,0,3,0,2,0,3,21,0,2,0,29,32,0,0,0,0,3,0,2,0,3,21,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.io.IOException;
import java.io.InputStream;

import junit.framework.TestCase;
import org.apache.tools.ant.util.JavaEnvUtils;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassFile;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.MethodInfo;


public class ClassFileTest extends TestCase {
    public ClassFileTest(String s) {
        super(s);
    }

    public void testVector() throws IOException {
        String classname = ClassTest.class.getName().replace('.', '/') + "".class"";
        InputStream is = getClass().getClassLoader().getResourceAsStream(classname);
		assertNotNull(""Unable to find resource "" + classname + ""in caller classloader"");
        ClassFile clazzfile = new ClassFile(is);
        assertEquals(""ClassTest"", clazzfile.getName());
        assertEquals(""ClassFileTest.java"", clazzfile.getSourceFile());
        MethodInfo[] methods = clazzfile.getMethods();
        assertEquals(3, methods.length);
        assertHasMethod(""void <init>()"", 1, methods);
        assertHasMethod(""void testTwoLines()"", 2, methods);
        assertHasMethod(""void testOneLine()"", 3, methods);
    }

    protected void assertHasMethod(String methodsig, int line, MethodInfo[] methods) {
        boolean found = false;
        for (int i = 0; i < methods.length; i++) {
            MethodInfo method = methods[i];
            if (methodsig.equals(method.getFullSignature())) {

                assertTrue(methodsig, method.getNumberOfLines() >= line);
                return;
            }
        }
        fail(""Could not find method "" + methodsig);
    }
}

class ClassTest {

    
    public ClassTest() {
    }

    
    public void testTwoLines() {
        System.out.println(""This is 1 line"");
    }

    
    public void testOneLine() {
        try {
            throw new Exception();
        } catch (Exception e) {
        }
    }
}
"
L31065,Class,ClassPathLoaderTest,org.apache.tools.ant.taskdefs.optional.sitraka.ClassPathLoaderTest,L30077,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/ClassPathLoaderTest.java,68,1,82,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,2,0,0,5,7,0.333333,0.333333,6,5,1,2,0.333333,6,0,0,0,0,0,12,15,0,0,0,0,2,0,2,0,2,6,0,2,0,12,15,0,0,0,0,2,0,2,0,2,6,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.util.Hashtable;
import java.io.File;

import junit.framework.TestCase;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassPathLoader;


public class ClassPathLoaderTest extends TestCase {
    public ClassPathLoaderTest(String s) {
        super(s);
    }

    public void testgetClasses() throws Exception {
        
        Path p = new Path(null);
        p.addJavaRuntime();
        ClassPathLoader cl = new ClassPathLoader(p.toString());
        Hashtable map = cl.getClasses();
        assertTrue(map.size() > 0);
    }

}
"
L31049,Class,ClassTest,org.apache.tools.ant.taskdefs.optional.sitraka.ClassTest,L30077,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/ClassFileTest.java,103,1,121,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,4,0,1,0,0,3,0.75,0.1875,3,3,3,1,0.1875,3,0,0,0,0,0,13,19,0,0,0,0,3,0,3,0,3,3,0,3,0,13,19,0,0,0,0,3,0,3,0,3,3,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.io.IOException;
import java.io.InputStream;

import junit.framework.TestCase;
import org.apache.tools.ant.util.JavaEnvUtils;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassFile;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.MethodInfo;


public class ClassFileTest extends TestCase {
    public ClassFileTest(String s) {
        super(s);
    }

    public void testVector() throws IOException {
        String classname = ClassTest.class.getName().replace('.', '/') + "".class"";
        InputStream is = getClass().getClassLoader().getResourceAsStream(classname);
		assertNotNull(""Unable to find resource "" + classname + ""in caller classloader"");
        ClassFile clazzfile = new ClassFile(is);
        assertEquals(""ClassTest"", clazzfile.getName());
        assertEquals(""ClassFileTest.java"", clazzfile.getSourceFile());
        MethodInfo[] methods = clazzfile.getMethods();
        assertEquals(3, methods.length);
        assertHasMethod(""void <init>()"", 1, methods);
        assertHasMethod(""void testTwoLines()"", 2, methods);
        assertHasMethod(""void testOneLine()"", 3, methods);
    }

    protected void assertHasMethod(String methodsig, int line, MethodInfo[] methods) {
        boolean found = false;
        for (int i = 0; i < methods.length; i++) {
            MethodInfo method = methods[i];
            if (methodsig.equals(method.getFullSignature())) {

                assertTrue(methodsig, method.getNumberOfLines() >= line);
                return;
            }
        }
        fail(""Could not find method "" + methodsig);
    }
}

class ClassTest {

    
    public ClassTest() {
    }

    
    public void testTwoLines() {
        System.out.println(""This is 1 line"");
    }

    
    public void testOneLine() {
        try {
            throw new Exception();
        } catch (Exception e) {
        }
    }
}
"
L31072,Class,XMLReportTest,org.apache.tools.ant.taskdefs.optional.sitraka.XMLReportTest,L30077,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/XMLReportTest.java,76,1,137,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,5,5,0,0,10,14,0.333333,0.275862,16,8,1,2,0.275862,16,0,0,0,0,0,42,62,0,1,0,1,4,0,2,0,4,31,0,2,0,42,62,0,1,0,1,4,0,2,0,4,31,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.net.URL;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import junit.framework.TestCase;
import org.apache.tools.ant.types.Path;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


public class XMLReportTest extends TestCase {
    public XMLReportTest(String s) {
        super(s);
    }

    protected File getFile(String name) throws FileNotFoundException {
        URL url = getClass().getResource(name);
        if (url == null) {
            throw new FileNotFoundException(""Unable to load '"" + name + ""' from classpath"");
        }
        return new File(url.getFile());
    }

    public void testCreateDocument() throws Exception {
        
        File reportFile = getFile(""/taskdefs/optional/sitraka/covreport-test.xml"");
        XMLReport report = new XMLReport(reportFile);
        ReportFilters filters = new ReportFilters();
        ReportFilters.Include incl = new ReportFilters.Include();
        incl.setClass(""java.util.Vector"");
        incl.setMethod(""set*"");
        filters.addInclude(incl);
        report.setReportFilters(filters);
        Path p = new Path(null);
        p.addJavaRuntime();
        Document doc = report.createDocument(p.list());

        Node snapshot = doc.getDocumentElement();
        assertEquals(""snapshot"", snapshot.getNodeName());

        
        NodeList packages = doc.getElementsByTagName(""package"");
        assertEquals(1, packages.getLength());
        assertEquals(""java.util"", packages.item(0).getAttributes().getNamedItem(""name"").getNodeValue());

        
        NodeList classes = doc.getElementsByTagName(""class"");
        assertEquals(1, classes.getLength());
        assertEquals(""Vector"", classes.item(0).getAttributes().getNamedItem(""name"").getNodeValue());

        
        
        
        
        NodeList methods = doc.getElementsByTagName(""method"");
        assertEquals(3, methods.getLength());

        
    }

    
    protected void dump(Document doc, OutputStream out) throws Exception {
        TransformerFactory tfactory = TransformerFactory.newInstance();
        Transformer transformer = tfactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, ""no"");
        transformer.setOutputProperty(OutputKeys.METHOD, ""xml"");
        transformer.transform(new DOMSource(doc), new StreamResult(out));
    }
}
"
L31367,Class,SOSTest,org.apache.tools.ant.taskdefs.optional.sos.SOSTest,L31091,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java,69,1,374,2,0.519965,5,13,13,0.356209,0.427313,109,97,2,2,2,19,10,0,0,34,49,1.0,0.171533,47,39,13,0,0.171533,47,1,1,0,0,1,227,306,20,8,14,0,15,0,12,1,43,144,0,13,1,227,306,20,8,14,0,15,0,12,1,43,144,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sos;

import java.io.File;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.Path;


public class SOSTest extends BuildFileTest {

    private Project project;
    private Commandline commandline;

    private static final String VSS_SERVER_PATH = ""\\\\server\\vss\\srcsafe.ini"";
    private static final String VSS_PROJECT_PATH = ""/SourceRoot/Project"";
    private static final String DS_VSS_PROJECT_PATH = ""$/SourceRoot/Project"";
    private static final String SOS_SERVER_PATH = ""192.168.0.1:8888"";
    private static final String SOS_USERNAME = ""ant"";
    private static final String SOS_PASSWORD = ""rocks"";
    private static final String LOCAL_PATH = ""testdir"";
    private static final String SRC_FILE = ""Class1.java"";
    private static final String SRC_LABEL = ""label1"";
    private static final String SRC_COMMENT = ""I fixed a bug"";
    private static final String SOS_HOME = ""/home/user/.sos"";
    private static final String VERSION = ""007"";

    
    public SOSTest(String s) {
        super(s);
    }

    
    protected void setUp()
        throws Exception {
        project = new Project();
        project.setBasedir(""."");
    }

    
    protected void tearDown()
        throws Exception {
        File file = new File(project.getBaseDir(), LOCAL_PATH);
        if (file.exists()) {
            file.delete();
        }
    }

    
    public void testGetFileFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""GetFile"", ""-file"",
                SRC_FILE, ""-revision"", ""007"", ""-server"", SOS_SERVER_PATH, ""-name"",
                SOS_USERNAME, ""-password"", SOS_PASSWORD, ""-database"", VSS_SERVER_PATH,
                ""-project"", DS_VSS_PROJECT_PATH, ""-verbose"", ""-nocompress"",
                ""-nocache"", ""-workdir"", project.getBaseDir().getAbsolutePath()
                 + File.separator + LOCAL_PATH};

        
        SOSGet sosGet = new SOSGet();
        sosGet.setProject(project);
        sosGet.setVssServerPath(VSS_SERVER_PATH);
        sosGet.setSosServerPath(SOS_SERVER_PATH);
        sosGet.setProjectPath(VSS_PROJECT_PATH);
        sosGet.setFile(SRC_FILE);
        sosGet.setUsername(SOS_USERNAME);
        sosGet.setPassword(SOS_PASSWORD);
        sosGet.setVersion(VERSION);
        sosGet.setLocalPath(new Path(project, LOCAL_PATH));
        sosGet.setNoCache(true);
        sosGet.setNoCompress(true);
        sosGet.setVerbose(true);
        sosGet.setRecursive(true);

        commandline = sosGet.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testGetProjectFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""GetProject"", ""-recursive"",
                ""-label"", SRC_LABEL, ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
                ""-password"", """", ""-database"", VSS_SERVER_PATH, ""-project"",
                DS_VSS_PROJECT_PATH, """", """", ""-soshome"", SOS_HOME, ""-workdir"",
                project.getBaseDir().getAbsolutePath()};

        
        SOSGet sosGet = new SOSGet();
        sosGet.setProject(project);
        sosGet.setVssServerPath(VSS_SERVER_PATH);
        sosGet.setSosServerPath(SOS_SERVER_PATH);
        sosGet.setProjectPath(DS_VSS_PROJECT_PATH);
        sosGet.setLabel(SRC_LABEL);
        sosGet.setUsername(SOS_USERNAME);
        sosGet.setSosHome(SOS_HOME);
        sosGet.setNoCache(true);
        sosGet.setNoCompress(false);
        sosGet.setVerbose(false);
        sosGet.setRecursive(true);

        commandline = sosGet.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testGetExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/sos/sos.xml"");
        expectSpecificBuildException(""sosget.1"", ""some cause"", ""sosserverpath attribute must be set!"");
        expectSpecificBuildException(""sosget.2"", ""some cause"", ""username attribute must be set!"");
        expectSpecificBuildException(""sosget.3"", ""some cause"", ""vssserverpath attribute must be set!"");
        expectSpecificBuildException(""sosget.4"", ""some cause"", ""projectpath attribute must be set!"");
    }

    
    public void testCheckinFileFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""CheckInFile"", ""-file"",
                SRC_FILE, ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
                ""-password"", SOS_PASSWORD, ""-database"", VSS_SERVER_PATH, ""-project"",
                DS_VSS_PROJECT_PATH, ""-verbose"", ""-nocompress"", ""-nocache"",
                ""-workdir"", project.getBaseDir().getAbsolutePath() + File.separator
                 + LOCAL_PATH, ""-log"", SRC_COMMENT};

        
        SOSCheckin sosCheckin = new SOSCheckin();
        sosCheckin.setProject(project);
        sosCheckin.setVssServerPath(VSS_SERVER_PATH);
        sosCheckin.setSosServerPath(SOS_SERVER_PATH);
        sosCheckin.setProjectPath(VSS_PROJECT_PATH);
        sosCheckin.setFile(SRC_FILE);
        sosCheckin.setComment(SRC_COMMENT);
        sosCheckin.setUsername(SOS_USERNAME);
        sosCheckin.setPassword(SOS_PASSWORD);
        sosCheckin.setLocalPath(new Path(project, LOCAL_PATH));
        sosCheckin.setNoCache(true);
        sosCheckin.setNoCompress(true);
        sosCheckin.setVerbose(true);
        sosCheckin.setRecursive(true);

        commandline = sosCheckin.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCheckinProjectFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""CheckInProject"",
                ""-recursive"", ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
                ""-password"", """", ""-database"", VSS_SERVER_PATH, ""-project"",
                DS_VSS_PROJECT_PATH, """", """", ""-soshome"", SOS_HOME, ""-workdir"",
                project.getBaseDir().getAbsolutePath(), ""-log"", SRC_COMMENT,};

        
        SOSCheckin sosCheckin = new SOSCheckin();
        sosCheckin.setProject(project);
        sosCheckin.setVssServerPath(VSS_SERVER_PATH);
        sosCheckin.setSosServerPath(SOS_SERVER_PATH);
        sosCheckin.setProjectPath(DS_VSS_PROJECT_PATH);
        sosCheckin.setComment(SRC_COMMENT);
        sosCheckin.setUsername(SOS_USERNAME);
        sosCheckin.setSosHome(SOS_HOME);
        sosCheckin.setNoCache(true);
        sosCheckin.setNoCompress(false);
        sosCheckin.setVerbose(false);
        sosCheckin.setRecursive(true);

        commandline = sosCheckin.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCheckinExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/sos/sos.xml"");
        expectSpecificBuildException(""soscheckin.1"", ""some cause"", ""sosserverpath attribute must be set!"");
        expectSpecificBuildException(""soscheckin.2"", ""some cause"", ""username attribute must be set!"");
        expectSpecificBuildException(""soscheckin.3"", ""some cause"", ""vssserverpath attribute must be set!"");
        expectSpecificBuildException(""soscheckin.4"", ""some cause"", ""projectpath attribute must be set!"");
    }

    
    public void testCheckoutFileFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""CheckOutFile"", ""-file"",
                SRC_FILE, ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
                ""-password"", SOS_PASSWORD, ""-database"", VSS_SERVER_PATH, ""-project"",
                DS_VSS_PROJECT_PATH, ""-verbose"", ""-nocompress"", ""-nocache"",
                ""-workdir"", project.getBaseDir().getAbsolutePath()
                 + File.separator + LOCAL_PATH};

        
        SOSCheckout sosCheckout = new SOSCheckout();
        sosCheckout.setProject(project);
        sosCheckout.setVssServerPath(VSS_SERVER_PATH);
        sosCheckout.setSosServerPath(SOS_SERVER_PATH);
        sosCheckout.setProjectPath(DS_VSS_PROJECT_PATH);
        sosCheckout.setFile(SRC_FILE);
        sosCheckout.setUsername(SOS_USERNAME);
        sosCheckout.setPassword(SOS_PASSWORD);
        sosCheckout.setLocalPath(new Path(project, LOCAL_PATH));
        sosCheckout.setNoCache(true);
        sosCheckout.setNoCompress(true);
        sosCheckout.setVerbose(true);
        sosCheckout.setRecursive(true);

        commandline = sosCheckout.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCheckoutProjectFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""CheckOutProject"",
                ""-recursive"", ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
                ""-password"", """", ""-database"", VSS_SERVER_PATH, ""-project"",
                DS_VSS_PROJECT_PATH, """", """", ""-soshome"", SOS_HOME, ""-workdir"",
                project.getBaseDir().getAbsolutePath()};

        
        SOSCheckout sosCheckout = new SOSCheckout();
        sosCheckout.setProject(project);
        sosCheckout.setVssServerPath(VSS_SERVER_PATH);
        sosCheckout.setSosServerPath(SOS_SERVER_PATH);
        sosCheckout.setProjectPath(VSS_PROJECT_PATH);
        sosCheckout.setUsername(SOS_USERNAME);
        sosCheckout.setSosHome(SOS_HOME);
        sosCheckout.setNoCache(true);
        sosCheckout.setNoCompress(false);
        sosCheckout.setVerbose(false);
        sosCheckout.setRecursive(true);

        commandline = sosCheckout.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCheckoutExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/sos/sos.xml"");
        expectSpecificBuildException(""soscheckout.1"", ""some cause"", ""sosserverpath attribute must be set!"");
        expectSpecificBuildException(""soscheckout.2"", ""some cause"", ""username attribute must be set!"");
        expectSpecificBuildException(""soscheckout.3"", ""some cause"", ""vssserverpath attribute must be set!"");
        expectSpecificBuildException(""soscheckout.4"", ""some cause"", ""projectpath attribute must be set!"");
    }

    
    public void testLabelFlags() {
        String[] sTestCmdLine = {""soscmd"", ""-command"", ""AddLabel"", ""-server"",
                SOS_SERVER_PATH, ""-name"", SOS_USERNAME, ""-password"", """", ""-database"",
                VSS_SERVER_PATH, ""-project"", DS_VSS_PROJECT_PATH, ""-label"",
                SRC_LABEL, ""-verbose"", ""-log"", SRC_COMMENT};

        
        SOSLabel sosLabel = new SOSLabel();
        sosLabel.setVssServerPath(VSS_SERVER_PATH);
        sosLabel.setSosServerPath(SOS_SERVER_PATH);
        sosLabel.setProjectPath(DS_VSS_PROJECT_PATH);
        sosLabel.setUsername(SOS_USERNAME);
        sosLabel.setSosHome(SOS_HOME);
        sosLabel.setComment(SRC_COMMENT);
        sosLabel.setLabel(SRC_LABEL);
        sosLabel.setNoCache(true);
        sosLabel.setNoCompress(false);
        sosLabel.setVerbose(true);

        commandline = sosLabel.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testLabelExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/sos/sos.xml"");
        expectSpecificBuildException(""soslabel.1"", ""some cause"", ""sosserverpath attribute must be set!"");
        expectSpecificBuildException(""soslabel.2"", ""some cause"", ""username attribute must be set!"");
        expectSpecificBuildException(""soslabel.3"", ""some cause"", ""vssserverpath attribute must be set!"");
        expectSpecificBuildException(""soslabel.4"", ""some cause"", ""projectpath attribute must be set!"");
        expectSpecificBuildException(""soslabel.5"", ""some cause"", ""label attribute must be set!"");
    }

    
    private void checkCommandLines(String[] sTestCmdLine, String[] sGeneratedCmdLine) {
        int length = sTestCmdLine.length;
        for (int i = 0; i < length; i++) {
            try {
                assertEquals(""arg # "" + String.valueOf(i),
                        sTestCmdLine[i],
                        sGeneratedCmdLine[i]);
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""missing arg "" + sTestCmdLine[i]);
            }
        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""extra args"");
        }
    }
}
"
L31824,Class,SplashScreenTest,org.apache.tools.ant.taskdefs.optional.splash.SplashScreenTest,L31652,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/splash/SplashScreenTest.java,67,1,91,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,3,3,0,0,4,5,0.5,0.354839,11,8,1,1,0.354839,11,0,0,0,0,0,20,25,0,0,0,0,1,0,1,0,1,12,0,1,0,20,25,0,0,0,0,1,0,1,0,1,12,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.splash;

import org.apache.tools.ant.Project;


public class SplashScreenTest {

    public static void main(String[] args) {
        Project p = new Project();
        SplashTask t = new SplashTask();
        t.setProject(p);
        t.execute();

        
        try {
            Thread.currentThread().sleep(2000);
        } catch (InterruptedException e) {
        } 

        p.fireBuildFinished(null);
        System.err.println(""finished"");

        try {
            Thread.currentThread().sleep(2000);
        } catch (InterruptedException e) {
        } 
        System.err.println(""exiting"");
        System.exit(0);
    }
}
    
"
L32262,Class,ScpTest,org.apache.tools.ant.taskdefs.optional.ssh.ScpTest,L31831,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ssh/ScpTest.java,85,1,202,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,13,8,0,0,18,27,0.2,0.140351,16,16,1,4,0.140351,16,0,0,0,0,0,98,118,5,0,5,0,9,0,4,1,9,69,0,4,1,98,118,5,0,5,0,9,0,4,1,9,69,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.ssh;

import junit.framework.TestCase;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.condition.FilesMatch;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.selectors.FilenameSelector;


public class ScpTest extends TestCase {

    private File tempDir = new File( System.getProperty(""scp.tmp"") );
    private String sshHostUri = System.getProperty(""scp.host"");
    private int port = Integer.parseInt( System.getProperty( ""scp.port"", ""22"" ) );
    private String knownHosts = System.getProperty(""scp.known.hosts"");

    private List cleanUpList = new ArrayList();

    public ScpTest(String testname) {
        super(testname);
    }

    protected void setUp() {
        cleanUpList.clear();
    }

    protected void tearDown() {
        for( Iterator i = cleanUpList.iterator(); i.hasNext(); ) {
            File file = (File) i.next();
            file.delete();
        }
    }

    public void testSingleFileUploadAndDownload() throws IOException {
        File uploadFile = createTemporaryFile();

        Scp scpTask = createTask();
        scpTask.setFile( uploadFile.getPath() );
        scpTask.setTodir( sshHostUri );
        scpTask.execute();

        File testFile = new File( tempDir.getPath() + File.separator +
                ""download-testSingleFileUploadAndDownload.test"" );
        addCleanup( testFile );
        assertTrue( ""Assert that the testFile does not exist."",
                !testFile.exists() );

        scpTask.setFile( sshHostUri + ""/"" + uploadFile.getName() );
        scpTask.setTodir( testFile.getPath() );
        scpTask.execute();

        assertTrue( ""Assert that the testFile exists."", testFile.exists() );
        compareFiles( uploadFile, testFile );
    }

    public void testMultiUploadAndDownload() throws IOException {
        List uploadList = new ArrayList();
        for( int i = 0; i < 5; i++ ) {
            uploadList.add( createTemporaryFile() );
        }

        Scp scp = createTask();
        FilenameSelector selector = new FilenameSelector();
        selector.setName( ""scp*"" );
        FileSet fileset = new FileSet();
        fileset.setDir( tempDir );
        fileset.addFilename( selector );
        scp.addFileset( fileset );
        scp.setTodir( sshHostUri );
        scp.execute();

        File multi = new File( tempDir, ""multi"" );
        multi.mkdir();
        addCleanup( multi );

        Scp scp2 = createTask();
        scp2.setFile( sshHostUri + ""/scp*"" );
        scp2.setTodir( multi.getPath() );
        scp2.execute();

        FilesMatch match = new FilesMatch();
        for( Iterator i = uploadList.iterator(); i.hasNext(); ) {
            File f = (File)i.next();
            match.setFile1( f );
            File f2 = new File( multi, f.getName() );
            match.setFile2( f2 );
            assertTrue(""Assert file '"" + f.getPath() + ""' and file '"" +
                    f2.getPath() + ""'"", match.eval() );
        }
    }

    public void addCleanup( File file ) {
        cleanUpList.add( file );
    }

    private void compareFiles(File src, File dest) {
        FilesMatch match = new FilesMatch();
        match.setFile1( src );
        match.setFile2( dest );

        assertTrue( ""Assert files are equal."", match.eval() );
    }

    private File createTemporaryFile() throws IOException {
        File uploadFile;
        uploadFile = File.createTempFile( ""scp"", ""test"", tempDir );
        FileWriter writer = new FileWriter( uploadFile );
        writer.write(""Can you hear me now?\n"");
        writer.close();
        addCleanup( uploadFile );
        return uploadFile;
    }

    private Scp createTask() {
        Scp scp = new Scp();
        Project p = new Project();
        p.init();
        scp.setProject( p );
        if( knownHosts != null ) {
            scp.setKnownhosts( knownHosts );
        } else {
            scp.setTrust( true );
        }
        scp.setPort( port );
        return scp;
    }
}
"
L33282,Class,SymlinkTest,org.apache.tools.ant.taskdefs.optional.unix.SymlinkTest,L33142,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/unix/SymlinkTest.java,84,1,224,2,0.367682,5,9,5,0.35461,0.330435,50,38,1,2,2,20,3,0,0,6,13,0.125,0.08,10,10,1,7,0.08,10,1,1,0,0,1,115,141,9,8,3,0,7,0,7,1,35,64,0,8,1,115,141,9,8,3,0,7,0,7,1,35,64,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"



package org.apache.tools.ant.taskdefs.optional.unix;

import org.apache.tools.ant.taskdefs.condition.Os;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;



public class SymlinkTest extends BuildFileTest {

    private Project p;
    private boolean supportsSymlinks = Os.isFamily(""unix"");
    private boolean testfail = false;

    public SymlinkTest(String name) {
        super(name);
    }

    public void setUp() {
        if (supportsSymlinks) {
            configureProject(""src/etc/testcases/taskdefs/optional/unix/symlink.xml"");
            executeTarget(""setup"");
        }
    }


    public void testSingle() {
        testfail = true;
        if (supportsSymlinks) {
            executeTarget(""test-single"");
            p = getProject();
            assertNotNull(""Failed to create file"", 
                          p.getProperty(""test.single.file.created""));
            assertNotNull(""Failed to create link"",
                          p.getProperty(""test.single.link.created""));
        }
        testfail = false;
    }

    public void testDelete() {
        testfail = true;
        if (supportsSymlinks) {
            executeTarget(""test-delete"");
            p = getProject();
            String linkDeleted = p.getProperty(""test.delete.link.still.there"");
            assertNotNull(""Actual file deleted by symlink"",
                          p.getProperty(""test.delete.file.still.there""));
            if (linkDeleted != null) {
                fail(linkDeleted);
            }
        }
        testfail = false;
    }

    public void testRecord() {
        testfail = true;
        if (supportsSymlinks) {
            executeTarget(""test-record"");
            p = getProject();

            assertNotNull(""Failed to create dir1"",
                          p.getProperty(""test.record.dir1.created""));

            assertNotNull(""Failed to create dir2"",
                          p.getProperty(""test.record.dir2.created""));

            assertNotNull(""Failed to create file1"",
                          p.getProperty(""test.record.file1.created""));

            assertNotNull(""Failed to create file2"",
                          p.getProperty(""test.record.file2.created""));

            assertNotNull(""Failed to create fileA"",
                          p.getProperty(""test.record.fileA.created""));

            assertNotNull(""Failed to create fileB"",
                          p.getProperty(""test.record.fileB.created""));

            assertNotNull(""Failed to create fileC"",
                          p.getProperty(""test.record.fileC.created""));

            assertNotNull(""Failed to create link1"",
                          p.getProperty(""test.record.link1.created""));

            assertNotNull(""Failed to create link2"",
                          p.getProperty(""test.record.link2.created""));

            assertNotNull(""Failed to create link3"",
                          p.getProperty(""test.record.link3.created""));

            assertNotNull(""Failed to create dirlink"",
                          p.getProperty(""test.record.dirlink.created""));

            assertNotNull(""Couldn't record links in dir1"",
                          p.getProperty(""test.record.dir1.recorded""));

            assertNotNull(""Couldn't record links in dir2"",
                          p.getProperty(""test.record.dir2.recorded""));

            String dir3rec = p.getProperty(""test.record.dir3.recorded"");

            if (dir3rec != null) {
                fail(dir3rec);
            }

        }
        testfail = false;
    }

    public void testRecreate() {
        testfail = true;
        if (supportsSymlinks) {
            executeTarget(""test-recreate"");
            p = getProject();
            String link1Rem = p.getProperty(""test.recreate.link1.not.removed"");
            String link2Rem = p.getProperty(""test.recreate.link2.not.removed"");
            String link3Rem = p.getProperty(""test.recreate.link3.not.removed"");
            String dirlinkRem = p.getProperty(""test.recreate.dirlink.not.removed"");
            if (link1Rem != null) {
                fail(link1Rem);
            }
            if (link2Rem != null) {
                fail(link2Rem);
            }
            if (link3Rem != null) {
                fail(link3Rem);
            }
            if (dirlinkRem != null) {
                fail(dirlinkRem);
            }
            assertNotNull(""Failed to recreate link1"",
                          p.getProperty(""test.recreate.link1.recreated""));
            assertNotNull(""Failed to recreate link2"",
                          p.getProperty(""test.recreate.link2.recreated""));
            assertNotNull(""Failed to recreate link3"",
                          p.getProperty(""test.recreate.link3.recreated""));
            assertNotNull(""Failed to recreate dirlink"",
                          p.getProperty(""test.recreate.dirlink.recreated""));
        }
        testfail = false;
    }

    public void tearDown() {
        if (supportsSymlinks && !testfail) {
            executeTarget(""teardown"");
        }
    }

}
"
L33892,Class,MSVSSTest,org.apache.tools.ant.taskdefs.optional.vss.MSVSSTest,L33298,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/vss/MSVSSTest.java,74,1,491,2,0.0460358,1,1,1,0.0287081,0.0350877,12,10,2,3,3,30,22,0,0,62,85,1.0,0.203911,73,58,21,0,0.203911,73,1,2,0,0,2,285,418,71,8,17,0,23,0,20,1,51,181,48,21,1,285,418,71,8,17,0,23,0,20,1,51,181,48,21,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.vss;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Location;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Tstamp;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.Path;


public class MSVSSTest extends BuildFileTest implements MSVSSConstants {

    private Project project;
    private Commandline commandline;

    private static final String VSS_SERVER_PATH = ""\\\\server\\vss\\srcsafe.ini"";
    private static final String VSS_PROJECT_PATH = ""/SourceRoot/Project"";
    private static final String DS_VSS_PROJECT_PATH = ""$/SourceRoot/Project"";
    private static final String VSS_USERNAME = ""ant"";
    private static final String VSS_PASSWORD = ""rocks"";
    private static final String LOCAL_PATH = ""testdir"";
    private static final String SRC_FILE = ""Class1.java"";
    private static final String SRC_LABEL = ""label1"";
    private static final String LONG_LABEL = ""123456789012345678901234567890"";
    private static final String SRC_COMMENT = ""I fixed a bug"";
    private static final String VERSION = ""007"";
    private static final String DATE = ""00-00-00"";
    private static final String DATE2 = ""01-01-01"";
    private static final String OUTPUT = ""output.log"";
    private static final String SS_DIR = ""c:/winnt"";

    
    public MSVSSTest(String s) {
        super(s);
    }

    
    protected void setUp()
        throws Exception {
        project = new Project();
        project.setBasedir(""."");
    }

    
    protected void tearDown()
        throws Exception {
        File file = new File(project.getBaseDir(), LOCAL_PATH);
        if (file.exists()) {
            file.delete();
        }
    }

    
    public void testGetCommandLine() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_GET, DS_VSS_PROJECT_PATH,
                MSVSS.FLAG_OVERRIDE_WORKING_DIR + project.getBaseDir().getAbsolutePath()
                 + File.separator + LOCAL_PATH, MSVSS.FLAG_AUTORESPONSE_DEF,
                MSVSS.FLAG_RECURSION, MSVSS.FLAG_VERSION + VERSION, MSVSS.FLAG_LOGIN
                 + VSS_USERNAME + "","" + VSS_PASSWORD, FLAG_FILETIME_UPDATED, FLAG_SKIP_WRITABLE};

        
        MSVSSGET vssGet = new MSVSSGET();
        vssGet.setProject(project);
        vssGet.setRecursive(true);
        vssGet.setLocalpath(new Path(project, LOCAL_PATH));
        vssGet.setLogin(VSS_USERNAME + "","" + VSS_PASSWORD);
        vssGet.setVersion(VERSION);
        vssGet.setQuiet(false);
        vssGet.setDate(DATE);
        vssGet.setLabel(SRC_LABEL);
        vssGet.setVsspath(VSS_PROJECT_PATH);
        MSVSS.CurrentModUpdated cmu = new MSVSS.CurrentModUpdated();
        cmu.setValue(TIME_UPDATED);
        vssGet.setFileTimeStamp(cmu);
        MSVSS.WritableFiles wf = new MSVSS.WritableFiles();
        wf.setValue(WRITABLE_SKIP);
        vssGet.setWritableFiles(wf);

        commandline = vssGet.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testGetExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vssget.1"", ""some cause"", ""vsspath attribute must be set!"");
    }

    
    public void testLabelCommandLine1() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_LABEL, DS_VSS_PROJECT_PATH,
                MSVSS.FLAG_COMMENT + SRC_COMMENT, MSVSS.FLAG_AUTORESPONSE_YES,
                MSVSS.FLAG_LABEL + SRC_LABEL, MSVSS.FLAG_VERSION + VERSION, MSVSS.FLAG_LOGIN
                 + VSS_USERNAME + "","" + VSS_PASSWORD};

        
        MSVSSLABEL vssLabel = new MSVSSLABEL();
        vssLabel.setProject(project);
        vssLabel.setComment(SRC_COMMENT);
        vssLabel.setLogin(VSS_USERNAME + "","" + VSS_PASSWORD);
        vssLabel.setVersion(VERSION);
        vssLabel.setAutoresponse(""Y"");
        vssLabel.setLabel(SRC_LABEL);
        vssLabel.setVsspath(VSS_PROJECT_PATH);

        commandline = vssLabel.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testLabelCommandLine2() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_LABEL, DS_VSS_PROJECT_PATH,
                MSVSS.FLAG_COMMENT + SRC_COMMENT, MSVSS.FLAG_AUTORESPONSE_DEF,
                MSVSS.FLAG_LABEL + LONG_LABEL,
                MSVSS.FLAG_LOGIN + VSS_USERNAME + "","" + VSS_PASSWORD};

        
        MSVSSLABEL vssLabel = new MSVSSLABEL();
        vssLabel.setProject(project);
        vssLabel.setComment(SRC_COMMENT);
        vssLabel.setLogin(VSS_USERNAME + "","" + VSS_PASSWORD);
        vssLabel.setLabel(LONG_LABEL + ""blahblah"");
        vssLabel.setVsspath(VSS_PROJECT_PATH);

        commandline = vssLabel.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testLabelExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vsslabel.1"", ""some cause"", ""vsspath attribute must be set!"");
        expectSpecificBuildException(""vsslabel.2"", ""some cause"", ""label attribute must be set!"");
    }

    
    public void testHistoryCommandLine1() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_HISTORY, DS_VSS_PROJECT_PATH,
                MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_VERSION_LABEL + LONG_LABEL
                 + MSVSS.VALUE_FROMLABEL + SRC_LABEL, MSVSS.FLAG_LOGIN + VSS_USERNAME
                 + "","" + VSS_PASSWORD, MSVSS.FLAG_OUTPUT + project.getBaseDir().getAbsolutePath()
                 + File.separator + OUTPUT};

        
        MSVSSHISTORY vssHistory = new MSVSSHISTORY();
        vssHistory.setProject(project);

        vssHistory.setLogin(VSS_USERNAME + "","" + VSS_PASSWORD);

        vssHistory.setFromLabel(SRC_LABEL);
        vssHistory.setToLabel(LONG_LABEL + ""blahblah"");
        vssHistory.setVsspath(VSS_PROJECT_PATH);
        vssHistory.setRecursive(false);
        vssHistory.setOutput(new File(project.getBaseDir().getAbsolutePath(), OUTPUT));

        commandline = vssHistory.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testHistoryCommandLine2() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_HISTORY, DS_VSS_PROJECT_PATH,
                MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_VERSION_DATE + DATE + MSVSS.VALUE_FROMDATE
                + DATE2, MSVSS.FLAG_RECURSION,  MSVSS.FLAG_LOGIN + VSS_USERNAME + "","" + VSS_PASSWORD};

        
        MSVSSHISTORY vssHistory = new MSVSSHISTORY();
        vssHistory.setProject(project);
        vssHistory.setLogin(VSS_USERNAME + "","" + VSS_PASSWORD);
        vssHistory.setFromDate(DATE2);
        vssHistory.setToDate(DATE);
        vssHistory.setVsspath(VSS_PROJECT_PATH);
        vssHistory.setRecursive(true);

        commandline = vssHistory.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testHistoryCommandLine3() {
        
        Tstamp tstamp = new Tstamp();
        Location location = new Location(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        tstamp.setLocation(location);
        tstamp.setProject(project);
        Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""today"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");
        Date date = Calendar.getInstance().getTime();
        format.execute(project, date, location);
        String today = project.getProperty(""today"");

        
        SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss z"");
        sdf.setTimeZone( TimeZone.getTimeZone(""GMT"") );
        String expected = sdf.format(date);

        
        MSVSSHISTORY vssHistory = new MSVSSHISTORY();
        vssHistory.setProject(project);
        vssHistory.setLogin(VSS_USERNAME);
        vssHistory.setToDate(today);
        vssHistory.setVsspath(VSS_PROJECT_PATH);

        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_HISTORY, DS_VSS_PROJECT_PATH,
        MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_VERSION_DATE + expected, MSVSS.FLAG_LOGIN + VSS_USERNAME};

        commandline = vssHistory.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testHistoryExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vsshistory.1"", ""some cause"", ""vsspath attribute must be set!"");
    }

    
    public void testCheckinCommandLine() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_CHECKIN, DS_VSS_PROJECT_PATH,
                MSVSS.FLAG_AUTORESPONSE_NO, MSVSS.FLAG_WRITABLE, MSVSS.FLAG_LOGIN + VSS_USERNAME,
                MSVSS.FLAG_COMMENT + SRC_COMMENT};

        
        MSVSSCHECKIN vssCheckin = new MSVSSCHECKIN();
        vssCheckin.setProject(project);
        vssCheckin.setComment(SRC_COMMENT);
        vssCheckin.setLogin(VSS_USERNAME);
        vssCheckin.setAutoresponse(""N"");
        vssCheckin.setVsspath(VSS_PROJECT_PATH);
        vssCheckin.setWritable(true);

        commandline = vssCheckin.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCheckinExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vsscheckin.1"", ""some cause"", ""vsspath attribute must be set!"");
    }

    
    public void testCheckoutCommandLine() {
        String[] sTestCmdLine = {SS_DIR + File.separator + MSVSS.SS_EXE, MSVSS.COMMAND_CHECKOUT,
                DS_VSS_PROJECT_PATH, MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_RECURSION,
                MSVSS.FLAG_VERSION_DATE + DATE, MSVSS.FLAG_LOGIN + VSS_USERNAME,
                FLAG_FILETIME_MODIFIED, FLAG_NO_GET};

        
        MSVSSCHECKOUT vssCheckout = new MSVSSCHECKOUT();
        vssCheckout.setProject(project);
        vssCheckout.setLogin(VSS_USERNAME);
        vssCheckout.setVsspath(DS_VSS_PROJECT_PATH);
        vssCheckout.setRecursive(true);
        vssCheckout.setDate(DATE);
        vssCheckout.setLabel(SRC_LABEL);
        vssCheckout.setSsdir(SS_DIR);
        MSVSS.CurrentModUpdated cmu = new MSVSS.CurrentModUpdated();
        cmu.setValue(TIME_MODIFIED);
        vssCheckout.setFileTimeStamp(cmu);
        vssCheckout.setGetLocalCopy(false);

        commandline = vssCheckout.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCheckoutExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vsscheckout.1"", ""some cause"", ""vsspath attribute must be set!"");
        expectSpecificBuildException(""vsscheckout.2"", ""some cause"", ""blah is not a legal value for this attribute"");
    }

    
    public void testAddCommandLine() {
        String[] sTestCmdLine = {SS_DIR + File.separator + MSVSS.SS_EXE, MSVSS.COMMAND_ADD,
                project.getBaseDir().getAbsolutePath() + File.separator + LOCAL_PATH,
                MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_RECURSION,
                MSVSS.FLAG_LOGIN + VSS_USERNAME + "","" + VSS_PASSWORD, MSVSS.FLAG_COMMENT + ""-""};

        
        MSVSSADD vssAdd = new MSVSSADD();
        vssAdd.setProject(project);
        vssAdd.setLogin(VSS_USERNAME + "","" + VSS_PASSWORD);
        vssAdd.setVsspath(DS_VSS_PROJECT_PATH);
        vssAdd.setRecursive(true);
        vssAdd.setSsdir(SS_DIR);
        vssAdd.setWritable(false);
        vssAdd.setLocalpath(new Path(project, LOCAL_PATH));

        commandline = vssAdd.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testAddExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vssadd.1"", ""some cause"", ""localPath attribute must be set!"");
    }

    
    public void testCpCommandLine() {
        String[] sTestCmdLine = {MSVSS.SS_EXE, MSVSS.COMMAND_CP,
                DS_VSS_PROJECT_PATH, MSVSS.FLAG_AUTORESPONSE_DEF, MSVSS.FLAG_LOGIN +
                VSS_USERNAME};

        
        MSVSSCP vssCp = new MSVSSCP();
        vssCp.setProject(project);
        vssCp.setLogin(VSS_USERNAME);
        vssCp.setVsspath(DS_VSS_PROJECT_PATH);

        commandline = vssCp.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCpExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vsscp.1"", ""some cause"", ""vsspath attribute must be set!"");
    }

    
    public void testCreateCommandLine() {
        String[] sTestCmdLine = { MSVSS.SS_EXE, MSVSS.COMMAND_CREATE,
                DS_VSS_PROJECT_PATH, MSVSS.FLAG_COMMENT + SRC_COMMENT, MSVSS.FLAG_AUTORESPONSE_NO,
                MSVSS.FLAG_QUIET, MSVSS.FLAG_LOGIN + VSS_USERNAME};

        
        MSVSSCREATE vssCreate = new MSVSSCREATE();
        vssCreate.setProject(project);
        vssCreate.setComment(SRC_COMMENT);
        vssCreate.setLogin(VSS_USERNAME);
        vssCreate.setVsspath(DS_VSS_PROJECT_PATH);
        vssCreate.setFailOnError(true);
        vssCreate.setAutoresponse(""N"");
        vssCreate.setQuiet(true);

        commandline = vssCreate.buildCmdLine();

        checkCommandLines(sTestCmdLine, commandline.getCommandline());
    }

    
    public void testCreateExceptions() {
        configureProject(""src/etc/testcases/taskdefs/optional/vss/vss.xml"");
        expectSpecificBuildException(""vsscreate.1"", ""some cause"", ""vsspath attribute must be set!"");
    }

    
    private void checkCommandLines(String[] sTestCmdLine, String[] sGeneratedCmdLine) {
        int testLength = sTestCmdLine.length;
        int genLength = sGeneratedCmdLine.length;

        int genIndex = 0;
        int testIndex = 0;

        while (testIndex < testLength) {
            try {
                if (sGeneratedCmdLine[genIndex] == """") {
                    genIndex++;
                    continue;
                }
                assertEquals(""arg # "" + testIndex,
                        sTestCmdLine[testIndex],
                        sGeneratedCmdLine[genIndex]);
                testIndex++;
                genIndex++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""missing arg "" + sTestCmdLine[testIndex]);
            }
        }

        
        int cnt = 0;
        for (int i = 0; i < genLength; i++) {
            if (sGeneratedCmdLine[i] == """") {
                cnt++;
            }
        }
        if (genLength - cnt > sTestCmdLine.length) {
            
            fail(""extra args"");
        }
    }
}
"
L43698,Class,AbstractFileSetTest,org.apache.tools.ant.types.AbstractFileSetTest,L39850,L103,src/testcases/org/apache/tools/ant/types/AbstractFileSetTest.java,73,1,283,2,0.571611,4,21,8,0.57346,0.602041,121,118,1,1,1,23,4,3,5,20,26,0.2,0.0485437,10,7,1,4,0.0485437,10,0,0,3,3,0,196,211,1,2,1,2,6,0,4,1,6,103,0,4,1,196,211,1,2,1,2,6,0,4,1,6,103,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public abstract class AbstractFileSetTest extends TestCase {

    private Project project;

    public AbstractFileSetTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    protected abstract AbstractFileSet getInstance();

    protected final Project getProject() {
        return project;
    }

    public final void testEmptyElementIfIsReference() {
        AbstractFileSet f = getInstance();
        f.setIncludes(""***.java"");
            fail(""Can set includes in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setIncludesfile(new File(""/a""));
            fail(""Can set includesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setExcludes(""**/*.java"");
            fail(""Can set excludes in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setExcludesfile(new File(""/a""));
            fail(""Can set excludesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setDir(project.resolveFile("".""));
            fail(""Can set dir in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.createInclude();
            fail(""Can add nested include in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createExclude();
            fail(""Can add nested exclude in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createIncludesFile();
            fail(""Can add nested includesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createExcludesFile();
            fail(""Can add nested excludesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createPatternSet();
            fail(""Can add nested patternset in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        AbstractFileSet f = getInstance();
        project.addReference(""dummy"", f);
        f.setRefid(new Reference(""dummy""));
        try {
            f.getDir(project);
            fail(""Can make "" + f.getDataTypeName() 
                 + "" a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f.getDirectoryScanner(project);
            fail(""Can make "" + f.getDataTypeName() 
                 + "" a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        AbstractFileSet f1 = getInstance();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        AbstractFileSet f2 = getInstance();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        AbstractFileSet f3 = getInstance();
        project.addReference(""dummy3"", f3);
        f3.setRefid(new Reference(""dummy1""));
        try {
            f1.getDir(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f1.getDirectoryScanner(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        f1 = getInstance();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        f2 = getInstance();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        f3 = getInstance();
        project.addReference(""dummy3"", f3);
        f3.setDir(project.resolveFile("".""));
        File dir = f1.getDir(project);
        assertEquals(""Dir is basedir"", dir, project.getBaseDir());
    }
}
"
L43712,Class,AddTypeTest,org.apache.tools.ant.types.AddTypeTest,L39850,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,63,1,197,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,16,1,0,0,5,21,0.0,0.0,0,0,0,17,0.00884956,1,1,1,0,0,1,54,77,6,8,0,0,16,0,16,1,44,16,0,17,1,112,135,18,26,3,0,26,0,26,2,124,28,0,77,16,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43730,Interface,AddTypeTest$A,org.apache.tools.ant.types.AddTypeTest$A,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,133,5,133,33,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,4,0,0,0,1.0,0.5,1,1,1,0,0.5,1,0,0,3,5,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43736,Interface,AddTypeTest$AB,org.apache.tools.ant.types.AddTypeTest$AB,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,136,5,136,47,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,2,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,2,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43747,Class,AddTypeTest$ABImpl,org.apache.tools.ant.types.AddTypeTest$ABImpl,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,141,5,141,47,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,3,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43739,Class,AddTypeTest$AImpl,org.apache.tools.ant.types.AddTypeTest$AImpl,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,138,5,138,45,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43732,Interface,AddTypeTest$B,org.apache.tools.ant.types.AddTypeTest$B,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,134,5,134,33,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,3,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,2,3,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43741,Class,AddTypeTest$BImpl,org.apache.tools.ant.types.AddTypeTest$BImpl,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,139,5,139,45,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43733,Interface,AddTypeTest$C,org.apache.tools.ant.types.AddTypeTest$C,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,135,5,135,43,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,2,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43743,Class,AddTypeTest$CImpl,org.apache.tools.ant.types.AddTypeTest$CImpl,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,140,5,140,45,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43774,Class,AddTypeTest$MyAddConfigured,org.apache.tools.ant.types.AddTypeTest$MyAddConfigured,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,184,5,195,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,2,0,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,12,12,10,9,1,0,2,0,2,0,37,3,0,27,7,12,12,10,9,1,0,2,0,2,0,37,3,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43759,Class,AddTypeTest$MyCondition,org.apache.tools.ant.types.AddTypeTest$MyCondition,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,157,5,171,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,1,4,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,15,15,1,0,1,0,3,0,3,1,3,4,0,3,1,15,15,1,0,1,0,3,0,3,1,3,4,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43767,Class,AddTypeTest$MyValue,org.apache.tools.ant.types.AddTypeTest$MyValue,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,173,5,182,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,10,10,1,0,1,0,2,0,2,0,2,2,0,2,0,10,10,1,0,1,0,2,0,2,0,2,2,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43751,Class,AddTypeTest$NestedContainer,org.apache.tools.ant.types.AddTypeTest$NestedContainer,L43712,L103,src/testcases/org/apache/tools/ant/types/AddTypeTest.java,143,5,155,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,4,0,0,1,4,0.0,0.0,0,0,0,4,0.0,0,2,2,0,0,1,13,13,9,9,0,0,3,0,3,0,38,3,0,28,7,13,13,9,9,0,0,3,0,3,0,38,3,0,28,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class AddTypeTest extends BuildFileTest {

    public AddTypeTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/addtype.xml"");
    }

    public void testAddPath() {
        executeTarget(""addpath"");
    }

    public void testAddCondition() {
        executeTarget(""addcondition"");
    }

    public void testAddFilter() {
        executeTarget(""addfilter"");
    }

    public void testAddSelector() {
        executeTarget(""addselector"");
    }
    
    public void testNestedA() {
        expectLogContaining(""nested.a"", ""add A called"");
    }

    public void testNestedB() {
        expectLogContaining(""nested.b"", ""add B called"");
    }

    public void testNestedC() {
        expectLogContaining(""nested.c"", ""add C called"");
    }

    public void testNestedAB() {
        expectBuildExceptionContaining(
            ""nested.ab"", ""Should have got ambiguous"", ""ambiguous"");
    }

    public void testConditionType() {
        expectLogContaining(""condition.type"", ""beforeafter"");
    }

    public void testConditionTask() {
        expectLogContaining(""condition.task"", ""My Condition execution"");
    }
    public void testConditionConditionType() {
        expectLogContaining(""condition.condition.type"", ""My Condition eval"");
    }
    public void testConditionConditionTask() {
        expectBuildExceptionContaining(
            ""condition.condition.task"", ""task masking condition"",
            ""doesn't support the nested"");
    }

    public void testAddConfigured() {
        expectLogContaining(
            ""myaddconfigured"", ""value is Value Setexecute: value is Value Set"");
    }

    public void testNamespace() {
        executeTarget(""namespacetest"");
    }
    
    
    
    public static interface A {}
    public static interface B {}
    public static interface C extends A {}
    public static interface AB extends A, B {}

    public static class AImpl implements A{}
    public static class BImpl implements B{}
    public static class CImpl implements C{}
    public static class ABImpl implements AB{}

    public static class NestedContainer
        extends Task
    {
        public void add(A el) {
            log(""add A called"");
        }
        public void add(B el) {
            log(""add B called"");
        }
        public void add(C el) {
            log(""add C called"");
        }
    }
    
    public static class MyCondition
        implements Condition
    {
        Project project;
        public void setProject(Project project) {
            this.project = project;
        }
        public boolean eval() {
            project.log(""My Condition eval"");
            return true;
        }
        public void execute() {
            project.log(""My Condition execution"");
        }
    }

    public static class MyValue
    {
        private String text = ""NOT SET YET"";
        public void addText(String text) {
            this.text = text;
        }
        public String toString() {
            return text;
        }
    }

    public static class MyAddConfigured
        extends Task
    {
        MyValue value;
        public void addConfigured(MyValue value) {
            log(""value is "" + value);
            this.value = value;
        }
        public void execute() {
            log(""execute: value is "" + value);
        }
    }

}
"
L43783,Class,AssertionsTest,org.apache.tools.ant.types.AssertionsTest,L39850,L103,src/testcases/org/apache/tools/ant/types/AssertionsTest.java,61,1,130,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,14,1,0,0,5,19,0.0833333,0.12069,7,7,1,11,0.12069,7,1,1,0,0,1,51,70,6,8,0,0,14,0,11,1,42,14,0,12,1,51,70,6,8,0,0,14,0,11,1,42,14,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildFileTest;


public class AssertionsTest extends BuildFileTest {

    public AssertionsTest(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        configureProject(""src/etc/testcases/types/assertions.xml"");
    }

    protected void tearDown() throws Exception {
        executeTarget(""teardown"");
    }

    
    protected void expectAssertion(String target) {
        expectBuildExceptionContaining(target,
                ""assertion not thrown in ""+target,
                ""Java returned: 1"");
    }

    public void testClassname() {
        expectAssertion(""test-classname"");
    }

    public void testPackage() {
        expectAssertion(""test-package"");
    }

    public void testEmptyAssertions() {
        executeTarget(""test-empty-assertions"");
    }

    public void testDisable() {
        executeTarget(""test-disable"");
    }

    public void testOverride() {
        expectAssertion(""test-override"");
    }

    public void testOverride2() {
        executeTarget(""test-override2"");
    }
    public void testReferences() {
        expectAssertion(""test-references"");
    }

    public void testMultipleAssertions() {
        expectBuildExceptionContaining(""test-multiple-assertions"",
                ""multiple assertions rejected"",
                ""Only one assertion declaration is allowed"");
    }

    public void testReferenceAbuse() {
        expectBuildExceptionContaining(""test-reference-abuse"",
                ""reference abuse rejected"",
                ""You must not specify more than one attribute when using refid"");
    }

    public void testNofork() {
        expectLogContaining(""test-nofork"",
                ""Assertion statements are currently ignored in non-forked mode"");
    }


}


"
L43803,Class,CommandlineJavaTest,org.apache.tools.ant.types.CommandlineJavaTest,L39850,L103,src/testcases/org/apache/tools/ant/types/CommandlineJavaTest.java,69,1,171,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,6,8,0,0,23,28,0.166667,0.142857,14,5,1,5,0.142857,14,0,0,0,0,0,84,103,1,0,1,0,5,0,5,1,5,63,0,5,1,84,103,1,0,1,0,5,0,5,1,5,63,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public class CommandlineJavaTest extends TestCase {

    public CommandlineJavaTest(String name) {
        super(name);
    }

    private Project project;

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
        project.setProperty(""build.sysclasspath"", ""ignore"");
    }

    public void testGetCommandline() {
        CommandlineJava c = new CommandlineJava();
        c.createArgument().setValue(""org.apache.tools.ant.CommandlineJavaTest"");
        c.setClassname(""junit.textui.TestRunner"");
        c.createVmArgument().setValue(""-Djava.compiler=NONE"");
        String[] s = c.getCommandline();
        assertEquals(""no classpath"", 4, s.length);
        
        assertEquals(""no classpath"", ""-Djava.compiler=NONE"", s[1]);
        assertEquals(""no classpath"", ""junit.textui.TestRunner"", s[2]);
        assertEquals(""no classpath"",
                     ""org.apache.tools.ant.CommandlineJavaTest"", s[3]);
        try {
            CommandlineJava c2 = (CommandlineJava) c.clone();
        } catch (NullPointerException ex) {
            fail(""cloning should work without classpath specified"");
        }

        c.createClasspath(project).setLocation(project.resolveFile(""build.xml""));
        c.createClasspath(project).setLocation(project.resolveFile(
            System.getProperty(""ant.home"")+""/lib/ant.jar""));
        s = c.getCommandline();
        assertEquals(""with classpath"", 6, s.length);
        
        assertEquals(""with classpath"", ""-Djava.compiler=NONE"", s[1]);
        assertEquals(""with classpath"", ""-classpath"", s[2]);
        assertTrue(""build.xml contained"",
               s[3].indexOf(""build.xml""+java.io.File.pathSeparator) >= 0);
        assertTrue(""ant.jar contained"", s[3].endsWith(""ant.jar""));
        assertEquals(""with classpath"", ""junit.textui.TestRunner"", s[4]);
        assertEquals(""with classpath"",
                     ""org.apache.tools.ant.CommandlineJavaTest"", s[5]);
    }

    public void testJarOption() throws Exception {
        CommandlineJava c = new CommandlineJava();
        c.createArgument().setValue(""arg1"");
        c.setJar(""myfile.jar"");
        c.createVmArgument().setValue(""-classic"");
        c.createVmArgument().setValue(""-Dx=y"");
        String[] s = c.getCommandline();
        assertEquals(""-classic"", s[1]);
        assertEquals(""-Dx=y"", s[2]);
        assertEquals(""-jar"", s[3]);
        assertEquals(""myfile.jar"", s[4]);
        assertEquals(""arg1"", s[5]);
    }

    public void testSysproperties() {
        String currentClasspath = System.getProperty(""java.class.path"");
        assertNotNull(currentClasspath);
        assertNull(System.getProperty(""key""));
        CommandlineJava c = new CommandlineJava();
        Environment.Variable v = new Environment.Variable();
        v.setKey(""key"");
        v.setValue(""value"");
        c.addSysproperty(v);

        project.setProperty(""key2"", ""value2"");
        PropertySet ps = new PropertySet();
        ps.setProject(project);
        ps.appendName(""key2"");
        c.addSyspropertyset(ps);

        try {
            c.setSystemProperties();
            String newClasspath = System.getProperty(""java.class.path"");
            assertNotNull(newClasspath);
            assertEquals(currentClasspath, newClasspath);
            assertNotNull(System.getProperty(""key""));
            assertEquals(""value"", System.getProperty(""key""));
            assertTrue(System.getProperties().containsKey(""java.class.path""));
            assertNotNull(System.getProperty(""key2""));
            assertEquals(""value2"", System.getProperty(""key2""));
        } finally {
            c.restoreSystemProperties();
        }
        assertNull(System.getProperty(""key""));
        assertNull(System.getProperty(""key2""));
    }

}
"
L43816,Class,CommandlineTest,org.apache.tools.ant.types.CommandlineTest,L39850,L103,src/testcases/org/apache/tools/ant/types/CommandlineTest.java,69,1,183,2,0.317881,2,4,4,0.330435,0.285714,38,26,3,1,1,7,3,0,0,7,11,0.2,0.107843,11,5,1,4,0.107843,11,0,0,0,0,0,91,115,0,0,0,0,4,0,4,0,4,76,0,4,0,91,115,0,0,0,0,4,0,4,0,4,76,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public class CommandlineTest extends TestCase {

    public CommandlineTest(String name) {
        super(name);
    }

    public void testTokenizer() {
        String[] s = Commandline.translateCommandline(""1 2 3"");
        assertEquals(""Simple case"", 3, s.length);
        for (int i=0; i<3; i++) {
            assertEquals(""""+(i+1), s[i]);
        }
        
        s = Commandline.translateCommandline("""");
        assertEquals(""empty string"", 0, s.length);

        s = Commandline.translateCommandline(null);
        assertEquals(""null"", 0, s.length);

        s = Commandline.translateCommandline(""1 \'2\' 3"");
        assertEquals(""Simple case with single quotes"", 3, s.length);
        assertEquals(""Single quotes have been stripped"", ""2"", s[1]);

        s = Commandline.translateCommandline(""1 \""2\"" 3"");
        assertEquals(""Simple case with double quotes"", 3, s.length);
        assertEquals(""Double quotes have been stripped"", ""2"", s[1]);

        s = Commandline.translateCommandline(""1 \""2 3\"" 4"");
        assertEquals(""Case with double quotes and whitespace"", 3, s.length);
        assertEquals(""Double quotes stripped, space included"", ""2 3"", s[1]);
        
        s = Commandline.translateCommandline(""1 \""2\'3\"" 4"");
        assertEquals(""Case with double quotes around single quote"", 3, s.length);
        assertEquals(""Double quotes stripped, single quote included"", ""2\'3"",
                     s[1]);

        s = Commandline.translateCommandline(""1 \'2 3\' 4"");
        assertEquals(""Case with single quotes and whitespace"", 3, s.length);
        assertEquals(""Single quotes stripped, space included"", ""2 3"", s[1]);
        
        s = Commandline.translateCommandline(""1 \'2\""3\' 4"");
        assertEquals(""Case with single quotes around double quote"", 3, s.length);
        assertEquals(""Single quotes stripped, double quote included"", ""2\""3"",
                     s[1]);

        
        
        
        s = Commandline.translateCommandline(""1 2\\ 3 4"");
        assertEquals(""case with quoted whitespace"", 4, s.length);
        assertEquals(""backslash included"", ""2\\"", s[1]);

        
        
        s = Commandline.translateCommandline(""\""\"" a"");
        assertEquals(""Doublequoted null arg prepend"", 2, s.length);
        assertEquals(""Doublequoted null arg prepend"", """", s[0]);
        assertEquals(""Doublequoted null arg prepend"", ""a"", s[1]);
        s = Commandline.translateCommandline(""a \""\"""");
        assertEquals(""Doublequoted null arg append"", 2, s.length);
        assertEquals(""Doublequoted null arg append"", ""a"", s[0]);
        assertEquals(""Doublequoted null arg append"", """", s[1]);
        s = Commandline.translateCommandline(""\""\"""");
        assertEquals(""Doublequoted null arg"", 1, s.length);
        assertEquals(""Doublequoted null arg"", """", s[0]);

        s = Commandline.translateCommandline(""\'\' a"");
        assertEquals(""Singlequoted null arg prepend"", 2, s.length);
        assertEquals(""Singlequoted null arg prepend"", """", s[0]);
        assertEquals(""Singlequoted null arg prepend"", ""a"", s[1]);
        s = Commandline.translateCommandline(""a \'\'"");
        assertEquals(""Singlequoted null arg append"", 2, s.length);
        assertEquals(""Singlequoted null arg append"", ""a"", s[0]);
        assertEquals(""Singlequoted null arg append"", """", s[1]);
        s = Commandline.translateCommandline(""\'\'"");
        assertEquals(""Singlequoted null arg"", 1, s.length);
        assertEquals(""Singlequoted null arg"", """", s[0]);

        
        
        try {
            s = Commandline.translateCommandline(""a \'b c"");
            fail(""unbalanced single quotes undetected"");
        } catch (BuildException be) {
            assertEquals(""unbalanced quotes in a \'b c"", be.getMessage());
        }

        try {
            s = Commandline.translateCommandline(""a \""b c"");
            fail(""unbalanced double quotes undetected"");
        } catch (BuildException be) {
            assertEquals(""unbalanced quotes in a \""b c"", be.getMessage());
        }
    }

    public void testToString() {
        assertEquals("""", Commandline.toString(new String[0]));
        assertEquals("""", Commandline.toString(null));
        assertEquals(""1 2 3"", Commandline.toString(new String[] {""1"", ""2"", ""3""}));
        assertEquals(""1 \""2 3\"""", Commandline.toString(new String[] {""1"", ""2 3""}));
        assertEquals(""1 \""2\'3\"""", Commandline.toString(new String[] {""1"", ""2\'3""}));
        assertEquals(""1 \'2\""3\'"", Commandline.toString(new String[] {""1"", ""2\""3""}));
    }

    public void testAwkCommand(){
        Commandline c = new Commandline();
        c.setExecutable(""awk"");
        c.createArgument().setValue(""'NR == 2 { print $NF }'"");
        String[] s = c.getCommandline();
        assertNotNull(s);
        assertEquals(2, s.length);
        assertEquals(""awk"", s[0]);
        assertEquals(""'NR == 2 { print $NF }'"", s[1]);
    }
}
"
L43823,Class,DescriptionTest,org.apache.tools.ant.types.DescriptionTest,L39850,L103,src/testcases/org/apache/tools/ant/types/DescriptionTest.java,71,1,102,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,2,0,0,3,10,0.125,0.166667,5,5,1,7,0.166667,5,1,1,0,0,1,25,32,6,8,0,0,7,0,7,1,35,9,0,8,1,25,32,6,8,0,0,7,0,7,1,35,9,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.*;


public class DescriptionTest extends BuildFileTest {

    public DescriptionTest(String name) {
        super(name);
    }

    public void setUp() { 
    }

    public void tearDown() {
    }

    public void test1() { 
        configureProject(""src/etc/testcases/types/description1.xml"");
        assertEquals(""Single description failed"", ""Test Project Description"", project.getDescription());
    }

    public void test2() { 
        configureProject(""src/etc/testcases/types/description2.xml"");
        assertEquals(""Multi line description failed"", ""Multi Line\nProject Description"", project.getDescription());
    }
    
    public void test3() { 
        configureProject(""src/etc/testcases/types/description3.xml"");
        assertEquals(""Multi instance description failed"", ""Multi Instance Project Description"", project.getDescription());
    }
    
    public void test4() { 
        configureProject(""src/etc/testcases/types/description4.xml"");
        assertEquals(""Multi instance nested description failed"", ""Multi Instance Nested Project Description"", project.getDescription());
    }
}
"
L43833,Class,DirSetTest,org.apache.tools.ant.types.DirSetTest,L39850,L103,src/testcases/org/apache/tools/ant/types/DirSetTest.java,64,1,100,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,5,8,0,0,9,12,0.333333,0.135135,5,5,1,2,0.135135,5,1,1,0,0,1,32,37,1,2,0,1,3,0,2,0,8,20,0,6,1,32,37,1,2,0,1,3,0,2,0,8,20,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;


public class DirSetTest extends AbstractFileSetTest {

    public DirSetTest(String name) {
        super(name);
    }

    protected AbstractFileSet getInstance() {
        return new DirSet();
    }

    public void testFileSetIsNoDirSet() {
        DirSet ds = (DirSet) getInstance();
        ds.setProject(getProject());
        FileSet fs = new FileSet();
        fs.setProject(getProject());
        getProject().addReference(""dummy"", fs);
        ds.setRefid(new Reference(""dummy""));
        try {
            ds.getDir(getProject());
            fail(""DirSet created from FileSet reference"");
        } catch (BuildException e) {
            assertEquals(""dummy doesn\'t denote a DirSet"", e.getMessage());
        }

        ds = (DirSet) getInstance();
        ds.setProject(getProject());
        getProject().addReference(""dummy2"", ds);
        fs.setRefid(new Reference(""dummy2""));
        try {
            fs.getDir(getProject());
            fail(""FileSet created from DirSet reference"");
        } catch (BuildException e) {
            assertEquals(""dummy2 doesn\'t denote a FileSet"", e.getMessage());
        }
    }

}
"
L43844,Class,EnumeratedAttributeTest,org.apache.tools.ant.types.EnumeratedAttributeTest,L39850,L103,src/testcases/org/apache/tools/ant/types/EnumeratedAttributeTest.java,68,1,124,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,9,4,1,0,2,5,0.25,0.108696,5,5,1,3,0.0892857,5,0,0,0,0,0,41,47,1,0,1,0,3,0,3,0,3,23,0,3,0,51,57,3,6,1,2,5,0,5,0,19,25,0,17,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;



public class EnumeratedAttributeTest extends TestCase {

    private static String[] expected = {""a"", ""b"", ""c""};

    public EnumeratedAttributeTest(String name) {
        super(name);
    }
    
    public void testContains() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            assertTrue(expected[i]+"" is in TestNormal"",
                   t1.containsValue(expected[i]));
            assertTrue(expected[i].toUpperCase()+"" is in TestNormal"",
                   !t1.containsValue(expected[i].toUpperCase()));
        }
        assertTrue(""TestNormal doesn\'t have \""d\"" attribute"",
               !t1.containsValue(""d""));
        assertTrue(""TestNull doesn\'t have \""d\"" attribute and doesn\'t die"",
               !(new TestNull()).containsValue(""d""));
    }

    public void testExceptions() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            try {
                t1.setValue(expected[i]);
            } catch (BuildException be) {
                fail(""unexpected exception for value ""+expected[i]);
            }
        }
        try {
            t1.setValue(""d"");
            fail(""expected exception for value \""d\"""");
        } catch (BuildException be) {
        }
        try {
            (new TestNull()).setValue(""d"");
            fail(""expected exception for value \""d\"" in TestNull"");
        } catch (BuildException be) {
        } catch (Throwable other) {
            fail(""unexpected death of TestNull: ""+other.getMessage());
        }
    }

    public static class TestNormal extends EnumeratedAttribute {
        public String[] getValues() {
            return expected;
        }
    }

    public static class TestNull extends EnumeratedAttribute {
        public String[] getValues() {
            return null;
        }
    }
}
"
L43850,Class,EnumeratedAttributeTest$TestNormal,org.apache.tools.ant.types.EnumeratedAttributeTest$TestNormal,L43844,L103,src/testcases/org/apache/tools/ant/types/EnumeratedAttributeTest.java,113,5,117,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,2,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;



public class EnumeratedAttributeTest extends TestCase {

    private static String[] expected = {""a"", ""b"", ""c""};

    public EnumeratedAttributeTest(String name) {
        super(name);
    }
    
    public void testContains() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            assertTrue(expected[i]+"" is in TestNormal"",
                   t1.containsValue(expected[i]));
            assertTrue(expected[i].toUpperCase()+"" is in TestNormal"",
                   !t1.containsValue(expected[i].toUpperCase()));
        }
        assertTrue(""TestNormal doesn\'t have \""d\"" attribute"",
               !t1.containsValue(""d""));
        assertTrue(""TestNull doesn\'t have \""d\"" attribute and doesn\'t die"",
               !(new TestNull()).containsValue(""d""));
    }

    public void testExceptions() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            try {
                t1.setValue(expected[i]);
            } catch (BuildException be) {
                fail(""unexpected exception for value ""+expected[i]);
            }
        }
        try {
            t1.setValue(""d"");
            fail(""expected exception for value \""d\"""");
        } catch (BuildException be) {
        }
        try {
            (new TestNull()).setValue(""d"");
            fail(""expected exception for value \""d\"" in TestNull"");
        } catch (BuildException be) {
        } catch (Throwable other) {
            fail(""unexpected death of TestNull: ""+other.getMessage());
        }
    }

    public static class TestNormal extends EnumeratedAttribute {
        public String[] getValues() {
            return expected;
        }
    }

    public static class TestNull extends EnumeratedAttribute {
        public String[] getValues() {
            return null;
        }
    }
}
"
L43857,Class,EnumeratedAttributeTest$TestNull,org.apache.tools.ant.types.EnumeratedAttributeTest$TestNull,L43844,L103,src/testcases/org/apache/tools/ant/types/EnumeratedAttributeTest.java,119,5,123,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;



public class EnumeratedAttributeTest extends TestCase {

    private static String[] expected = {""a"", ""b"", ""c""};

    public EnumeratedAttributeTest(String name) {
        super(name);
    }
    
    public void testContains() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            assertTrue(expected[i]+"" is in TestNormal"",
                   t1.containsValue(expected[i]));
            assertTrue(expected[i].toUpperCase()+"" is in TestNormal"",
                   !t1.containsValue(expected[i].toUpperCase()));
        }
        assertTrue(""TestNormal doesn\'t have \""d\"" attribute"",
               !t1.containsValue(""d""));
        assertTrue(""TestNull doesn\'t have \""d\"" attribute and doesn\'t die"",
               !(new TestNull()).containsValue(""d""));
    }

    public void testExceptions() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            try {
                t1.setValue(expected[i]);
            } catch (BuildException be) {
                fail(""unexpected exception for value ""+expected[i]);
            }
        }
        try {
            t1.setValue(""d"");
            fail(""expected exception for value \""d\"""");
        } catch (BuildException be) {
        }
        try {
            (new TestNull()).setValue(""d"");
            fail(""expected exception for value \""d\"" in TestNull"");
        } catch (BuildException be) {
        } catch (Throwable other) {
            fail(""unexpected death of TestNull: ""+other.getMessage());
        }
    }

    public static class TestNormal extends EnumeratedAttribute {
        public String[] getValues() {
            return expected;
        }
    }

    public static class TestNull extends EnumeratedAttribute {
        public String[] getValues() {
            return null;
        }
    }
}
"
L43865,Class,FileListTest,org.apache.tools.ant.types.FileListTest,L39850,L103,src/testcases/org/apache/tools/ant/types/FileListTest.java,74,1,184,2,0.694313,4,20,6,0.63964,0.656566,71,65,1,1,1,12,4,0,0,12,16,0.2,0.1,11,8,1,4,0.1,11,0,0,0,0,0,99,111,1,0,1,0,4,0,4,1,4,64,0,4,1,99,111,1,0,1,0,4,0,4,1,4,64,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class FileListTest extends TestCase {

    private Project project;

    public FileListTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        FileList f = new FileList();
        f.setDir(project.resolveFile("".""));
        try {
            f.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to FileList with directory attribute set."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        f = new FileList();
        f.setFiles(""foo.xml,c/d/bar.xml"");
        try {
            f.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to FileList with file attribute set."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        f = new FileList();
        f.setRefid(new Reference(""dummyref""));
        try {
            f.setFiles(""a/b/foo.java"");
            fail(""Can set files in FileList that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            f.setDir(project.resolveFile("".""));
            fail(""Can set dir in FileList that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        FileList f = new FileList();
        project.addReference(""dummy"", f);
        f.setRefid(new Reference(""dummy""));
        try {
            f.getDir(project);
            fail(""Can make FileList a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f.getFiles(project);
            fail(""Can make FileList a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        FileList f1 = new FileList();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        FileList f2 = new FileList();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        FileList f3 = new FileList();
        project.addReference(""dummy3"", f3);
        f3.setRefid(new Reference(""dummy1""));
        try {
            f1.getDir(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f1.getFiles(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        f1 = new FileList();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        f2 = new FileList();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        f3 = new FileList();
        project.addReference(""dummy3"", f3);
        f3.setDir(project.resolveFile("".""));
        File dir = f1.getDir(project);
        assertEquals(""Dir is basedir"", dir, project.getBaseDir());
    }
}
"
L43878,Class,FileSetTest,org.apache.tools.ant.types.FileSetTest,L39850,L103,src/testcases/org/apache/tools/ant/types/FileSetTest.java,73,1,83,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,0,0,2,4,0.5,0.466667,7,7,1,1,0.466667,7,1,1,0,0,1,8,11,1,2,0,1,2,0,1,0,7,2,0,5,1,8,11,1,2,0,1,2,0,1,0,7,2,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class FileSetTest extends AbstractFileSetTest {

    public FileSetTest(String name) {
        super(name);
    }

    protected AbstractFileSet getInstance() {
        return new FileSet();
    }

}
"
L43883,Class,FilterSetTest,org.apache.tools.ant.types.FilterSetTest,L39850,L103,src/testcases/org/apache/tools/ant/types/FilterSetTest.java,73,1,207,2,0.372007,1,7,1,0.303704,0.339623,41,36,3,4,4,17,3,0,0,11,21,0.3,0.131148,16,15,3,7,0.131148,16,1,1,0,0,1,106,135,7,8,1,0,10,0,9,1,38,73,0,10,1,106,135,7,8,1,0,10,0,9,1,38,73,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.*;
import java.util.Hashtable;


public class FilterSetTest extends BuildFileTest {

    static private final int BUF_SIZE = 32768;
    
    public FilterSetTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/types/filterset.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        executeTarget(""test1"");
        assertTrue(""Filterset 1 failed"", compareFiles(""src/etc/testcases/types/gold/filterset1.txt"",
                                                      ""src/etc/testcases/types/dest1.txt""));
    }

    public void test2() { 
        executeTarget(""test2"");
        assertTrue(""Filterset 2 failed"", compareFiles(""src/etc/testcases/types/gold/filterset2.txt"",
                                                      ""src/etc/testcases/types/dest2.txt""));
    }

    public void test3() { 
        executeTarget(""test3"");
        assertTrue(""Filterset 3 failed"", compareFiles(""src/etc/testcases/types/gold/filterset3.txt"",
                                                      ""src/etc/testcases/types/dest3.txt""));
    }

    
    public void testRecursive() {
        String result = ""it works line"";
        String line=""@test@ line"";
        FilterSet fs = new FilterSet();
        fs.addFilter(""test"", ""@test1@"");
        fs.addFilter(""test1"",""@test2@"");
        fs.addFilter(""test2"", ""it works"");
        fs.setBeginToken(""@"");
        fs.setEndToken(""@"");
        assertEquals(result, fs.replaceTokens(line));
    }

    
    public void testInfinite() {
        String result = ""@test@ line testvalue"";
        String line = ""@test@ line @test3@"";
        FilterSet fs = new FilterSet();
        fs.addFilter(""test"", ""@test1@"");
        fs.addFilter(""test1"",""@test2@"");
        fs.addFilter(""test2"", ""@test@"");
        fs.addFilter(""test3"", ""testvalue"");
        fs.setBeginToken(""@"");
        fs.setEndToken(""@"");
        assertEquals(result, fs.replaceTokens(line));
    }

    public void testNestedFilterSets() {
        executeTarget(""test-nested-filtersets"");

        FilterSet fs = (FilterSet) getProject().getReference(""1"");
        Hashtable filters = fs.getFilterHash();
        assertEquals(1, filters.size());
        assertEquals(""value1"", filters.get(""token1""));

        fs = (FilterSet) getProject().getReference(""2"");
        filters = fs.getFilterHash();
        assertEquals(2, filters.size());
        assertEquals(""1111"", filters.get(""aaaa""));
        assertEquals(""2222"", filters.get(""bbbb""));

        fs = (FilterSet) getProject().getReference(""3"");
        filters = fs.getFilterHash();
        assertEquals(1, filters.size());
        assertEquals(""value4"", filters.get(""token4""));

        fs = (FilterSet) getProject().getReference(""5"");
        filters = fs.getFilterHash();
        assertEquals(1, filters.size());
        assertEquals(""value1"", filters.get(""token1""));
    }

    private boolean compareFiles(String name1, String name2) {
        File file1 = new File(name1);
        File file2 = new File(name2);
        
        try {
            if (!file1.exists() || !file2.exists()) {
                System.out.println(""One or both files do not exist:"" + name1 + "", "" + name2);
                return false;
            }
            
            if (file1.length() != file2.length()) {
                System.out.println(""File size mismatch:"" + name1 + ""("" + file1.length() + ""), "" + 
                                   name2  + ""("" + file2.length() + "")"");
                return false;
            }
            
            
            byte[] buffer1 = new byte[BUF_SIZE];
            byte[] buffer2 = new byte[BUF_SIZE];
            
            FileInputStream fis1 = new FileInputStream(file1);
            FileInputStream fis2 = new FileInputStream(file2);
            int index = 0;
            int read = 0;
            while ((read = fis1.read(buffer1)) != -1) {
                fis2.read(buffer2);
                for (int i = 0; i < read; ++i, ++index) {
                    if (buffer1[i] != buffer2[i]) {
                        System.out.println(""Bytes mismatch:"" + name1 + "", "" + name2 + 
                                           "" at byte "" + index);
                        return false;
                    }
                }
            }
            return true;
        }
        catch (IOException e) {
            System.out.println(""IOException comparing files: "" + name1 + "", "" + name2);
            return false;
        }
    }
}
"
L43905,Class,FlexIntegerTest,org.apache.tools.ant.types.FlexIntegerTest,L39850,L103,src/testcases/org/apache/tools/ant/types/FlexIntegerTest.java,61,1,109,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,10,4,0,0,7,15,0.111111,0.128205,5,5,1,8,0.128205,5,1,1,0,0,1,34,49,9,8,3,0,8,0,8,4,36,12,0,9,4,34,49,9,8,3,0,8,0,8,4,36,12,0,9,4,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;

public class FlexIntegerTest extends BuildFileTest {

    public FlexIntegerTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/flexinteger.xml"");
    }

    public void testFlexInteger() {
        executeTarget(""test"");
        assertEquals(project.getProperty(""flexint.value1""), ""10"");
        assertEquals(project.getProperty(""flexint.value2""), ""8"");
    }

    
    
    private Project taskProject;
    String propName;
    private FlexInteger value;

    
    public FlexIntegerTest() {
        super(""FlexIntegerTest"");
    }

    public void setPropName(String propName) {
        this.propName = propName;
    }

    public void setValue(FlexInteger value) {
        this.value = value;
    }

    public void setProject(Project project) {
        taskProject = project;
    }

    public void execute() {
        if (propName == null || value == null) {
            throw new BuildException(""name and value required"");
        }

        taskProject.setNewProperty(propName, value.toString());
    }
}
"
L43930,Class,MapperTest,org.apache.tools.ant.types.MapperTest,L39850,L103,src/testcases/org/apache/tools/ant/types/MapperTest.java,73,1,206,2,0.31134,4,10,5,0.291045,0.282051,39,33,2,1,1,11,9,0,0,17,22,0.166667,0.0720721,8,5,1,5,0.064,8,0,0,0,0,0,103,117,1,0,1,0,5,0,5,1,5,70,0,5,1,117,134,7,8,1,0,9,0,8,2,37,74,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class MapperTest extends TestCase {

    private Project project;

    public MapperTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        Mapper m = new Mapper(project);
        m.setFrom(""*.java"");
        try {
            m.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Mapper with from attribute set"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setFrom(""*.java"");
            fail(""Can set from in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setTo(""*.java"");
            fail(""Can set to in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            Mapper.MapperType mt = new Mapper.MapperType();
            mt.setValue(""glob"");
            m.setType(mt);
            fail(""Can set type in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        Mapper m = new Mapper(project);
        project.addReference(""dummy"", m);
        m.setRefid(new Reference(""dummy""));
        try {
            m.getImplementation();
            fail(""Can make Mapper a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        Mapper m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        Mapper m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        Mapper m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        m3.setRefid(new Reference(""dummy1""));
        try {
            m1.getImplementation();
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        Mapper.MapperType mt = new Mapper.MapperType();
        mt.setValue(""glob"");
        m3.setType(mt);
        m3.setFrom(""*.java"");
        m3.setTo(""*.class"");
        FileNameMapper fmm = m1.getImplementation();
        assertTrue(""should be glob"", fmm instanceof GlobPatternMapper);
        String[] result = fmm.mapFileName(""a.java"");
        assertEquals(""a.java should match"", 1, result.length);
        assertEquals(""a.class"", result[0]);
    }

    public void testCopyTaskWithTwoFilesets() {
        TaskdefForCopyTest t = new TaskdefForCopyTest(""test1"");
        try {
            t.setUp();
            t.test1();
        } finally {
            t.tearDown();
        }
    }

    private class TaskdefForCopyTest extends BuildFileTest {
        TaskdefForCopyTest(String name) {
            super(name);
        }

        public void setUp() { 
            configureProject(""src/etc/testcases/types/mapper.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void test1() { 
            executeTarget(""test1"");
        }
    }
}
"
L43941,Class,MapperTest$TaskdefForCopyTest,org.apache.tools.ant.types.MapperTest$TaskdefForCopyTest,L43930,L103,src/testcases/org/apache/tools/ant/types/MapperTest.java,189,5,205,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,1,1,3,7,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,14,17,6,8,0,0,4,0,3,1,32,4,0,4,1,14,17,6,8,0,0,4,0,3,1,32,4,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class MapperTest extends TestCase {

    private Project project;

    public MapperTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        Mapper m = new Mapper(project);
        m.setFrom(""*.java"");
        try {
            m.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Mapper with from attribute set"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setFrom(""*.java"");
            fail(""Can set from in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setTo(""*.java"");
            fail(""Can set to in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            Mapper.MapperType mt = new Mapper.MapperType();
            mt.setValue(""glob"");
            m.setType(mt);
            fail(""Can set type in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        Mapper m = new Mapper(project);
        project.addReference(""dummy"", m);
        m.setRefid(new Reference(""dummy""));
        try {
            m.getImplementation();
            fail(""Can make Mapper a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        Mapper m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        Mapper m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        Mapper m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        m3.setRefid(new Reference(""dummy1""));
        try {
            m1.getImplementation();
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        Mapper.MapperType mt = new Mapper.MapperType();
        mt.setValue(""glob"");
        m3.setType(mt);
        m3.setFrom(""*.java"");
        m3.setTo(""*.class"");
        FileNameMapper fmm = m1.getImplementation();
        assertTrue(""should be glob"", fmm instanceof GlobPatternMapper);
        String[] result = fmm.mapFileName(""a.java"");
        assertEquals(""a.java should match"", 1, result.length);
        assertEquals(""a.class"", result[0]);
    }

    public void testCopyTaskWithTwoFilesets() {
        TaskdefForCopyTest t = new TaskdefForCopyTest(""test1"");
        try {
            t.setUp();
            t.test1();
        } finally {
            t.tearDown();
        }
    }

    private class TaskdefForCopyTest extends BuildFileTest {
        TaskdefForCopyTest(String name) {
            super(name);
        }

        public void setUp() { 
            configureProject(""src/etc/testcases/types/mapper.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void test1() { 
            executeTarget(""test1"");
        }
    }
}
"
L43953,Class,PathTest,org.apache.tools.ant.types.PathTest,L39850,L103,src/testcases/org/apache/tools/ant/types/PathTest.java,74,1,585,2,0.552256,10,41,16,0.517578,0.535484,265,249,1,2,1,57,10,0,0,26,42,0.117647,0.033264,16,7,2,15,0.033264,16,0,0,0,0,0,465,512,3,0,3,0,16,2,16,1,16,329,2,16,1,465,512,3,0,3,0,16,2,16,1,16,329,2,16,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.condition.Os;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;
import java.util.Locale;



public class PathTest extends TestCase {

    public static boolean isUnixStyle = File.pathSeparatorChar == ':';
    public static boolean isNetWare = Os.isFamily(""netware"");

    private Project project;

    public PathTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    
    public void testConstructorUnixStyle() {
        Path p = new Path(project, ""/a:/b"");
        String[] l = p.list();
        assertEquals(""two items, Unix style"", 2, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
            assertEquals(""/b"", l[1]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
            assertEquals(""\\b"", l[1]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
            assertEquals("":\\b"", l[1].substring(1));
        }        
    }

    public void testRelativePathUnixStyle() {
        project.setBasedir(""src/etc"");
        Path p = new Path(project, ""..:testcases"");
        String[] l = p.list(); 
        assertEquals(""two items, Unix style"", 2, l.length);
        if (isUnixStyle) {
           assertTrue(""test resolved relative to src/etc"", 
                 l[0].endsWith(""/src""));
           assertTrue(""test resolved relative to src/etc"", 
                 l[1].endsWith(""/src/etc/testcases""));
        } else if (isNetWare) {
           assertTrue(""test resolved relative to src/etc"", 
                 l[0].endsWith(""\\src""));
           assertTrue(""test resolved relative to src/etc"", 
                 l[1].endsWith(""\\src\\etc\\testcases""));
        } else {
           assertTrue(""test resolved relative to src/etc"", 
                 l[0].endsWith(""\\src""));
           assertTrue(""test resolved relative to src/etc"", 
                 l[1].endsWith(""\\src\\etc\\testcases""));
        }
    }

    public void testConstructorWindowsStyle() {
        Path p = new Path(project, ""\\a;\\b"");
        String[] l = p.list();
        assertEquals(""two items, DOS style"", 2, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
            assertEquals(""/b"", l[1]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
            assertEquals(""\\b"", l[1]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
            assertEquals("":\\b"", l[1].substring(1));
        }        

        p = new Path(project, ""c:\\test"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        }

        p = new Path(project, ""c:\\test;d:\\programs"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
            assertTrue(""d resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/d""));
            assertEquals(""/programs"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        }

        p = new Path(project, ""c:/test"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        }

        p = new Path(project, ""c:/test;d:/programs"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
            assertTrue(""d resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/d""));
            assertEquals(""/programs"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        }
    }

    public void testConstructorNetWareStyle() {
        
        Path p = new Path(project, ""sys:\\test"");
        String[] l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""volumes on NetWare"", 1, l.length);
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
        }

        
        p = new Path(project, ""sys:\\test;dev:\\temp"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/dev""));
            assertEquals(""/temp"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""dev:\\temp"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""\\dev""));
            assertTrue(""temp resolved relative to project\'s basedir"", 
                   l[3].endsWith(""\\temp""));
        }

        
        p = new Path(project, ""sys:/test"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 1, l.length);
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
        }

        
        p = new Path(project, ""sys:/test;dev:/temp"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/dev""));
            assertEquals(""/temp"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""dev:\\temp"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""\\dev""));
            assertTrue(""temp resolved relative to project\'s basedir"", 
                   l[3].endsWith(""\\temp""));
         }

        
        
        
        p = new Path(project, 
                     ""SYS:\\JAVA/lib/rt.jar:SYS:\\JAVA/lib/classes.zip"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 3, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/SYS""));
            assertEquals(""/JAVA/lib/rt.jar"", l[1]);
            assertEquals(""/JAVA/lib/classes.zip"", l[2]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""sys:\\java\\lib\\rt.jar"", l[0].toLowerCase(Locale.US));
            assertEquals(""sys:\\java\\lib\\classes.zip"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 3, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\SYS""));
            assertTrue(""java/lib/rt.jar resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\JAVA\\lib\\rt.jar""));
            assertTrue(""java/lib/classes.zip resolved relative to project\'s basedir"", 
                   l[2].endsWith(""\\JAVA\\lib\\classes.zip""));
        }
    }

    public void testConstructorMixedStyle() {
        Path p = new Path(project, ""\\a;\\b:/c"");
        String[] l = p.list();
        assertEquals(""three items, mixed style"", 3, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
            assertEquals(""/b"", l[1]);
            assertEquals(""/c"", l[2]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
            assertEquals(""\\b"", l[1]);
            assertEquals(""\\c"", l[2]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
            assertEquals("":\\b"", l[1].substring(1));
            assertEquals("":\\c"", l[2].substring(1));
        }        
    }

    public void testSetLocation() {
        Path p = new Path(project);
        p.setLocation(new File(File.separatorChar+""a""));
        String[] l = p.list();
        if (isUnixStyle) {
            assertEquals(1, l.length);
            assertEquals(""/a"", l[0]);
        } else if (isNetWare) {
            assertEquals(1, l.length);
            assertEquals(""\\a"", l[0]);
        } else {
            assertEquals(1, l.length);
            assertEquals("":\\a"", l[0].substring(1));
        }
    }

    public void testAppending() {
        Path p = new Path(project, ""/a:/b"");
        String[] l = p.list();
        assertEquals(""2 after construction"", 2, l.length);
        p.setLocation(new File(""/c""));
        l = p.list();
        assertEquals(""3 after setLocation"", 3, l.length);
        p.setPath(""\\d;\\e"");
        l = p.list();
        assertEquals(""5 after setPath"", 5, l.length);
        p.append(new Path(project, ""\\f""));
        l = p.list();
        assertEquals(""6 after append"", 6, l.length);
        p.createPath().setLocation(new File(""/g""));
        l = p.list();
        assertEquals(""7 after append"", 7, l.length);
    }

    public void testEmpyPath() {
        Path p = new Path(project, """");
        String[] l = p.list();
        assertEquals(""0 after construction"", 0, l.length);
        p.setPath("""");
        l = p.list();
        assertEquals(""0 after setPath"", 0, l.length);
        p.append(new Path(project));
        l = p.list();
        assertEquals(""0 after append"", 0, l.length);
        p.createPath();
        l = p.list();
        assertEquals(""0 after append"", 0, l.length);
    }

    public void testUnique() {
        Path p = new Path(project, ""/a:/a"");
        String[] l = p.list();
        assertEquals(""1 after construction"", 1, l.length);
        p.setLocation(new File(File.separatorChar+""a""));
        l = p.list();
        assertEquals(""1 after setLocation"", 1, l.length);
        p.setPath(""\\a;/a"");
        l = p.list();
        assertEquals(""1 after setPath"", 1, l.length);
        p.append(new Path(project, ""/a;\\a:\\a""));
        l = p.list();
        assertEquals(""1 after append"", 1, l.length);
        p.createPath().setPath(""\\a:/a"");
        l = p.list();
        assertEquals(""1 after append"", 1, l.length);
    }

    public void testEmptyElementIfIsReference() {
        Path p = new Path(project, ""/a:/a"");
        try {
            p.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Path with elements from constructor"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        p = new Path(project);
        p.setLocation(new File(""/a""));
        try {
            p.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Path with elements from setLocation"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        p = new Path(project);
        p.setRefid(new Reference(""dummyref""));
        try {
            p.setLocation(new File(""/a""));
            fail(""Can set location in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        try {
            p.setPath(""/a;\\a"");
            fail(""Can set path in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        try {
            p.createPath();
            fail(""Can create nested Path in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.createPathElement();
            fail(""Can create nested PathElement in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.addFileset(new FileSet());
            fail(""Can add nested FileSet in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.addFilelist(new FileList());
            fail(""Can add nested FileList in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.addDirset(new DirSet());
            fail(""Can add nested Dirset in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        Path p = new Path(project);
        project.addReference(""dummy"", p);
        p.setRefid(new Reference(""dummy""));
        try {
            p.list();
            fail(""Can make Path a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        Path p1 = new Path(project);
        project.addReference(""dummy1"", p1);
        Path p2 = p1.createPath();
        project.addReference(""dummy2"", p2);
        Path p3 = p2.createPath();
        project.addReference(""dummy3"", p3);
        p3.setRefid(new Reference(""dummy1""));
        try {
            p1.list();
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        p1 = new Path(project);
        project.addReference(""dummy1"", p1);
        p2 = p1.createPath();
        project.addReference(""dummy2"", p2);
        p3 = p2.createPath();
        project.addReference(""dummy3"", p3);
        p3.setLocation(new File(""/a""));
        String[] l = p1.list();
        assertEquals(""One element buried deep inside a nested path structure"",
                     1, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
        }
    }

    public void testFileList() {
        Path p = new Path(project);
        FileList f = new FileList();
        f.setProject(project);
        f.setDir(project.resolveFile("".""));
        f.setFiles(""build.xml"");
        p.addFilelist(f);
        String[] l = p.list();
        assertEquals(1, l.length);
        assertEquals(project.resolveFile(""build.xml"").getAbsolutePath(), l[0]);
    }

    public void testFileSet() {
        Path p = new Path(project);
        FileSet f = new FileSet();
        f.setProject(project);
        f.setDir(project.resolveFile("".""));
        f.setIncludes(""build.xml"");
        p.addFileset(f);
        String[] l = p.list();
        assertEquals(1, l.length);
        assertEquals(project.resolveFile(""build.xml"").getAbsolutePath(), l[0]);
    }

    public void testDirSet() {
        Path p = new Path(project);
        DirSet d = new DirSet();
        d.setProject(project);
        d.setDir(project.resolveFile("".""));
        d.setIncludes(""build"");
        p.addDirset(d);
        String[] l = p.list();
        assertEquals(1, l.length);
        assertEquals(project.resolveFile(""build"").getAbsolutePath(), l[0]);
    }

}
"
L43979,Class,PatternSetTest,org.apache.tools.ant.types.PatternSetTest,L39850,L103,src/testcases/org/apache/tools/ant/types/PatternSetTest.java,73,1,241,2,0.703175,6,29,9,0.674556,0.710526,114,108,2,1,1,18,5,0,0,18,23,0.166667,0.0617284,10,7,1,5,0.0617284,10,0,0,0,0,0,152,169,1,0,1,0,5,0,5,1,5,98,0,5,1,152,169,1,0,1,0,5,0,5,1,5,98,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class PatternSetTest extends TestCase {

    private Project project;

    public PatternSetTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        PatternSet p = new PatternSet();
        p.setIncludes(""***.java"");
            fail(""Can set includes in PatternSet that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        p = new PatternSet();
        p.setRefid(new Reference(""dummyref""));
        try {
            p.setIncludesfile(new File(""/a""));
            fail(""Can set includesfile in PatternSet that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            p.setExcludes(""***.java"");

        PatternSet nested = new PatternSet();
        nested.setExcludes(""***.java"", includes[0]);
        assertEquals(""Excludes"",""**/*.class"", excludes[0]);
    }
}
"
L43990,Class,PermissionsTest,org.apache.tools.ant.types.PermissionsTest,L39850,L103,src/testcases/org/apache/tools/ant/types/PermissionsTest.java,66,1,193,2,0.277778,1,2,2,0.171875,0.18,22,18,2,2,2,14,3,0,0,9,18,0.7,0.152542,18,11,7,3,0.152542,18,0,0,0,0,0,100,128,1,0,1,0,9,0,9,1,9,62,0,9,1,100,128,1,0,1,0,9,0,9,1,9,62,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import junit.framework.TestCase;

import org.apache.tools.ant.ExitException;


public class PermissionsTest extends TestCase {
    
    Permissions perms;

    public PermissionsTest(String name) {
        super(name);
    }
    
    public void setUp() {
        perms = new Permissions();
        Permissions.Permission perm = new Permissions.Permission();
        
        
        perm.setActions(""read, write"");
        perm.setName(""user.*"");
        perm.setClass(""java.util.PropertyPermission"");
        perms.addConfiguredGrant(perm);
        
        perm = new Permissions.Permission();
        perm.setActions(""read"");
        perm.setName(""java.home"");
        perm.setClass(""java.util.PropertyPermission"");
        perms.addConfiguredGrant(perm);

        perm = new Permissions.Permission();
        perm.setActions(""read"");
        perm.setName(""file.encoding"");
        perm.setClass(""java.util.PropertyPermission"");
        perms.addConfiguredGrant(perm);

        
        
        perm = new Permissions.Permission();
        perm.setActions(""write"");
        perm.setName(""user.home"");
        perm.setClass(""java.util.PropertyPermission"");
        perms.addConfiguredRevoke(perm);        
        
        perm = new Permissions.Permission();
        perm.setActions(""read"");
        perm.setName(""os.*"");
        perm.setClass(""java.util.PropertyPermission"");
        perms.addConfiguredRevoke(perm);        
    }
    
    
    public void testDefaultGranted() {
        perms.setSecurityManager();
        try {
            String s = System.getProperty(""line.separator"");      
        } finally {
            perms.restoreSecurityManager();
        }
    }

    
    public void testGranted() {
        perms.setSecurityManager();
        try {
            String s = System.getProperty(""user.name"");
            System.setProperty(""user.name"", s);      
        } finally {
            perms.restoreSecurityManager();
        }
    }

    
    public void testGrantedAndRevoked() {
        perms.setSecurityManager();
        try {
            String s = System.getProperty(""user.home"");
            System.setProperty(""user.home"", s);
            fail(""Could perform an action that should have been forbidden."");      
        } catch (SecurityException e){
            
        } finally {
            perms.restoreSecurityManager();
        }
    }

    
    public void testDefaultRevoked() {
        perms.setSecurityManager();
        try {
            System.getProperty(""os.name"");
            fail(""Could perform an action that should have been forbidden."");      
        } catch (SecurityException e){
            
        } finally {
            perms.restoreSecurityManager();
        }
    }
    
    public void testOther() {
        String ls = System.getProperty(""line.separator"");
        perms.setSecurityManager();
        try {
            String s = System.setProperty(""line.separator"",ls);
            fail(""Could perform an action that should have been forbidden."");    
        } catch (SecurityException e){
            
        } finally {
            perms.restoreSecurityManager();
        }
    }
    
    
    public void testExit() {
        perms.setSecurityManager();
        try {
            System.out.println(""If this is the last line on standard out the testExit f.a.i.l.e.d"");
            System.exit(3);
            fail(""Totaly impossible that this fail is ever executed. Please let me know if it is!"");
        } catch (ExitException e) {
            if (e.getStatus() != 3) {
                fail(""Received wrong exit status in Exit Exception."");
            }
            System.out.println(""testExit successfull."");
        } finally {
            perms.restoreSecurityManager();
        }   
    }
    
    
    public void tearDown() {
    }

}
"
L44016,Class,PolyTest,org.apache.tools.ant.types.PolyTest,L39850,L103,src/testcases/org/apache/tools/ant/types/PolyTest.java,63,1,105,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,1,0,0,3,9,0.0,0.0,0,0,0,7,0.0,0,1,1,0,0,1,20,29,6,8,0,0,6,0,6,1,34,6,0,7,1,34,43,27,30,0,0,9,0,9,1,192,9,1,126,29,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class PolyTest extends BuildFileTest {

    public PolyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/poly.xml"");
    }

    public void testFileSet() {
        expectLogContaining(""fileset"", ""types.FileSet"");
    }
    
    public void testFileSetAntType() {
        expectLogContaining(""fileset-ant-type"", ""types.PolyTest$MyFileSet"");
    }

    public void testPath() {
        expectLogContaining(""path"", ""types.Path"");
    }
    
    public void testPathAntType() {
        expectLogContaining(""path-ant-type"", ""types.PolyTest$MyPath"");
    }

    public static class MyFileSet extends FileSet {}

    public static class MyPath extends Path {
        public MyPath(Project project) {
            super(project);
        }
    }

    public static class MyTask extends Task {
        public void addPath(Path path) {
            log(""class of path is "" + path.getClass());
        }
        public void addFileset(FileSet fileset) {
            log(""class of fileset is "" + fileset.getClass());
        }
    }
}
"
L44024,Class,PolyTest$MyFileSet,org.apache.tools.ant.types.PolyTest$MyFileSet,L44016,L103,src/testcases/org/apache/tools/ant/types/PolyTest.java,89,5,89,53,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,4,5,0,0,1,1,1,11,9,0,0,0,0,0,0,72,0,0,58,14,1,1,11,9,0,0,0,0,0,0,72,0,0,58,14,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class PolyTest extends BuildFileTest {

    public PolyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/poly.xml"");
    }

    public void testFileSet() {
        expectLogContaining(""fileset"", ""types.FileSet"");
    }
    
    public void testFileSetAntType() {
        expectLogContaining(""fileset-ant-type"", ""types.PolyTest$MyFileSet"");
    }

    public void testPath() {
        expectLogContaining(""path"", ""types.Path"");
    }
    
    public void testPathAntType() {
        expectLogContaining(""path-ant-type"", ""types.PolyTest$MyPath"");
    }

    public static class MyFileSet extends FileSet {}

    public static class MyPath extends Path {
        public MyPath(Project project) {
            super(project);
        }
    }

    public static class MyTask extends Task {
        public void addPath(Path path) {
            log(""class of path is "" + path.getClass());
        }
        public void addFileset(FileSet fileset) {
            log(""class of fileset is "" + fileset.getClass());
        }
    }
}
"
L44026,Class,PolyTest$MyPath,org.apache.tools.ant.types.PolyTest$MyPath,L44016,L103,src/testcases/org/apache/tools/ant/types/PolyTest.java,91,5,95,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,2,0,0,1,2,0.0,0.0,0,0,0,2,0.0,0,3,3,0,0,1,5,5,6,4,0,0,1,0,1,0,49,1,1,34,7,5,5,6,4,0,0,1,0,1,0,49,1,1,34,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class PolyTest extends BuildFileTest {

    public PolyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/poly.xml"");
    }

    public void testFileSet() {
        expectLogContaining(""fileset"", ""types.FileSet"");
    }
    
    public void testFileSetAntType() {
        expectLogContaining(""fileset-ant-type"", ""types.PolyTest$MyFileSet"");
    }

    public void testPath() {
        expectLogContaining(""path"", ""types.Path"");
    }
    
    public void testPathAntType() {
        expectLogContaining(""path-ant-type"", ""types.PolyTest$MyPath"");
    }

    public static class MyFileSet extends FileSet {}

    public static class MyPath extends Path {
        public MyPath(Project project) {
            super(project);
        }
    }

    public static class MyTask extends Task {
        public void addPath(Path path) {
            log(""class of path is "" + path.getClass());
        }
        public void addFileset(FileSet fileset) {
            log(""class of fileset is "" + fileset.getClass());
        }
    }
}
"
L44029,Class,PolyTest$MyTask,org.apache.tools.ant.types.PolyTest$MyTask,L44016,L103,src/testcases/org/apache/tools/ant/types/PolyTest.java,97,5,104,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,3,0,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,8,8,9,9,0,0,2,0,2,0,37,2,0,27,7,8,8,9,9,0,0,2,0,2,0,37,2,0,27,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.condition.Condition;

public class PolyTest extends BuildFileTest {

    public PolyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/poly.xml"");
    }

    public void testFileSet() {
        expectLogContaining(""fileset"", ""types.FileSet"");
    }
    
    public void testFileSetAntType() {
        expectLogContaining(""fileset-ant-type"", ""types.PolyTest$MyFileSet"");
    }

    public void testPath() {
        expectLogContaining(""path"", ""types.Path"");
    }
    
    public void testPathAntType() {
        expectLogContaining(""path-ant-type"", ""types.PolyTest$MyPath"");
    }

    public static class MyFileSet extends FileSet {}

    public static class MyPath extends Path {
        public MyPath(Project project) {
            super(project);
        }
    }

    public static class MyTask extends Task {
        public void addPath(Path path) {
            log(""class of path is "" + path.getClass());
        }
        public void addFileset(FileSet fileset) {
            log(""class of fileset is "" + fileset.getClass());
        }
    }
}
"
L44035,Class,XMLCatalogBuildFileTest,org.apache.tools.ant.types.XMLCatalogBuildFileTest,L39850,L103,src/testcases/org/apache/tools/ant/types/XMLCatalogBuildFileTest.java,72,1,139,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,1,0,0,3,10,0.625,0.57971,40,40,5,3,0.57971,40,1,1,0,0,1,29,68,6,8,0,0,7,0,7,1,35,9,0,8,1,29,68,6,8,0,0,7,0,7,1,35,9,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class XMLCatalogBuildFileTest extends BuildFileTest {

    public XMLCatalogBuildFileTest(String name) {
        super(name);
    }

    public void setUp() { 
    }

    public void tearDown() {
    }

    
    
    
    
    
    
    
    public void testEntityNoCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testentitynocatalog"", ""val1"", 
                          ""A stitch in time saves nine"");
    }

    
    
    
    
    
    
    
    
    public void testEntityWithCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testentitywithcatalog"", ""val2"", 
                          ""No news is good news"");
    }

    
    
    
    
    
    
    
    
    public void testDocumentNoCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testdocumentnocatalog"", ""val3"", 
                          ""A stitch in time saves nine"");
    }

    
    
    
    
    
    
    
    
    
    public void testDocumentWithCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testdocumentwithcatalog"", ""val4"", 
                          ""No news is good news"");
    }
}
"
L44077,Class,XMLCatalogTest,org.apache.tools.ant.types.XMLCatalogTest,L39850,L103,src/testcases/org/apache/tools/ant/types/XMLCatalogTest.java,81,1,453,2,0.368107,4,18,8,0.327078,0.371134,122,108,1,1,1,35,8,0,0,20,35,0.142857,0.0761905,24,8,2,12,0.0761905,24,0,0,0,0,0,291,373,2,0,2,0,15,0,13,1,15,195,0,13,1,291,373,2,0,2,0,15,0,13,1,15,195,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DefaultLogger;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.JAXPUtils;

import junit.framework.TestCase;

import java.io.File;

import java.net.MalformedURLException;
import java.net.URL;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.transform.Source;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.TransformerException;


public class XMLCatalogTest extends TestCase {

    private Project project;
    private XMLCatalog catalog;

    private XMLCatalog newCatalog() {
        XMLCatalog cat = new XMLCatalog();
        cat.setProject(project);
        return cat;
    }

    private String toURLString(File file) throws MalformedURLException {
        return JAXPUtils.getSystemId(file);
    }

    public XMLCatalogTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");

        
        
        
        
        
        
        
        

        catalog = newCatalog();
    }

   public void tearDown() {
      project = null;
      catalog = null;
   }

   public void testEmptyCatalog() {
       try {
           InputSource result = catalog.resolveEntity(""PUBLIC ID ONE"",
                                                      ""i/dont/exist.dtd"");
           assertNull(""Empty catalog should return null"", result);
       } catch (Exception e) {
           fail(""resolveEntity() failed!"" + e.toString());
       }

       try {
           Source result = catalog.resolve(""i/dont/exist.dtd"", null);
           String expected = toURLString(new File(project.getBaseDir() +
                                                  ""/i/dont/exist.dtd""));
           
           
           
           
           
           String resultStr = new URL(((SAXSource)result).getInputSource().getSystemId()).getFile();
           assertTrue(""Empty catalog should return input"",
                      expected.endsWith(resultStr));
       } catch (Exception e) {
           fail(""resolve() failed!"" + e.toString());
       }
   }

    public void testNonExistentEntry() {

        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(""PUBLIC ID ONE"");
        dtd.setLocation(""i/dont/exist.dtd"");

        try {
            InputSource result = catalog.resolveEntity(""PUBLIC ID ONE"",
                                                       ""i/dont/exist.dtd"");
            assertNull(""Nonexistent Catalog entry should not be returned"", result);
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(""i/dont/exist.dtd"", null);
            String expected = toURLString(new File(project.getBaseDir().toURL() +
                                                   ""/i/dont/exist.dtd""));
            String resultStr = new URL(((SAXSource)result).getInputSource().getSystemId()).getFile();
            assertTrue(""Nonexistent Catalog entry return input"",
                       expected.endsWith(resultStr));
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }

    public void testEmptyElementIfIsReference() {
        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(""PUBLIC ID ONE"");
        dtd.setLocation(""i/dont/exist.dtd"");
        catalog.addDTD(dtd);
        project.addReference(""catalog"", catalog);

        try {
            catalog.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to nonexistent XMLCatalog"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one ""
                         + ""attribute when using refid"", be.getMessage());
        }

        XMLCatalog catalog2 = newCatalog();
        catalog2.setRefid(new Reference(""catalog""));

        try {
            catalog2.addConfiguredXMLCatalog(catalog);
            fail(""Can add nested XMLCatalog to XMLCatalog that is a reference"");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {

        
        project.addReference(""catalog"", catalog);
        catalog.setRefid(new Reference(""catalog""));

        try {
            InputSource result = catalog.resolveEntity(""PUBLIC ID ONE"",
                                                       ""i/dont/exist.dtd"");
            fail(""Can make XMLCatalog a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        
        XMLCatalog catalog1 = newCatalog();
        project.addReference(""catalog1"", catalog1);
        XMLCatalog catalog2 = newCatalog();
        project.addReference(""catalog2"", catalog2);
        XMLCatalog catalog3 = newCatalog();
        project.addReference(""catalog3"", catalog3);

        catalog3.setRefid(new Reference(""catalog1""));
        catalog2.setRefid(new Reference(""catalog3""));
        catalog1.setRefid(new Reference(""catalog2""));

        try {
            InputSource result = catalog1.resolveEntity(""PUBLIC ID ONE"",
                                                        ""i/dont/exist.dtd"");
            fail(""Can make circular reference"");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }
    }
    
    
    
    public void testAbsolutePath() {
        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(""-

        String sysid = System.getProperty(""user.dir"") + File.separator + ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";
        dtd.setLocation(sysid);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(sysid);

        try {
            InputSource result = catalog.resolveEntity(""-
                                                       ""nap:chemical+brothers"");
            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

    }

    public void testSimpleEntry() {

        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(""-
        String sysid = ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";
        dtd.setLocation(sysid);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(sysid);

        try {
            InputSource result = catalog.resolveEntity(""-
                                                       ""nap:chemical+brothers"");
            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }
    }

    public void testEntryReference() {

        String publicId = ""-
        String sysid = ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";

        
        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(publicId);
        dtd.setLocation(sysid);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(sysid);

        String uri = ""http:
        String uriLoc = ""src/etc/testcases/taskdefs/optional/xml/about.xml"";

        ResourceLocation entity = new ResourceLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(uriLoc);

        project.addReference(""catalog"", catalog);

        XMLCatalog catalog1 = newCatalog();
        project.addReference(""catalog1"", catalog1);
        XMLCatalog catalog2 = newCatalog();
        project.addReference(""catalog2"", catalog1);

        catalog1.setRefid(new Reference(""catalog""));
        catalog2.setRefid(new Reference(""catalog1""));

        try {
            InputSource result = catalog2.resolveEntity(publicId,
                                                        ""nap:chemical+brothers"");

            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(uri, null);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }

    public void testNestedCatalog() {

        String publicId = ""-
        String dtdLoc = ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";

        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(publicId);
        dtd.setLocation(dtdLoc);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(dtdLoc);

        String uri = ""http:
        String uriLoc = ""src/etc/testcases/taskdefs/optional/xml/about.xml"";

        ResourceLocation entity = new ResourceLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(uriLoc);

        XMLCatalog catalog1 = newCatalog();
        catalog1.addConfiguredXMLCatalog(catalog);

        try {
            InputSource result = catalog1.resolveEntity(publicId,
                                                        ""nap:chemical+brothers"");
            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(uri, null);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }

    }

    public void testResolverBase() {

        String uri = ""http:
        String uriLoc = ""etc/testcases/taskdefs/optional/xml/about.xml"";
        String base = null;
        try {
            base = toURLString(project.getBaseDir()) + ""/src/"";
        } catch (MalformedURLException ex) {
            fail (ex.toString());
        }

        ResourceLocation entity = new ResourceLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(""src/"" + uriLoc);

        try {
            Source result = catalog.resolve(uri, base);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }

    public void testClasspath() {


        String publicId = ""-
        String dtdLoc = ""testcases/taskdefs/optional/xml/doc.dtd"";
        String path1 = project.getBaseDir().toString() + ""/src/etc"";

        ResourceLocation dtd = new ResourceLocation();
        dtd.setPublicId(publicId);
        dtd.setLocation(dtdLoc);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(""src/etc/"" + dtdLoc);

        String uri = ""http:
        String uriLoc = ""etc/testcases/taskdefs/optional/xml/about.xml"";
        String path2 = project.getBaseDir().toString() + ""/src"";

        ResourceLocation entity = new ResourceLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(""src/"" + uriLoc);

        Path aPath = new Path(project, path1);
        aPath.append(new Path(project, path2));
        catalog.setClasspath(aPath);

        try {
            InputSource result = catalog.resolveEntity(publicId,
                                                       ""nap:chemical+brothers"");
            assertNotNull(result);
            String resultStr = new URL(result.getSystemId()).getFile();
            assertTrue(toURLString(dtdFile).endsWith(resultStr));
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(uri, null);
            assertNotNull(result);
            String resultStr = new URL(result.getSystemId()).getFile();
            assertTrue(toURLString(xmlFile).endsWith(resultStr));
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }
}
"
L44114,Class,ZipFileSetTest,org.apache.tools.ant.types.ZipFileSetTest,L39850,L103,src/testcases/org/apache/tools/ant/types/ZipFileSetTest.java,73,1,156,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,8,6,0,0,17,20,0.333333,0.137931,12,7,1,2,0.137931,12,1,1,0,0,1,75,84,1,2,0,1,3,0,2,0,8,46,0,6,1,75,84,1,2,0,1,3,0,2,0,8,46,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class ZipFileSetTest extends AbstractFileSetTest {

    public ZipFileSetTest(String name) {
        super(name);
    }

    protected AbstractFileSet getInstance() {
        return new ZipFileSet();
    }
    public final void testAttributes() {
        ZipFileSet f = (ZipFileSet)getInstance();
        
        f.setSrc(new File(""example.zip""));
        try {
            f.setDir(new File(""examples""));
            fail(""can add dir to ""
                    + f.getDataTypeName()
                    + "" when a src is already present"");
        } catch (BuildException be) {
            assertEquals(""Cannot set both dir and src attributes"",be.getMessage());
        }
        f = (ZipFileSet)getInstance();
        
        f.setDir(new File(""examples""));
        try {
            f.setSrc(new File(""example.zip""));
            fail(""can add src to ""
                    + f.getDataTypeName()
                    + "" when a dir is already present"");
        } catch (BuildException be) {
            assertEquals(""Cannot set both dir and src attributes"",be.getMessage());
        }
        
        f = (ZipFileSet)getInstance();
        f.setSrc(new File(""example.zip""));
        f.setPrefix(""/examples"");
        try {
            f.setFullpath(""/doc/manual/index.html"");
            fail(""Can add fullpath to ""
                    + f.getDataTypeName()
                    + "" when a prefix is already present"");
        } catch (BuildException be) {
            assertEquals(""Cannot set both fullpath and prefix attributes"", be.getMessage());
        }
        f = (ZipFileSet)getInstance();
        f.setSrc(new File(""example.zip""));
        f.setFullpath(""/doc/manual/index.html"");
        try {
            f.setPrefix(""/examples"");
            fail(""Can add prefix to ""
                    + f.getDataTypeName()
                    + "" when a fullpath is already present"");
        } catch (BuildException be) {
            assertEquals(""Cannot set both fullpath and prefix attributes"", be.getMessage());
        }
        
        f = (ZipFileSet)getInstance();
        f.setRefid(new Reference(""test""));
        try {
            f.setSrc(new File(""example.zip""));
            fail(""Can add src to ""
                    + f.getDataTypeName()
                    + "" when a refid is already present"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one ""
            + ""attribute when using refid"", be.getMessage());
        }
        
        f = (ZipFileSet)getInstance();
        f.setSrc(new File(""example.zip""));
        f.setPrefix(""/examples"");
        f.setFileMode(""600"");
        f.setDirMode(""530"");
        getProject().addReference(""test"",f);
        ZipFileSet zid=(ZipFileSet)getInstance();
        zid.setRefid(new Reference(""test""));
        assertTrue(""src attribute copied by copy constructor"",zid.getSrc(getProject()).equals(f.getSrc(getProject())));
        assertTrue(""prefix attribute copied by copy constructor"",f.getPrefix(getProject()).equals(zid.getPrefix(getProject())));
        assertTrue(""file mode attribute copied by copy constructor"",f.getFileMode(getProject())==zid.getFileMode(getProject()));
        assertTrue(""dir mode attribute copied by copy constructor"",f.getDirMode(getProject())==zid.getDirMode(getProject()));
      }


}
"
L40879,Class,ClassFileSetTest,org.apache.tools.ant.types.optional.depend.ClassFileSetTest,L40769,L103,src/testcases/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java,74,1,213,2,0.762309,4,28,14,0.55,0.6875,77,77,1,1,1,14,5,0,0,7,16,0.7,0.176471,24,23,7,3,0.176471,24,1,1,0,0,1,112,140,7,8,1,0,9,1,9,1,37,75,1,10,1,112,140,7,8,1,0,9,1,9,1,37,75,1,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.optional.depend;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.DirectoryScanner;


public class ClassFileSetTest extends BuildFileTest {
    public static final String RESULT_FILESET = ""result"";
    
    public ClassFileSetTest(String name) {
        super(name);
    }

    public void setUp() {
        
        configureProject(""src/etc/testcases/taskdefs/optional/depend/depend.xml"");
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testBasicSet() {
        Project project = getProject();
        executeTarget(""testbasicset"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of "" 
            + ""class files"", 4, files.size());
        assertTrue(""Result did not contain A.class"", 
            files.containsKey(""A.class""));
        assertTrue(""Result did not contain B.class"", 
            files.containsKey(""B.class""));
        assertTrue(""Result did not contain C.class"", 
            files.containsKey(""C.class""));
        assertTrue(""Result did not contain D.class"", 
            files.containsKey(""D.class""));
    }
    
    
    public void testSmallSet() {
        Project project = getProject();
        executeTarget(""testsmallset"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of "" 
            + ""class files"", 2, files.size());
        assertTrue(""Result did not contain B.class"", 
            files.containsKey(""B.class""));
        assertTrue(""Result did not contain C.class"", 
            files.containsKey(""C.class""));
    }

    
    public void testComboSet() {
        Project project = getProject();
        executeTarget(""testcomboset"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of "" 
            + ""class files"", 1, files.size());
        assertTrue(""Result did not contain C.class"", 
            files.containsKey(""C.class""));
    }
    
    
    public void testByReference() {
        executeTarget(""testbyreference"");
    }
    
    
    public void testMethodParam() {
        Project project = getProject();
        executeTarget(""testmethodparam"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of ""
            + ""class files"", 5, files.size());
        assertTrue(""Result did not contain A.class"",
            files.containsKey(""A.class""));
        assertTrue(""Result did not contain B.class"",
            files.containsKey(""B.class""));
        assertTrue(""Result did not contain C.class"",
            files.containsKey(""C.class""));
        assertTrue(""Result did not contain D.class"",
            files.containsKey(""D.class""));
        assertTrue(""Result did not contain E.class"",
            files.containsKey(""E.class""));
    }   
    
    
    public void testMethodParamInner() {
        Project project = getProject();
        executeTarget(""testmethodparaminner"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of ""
            + ""class files"", 4, files.size());
        assertTrue(""Result did not contain test"" + File.separator + ""Outer$Inner.class"",
            files.containsKey(""test"" + File.separator + ""Outer$Inner.class""));
        assertTrue(""Result did not contain test"" + File.separator + ""Outer.class"",
            files.containsKey(""test"" + File.separator + ""Outer.class""));
        assertTrue(""Result did not contain test"" + File.separator + ""ContainsOnlyInner.class"",
            files.containsKey(""test"" + File.separator + ""ContainsOnlyInner.class""));
        assertTrue(""Result did not contain test"" + File.separator + ""ContainsOnlyInner.class"",
            files.containsKey(""test"" + File.separator + ""MethodParam.class""));
    }
}
"
L43066,Class,BaseSelectorTest,org.apache.tools.ant.types.selectors.BaseSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/BaseSelectorTest.java,73,1,327,2,0.0,0,0,0,0.0,0.0,0,0,2,2,2,29,6,9,26,13,29,0.769231,0.401914,84,84,10,3,0.366812,84,0,0,9,9,0,125,229,11,3,11,3,16,0,12,1,16,65,0,12,1,145,255,17,11,11,3,22,0,17,2,50,71,0,18,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public abstract class BaseSelectorTest extends TestCase {

    private Project project;
    private TaskdefForMakingBed tbed = null;
    protected String basedirname = ""src/etc/testcases/types"";
    protected String beddirname = basedirname + ""/selectortest"";
    protected String mirrordirname = basedirname + ""/selectortest2"";
    protected File basedir = new File(basedirname);
    protected File beddir = new File(beddirname);
    protected File mirrordir = new File(mirrordirname);
    protected String[] filenames = {""."",""asf-logo.gif.md5"",""asf-logo.gif.bz2"",
            ""asf-logo.gif.gz"",""copy.filterset.filtered"",""zip/asf-logo.gif.zip"",
            ""tar/asf-logo.gif.tar"",""tar/asf-logo-huge.tar.gz"",
            ""tar/gz/asf-logo.gif.tar.gz"",""tar/bz2/asf-logo.gif.tar.bz2"",
            ""tar/bz2/asf-logo-huge.tar.bz2"",""tar/bz2""};
    protected File[] files = new File[filenames.length];
    protected File[] mirrorfiles = new File[filenames.length];

    public BaseSelectorTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        project.setBaseDir(basedir);
        for (int x = 0; x < files.length; x++) {
            files[x] = new File(beddir,filenames[x]);
            mirrorfiles[x] = new File(mirrordir,filenames[x]);
        }
    }

    
    public abstract BaseSelector getInstance();


    
    public BaseSelector getSelector() {
        BaseSelector selector = getInstance();
        selector.setProject( getProject() );
        return selector;
    }


    public Project getProject() {
        return project;
    }

    
    public void testRespondsToError() {
        BaseSelector s = getInstance();
        if (s == null) {
            return;
        }
        s.setError(""test error"");
        try {
            s.isSelected(beddir,filenames[0],files[0]);
            fail(""Cannot cause BuildException when setError() is called"");
        } catch (BuildException be) {
            assertEquals(""test error"",
                         be.getMessage());
        }
    }


    
    public String selectionString(FileSelector selector) {
        return selectionString(beddir,files,selector);
    }

    
    public String mirrorSelectionString(FileSelector selector) {
        return selectionString(mirrordir,mirrorfiles,selector);
    }

    
    public String selectionString(File basedir, File[] files, FileSelector selector) {
        StringBuffer buf = new StringBuffer();
        for (int x = 0; x < files.length; x++) {
            if (selector.isSelected(basedir,filenames[x],files[x])) {
                buf.append('T');
            }
            else {
                buf.append('F');
            }
        }
        return buf.toString();
    }

    
    public void performTests(FileSelector selector, String expected) {
        String result = selectionString(selector);
        String diff = diff(expected, result);
        String resolved = resolve(diff);
        assertEquals(""Differing files: "" + resolved, result, expected);
    }

    
    public String diff(String expected, String result) {
        int length1 = expected.length();
        int length2 = result.length();
        int min = (length1 > length2) ? length2 : length1;
        StringBuffer sb = new StringBuffer();
        for (int i=0; i<min; i++) {
            sb.append(
                  (expected.charAt(i) == result.charAt(i))
                ? ""-""
                : ""X""
            );
        }
        return sb.toString();
    }


    
    public String resolve(String filelist) {
        StringBuffer sb = new StringBuffer();
        int min = (filenames.length > filelist.length())
                ? filelist.length()
                : filenames.length;
        for (int i=0; i<min; i++) {
            if ('X'==filelist.charAt(i)) {
                sb.append(filenames[i]);
                sb.append("";"");
            }
        }
        return sb.toString();
    }


    
    protected void makeBed() {
        tbed = new TaskdefForMakingBed(""setupfiles"");
        tbed.setUp();
        tbed.makeTestbed();
    }

    
    protected void cleanupBed() {
        if (tbed != null) {
            tbed.tearDown();
            tbed = null;
        }
    }


    
    protected void makeMirror() {
        tbed = new TaskdefForMakingBed(""mirrorfiles"");
        tbed.setUp();
        tbed.makeMirror();
    }

    
    protected void cleanupMirror() {
        if (tbed != null) {
            tbed.deleteMirror();
            tbed = null;
        }
    }

    private class TaskdefForMakingBed extends BuildFileTest {

        TaskdefForMakingBed(String name) {
            super(name);
        }

        public void setUp() {
            configureProject(""src/etc/testcases/types/selectors.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void makeTestbed() {
            executeTarget(""setupfiles"");
        }

        public void makeMirror() {
            executeTarget(""mirrorfiles"");
        }

        public void deleteMirror() {
            executeTarget(""cleanup.mirrorfiles"");
        }
    }



}
"
L43070,Class,BaseSelectorTest$TaskdefForMakingBed,org.apache.tools.ant.types.selectors.BaseSelectorTest$TaskdefForMakingBed,L43066,L103,src/testcases/org/apache/tools/ant/types/selectors/BaseSelectorTest.java,298,5,323,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,1,1,4,3,9,0.0,0.0,0,0,0,6,0.0,0,1,1,0,0,1,20,26,6,8,0,0,6,0,5,1,34,6,0,6,1,20,26,6,8,0,0,6,0,5,1,34,6,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public abstract class BaseSelectorTest extends TestCase {

    private Project project;
    private TaskdefForMakingBed tbed = null;
    protected String basedirname = ""src/etc/testcases/types"";
    protected String beddirname = basedirname + ""/selectortest"";
    protected String mirrordirname = basedirname + ""/selectortest2"";
    protected File basedir = new File(basedirname);
    protected File beddir = new File(beddirname);
    protected File mirrordir = new File(mirrordirname);
    protected String[] filenames = {""."",""asf-logo.gif.md5"",""asf-logo.gif.bz2"",
            ""asf-logo.gif.gz"",""copy.filterset.filtered"",""zip/asf-logo.gif.zip"",
            ""tar/asf-logo.gif.tar"",""tar/asf-logo-huge.tar.gz"",
            ""tar/gz/asf-logo.gif.tar.gz"",""tar/bz2/asf-logo.gif.tar.bz2"",
            ""tar/bz2/asf-logo-huge.tar.bz2"",""tar/bz2""};
    protected File[] files = new File[filenames.length];
    protected File[] mirrorfiles = new File[filenames.length];

    public BaseSelectorTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        project.setBaseDir(basedir);
        for (int x = 0; x < files.length; x++) {
            files[x] = new File(beddir,filenames[x]);
            mirrorfiles[x] = new File(mirrordir,filenames[x]);
        }
    }

    
    public abstract BaseSelector getInstance();


    
    public BaseSelector getSelector() {
        BaseSelector selector = getInstance();
        selector.setProject( getProject() );
        return selector;
    }


    public Project getProject() {
        return project;
    }

    
    public void testRespondsToError() {
        BaseSelector s = getInstance();
        if (s == null) {
            return;
        }
        s.setError(""test error"");
        try {
            s.isSelected(beddir,filenames[0],files[0]);
            fail(""Cannot cause BuildException when setError() is called"");
        } catch (BuildException be) {
            assertEquals(""test error"",
                         be.getMessage());
        }
    }


    
    public String selectionString(FileSelector selector) {
        return selectionString(beddir,files,selector);
    }

    
    public String mirrorSelectionString(FileSelector selector) {
        return selectionString(mirrordir,mirrorfiles,selector);
    }

    
    public String selectionString(File basedir, File[] files, FileSelector selector) {
        StringBuffer buf = new StringBuffer();
        for (int x = 0; x < files.length; x++) {
            if (selector.isSelected(basedir,filenames[x],files[x])) {
                buf.append('T');
            }
            else {
                buf.append('F');
            }
        }
        return buf.toString();
    }

    
    public void performTests(FileSelector selector, String expected) {
        String result = selectionString(selector);
        String diff = diff(expected, result);
        String resolved = resolve(diff);
        assertEquals(""Differing files: "" + resolved, result, expected);
    }

    
    public String diff(String expected, String result) {
        int length1 = expected.length();
        int length2 = result.length();
        int min = (length1 > length2) ? length2 : length1;
        StringBuffer sb = new StringBuffer();
        for (int i=0; i<min; i++) {
            sb.append(
                  (expected.charAt(i) == result.charAt(i))
                ? ""-""
                : ""X""
            );
        }
        return sb.toString();
    }


    
    public String resolve(String filelist) {
        StringBuffer sb = new StringBuffer();
        int min = (filenames.length > filelist.length())
                ? filelist.length()
                : filenames.length;
        for (int i=0; i<min; i++) {
            if ('X'==filelist.charAt(i)) {
                sb.append(filenames[i]);
                sb.append("";"");
            }
        }
        return sb.toString();
    }


    
    protected void makeBed() {
        tbed = new TaskdefForMakingBed(""setupfiles"");
        tbed.setUp();
        tbed.makeTestbed();
    }

    
    protected void cleanupBed() {
        if (tbed != null) {
            tbed.tearDown();
            tbed = null;
        }
    }


    
    protected void makeMirror() {
        tbed = new TaskdefForMakingBed(""mirrorfiles"");
        tbed.setUp();
        tbed.makeMirror();
    }

    
    protected void cleanupMirror() {
        if (tbed != null) {
            tbed.deleteMirror();
            tbed = null;
        }
    }

    private class TaskdefForMakingBed extends BuildFileTest {

        TaskdefForMakingBed(String name) {
            super(name);
        }

        public void setUp() {
            configureProject(""src/etc/testcases/types/selectors.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void makeTestbed() {
            executeTarget(""setupfiles"");
        }

        public void makeMirror() {
            executeTarget(""mirrorfiles"");
        }

        public void deleteMirror() {
            executeTarget(""cleanup.mirrorfiles"");
        }
    }



}
"
L43153,Class,ContainsRegexpTest,org.apache.tools.ant.types.selectors.ContainsRegexpTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/ContainsRegexpTest.java,67,1,121,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,3,2,0,0,6,9,0.0,0.0,0,0,0,4,0.0,0,0,0,0,0,0,20,25,1,0,1,0,3,0,3,1,3,8,0,3,1,43,55,7,8,1,0,7,0,6,2,35,20,0,7,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public class ContainsRegexpTest extends TestCase {

    private Project project;

    public ContainsRegexpTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testContainsRegexp() {
        TaskdefForRegexpTest MyTask = 
            new TaskdefForRegexpTest(""containsregexp"");
        try {
            MyTask.setUp();
            MyTask.test();
        } finally {
            MyTask.tearDown();
        }
    }

    private class TaskdefForRegexpTest extends BuildFileTest {
        TaskdefForRegexpTest(String name) {
            super(name);
        }

        public void setUp() { 
            configureProject(""src/etc/testcases/types/selectors.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanupregexp"");
        }

        public void test() { 
            File dir = null;
            File[] files = null;
            int filecount;

            executeTarget(""containsregexp"");
	
            dir = new File(getProjectDir() + ""/regexpseltestdest/"");
            files = dir.listFiles();
            filecount = files.length;
	  
            if (filecount != 1)
                assertEquals(""ContainsRegexp test should have copied 1 file"",
                             1, files.length);
	  
        }
    }
}

"
L43160,Class,ContainsRegexpTest$TaskdefForRegexpTest,org.apache.tools.ant.types.selectors.ContainsRegexpTest$TaskdefForRegexpTest,L43153,L103,src/testcases/org/apache/tools/ant/types/selectors/ContainsRegexpTest.java,91,5,120,6,0.0,0,0,0,0.0,0.0,0,0,1,1,1,5,1,1,1,4,8,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,23,30,6,8,0,0,4,0,3,1,32,12,0,4,1,23,30,6,8,0,0,4,0,3,1,32,12,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public class ContainsRegexpTest extends TestCase {

    private Project project;

    public ContainsRegexpTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testContainsRegexp() {
        TaskdefForRegexpTest MyTask = 
            new TaskdefForRegexpTest(""containsregexp"");
        try {
            MyTask.setUp();
            MyTask.test();
        } finally {
            MyTask.tearDown();
        }
    }

    private class TaskdefForRegexpTest extends BuildFileTest {
        TaskdefForRegexpTest(String name) {
            super(name);
        }

        public void setUp() { 
            configureProject(""src/etc/testcases/types/selectors.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanupregexp"");
        }

        public void test() { 
            File dir = null;
            File[] files = null;
            int filecount;

            executeTarget(""containsregexp"");
	
            dir = new File(getProjectDir() + ""/regexpseltestdest/"");
            files = dir.listFiles();
            filecount = files.length;
	  
            if (filecount != 1)
                assertEquals(""ContainsRegexp test should have copied 1 file"",
                             1, files.length);
	  
        }
    }
}

"
L43172,Class,ContainsSelectorTest,org.apache.tools.ant.types.selectors.ContainsSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/ContainsSelectorTest.java,71,1,165,2,0.90429,6,11,8,0.610526,0.735294,58,50,1,1,1,6,6,0,0,12,16,0.8,0.180723,15,15,4,1,0.180723,15,1,1,0,0,1,68,95,12,3,1,1,4,0,4,0,19,50,0,15,1,68,95,12,3,1,1,4,0,4,0,19,50,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class ContainsSelectorTest extends BaseSelectorTest {

    private Project project;

    public ContainsSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new ContainsSelector();
    }

    
    public void testValidate() {
        ContainsSelector s = (ContainsSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""ContainsSelector did not check for required field 'text'"");
        } catch (BuildException be1) {
            assertEquals(""The text attribute is required"", be1.getMessage());
        }

        s = (ContainsSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = {param};
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""ContainsSelector did not check for valid parameter element"");
        } catch (BuildException be2) {
            assertEquals(""Invalid parameter garbage in"", be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        ContainsSelector s;
        String results;

        try {
            makeBed();

            s = (ContainsSelector)getInstance();
            s.setText(""no such string in test files"");
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""Apache Ant"");
            results = selectionString(s);
            assertEquals(""TFFFTFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""apache ant"");
            s.setCasesensitive(true);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""apache ant"");
            s.setCasesensitive(false);
            results = selectionString(s);
            assertEquals(""TFFFTFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""ApacheAnt"");
            s.setIgnorewhitespace(true);
            results = selectionString(s);
            assertEquals(""TFFFTFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""A p a c h e    A n t"");
            s.setIgnorewhitespace(true);
            results = selectionString(s);
            assertEquals(""TFFFTFFFFFFT"", results);

        }
        finally {
            cleanupBed();
        }

    }

}
"
L43192,Class,DateSelectorTest,org.apache.tools.ant.types.selectors.DateSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/DateSelectorTest.java,75,1,282,2,0.301337,6,19,7,0.245192,0.280702,51,48,1,2,2,11,9,0,0,20,24,0.8,0.0806452,15,15,4,1,0.0806452,15,1,1,0,0,1,171,208,12,3,1,1,4,0,4,0,19,129,0,15,1,171,208,12,3,1,1,4,0,4,0,19,129,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.text.SimpleDateFormat;
import java.text.ParsePosition;
import java.util.Date;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class DateSelectorTest extends BaseSelectorTest {

    private Project project;

    public DateSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new DateSelector();
    }

    
    public void testValidate() {
        DateSelector s = (DateSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""You must provide a datetime or the number of ""
                    + ""milliseconds."", be1.getMessage());
        }

        s = (DateSelector)getInstance();
        s.setDatetime(""01/01/1969 01:01 AM"");
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for Datetime being in the ""
                    + ""allowable range"");
        } catch (BuildException be2) {
            assertEquals(""Date of 01/01/1969 01:01 AM results in negative ""
                    + ""milliseconds value relative to epoch (January 1, ""
                    + ""1970, 00:00:00 GMT)."", be2.getMessage());
        }

        s = (DateSelector)getInstance();
        s.setDatetime(""this is not a date"");
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for Datetime being in a ""
                    + ""valid format"");
        } catch (BuildException be3) {
            assertEquals(""Date of this is not a date""
                        + "" Cannot be parsed correctly. It should be in""
                        + "" MM/DD/YYYY HH:MM AM_PM format."", be3.getMessage());
        }

        s = (DateSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = new Parameter[1];
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for valid parameter element"");
        } catch (BuildException be4) {
            assertEquals(""Invalid parameter garbage in"", be4.getMessage());
        }

        s = (DateSelector)getInstance();
        param = new Parameter();
        param.setName(""millis"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for valid millis parameter"");
        } catch (BuildException be5) {
            assertEquals(""Invalid millisecond setting garbage out"",
                    be5.getMessage());
        }

        s = (DateSelector)getInstance();
        param = new Parameter();
        param.setName(""granularity"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for valid granularity parameter"");
        } catch (BuildException be6) {
            assertEquals(""Invalid granularity setting garbage out"",
                    be6.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        DateSelector s;
        String results;

        DateSelector.TimeComparisons before = new
                DateSelector.TimeComparisons();
        before.setValue(""before"");
        DateSelector.TimeComparisons equal = new
                DateSelector.TimeComparisons();
        equal.setValue(""equal"");
        DateSelector.TimeComparisons after = new
                DateSelector.TimeComparisons();
        after.setValue(""after"");

        try {
            makeBed();

            s = (DateSelector)getInstance();
            s.setDatetime(""10/10/1999 1:45 PM"");
            s.setWhen(before);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (DateSelector)getInstance();
            s.setDatetime(""10/10/1999 1:45 PM"");
            s.setWhen(before);
            s.setCheckdirs(true);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (DateSelector)getInstance();
            s.setDatetime(""10/10/1999 1:45 PM"");
            s.setWhen(after);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
                s = (DateSelector)getInstance();
                s.setDatetime(""11/21/2001 4:54 AM"");
                s.setWhen(before);
                results = selectionString(s);
                assertEquals(""TFTFFFFFFFFT"", results);

                s = (DateSelector)getInstance();
                s.setDatetime(""11/21/2001 4:55 AM"");
                SimpleDateFormat formatter = new SimpleDateFormat();
                Date d = formatter.parse(""11/21/2001 4:55 AM"",new ParsePosition(0));

                long milliseconds = s.getMillis();
                s.setWhen(equal);
                results = selectionString(s);
                assertEquals(""TTFFTFFFTTTT"", results);

                s = (DateSelector)getInstance();
                s.setMillis(milliseconds);
                s.setWhen(equal);
                results = selectionString(s);
                assertEquals(""TTFFTFFFTTTT"", results);

                s = (DateSelector)getInstance();
                s.setDatetime(""11/21/2001 4:56 AM"");
                s.setWhen(after);
                results = selectionString(s);
                assertEquals(""TFFTFTTTFFFT"", results);

                s = (DateSelector)getInstance();
                Parameter param1 = new Parameter();
                Parameter param2 = new Parameter();
                param1.setName(""datetime"");
                param1.setValue(""11/21/2001 4:56 AM"");
                param2.setName(""when"");
                param2.setValue(""after"");
                Parameter[] params = {param1,param2};
                s.setParameters(params);
                results = selectionString(s);
                assertEquals(""TFFTFTTTFFFT"", results);
            }
            try {
                makeMirror();

                s = (DateSelector)getInstance();
                long testtime = mirrorfiles[5].lastModified();
                s.setMillis(testtime);
                s.setWhen(after);
                s.setGranularity(2);
                results = mirrorSelectionString(s);
                assertEquals(""TFFFFTTTTTTT"", results);

                s = (DateSelector)getInstance();
                testtime = mirrorfiles[6].lastModified();
                s.setMillis(testtime);
                s.setWhen(before);
                s.setGranularity(2);
                results = mirrorSelectionString(s);
                assertEquals(""TTTTTTTFFFFT"", results);
            }
            finally {
                cleanupMirror();
            }

        }
        finally {
            cleanupBed();
        }

    }

}
"
L43220,Class,DependSelectorTest,org.apache.tools.ant.types.selectors.DependSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/DependSelectorTest.java,76,1,218,2,0.257463,2,4,2,0.237762,0.267857,34,30,1,2,2,7,10,0,0,19,23,0.8,0.125,16,15,4,1,0.125,16,1,1,0,0,1,112,143,12,3,1,1,4,0,4,0,19,88,0,15,1,112,143,12,3,1,1,4,0,4,0,19,88,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Mapper;
import org.apache.tools.ant.util.FileNameMapper;
import org.apache.tools.ant.util.IdentityMapper;
import org.apache.tools.ant.util.GlobPatternMapper;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class DependSelectorTest extends BaseSelectorTest {

    private Project project;

    public DependSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new DependSelector();
    }

    
    public void testValidate() {
        DependSelector s = (DependSelector)getInstance();
        try {
            s.createMapper();
            s.createMapper();
            fail(""DependSelector allowed more than one nested mapper."");
        } catch (BuildException be1) {
            assertEquals(""Cannot define more than one mapper"",
                    be1.getMessage());
        }

        s = (DependSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DependSelector did not check for required fields"");
        } catch (BuildException be2) {
            assertEquals(""The targetdir attribute is required."",
                    be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        DependSelector s;
        String results;
        File subdir;
        Mapper m;
        Mapper.MapperType identity = new Mapper.MapperType();
        identity.setValue(""identity"");
        Mapper.MapperType glob = new Mapper.MapperType();
        glob.setValue(""glob"");
        Mapper.MapperType merge = new Mapper.MapperType();
        merge.setValue(""merge"");

        try {
            makeBed();

            s = (DependSelector)getInstance();
            s.setTargetdir(beddir);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (DependSelector)getInstance();
            s.setTargetdir(beddir);
            m = s.createMapper();
            m.setType(identity);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
                s = (DependSelector)getInstance();
                s.setTargetdir(beddir);
                m = s.createMapper();
                m.setType(merge);
                m.setTo(""asf-logo.gif.gz"");
                results = selectionString(s);
                assertEquals(""TFFFFTTTFFF"", results.substring(0,11));

                s = (DependSelector)getInstance();
                s.setTargetdir(beddir);
                m = s.createMapper();
                m.setType(merge);
                m.setTo(""asf-logo.gif.bz2"");
                results = selectionString(s);
                assertEquals(""TTFTTTTTTTTT"", results);

                
                s = (DependSelector)getInstance();
                subdir = new File(""selectortest/tar/bz2"");
                s.setTargetdir(subdir);
                m = s.createMapper();
                m.setType(glob);
                m.setFrom(""*.bz2"");
                m.setTo(""*.tar.bz2"");
                results = selectionString(s);
                assertEquals(""FFTFFFFFFTTF"", results);
            }

            s = (DependSelector)getInstance();
            subdir = new File(beddir,""tar/bz2"");
            s.setTargetdir(subdir);
            m = s.createMapper();
            m.setType(glob);
            m.setFrom(""*.bz2"");
            m.setTo(""*.tar.bz2"");
            results = selectionString(s);
            assertEquals(""FFFFFFFFFTTF"", results);

            try {
                makeMirror();

                s = (DependSelector)getInstance();
                File testdir = getProject().resolveFile(""selectortest2"");
                s.setTargetdir(testdir);
                results = selectionString(s);
                assertEquals(""FFFTTFFFFFFF"", results);

                s = (DependSelector)getInstance();
                testdir = getProject().resolveFile(""selectortest2/tar/bz2"");
                s.setTargetdir(testdir);
                m = s.createMapper();
                m.setType(glob);
                m.setFrom(""*.bz2"");
                m.setTo(""*.tar.bz2"");
                results = mirrorSelectionString(s);
                assertEquals(""FFFFFFFFFTTF"", results);
                results = selectionString(s);
                assertEquals(""FFFFFFFFFTTF"", results);
            }
            finally {
                cleanupMirror();
            }

        }
        finally {
            cleanupBed();
        }

    }

}
"
L43236,Class,DepthSelectorTest,org.apache.tools.ant.types.selectors.DepthSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/DepthSelectorTest.java,71,1,200,2,0.553377,7,21,8,0.4,0.485149,52,49,1,1,1,9,6,0,0,11,15,0.8,0.12931,15,15,4,1,0.12931,15,1,1,0,0,1,101,130,12,3,1,1,4,0,4,0,19,72,0,15,1,101,130,12,3,1,1,4,0,4,0,19,72,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class DepthSelectorTest extends BaseSelectorTest {

    private Project project;

    public DepthSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new DepthSelector();
    }

    
    public void testValidate() {
        DepthSelector s = (DepthSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""You must set at least one of the min or the "" +
                    ""max levels."", be1.getMessage());
        }

        s = (DepthSelector)getInstance();
        s.setMin(5);
        s.setMax(2);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector did not check for maximum being higher ""
                    + ""than minimum"");
        } catch (BuildException be2) {
            assertEquals(""The maximum depth is lower than the minimum."",
                    be2.getMessage());
        }

        s = (DepthSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = new Parameter[1];
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector did not check for valid parameter element"");
        } catch (BuildException be3) {
            assertEquals(""Invalid parameter garbage in"", be3.getMessage());
        }

        s = (DepthSelector)getInstance();
        param = new Parameter();
        param.setName(""min"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector accepted bad minimum as parameter"");
        } catch (BuildException be4) {
            assertEquals(""Invalid minimum value garbage out"",
                    be4.getMessage());
        }

        s = (DepthSelector)getInstance();
        param = new Parameter();
        param.setName(""max"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector accepted bad maximum as parameter"");
        } catch (BuildException be5) {
            assertEquals(""Invalid maximum value garbage out"",
                    be5.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        DepthSelector s;
        String results;

        try {
            makeBed();

            s = (DepthSelector)getInstance();
            s.setMin(20);
            s.setMax(25);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (DepthSelector)getInstance();
            s.setMin(0);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (DepthSelector)getInstance();
            s.setMin(1);
            results = selectionString(s);
            assertEquals(""FFFFFTTTTTTT"", results);

            s = (DepthSelector)getInstance();
            s.setMax(0);
            results = selectionString(s);
            assertEquals(""TTTTTFFFFFFF"", results);

            s = (DepthSelector)getInstance();
            s.setMin(1);
            s.setMax(1);
            results = selectionString(s);
            assertEquals(""FFFFFTTTFFFT"", results);

        }
        finally {
            cleanupBed();
        }

    }

}
"
L43251,Class,FilenameSelectorTest,org.apache.tools.ant.types.selectors.FilenameSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/FilenameSelectorTest.java,71,1,167,2,0.763251,6,9,6,0.474227,0.615385,46,40,1,1,1,6,6,0,0,12,16,0.8,0.244186,21,15,4,1,0.244186,21,1,1,0,0,1,65,97,12,3,1,1,4,0,4,0,19,47,0,15,1,65,97,12,3,1,1,4,0,4,0,19,47,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class FilenameSelectorTest extends BaseSelectorTest {

    private Project project;

    public FilenameSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new FilenameSelector();
    }

    
    public void testValidate() {
        FilenameSelector s = (FilenameSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""FilenameSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""The name attribute is required"", be1.getMessage());
        }

        s = (FilenameSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = {param};
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""FilenameSelector did not check for valid parameter element"");
        } catch (BuildException be2) {
            assertEquals(""Invalid parameter garbage in"", be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        FilenameSelector s;
        String results;

        try {
            makeBed();

            s = (FilenameSelector)getInstance();
            s.setName(""no match possible"");
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (FilenameSelector)getInstance();
            s.setName(""*.gz"");
            results = selectionString(s);
            
            
            
            
            
            

            s = (FilenameSelector)getInstance();
            s.setName(""***.GZ"");
            s.setCasesensitive(false);
            results = selectionString(s);
            assertEquals(""FFFTFFFTTFFF"", results);

            s = (FilenameSelector)getInstance();
            Parameter param1 = new Parameter();
            param1.setName(""name"");
            param1.setValue(""**/*.bz2"");
            Parameter[] params = {param1};
            s.setParameters(params);
            results = selectionString(s);
            assertEquals(""FFTFFFFFFTTF"", results);

        }
        finally {
            cleanupBed();
        }

    }

}
"
L43265,Class,ModifiedSelectorTest,org.apache.tools.ant.types.selectors.ModifiedSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java,80,1,708,2,0.199153,3,18,7,0.138315,0.218509,87,85,8,3,3,51,20,0,0,45,73,0.48,0.292929,145,76,12,13,0.272897,146,1,1,0,0,1,350,583,12,3,1,1,28,0,24,0,43,260,0,35,1,389,629,20,12,3,2,36,0,30,1,79,282,0,42,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;



import java.io.File;
import java.io.FileWriter;
import java.util.Comparator;
import java.util.Iterator;
import java.text.RuleBasedCollator;


import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Parameter;


import org.apache.tools.ant.types.selectors.modifiedselector.*;



public class ModifiedSelectorTest extends BaseSelectorTest {

    
    private static String pkg = ""org.apache.tools.ant.types.selectors.modifiedselector"";


    public ModifiedSelectorTest(String name) {
        super(name);
    }


    
    public BaseSelector getInstance() {
        return new ModifiedSelector();
    }


    
    public void testValidateWrongCache() {
        String name = ""this-is-not-a-valid-cache-name"";
        try {
            ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();
            cacheName.setValue(name);
            fail(""CacheSelector.CacheName accepted invalid value."");
        } catch (BuildException be) {
            assertEquals(name + "" is not a legal value for this attribute"",
                         be.getMessage());
        }
    }


    
    public void testValidateWrongAlgorithm() {
        String name = ""this-is-not-a-valid-algorithm-name"";
        try {
            ModifiedSelector.AlgorithmName algoName
                = new ModifiedSelector.AlgorithmName();
            algoName.setValue(name);
            fail(""CacheSelector.AlgorithmName accepted invalid value."");
        } catch (BuildException be) {
            assertEquals(name + "" is not a legal value for this attribute"",
                         be.getMessage());
        }
    }


    
    public void testValidateWrongComparator() {
        String name = ""this-is-not-a-valid-comparator-name"";
        try {
            ModifiedSelector.ComparatorName compName
                = new ModifiedSelector.ComparatorName();
            compName.setValue(name);
            fail(""ModifiedSelector.ComparatorName accepted invalid value."");
        } catch (BuildException be) {
            assertEquals(name + "" is not a legal value for this attribute"",
                         be.getMessage());
        }
    }


    
    public void testPropcacheInvalid() {
        Cache cache = new PropertiesfileCache();
        if (cache.isValid())
            fail(""PropertyfilesCache does not check its configuration."");
    }


    
    public void testSeldirs() {
        ModifiedSelector s = (ModifiedSelector)getSelector();
        try {
            makeBed();

            StringBuffer sbTrue  = new StringBuffer();
            StringBuffer sbFalse = new StringBuffer();
            for (int i=0; i<filenames.length; i++) {
                if (files[i].isDirectory()) {
                    sbTrue.append(""T"");
                    sbFalse.append(""F"");
                } else {
                    sbTrue.append(""T"");
                    sbFalse.append(""T"");
                }
            }


            s.setSeldirs(true);
            performTests(s, sbTrue.toString());
            s.getCache().delete();

            s.setSeldirs(false);
            performTests(s, sbFalse.toString());
            s.getCache().delete();

        } finally {
            cleanupBed();
            if (s!=null) s.getCache().delete();
        }
    }


    
    public void testScenario1() {
        BFT bft = null;
        ModifiedSelector s = null;
        try {
            
            
            
            makeBed();
            String results = null;

            
            s = (ModifiedSelector)getSelector();

            
            
            
            
            
            performTests(s, ""TTTTTTTTTTTT"");

            
            
            
            
            
            performTests(s, ""TFFFFFFFFFFT"");

            
            
            

            
            String f2name = ""tar/bz2/asf-logo-huge.tar.bz2"";
            String f3name = ""asf-logo.gif.md5"";
            String f4name = ""copy.filterset.filtered"";

            
            bft = new BFT();
            
            bft.writeProperties(""f2name=""+f2name);
            bft.writeProperties(""f3name=""+f3name);
            bft.writeProperties(""f4name=""+f4name);
            
            bft.doTarget(""modifiedselectortest-makeDirty"");


            
            
            
            
            results = selectionString(s);

            
            
            

            
            
            
            StringBuffer expected = new StringBuffer();
            for (int i=0; i<filenames.length; i++) {
                String ch = ""F"";
                if (files[i].isDirectory()) ch = ""T"";
                
                if (filenames[i].equalsIgnoreCase(f3name)) ch = ""T"";
                if (filenames[i].equalsIgnoreCase(f4name)) ch = ""T"";
                expected.append(ch);
            }

            assertEquals(
                ""Wrong files selected. Differing files: ""       
                + resolve(diff(expected.toString(), results)),  
                expected.toString(),                            
                results                                         
            );

        } finally {
            
            cleanupBed();
            if (s!=null) s.getCache().delete();
            if (bft!=null) bft.deletePropertiesfile();
        }
    }



    
    public void testScenario2() {
        ExtendSelector s = new ExtendSelector();
        BFT bft = new BFT();
        String cachefile = System.getProperty(""java.io.tmpdir"")+""/mycache.txt"";
        try {
            makeBed();

            s.setClassname(""org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector"");

            s.addParam(createParam(""cache.cachefile"", cachefile));
            
            s.addParam(createParam(""cache"",""propertyfile""));
            s.addParam(createParam(""update"",""true""));
            s.addParam(createParam(""comparator"",""rule""));
            s.addParam(createParam(""algorithm.name"",""sha""));
            s.addParam(createParam(""algorithm"",""digest""));

            
            performTests(s, ""TTTTTTTTTTTT"");
            performTests(s, ""TFFFFFFFFFFT"");
            
            String f2name = ""tar/bz2/asf-logo-huge.tar.bz2"";
            String f3name = ""asf-logo.gif.md5"";
            String f4name = ""copy.filterset.filtered"";
            bft.writeProperties(""f2name=""+f2name);
            bft.writeProperties(""f3name=""+f3name);
            bft.writeProperties(""f4name=""+f4name);
            bft.doTarget(""modifiedselectortest-makeDirty"");
            
            String results = selectionString(s);
            StringBuffer expected = new StringBuffer();
            for (int i=0; i<filenames.length; i++) {
                String ch = ""F"";
                if (files[i].isDirectory()) ch = ""T"";
                if (filenames[i].equalsIgnoreCase(f3name)) ch = ""T"";
                if (filenames[i].equalsIgnoreCase(f4name)) ch = ""T"";
                expected.append(ch);
            }
            assertEquals(
                ""Wrong files selected. Differing files: ""       
                + resolve(diff(expected.toString(), results)),  
                expected.toString(),                            
                results                                         
            );
        } finally {
            
            cleanupBed();
            (new java.io.File(cachefile)).delete();
            if (bft!=null) bft.deletePropertiesfile();
        }
    }


    
    public void testCreatePropertiesCacheDirect() {
        File basedir   = getSelector().getProject().getBaseDir();
        File cachefile = new File(basedir, ""cachefile.properties"");

        PropertiesfileCache cache = new PropertiesfileCache();
        cache.setCachefile(cachefile);

        cache.put(""key"", ""value"");
        cache.save();

        assertTrue(""Cachefile not created."", cachefile.exists());

        cache.delete();
        assertFalse(""Cachefile not deleted."", cachefile.exists());
    }


    
    public void testCreatePropertiesCacheViaModifiedSelector() {
        File basedir   = getSelector().getProject().getBaseDir();
        File cachefile = new File(basedir, ""cachefile.properties"");
        try {

            
            makeBed();

            
            ModifiedSelector s = (ModifiedSelector)getSelector();
            s.addParam(""cache.cachefile"", cachefile);

            ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();
            cacheName.setValue(""propertyfile"");
            s.setCache(cacheName);

            s.setUpdate(true);

            
            String results = selectionString(s);

            
            assertTrue(""Cache file is not created."", cachefile.exists());
        } finally {
            cleanupBed();
            if (cachefile!=null) cachefile.delete();
        }
    }


    
    public void testCreatePropertiesCacheViaCustomSelector() {
        File cachefile = org.apache.tools.ant.util.FileUtils.newFileUtils()
                         .createTempFile(""tmp-cache-"", "".properties"", null);
        try {
            
            makeBed();

            

            ExtendSelector s = new ExtendSelector();
            s.setClassname(""org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector"");
            s.addParam(createParam(""update"", ""true""));
            s.addParam(createParam(""cache.cachefile"", cachefile.getAbsolutePath()));
            s.addParam(createParam(""cache"", ""propertyfile""));

            
            String results = selectionString(s);

            
            assertTrue(""Cache file is not created."", cachefile.exists());
        } finally {
            cleanupBed();
            if (cachefile!=null) cachefile.delete();
        }
    }


    public void testEqualComparatorViaSelector() {
        ModifiedSelector s = (ModifiedSelector)getSelector();
        ModifiedSelector.ComparatorName compName = new ModifiedSelector.ComparatorName();
        compName.setValue(""equal"");
        s.setComparator(compName);
        try {
            performTests(s, ""TTTTTTTTTTTT"");
        } finally {
            s.getCache().delete();
        }
    }


    public void testRuleComparatorViaSelector() {
        ModifiedSelector s = (ModifiedSelector)getSelector();
        ModifiedSelector.ComparatorName compName = new ModifiedSelector.ComparatorName();
        compName.setValue(""rule"");
        s.setComparator(compName);
        try {
            performTests(s, ""TTTTTTTTTTTT"");
        } finally {
            s.getCache().delete();
        }
    }


    public void testHashvalueAlgorithm() {
        HashvalueAlgorithm algo = new HashvalueAlgorithm();
        doTest(algo);
    }

    public void testDigestAlgorithmMD5() {
        DigestAlgorithm algo = new DigestAlgorithm();
        algo.setAlgorithm(""MD5"");
        doTest(algo);
    }

    public void testDigestAlgorithmSHA() {
        DigestAlgorithm algo = new DigestAlgorithm();
        algo.setAlgorithm(""SHA"");
        doTest(algo);
    }


    public void testPropertyfileCache() {
        PropertiesfileCache cache = new PropertiesfileCache();
        File cachefile = new File(""cache.properties"");
        cache.setCachefile(cachefile);
        doTest(cache);
        assertFalse(""Cache file not deleted."", cachefile.exists());
    }


    public void testEqualComparator() {
        EqualComparator comp = new EqualComparator();
        doTest(comp);
    }


    public void testRuleComparator() {
        RuleBasedCollator comp = (RuleBasedCollator)RuleBasedCollator.getInstance();
        doTest(comp);
    }


    public void testScenarioCoreSelectorDefaults() {
        doScenarioTest(""modifiedselectortest-scenario-coreselector-defaults"", ""cache.properties"");
    }



    public void testSceanrioCoreSelectorSettings() {
        doScenarioTest(""modifiedselectortest-scenario-coreselector-settings"", ""core.cache.properties"");
    }


    public void testScenarioCustomSelectorSettings() {
        doScenarioTest(""modifiedselectortest-scenario-customselector-settings"", ""core.cache.properties"");
    }


    public void doScenarioTest(String target, String cachefilename) {
        BFT bft = new BFT();
        bft.setUp();
        File basedir = bft.getProject().getBaseDir();
        File cachefile = new File(basedir, cachefilename);
        try {
            
            bft.doTarget(""modifiedselectortest-scenario-clean"");
            bft.doTarget(target);

            
            File to1 = new File(basedir, ""selectortest/to-1"");
            File to2 = new File(basedir, ""selectortest/to-2"");
            File to3 = new File(basedir, ""selectortest/to-3"");

            
            assertTrue(""Cache file not created."", cachefile.exists());
            assertTrue(""Not enough files copied on first time."", to1.list().length>5);
            assertTrue(""Too much files copied on second time."", to2.list().length==0);
            assertTrue(""Too much files copied on third time."", to3.list().length==2);
        
        } finally {
            bft.doTarget(""modifiedselectortest-scenario-clean"");
            bft.deletePropertiesfile();
            bft.tearDown();
            cachefile.delete();
        }
    }


    


    
    protected void doTest(Algorithm algo) {
        assertTrue(""Algorithm not proper configured."", algo.isValid());
        try {
            makeBed();

            for (int i=0; i<files.length; i++) {
                File file = files[i];  
                if (file.isFile()) {
                    
                    String hash1 = algo.getValue(file);
                    String hash2 = algo.getValue(file);
                    String hash3 = algo.getValue(file);
                    String hash4 = algo.getValue(file);
                    String hash5 = algo.getValue(new File(file.getAbsolutePath()));

                    
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash1);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash2);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash3);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash4);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash5);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash2);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash3);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash4);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash5);
                }
            }
        } finally {
            cleanupBed();
        }
    }


    
    protected void doTest(Cache cache) {
        assertTrue(""Cache not proper configured."", cache.isValid());

        String key1   = ""key1"";
        String value1 = ""value1"";
        String key2   = ""key2"";
        String value2 = ""value2"";

        
        Iterator it1 = cache.iterator();
        assertFalse(""Cache is not empty"", it1.hasNext());

        
        cache.put(key1, value1);
        cache.put(key2, value2);
        assertEquals(""cache returned wrong value"", value1, cache.get(key1));
        assertEquals(""cache returned wrong value"", value2, cache.get(key2));

        
        Iterator it2 = cache.iterator();
        Object   returned = it2.next();
        boolean ok = (key1.equals(returned) || key2.equals(returned));
        String msg = ""Iterator returned unexpected value.""
                   + ""  key1.equals(returned)=""+key1.equals(returned)
                   + ""  key2.equals(returned)=""+key2.equals(returned)
                   + ""  returned=""+returned
                   + ""  ok=""+ok;
        assertTrue(msg, ok);

        
        cache.delete();
        Iterator it3 = cache.iterator();
        assertFalse(""Cache is not empty"", it1.hasNext());
    }


    
    protected void doTest(Comparator comp) {
        Object o1 = new String(""string1"");
        Object o2 = new String(""string2"");
        Object o3 = new String(""string2""); 

        assertTrue(""Comparator gave wrong value."", comp.compare(o1, o2) != 0);
        assertTrue(""Comparator gave wrong value."", comp.compare(o1, o3) != 0);
        assertTrue(""Comparator gave wrong value."", comp.compare(o2, o3) == 0);
    }


    


    private Parameter createParam(String name, String value) {
        Parameter p = new Parameter();
        p.setName(name);
        p.setValue(value);
        return p;
    }


    private class BFT extends org.apache.tools.ant.BuildFileTest {
        BFT() { super(""nothing""); }
        BFT(String name) {
            super(name);
        }
        String propfile = ""ModifiedSelectorTest.properties"";

        boolean isConfigured = false;

        public void setUp() {
            configureProject(""src/etc/testcases/types/selectors.xml"");
            isConfigured = true;
        }

        public void tearDown() { }

        public void doTarget(String target) {
            if (!isConfigured) setUp();
            executeTarget(target);
        }

        public void writeProperties(String line) {
            if (!isConfigured) setUp();
            File dir = getProject().getBaseDir();
            File file = new File(dir, propfile);
            try {
                java.io.FileWriter out = 
                    new java.io.FileWriter(file.getAbsolutePath(), true);
                out.write(line);
                out.write(System.getProperty(""line.separator""));
                out.flush();
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void deletePropertiesfile() {
            if (!isConfigured) setUp();
            new File(getProject().getBaseDir(), propfile).delete();
        }

        public org.apache.tools.ant.Project getProject() {
            return super.getProject();
        }
    }

}
"
L43291,Class,ModifiedSelectorTest$BFT,org.apache.tools.ant.types.selectors.ModifiedSelectorTest$BFT,L43265,L103,src/testcases/org/apache/tools/ant/types/selectors/ModifiedSelectorTest.java,661,5,706,6,0.0,0,0,0,0.0,0.0,0,0,2,1,1,12,2,1,3,5,13,0.0,0.025,1,0,0,7,0.025,1,1,1,0,0,1,39,46,8,9,2,1,8,0,6,1,36,22,0,7,1,39,46,8,9,2,1,8,0,6,1,36,22,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;



import java.io.File;
import java.io.FileWriter;
import java.util.Comparator;
import java.util.Iterator;
import java.text.RuleBasedCollator;


import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Parameter;


import org.apache.tools.ant.types.selectors.modifiedselector.*;



public class ModifiedSelectorTest extends BaseSelectorTest {

    
    private static String pkg = ""org.apache.tools.ant.types.selectors.modifiedselector"";


    public ModifiedSelectorTest(String name) {
        super(name);
    }


    
    public BaseSelector getInstance() {
        return new ModifiedSelector();
    }


    
    public void testValidateWrongCache() {
        String name = ""this-is-not-a-valid-cache-name"";
        try {
            ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();
            cacheName.setValue(name);
            fail(""CacheSelector.CacheName accepted invalid value."");
        } catch (BuildException be) {
            assertEquals(name + "" is not a legal value for this attribute"",
                         be.getMessage());
        }
    }


    
    public void testValidateWrongAlgorithm() {
        String name = ""this-is-not-a-valid-algorithm-name"";
        try {
            ModifiedSelector.AlgorithmName algoName
                = new ModifiedSelector.AlgorithmName();
            algoName.setValue(name);
            fail(""CacheSelector.AlgorithmName accepted invalid value."");
        } catch (BuildException be) {
            assertEquals(name + "" is not a legal value for this attribute"",
                         be.getMessage());
        }
    }


    
    public void testValidateWrongComparator() {
        String name = ""this-is-not-a-valid-comparator-name"";
        try {
            ModifiedSelector.ComparatorName compName
                = new ModifiedSelector.ComparatorName();
            compName.setValue(name);
            fail(""ModifiedSelector.ComparatorName accepted invalid value."");
        } catch (BuildException be) {
            assertEquals(name + "" is not a legal value for this attribute"",
                         be.getMessage());
        }
    }


    
    public void testPropcacheInvalid() {
        Cache cache = new PropertiesfileCache();
        if (cache.isValid())
            fail(""PropertyfilesCache does not check its configuration."");
    }


    
    public void testSeldirs() {
        ModifiedSelector s = (ModifiedSelector)getSelector();
        try {
            makeBed();

            StringBuffer sbTrue  = new StringBuffer();
            StringBuffer sbFalse = new StringBuffer();
            for (int i=0; i<filenames.length; i++) {
                if (files[i].isDirectory()) {
                    sbTrue.append(""T"");
                    sbFalse.append(""F"");
                } else {
                    sbTrue.append(""T"");
                    sbFalse.append(""T"");
                }
            }


            s.setSeldirs(true);
            performTests(s, sbTrue.toString());
            s.getCache().delete();

            s.setSeldirs(false);
            performTests(s, sbFalse.toString());
            s.getCache().delete();

        } finally {
            cleanupBed();
            if (s!=null) s.getCache().delete();
        }
    }


    
    public void testScenario1() {
        BFT bft = null;
        ModifiedSelector s = null;
        try {
            
            
            
            makeBed();
            String results = null;

            
            s = (ModifiedSelector)getSelector();

            
            
            
            
            
            performTests(s, ""TTTTTTTTTTTT"");

            
            
            
            
            
            performTests(s, ""TFFFFFFFFFFT"");

            
            
            

            
            String f2name = ""tar/bz2/asf-logo-huge.tar.bz2"";
            String f3name = ""asf-logo.gif.md5"";
            String f4name = ""copy.filterset.filtered"";

            
            bft = new BFT();
            
            bft.writeProperties(""f2name=""+f2name);
            bft.writeProperties(""f3name=""+f3name);
            bft.writeProperties(""f4name=""+f4name);
            
            bft.doTarget(""modifiedselectortest-makeDirty"");


            
            
            
            
            results = selectionString(s);

            
            
            

            
            
            
            StringBuffer expected = new StringBuffer();
            for (int i=0; i<filenames.length; i++) {
                String ch = ""F"";
                if (files[i].isDirectory()) ch = ""T"";
                
                if (filenames[i].equalsIgnoreCase(f3name)) ch = ""T"";
                if (filenames[i].equalsIgnoreCase(f4name)) ch = ""T"";
                expected.append(ch);
            }

            assertEquals(
                ""Wrong files selected. Differing files: ""       
                + resolve(diff(expected.toString(), results)),  
                expected.toString(),                            
                results                                         
            );

        } finally {
            
            cleanupBed();
            if (s!=null) s.getCache().delete();
            if (bft!=null) bft.deletePropertiesfile();
        }
    }



    
    public void testScenario2() {
        ExtendSelector s = new ExtendSelector();
        BFT bft = new BFT();
        String cachefile = System.getProperty(""java.io.tmpdir"")+""/mycache.txt"";
        try {
            makeBed();

            s.setClassname(""org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector"");

            s.addParam(createParam(""cache.cachefile"", cachefile));
            
            s.addParam(createParam(""cache"",""propertyfile""));
            s.addParam(createParam(""update"",""true""));
            s.addParam(createParam(""comparator"",""rule""));
            s.addParam(createParam(""algorithm.name"",""sha""));
            s.addParam(createParam(""algorithm"",""digest""));

            
            performTests(s, ""TTTTTTTTTTTT"");
            performTests(s, ""TFFFFFFFFFFT"");
            
            String f2name = ""tar/bz2/asf-logo-huge.tar.bz2"";
            String f3name = ""asf-logo.gif.md5"";
            String f4name = ""copy.filterset.filtered"";
            bft.writeProperties(""f2name=""+f2name);
            bft.writeProperties(""f3name=""+f3name);
            bft.writeProperties(""f4name=""+f4name);
            bft.doTarget(""modifiedselectortest-makeDirty"");
            
            String results = selectionString(s);
            StringBuffer expected = new StringBuffer();
            for (int i=0; i<filenames.length; i++) {
                String ch = ""F"";
                if (files[i].isDirectory()) ch = ""T"";
                if (filenames[i].equalsIgnoreCase(f3name)) ch = ""T"";
                if (filenames[i].equalsIgnoreCase(f4name)) ch = ""T"";
                expected.append(ch);
            }
            assertEquals(
                ""Wrong files selected. Differing files: ""       
                + resolve(diff(expected.toString(), results)),  
                expected.toString(),                            
                results                                         
            );
        } finally {
            
            cleanupBed();
            (new java.io.File(cachefile)).delete();
            if (bft!=null) bft.deletePropertiesfile();
        }
    }


    
    public void testCreatePropertiesCacheDirect() {
        File basedir   = getSelector().getProject().getBaseDir();
        File cachefile = new File(basedir, ""cachefile.properties"");

        PropertiesfileCache cache = new PropertiesfileCache();
        cache.setCachefile(cachefile);

        cache.put(""key"", ""value"");
        cache.save();

        assertTrue(""Cachefile not created."", cachefile.exists());

        cache.delete();
        assertFalse(""Cachefile not deleted."", cachefile.exists());
    }


    
    public void testCreatePropertiesCacheViaModifiedSelector() {
        File basedir   = getSelector().getProject().getBaseDir();
        File cachefile = new File(basedir, ""cachefile.properties"");
        try {

            
            makeBed();

            
            ModifiedSelector s = (ModifiedSelector)getSelector();
            s.addParam(""cache.cachefile"", cachefile);

            ModifiedSelector.CacheName cacheName = new ModifiedSelector.CacheName();
            cacheName.setValue(""propertyfile"");
            s.setCache(cacheName);

            s.setUpdate(true);

            
            String results = selectionString(s);

            
            assertTrue(""Cache file is not created."", cachefile.exists());
        } finally {
            cleanupBed();
            if (cachefile!=null) cachefile.delete();
        }
    }


    
    public void testCreatePropertiesCacheViaCustomSelector() {
        File cachefile = org.apache.tools.ant.util.FileUtils.newFileUtils()
                         .createTempFile(""tmp-cache-"", "".properties"", null);
        try {
            
            makeBed();

            

            ExtendSelector s = new ExtendSelector();
            s.setClassname(""org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector"");
            s.addParam(createParam(""update"", ""true""));
            s.addParam(createParam(""cache.cachefile"", cachefile.getAbsolutePath()));
            s.addParam(createParam(""cache"", ""propertyfile""));

            
            String results = selectionString(s);

            
            assertTrue(""Cache file is not created."", cachefile.exists());
        } finally {
            cleanupBed();
            if (cachefile!=null) cachefile.delete();
        }
    }


    public void testEqualComparatorViaSelector() {
        ModifiedSelector s = (ModifiedSelector)getSelector();
        ModifiedSelector.ComparatorName compName = new ModifiedSelector.ComparatorName();
        compName.setValue(""equal"");
        s.setComparator(compName);
        try {
            performTests(s, ""TTTTTTTTTTTT"");
        } finally {
            s.getCache().delete();
        }
    }


    public void testRuleComparatorViaSelector() {
        ModifiedSelector s = (ModifiedSelector)getSelector();
        ModifiedSelector.ComparatorName compName = new ModifiedSelector.ComparatorName();
        compName.setValue(""rule"");
        s.setComparator(compName);
        try {
            performTests(s, ""TTTTTTTTTTTT"");
        } finally {
            s.getCache().delete();
        }
    }


    public void testHashvalueAlgorithm() {
        HashvalueAlgorithm algo = new HashvalueAlgorithm();
        doTest(algo);
    }

    public void testDigestAlgorithmMD5() {
        DigestAlgorithm algo = new DigestAlgorithm();
        algo.setAlgorithm(""MD5"");
        doTest(algo);
    }

    public void testDigestAlgorithmSHA() {
        DigestAlgorithm algo = new DigestAlgorithm();
        algo.setAlgorithm(""SHA"");
        doTest(algo);
    }


    public void testPropertyfileCache() {
        PropertiesfileCache cache = new PropertiesfileCache();
        File cachefile = new File(""cache.properties"");
        cache.setCachefile(cachefile);
        doTest(cache);
        assertFalse(""Cache file not deleted."", cachefile.exists());
    }


    public void testEqualComparator() {
        EqualComparator comp = new EqualComparator();
        doTest(comp);
    }


    public void testRuleComparator() {
        RuleBasedCollator comp = (RuleBasedCollator)RuleBasedCollator.getInstance();
        doTest(comp);
    }


    public void testScenarioCoreSelectorDefaults() {
        doScenarioTest(""modifiedselectortest-scenario-coreselector-defaults"", ""cache.properties"");
    }



    public void testSceanrioCoreSelectorSettings() {
        doScenarioTest(""modifiedselectortest-scenario-coreselector-settings"", ""core.cache.properties"");
    }


    public void testScenarioCustomSelectorSettings() {
        doScenarioTest(""modifiedselectortest-scenario-customselector-settings"", ""core.cache.properties"");
    }


    public void doScenarioTest(String target, String cachefilename) {
        BFT bft = new BFT();
        bft.setUp();
        File basedir = bft.getProject().getBaseDir();
        File cachefile = new File(basedir, cachefilename);
        try {
            
            bft.doTarget(""modifiedselectortest-scenario-clean"");
            bft.doTarget(target);

            
            File to1 = new File(basedir, ""selectortest/to-1"");
            File to2 = new File(basedir, ""selectortest/to-2"");
            File to3 = new File(basedir, ""selectortest/to-3"");

            
            assertTrue(""Cache file not created."", cachefile.exists());
            assertTrue(""Not enough files copied on first time."", to1.list().length>5);
            assertTrue(""Too much files copied on second time."", to2.list().length==0);
            assertTrue(""Too much files copied on third time."", to3.list().length==2);
        
        } finally {
            bft.doTarget(""modifiedselectortest-scenario-clean"");
            bft.deletePropertiesfile();
            bft.tearDown();
            cachefile.delete();
        }
    }


    


    
    protected void doTest(Algorithm algo) {
        assertTrue(""Algorithm not proper configured."", algo.isValid());
        try {
            makeBed();

            for (int i=0; i<files.length; i++) {
                File file = files[i];  
                if (file.isFile()) {
                    
                    String hash1 = algo.getValue(file);
                    String hash2 = algo.getValue(file);
                    String hash3 = algo.getValue(file);
                    String hash4 = algo.getValue(file);
                    String hash5 = algo.getValue(new File(file.getAbsolutePath()));

                    
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash1);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash2);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash3);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash4);
                    assertNotNull(""Hashvalue was null for ""+file.getAbsolutePath(), hash5);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash2);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash3);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash4);
                    assertEquals(""getHashvalue() returned different value for ""+file.getAbsolutePath(), hash1, hash5);
                }
            }
        } finally {
            cleanupBed();
        }
    }


    
    protected void doTest(Cache cache) {
        assertTrue(""Cache not proper configured."", cache.isValid());

        String key1   = ""key1"";
        String value1 = ""value1"";
        String key2   = ""key2"";
        String value2 = ""value2"";

        
        Iterator it1 = cache.iterator();
        assertFalse(""Cache is not empty"", it1.hasNext());

        
        cache.put(key1, value1);
        cache.put(key2, value2);
        assertEquals(""cache returned wrong value"", value1, cache.get(key1));
        assertEquals(""cache returned wrong value"", value2, cache.get(key2));

        
        Iterator it2 = cache.iterator();
        Object   returned = it2.next();
        boolean ok = (key1.equals(returned) || key2.equals(returned));
        String msg = ""Iterator returned unexpected value.""
                   + ""  key1.equals(returned)=""+key1.equals(returned)
                   + ""  key2.equals(returned)=""+key2.equals(returned)
                   + ""  returned=""+returned
                   + ""  ok=""+ok;
        assertTrue(msg, ok);

        
        cache.delete();
        Iterator it3 = cache.iterator();
        assertFalse(""Cache is not empty"", it1.hasNext());
    }


    
    protected void doTest(Comparator comp) {
        Object o1 = new String(""string1"");
        Object o2 = new String(""string2"");
        Object o3 = new String(""string2""); 

        assertTrue(""Comparator gave wrong value."", comp.compare(o1, o2) != 0);
        assertTrue(""Comparator gave wrong value."", comp.compare(o1, o3) != 0);
        assertTrue(""Comparator gave wrong value."", comp.compare(o2, o3) == 0);
    }


    


    private Parameter createParam(String name, String value) {
        Parameter p = new Parameter();
        p.setName(name);
        p.setValue(value);
        return p;
    }


    private class BFT extends org.apache.tools.ant.BuildFileTest {
        BFT() { super(""nothing""); }
        BFT(String name) {
            super(name);
        }
        String propfile = ""ModifiedSelectorTest.properties"";

        boolean isConfigured = false;

        public void setUp() {
            configureProject(""src/etc/testcases/types/selectors.xml"");
            isConfigured = true;
        }

        public void tearDown() { }

        public void doTarget(String target) {
            if (!isConfigured) setUp();
            executeTarget(target);
        }

        public void writeProperties(String line) {
            if (!isConfigured) setUp();
            File dir = getProject().getBaseDir();
            File file = new File(dir, propfile);
            try {
                java.io.FileWriter out = 
                    new java.io.FileWriter(file.getAbsolutePath(), true);
                out.write(line);
                out.write(System.getProperty(""line.separator""));
                out.flush();
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void deletePropertiesfile() {
            if (!isConfigured) setUp();
            new File(getProject().getBaseDir(), propfile).delete();
        }

        public org.apache.tools.ant.Project getProject() {
            return super.getProject();
        }
    }

}
"
L43375,Class,PresentSelectorTest,org.apache.tools.ant.types.selectors.PresentSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/PresentSelectorTest.java,76,1,202,2,0.455172,3,5,3,0.346457,0.412371,44,40,1,2,2,7,9,0,0,19,23,0.8,0.133929,15,15,4,1,0.133929,15,1,1,0,0,1,97,127,12,3,1,1,4,0,4,0,19,72,0,15,1,97,127,12,3,1,1,4,0,4,0,19,72,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Mapper;
import org.apache.tools.ant.util.FileNameMapper;
import org.apache.tools.ant.util.IdentityMapper;
import org.apache.tools.ant.util.GlobPatternMapper;

import java.io.File;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class PresentSelectorTest extends BaseSelectorTest {

    private Project project;

    public PresentSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new PresentSelector();
    }

    
    public void testValidate() {
        PresentSelector s = (PresentSelector)getInstance();
        try {
            s.createMapper();
            s.createMapper();
            fail(""PresentSelector allowed more than one nested mapper."");
        } catch (BuildException be1) {
            assertEquals(""Cannot define more than one mapper"",
                    be1.getMessage());
        }

        s = (PresentSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""PresentSelector did not check for required fields"");
        } catch (BuildException be2) {
            assertEquals(""The targetdir attribute is required."",
                    be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        PresentSelector s;
        String results;
        Mapper m;
        Mapper.MapperType identity = new Mapper.MapperType();
        identity.setValue(""identity"");
        Mapper.MapperType glob = new Mapper.MapperType();
        glob.setValue(""glob"");
        Mapper.MapperType merge = new Mapper.MapperType();
        merge.setValue(""merge"");
        Mapper.MapperType flatten = new Mapper.MapperType();
        flatten.setValue(""flatten"");

        try {
            makeBed();

            s = (PresentSelector)getInstance();
            s.setTargetdir(beddir);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (PresentSelector)getInstance();
            s.setTargetdir(beddir);
            m = s.createMapper();
            m.setType(identity);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (PresentSelector)getInstance();
            File subdir = new File(""src/etc/testcases/taskdefs/expected"");
            s.setTargetdir(subdir);
            m = s.createMapper();
            m.setType(flatten);
            results = selectionString(s);
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
                assertEquals(""TTTTTFFFFFFF"", results);
            } else {
                assertEquals(""TTTTTTTTTTTF"", results);
            }

            s = (PresentSelector)getInstance();
            s.setTargetdir(beddir);
            m = s.createMapper();
            m.setType(merge);
            m.setTo(""asf-logo.gif.gz"");
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (PresentSelector)getInstance();
            subdir = new File(beddir, ""tar/bz2"");
            s.setTargetdir(subdir);
            m = s.createMapper();
            m.setType(glob);
            m.setFrom(""*.bz2"");
            m.setTo(""*.tar.bz2"");
            results = selectionString(s);
            assertEquals(""FFTFFFFFFFFF"", results);

            try {
                makeMirror();

                s = (PresentSelector)getInstance();
                subdir = getProject().resolveFile(""selectortest2"");
                s.setTargetdir(subdir);
                results = mirrorSelectionString(s);
                assertEquals(""TTTFFTTTTTTT"", results);
                results = selectionString(s);
                assertEquals(""TTTFFTTTTTTT"", results);


            }
            finally {
                cleanupMirror();
            }

        }
        finally {
            cleanupBed();
        }

    }

}
"
L43391,Class,SizeSelectorTest,org.apache.tools.ant.types.selectors.SizeSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/SizeSelectorTest.java,71,1,243,2,0.522727,8,17,9,0.427746,0.468085,74,66,1,1,1,9,9,0,0,13,17,0.8,0.0961538,15,15,4,1,0.0961538,15,1,1,0,0,1,141,173,12,3,1,1,4,0,4,0,19,112,0,15,1,141,173,12,3,1,1,4,0,4,0,19,112,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class SizeSelectorTest extends BaseSelectorTest {

    private Project project;

    public SizeSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new SizeSelector();
    }

    
    public void testValidate() {
        SizeSelector s = (SizeSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""The value attribute is required, and must ""
                    + ""be positive"", be1.getMessage());
        }

        s = (SizeSelector)getInstance();
        s.setValue(-10);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector did not check for value being in the ""
                    + ""allowable range"");
        } catch (BuildException be2) {
            assertEquals(""The value attribute is required, and must ""
                    + ""be positive"", be2.getMessage());
        }

        s = (SizeSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = {param};
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector did not check for valid parameter element"");
        } catch (BuildException be3) {
            assertEquals(""Invalid parameter garbage in"", be3.getMessage());
        }

        s = (SizeSelector)getInstance();
        param = new Parameter();
        param.setName(""value"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector accepted bad value as parameter"");
        } catch (BuildException be4) {
            assertEquals(""Invalid size setting garbage out"",
                    be4.getMessage());
        }

        s = (SizeSelector)getInstance();
        Parameter param1 = new Parameter();
        Parameter param2 = new Parameter();
        param1.setName(""value"");
        param1.setValue(""5"");
        param2.setName(""units"");
        param2.setValue(""garbage out"");
        params = new Parameter[2];
        params[0] = param1;
        params[1] = param2;
        try {
            s.setParameters(params);
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector accepted bad units as parameter"");
        } catch (BuildException be5) {
            assertEquals(""garbage out is not a legal value for this attribute"",
                    be5.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        SizeSelector s;
        String results;

        SizeSelector.ByteUnits kilo = new SizeSelector.ByteUnits();
        kilo.setValue(""K"");
        SizeSelector.ByteUnits kibi = new SizeSelector.ByteUnits();
        kibi.setValue(""Ki"");
        SizeSelector.ByteUnits tibi = new SizeSelector.ByteUnits();
        tibi.setValue(""Ti"");
        SizeSelector.SizeComparisons less = new SizeSelector.SizeComparisons();
        less.setValue(""less"");
        SizeSelector.SizeComparisons equal = new SizeSelector.SizeComparisons();
        equal.setValue(""equal"");
        SizeSelector.SizeComparisons more = new SizeSelector.SizeComparisons();
        more.setValue(""more"");


        try {
            makeBed();

            s = (SizeSelector)getInstance();
            s.setValue(10);
            s.setWhen(less);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(10);
            s.setWhen(more);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(32);
            s.setWhen(equal);
            results = selectionString(s);
            assertEquals(""TTFFTFFFFFFT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(7);
            s.setWhen(more);
            s.setUnits(kilo);
            results = selectionString(s);
            assertEquals(""TFTFFTTTTTTT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(7);
            s.setWhen(more);
            s.setUnits(kibi);
            results = selectionString(s);
            assertEquals(""TFTFFFTTFTTT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(99999);
            s.setWhen(more);
            s.setUnits(tibi);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (SizeSelector)getInstance();
            Parameter param1 = new Parameter();
            Parameter param2 = new Parameter();
            Parameter param3 = new Parameter();
            param1.setName(""value"");
            param1.setValue(""20"");
            param2.setName(""units"");
            param2.setValue(""Ki"");
            param3.setName(""when"");
            param3.setValue(""more"");
            Parameter[] params = {param1,param2,param3};
            s.setParameters(params);
            results = selectionString(s);
            assertEquals(""TFFFFFFTFFTT"", results);
        }
        finally {
            cleanupBed();
        }

    }

}
"
L43406,Class,TypeSelectorTest,org.apache.tools.ant.types.selectors.TypeSelectorTest,L41908,L103,src/testcases/org/apache/tools/ant/types/selectors/TypeSelectorTest.java,76,1,139,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,5,6,0,0,8,12,0.8,0.275862,16,16,4,1,0.275862,16,1,1,0,0,1,42,64,11,3,0,1,4,0,4,0,19,24,0,15,1,42,64,11,3,0,1,4,0,4,0,19,24,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.text.SimpleDateFormat;
import java.text.ParsePosition;
import java.util.Date;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class TypeSelectorTest extends BaseSelectorTest {

    public TypeSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new TypeSelector();
    }

    
    public void testValidate() {
        TypeSelector s = (TypeSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""TypeSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""The type attribute is required""
                    , be1.getMessage());
        }
    }

    
    public void testSelectionBehaviour() {
        TypeSelector s;
        String results;

        TypeSelector.FileType directory = new
                TypeSelector.FileType();
        directory.setValue(""dir"");
        TypeSelector.FileType file = new
                TypeSelector.FileType();
        file.setValue(""file"");

        try {
            makeBed();

            s = (TypeSelector)getInstance();
            s.setType(directory);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (TypeSelector)getInstance();
            s.setType(file);
            results = selectionString(s);
            assertEquals(""FTTTTTTTTTTF"", results);


        }
        finally {
            cleanupBed();
        }

    }

}
"
L45798,Class,CollectionUtilsTest,org.apache.tools.ant.util.CollectionUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/CollectionUtilsTest.java,70,1,139,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,1,0,0,2,5,0.25,0.0821918,6,6,1,3,0.0821918,6,0,0,0,0,0,67,70,0,0,0,0,3,0,3,0,3,59,0,3,0,67,70,0,0,0,0,3,0,3,0,3,59,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import java.util.Hashtable;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;

import junit.framework.TestCase;


public class CollectionUtilsTest extends TestCase {

    public CollectionUtilsTest(String name) {
        super(name);
    }

    public void testVectorEquals() {
        assertTrue(!CollectionUtils.equals(null, new Vector()));
        assertTrue(!CollectionUtils.equals(new Vector(), null));
        assertTrue(CollectionUtils.equals(new Vector(), new Vector()));
        Vector v1 = new Vector();
        Stack s2 = new Stack();
        v1.addElement(""foo"");
        s2.push(""foo"");
        assertTrue(CollectionUtils.equals(v1, s2));
        assertTrue(CollectionUtils.equals(s2, v1));
        v1.addElement(""bar"");
        assertTrue(!CollectionUtils.equals(v1, s2));
        assertTrue(!CollectionUtils.equals(s2, v1));
        s2.push(""bar"");
        assertTrue(CollectionUtils.equals(v1, s2));
        assertTrue(CollectionUtils.equals(s2, v1));
        s2.push(""baz"");
        assertTrue(!CollectionUtils.equals(v1, s2));
        assertTrue(!CollectionUtils.equals(s2, v1));
        v1.addElement(""baz"");
        assertTrue(CollectionUtils.equals(v1, s2));
        assertTrue(CollectionUtils.equals(s2, v1));
        v1.addElement(""zyzzy"");
        s2.push(""zyzzy2"");
        assertTrue(!CollectionUtils.equals(v1, s2));
        assertTrue(!CollectionUtils.equals(s2, v1));
    }

    public void testDictionaryEquals() {
        assertTrue(!CollectionUtils.equals(null, new Hashtable()));
        assertTrue(!CollectionUtils.equals(new Hashtable(), null));
        assertTrue(CollectionUtils.equals(new Hashtable(), new Properties()));
        Hashtable h1 = new Hashtable();
        Properties p2 = new Properties();
        h1.put(""foo"", """");
        p2.put(""foo"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        h1.put(""bar"", """");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
        p2.put(""bar"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        p2.put(""baz"", """");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
        h1.put(""baz"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        h1.put(""zyzzy"", """");
        p2.put(""zyzzy2"", """");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
        p2.put(""zyzzy"", """");
        h1.put(""zyzzy2"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        h1.put(""dada"", ""1"");
        p2.put(""dada"", ""2"");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
    }
}
"
L45823,Class,DOMElementWriterTest,org.apache.tools.ant.util.DOMElementWriterTest,L44233,L103,src/testcases/org/apache/tools/ant/util/DOMElementWriterTest.java,66,1,133,2,0.257143,4,4,4,0.191176,0.209677,13,13,1,0,0,5,1,0,0,4,9,0.166667,0.0746269,5,5,1,5,0.0746269,5,0,0,0,0,0,62,68,1,0,1,0,5,0,5,0,5,48,0,5,0,62,68,1,0,1,0,5,0,5,0,5,48,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class DOMElementWriterTest extends TestCase {

    private DOMElementWriter w = new DOMElementWriter();

    public DOMElementWriterTest(String name) {
        super(name);
    }

    public void testIsReference() {
        assertTrue(""&#20;"", w.isReference(""&#20;""));
        assertTrue(""&#x20;"", w.isReference(""&#x20;""));
        assertTrue(""&#xA0;"", w.isReference(""&#xA0;""));
        assertTrue(""&#A0;"", !w.isReference(""&#A0;""));
        assertTrue(""20;"", !w.isReference(""20;""));
        assertTrue(""&#20"", !w.isReference(""&#20""));
        assertTrue(""&quot;"", w.isReference(""&quot;""));
        assertTrue(""&apos;"", w.isReference(""&apos;""));
        assertTrue(""&gt;"", w.isReference(""&gt;""));
        assertTrue(""&lt;"", w.isReference(""&lt;""));
        assertTrue(""&amp;"", w.isReference(""&amp;""));
    }

    public void testEncode() {
        assertEquals(""&#20;"", w.encode(""&#20;""));
        assertEquals(""&#x20;"", w.encode(""&#x20;""));
        assertEquals(""&#xA0;"", w.encode(""&#xA0;""));
        assertEquals(""&amp;#A0;"", w.encode(""&#A0;""));
        assertEquals(""20;"", w.encode(""20;""));
        assertEquals(""&amp;#20"", w.encode(""&#20""));
        assertEquals(""&quot;"", w.encode(""&quot;""));
        assertEquals(""&apos;"", w.encode(""&apos;""));
        assertEquals(""&gt;"", w.encode(""&gt;""));
        assertEquals(""&lt;"", w.encode(""&lt;""));
        assertEquals(""&amp;"", w.encode(""&amp;""));
        assertEquals(""&quot;"", w.encode(""\""""));
        assertEquals(""&lt;"", w.encode(""<""));
        assertEquals(""&amp;"", w.encode(""&""));
        assertEquals("""", w.encode(""\u0017""));
        assertEquals(""&#20;\""20;&"", w.encodedata(""&#20;\""20;&""));
        assertEquals("""", w.encodedata(""\u0017""));
    }

    public void testIsLegalCharacter() {
        assertTrue(""0x00"", !w.isLegalCharacter('\u0000'));
        assertTrue(""0x09"", w.isLegalCharacter('\t'));
        assertTrue(""0x0A"", w.isLegalCharacter('\n'));
        assertTrue(""0x0C"", w.isLegalCharacter('\r'));
        assertTrue(""0x1F"", !w.isLegalCharacter('\u001F'));
        assertTrue(""0x20"", w.isLegalCharacter('\u0020'));
        assertTrue(""0xD7FF"", w.isLegalCharacter('\uD7FF'));
        assertTrue(""0xD800"", !w.isLegalCharacter('\uD800'));
        assertTrue(""0xDFFF"", !w.isLegalCharacter('\uDFFF'));
        assertTrue(""0xE000"", w.isLegalCharacter('\uE000'));
        assertTrue(""0xFFFD"", w.isLegalCharacter('\uFFFD'));
        assertTrue(""0xFFFE"", !w.isLegalCharacter('\uFFFE'));
    }

    public void testCDATAEndEncoding() {
        assertEquals(""]>"", w.encodedata(""]>""));
        assertEquals(""]]"", w.encodedata(""]]""));
        assertEquals(""&#x5d;&#x5d;&gt;"", w.encodedata(""]]>""));
        assertEquals(""&#x5d;&#x5d;&gt;A"", w.encodedata(""]]>A""));
        assertEquals(""A&#x5d;&#x5d;&gt;"", w.encodedata(""A]]>""));
        assertEquals(""A&#x5d;&#x5d;&gt;A"", w.encodedata(""A]]>A""));
        assertEquals(""A&#x5d;&#x5d;&gt;B&#x5d;&#x5d;&gt;C"",
                     w.encodedata(""A]]>B]]>C""));
    }
}
"
L45804,Class,DateUtilsTest,org.apache.tools.ant.util.DateUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/DateUtilsTest.java,68,1,130,2,0.0,0,0,0,0.0,0.0,0,0,6,0,0,7,1,0,0,4,11,0.125,0.15873,10,6,1,7,0.15873,10,0,0,0,0,0,53,63,0,0,0,0,7,0,7,0,7,33,0,7,0,53,63,0,0,0,0,7,0,7,0,7,33,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;

import junit.framework.TestCase;


public class DateUtilsTest extends TestCase {
    public DateUtilsTest(String s) {
        super(s);
    }

    public void testElapsedTime(){
        String text = DateUtils.formatElapsedTime(50*1000);
        assertEquals(""50 seconds"", text);
        text = DateUtils.formatElapsedTime(65*1000);
        assertEquals(""1 minute 5 seconds"", text);
        text = DateUtils.formatElapsedTime(120*1000);
        assertEquals(""2 minutes 0 seconds"", text);
        text = DateUtils.formatElapsedTime(121*1000);
        assertEquals(""2 minutes 1 second"", text);
    }

    public void testDateTimeISO(){
        TimeZone timeZone = TimeZone.getTimeZone(""GMT+1"");
        Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002,1,23,10,11,12);
        String text = DateUtils.format(cal.getTime(),
                DateUtils.ISO8601_DATETIME_PATTERN);
        assertEquals(""2002-02-23T09:11:12"", text);
    }

    public void testDateISO(){
        TimeZone timeZone = TimeZone.getTimeZone(""GMT"");
        Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002,1,23);
        String text = DateUtils.format(cal.getTime(),
                DateUtils.ISO8601_DATE_PATTERN);
        assertEquals(""2002-02-23"", text);
    }

    public void testTimeISODate(){
        
        TimeZone timeZone = TimeZone.getTimeZone(""GMT+1"");
        Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002,1,23, 21, 11, 12);
        String text = DateUtils.format(cal.getTime(),
                DateUtils.ISO8601_TIME_PATTERN);
        assertEquals(""20:11:12"", text);
    }

    public void testTimeISO(){
        
        long ms = (20*3600 + 11*60 + 12)*1000;
        String text = DateUtils.format(ms,
                DateUtils.ISO8601_TIME_PATTERN);
        assertEquals(""20:11:12"", text);
    }

    public void testPhaseOfMoon() {
        TimeZone timeZone = TimeZone.getTimeZone(""GMT"");
        Calendar cal = Calendar.getInstance(timeZone);
        
        cal.set(2002, 2, 27);
        assertEquals(4, DateUtils.getPhaseOfMoon(cal));
        
        cal.set(2002, 2, 12);
        assertEquals(0, DateUtils.getPhaseOfMoon(cal));
    }
}
"
L45833,Class,FileUtilsTest,org.apache.tools.ant.util.FileUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/FileUtilsTest.java,70,1,504,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,34,3,0,0,11,26,0.571429,0.235872,96,36,8,6,0.235872,96,0,0,0,0,0,311,435,3,0,3,0,15,0,13,1,15,171,0,13,1,311,435,3,0,3,0,15,0,13,1,15,171,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import java.io.*;

import junit.framework.TestCase;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.condition.Os;


public class FileUtilsTest extends TestCase {

    private FileUtils fu;
    private File removeThis;
    private String root;

    public FileUtilsTest(String name) {
        super(name);
    }

    public void setUp() {
        fu = FileUtils.newFileUtils();
        
        root = new File(File.separator).getAbsolutePath().toUpperCase();
    }

    public void tearDown() {
        if (removeThis != null && removeThis.exists()) {
            removeThis.delete();
        }
    }

    public void testSetLastModified() throws IOException {
        removeThis = new File(""dummy"");
        FileOutputStream fos = new FileOutputStream(removeThis);
        fos.write(new byte[0]);
        fos.close();
        long modTime = removeThis.lastModified();
        assertTrue(modTime != 0);

        
        try {
            Thread.currentThread().sleep(5000);
        } catch (InterruptedException ie) {
            fail(ie.getMessage());
        }

        fu.setFileLastModified(removeThis, -1);
        long secondModTime = removeThis.lastModified();
        try {
            Class.forName(""java.lang.ThreadLocal"");
            assertTrue(secondModTime > modTime);
        } catch (ClassNotFoundException e) {
            
            assertEquals(modTime, secondModTime);
        }


        
        final int millisperday=24 * 3600 * 1000;
        
        
        
        fu.setFileLastModified(removeThis, secondModTime + millisperday);
        long thirdModTime = removeThis.lastModified();
        try {
            Class.forName(""java.lang.ThreadLocal"");
            
            assertTrue(thirdModTime != secondModTime);
        } catch (ClassNotFoundException e) {
            
            assertEquals(modTime, thirdModTime);
        }
    }

    public void testResolveFile() {
        
        assertEquals(File.separator,
                     fu.resolveFile(null, ""/"").getPath());
        assertEquals(File.separator,
                     fu.resolveFile(null, ""\\"").getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"",
                     fu.resolveFile(null, driveSpec + ""/"").getPath());
        assertEquals(driveSpec + ""\\"",
                     fu.resolveFile(null, driveSpec + ""\\"").getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"",
                     fu.resolveFile(null, driveSpecLower + ""/"").getPath());
        assertEquals(driveSpec + ""\\"",
                     fu.resolveFile(null, driveSpecLower + ""\\"").getPath());
        
        assertEquals(driveSpec + ""\\"",
                     fu.resolveFile(null, driveSpec + ""
        assertEquals(driveSpec + ""\\"",
                     fu.resolveFile(null, driveSpec + ""\\\\\\\\\\\\"").getPath());

        if (Os.isFamily(""netware"")) {
            
            driveSpec = ""SYS:"";
            assertEquals(driveSpec,
                         fu.resolveFile(null, driveSpec + ""/"").getPath());
            assertEquals(driveSpec,
                         fu.resolveFile(null, driveSpec + ""\\"").getPath());
            driveSpecLower = ""sys:"";
            assertEquals(driveSpec,
                         fu.resolveFile(null, driveSpecLower + ""/"").getPath());
            assertEquals(driveSpec,
                         fu.resolveFile(null, driveSpecLower + ""\\"").getPath());
            
            assertEquals(driveSpec,
                         fu.resolveFile(null, driveSpec + ""
            assertEquals(driveSpec,
                         fu.resolveFile(null, driveSpec + ""\\\\\\\\\\\\"").getPath());
        }

        
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""./4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), "".\\4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""./.\\4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""../3/4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""..\\3\\4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""../../5/.././2/./3/6/../4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""..\\../5/..\\./2/./3/6\\../4"").getPath());

        try {
            fu.resolveFile(new File(localize(""/1"")), ""../../b"");
            fail(""successfully crawled beyond the filesystem root"");
        } catch (BuildException e) {
            
        }

    }

    public void testNormalize() {
        
        assertEquals(File.separator,
                     fu.normalize(""/"").getPath());
        assertEquals(File.separator,
                     fu.normalize(""\\"").getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec,
                     fu.normalize(driveSpec).getPath());
        assertEquals(driveSpec + ""\\"",
                     fu.normalize(driveSpec + ""/"").getPath());
        assertEquals(driveSpec + ""\\"",
                     fu.normalize(driveSpec + ""\\"").getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"",
                     fu.normalize(driveSpecLower + ""/"").getPath());
        assertEquals(driveSpec + ""\\"",
                     fu.normalize(driveSpecLower + ""\\"").getPath());
        
        assertEquals(driveSpec + ""\\"",
                     fu.normalize(driveSpec + ""
        assertEquals(driveSpec + ""\\"",
                     fu.normalize(driveSpec + ""\\\\\\\\\\\\"").getPath());

        if (Os.isFamily(""netware"")) {
            
            driveSpec = ""SYS:"";
            assertEquals(driveSpec,
                         fu.normalize(driveSpec).getPath());
            assertEquals(driveSpec,
                         fu.normalize(driveSpec + ""/"").getPath());
            assertEquals(driveSpec,
                         fu.normalize(driveSpec + ""\\"").getPath());
            driveSpecLower = ""sys:"";
            assertEquals(driveSpec,
                         fu.normalize(driveSpecLower).getPath());
            assertEquals(driveSpec,
                         fu.normalize(driveSpecLower + ""/"").getPath());
            assertEquals(driveSpec,
                         fu.normalize(driveSpecLower + ""\\"").getPath());
            assertEquals(driveSpec + ""\\junk"",
                         fu.normalize(driveSpecLower + ""\\junk"").getPath());
            
            assertEquals(driveSpec,
                         fu.normalize(driveSpec + ""
            assertEquals(driveSpec,
                         fu.normalize(driveSpec + ""\\\\\\\\\\\\"").getPath());
        }

        
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/./4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/.\\4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/./.\\4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/../3/4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/..\\3\\4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/../../5/.././2/./3/6/../4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/..\\../5/..\\./2/./3/6\\../4"")).getPath());

        try {
            fu.normalize(""foo"");
            fail(""foo is not an absolute path"");
        } catch (BuildException e) {
            
        }

        try {
            fu.normalize(localize(""/1/../../b""));
            fail(""successfully crawled beyond the filesystem root"");
        } catch (BuildException e) {
            
        }
    }

    
    public void testNullArgs() {
        try {
            fu.normalize(null);
            fail(""successfully normalized a null-file"");
        } catch (NullPointerException npe) {
            
        }

        File f = fu.resolveFile(null, ""a"");
        assertEquals(f, new File(""a""));
    }

    
    public void testCreateTempFile() {
        File parent = new File((new File(""/tmp"")).getAbsolutePath());
        File tmp1 = fu.createTempFile(""pre"", "".suf"", parent);
        assertTrue(""new file"", !tmp1.exists());

        String name = tmp1.getName();
        assertTrue(""starts with pre"", name.startsWith(""pre""));
        assertTrue(""ends with .suf"", name.endsWith("".suf""));
        assertEquals(""is inside parent dir"",
                     parent.getAbsolutePath(),
                     tmp1.getParent());

        File tmp2 = fu.createTempFile(""pre"", "".suf"", parent);
        assertTrue(""files are different"",
                   !tmp1.getAbsolutePath().equals(tmp2.getAbsolutePath()));

        
        File tmp3 = fu.createTempFile(""pre"", "".suf"", null);
        String  tmploc = System.getProperty(""java.io.tmpdir"");
        assertEquals((new File(tmploc, tmp3.getName())).getAbsolutePath(),
                     tmp3.getAbsolutePath());
    }

    
    public void testContentEquals() throws IOException {
        assertTrue(""Non existing files"", fu.contentEquals(new File(""foo""),
                                                          new File(""bar"")));
        assertTrue(""One exists, the other one doesn\'t"",
                   !fu.contentEquals(new File(""foo""), new File(""build.xml"")));
        assertTrue(""Don\'t compare directories"",
                   !fu.contentEquals(new File(""src""), new File(""src"")));
        assertTrue(""File equals itself"",
                   fu.contentEquals(new File(""build.xml""),
                                    new File(""build.xml"")));
        assertTrue(""Files are different"",
                   !fu.contentEquals(new File(""build.xml""),
                                     new File(""docs.xml"")));
    }

    
    public void testCreateNewFile() throws IOException {
        removeThis = new File(""dummy"");
        assertTrue(!removeThis.exists());
        fu.createNewFile(removeThis);
        assertTrue(removeThis.exists());
    }

    
    public void testRemoveLeadingPath() {
        assertEquals(""bar"", fu.removeLeadingPath(new File(""/foo""),
                                                 new File(""/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""/foo/""),
                                                 new File(""/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""\\foo""),
                                                 new File(""\\foo\\bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""\\foo\\""),
                                                 new File(""\\foo\\bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:/foo""),
                                                 new File(""c:/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:/foo/""),
                                                 new File(""c:/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:\\foo""),
                                                 new File(""c:\\foo\\bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:\\foo\\""),
                                                 new File(""c:\\foo\\bar"")));
        assertEqualsIgnoreDriveCase(fu.normalize(""/bar"").getAbsolutePath(),
                     fu.removeLeadingPath(new File(""/foo""), new File(""/bar"")));
        assertEqualsIgnoreDriveCase(fu.normalize(""/foobar"").getAbsolutePath(),
                     fu.removeLeadingPath(new File(""/foo""), new File(""/foobar"")));
        
        assertEquals("""", fu.removeLeadingPath(new File(""/foo/bar""),
                                              new File(""/foo/bar"")));
        assertEquals("""", fu.removeLeadingPath(new File(""/foo/bar""),
                                              new File(""/foo/bar/"")));
        assertEquals("""", fu.removeLeadingPath(new File(""/foo/bar/""),
                                              new File(""/foo/bar/"")));
        assertEquals("""", fu.removeLeadingPath(new File(""/foo/bar/""),
                                              new File(""/foo/bar"")));

        String expected = ""foo/bar"".replace('\\', File.separatorChar)
            .replace('/', File.separatorChar);
        assertEquals(expected, fu.removeLeadingPath(new File(""/""),
                                                    new File(""/foo/bar"")));
        assertEquals(expected, fu.removeLeadingPath(new File(""c:/""),
                                                    new File(""c:/foo/bar"")));
        assertEquals(expected, fu.removeLeadingPath(new File(""c:\\""),
                                                    new File(""c:\\foo\\bar"")));
    }

    
    public void testToURI() {
        String dosRoot = null;
        if (Os.isFamily(""dos"")) {
            dosRoot = System.getProperty(""user.dir"").charAt(0) + "":/"";
        }
        else
        {
            dosRoot = """";
        }
        if (Os.isFamily(""dos"")) {
            assertEquals(""file:
        }
        if (Os.isFamily(""netware"")) {
            assertEquals(""file:
        }
        assertEquals(""file:
        assertEquals(""file:./foo"",  fu.toURI(""./foo""));
        assertEquals(""file:
        assertEquals(""file:./foo"",  fu.toURI("".\\foo""));
        assertEquals(""file:
        assertEquals(""file:
        assertEquals(""file:
        assertEquals(""file:
    }

    
    public void testFromURI() {
        if (Os.isFamily(""netware"")) {
            assertEqualsIgnoreDriveCase(""SYS:\\foo"", fu.fromURI(""file:
        }
        if (Os.isFamily(""dos"")) {
            assertEqualsIgnoreDriveCase(""C:\\foo"", fu.fromURI(""file:
        }
        assertEqualsIgnoreDriveCase(localize(""/foo""), fu.fromURI(""file:
        assertEquals(""."" + File.separator + ""foo"",
                     fu.fromURI(""file:./foo""));
        assertEqualsIgnoreDriveCase(localize(""/foo bar""), fu.fromURI(""file:
        assertEqualsIgnoreDriveCase(localize(""/foo#bar""), fu.fromURI(""file:
    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    
    private void assertEqualsIgnoreDriveCase(String s1, String s2) {
        if (Os.isFamily(""dos"") && s1.length()>=1 && s2.length()>=1) {
            StringBuffer sb1= new StringBuffer(s1);
            StringBuffer sb2= new StringBuffer(s2);
            sb1.setCharAt(0,Character.toUpperCase(s1.charAt(0)));
            sb2.setCharAt(0,Character.toUpperCase(s2.charAt(0)));
            assertEquals(sb1.toString(),sb2.toString());
        }   else {
            assertEquals(s1,s2);
        }
    }
}
"
L45871,Class,GlobPatternMapperTest,org.apache.tools.ant.util.GlobPatternMapperTest,L44233,L103,src/testcases/org/apache/tools/ant/util/GlobPatternMapperTest.java,66,1,137,2,0.466667,1,2,2,0.416667,0.440678,30,26,4,0,0,5,1,0,0,3,8,0.166667,0.132353,9,5,1,5,0.132353,9,0,0,0,0,0,59,72,0,0,0,0,5,0,5,0,5,47,0,5,0,59,72,0,0,0,0,5,0,5,0,5,47,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class GlobPatternMapperTest extends TestCase {

    public GlobPatternMapperTest(String name) {
        super(name);
    }

    public void testNoPatternAtAll() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""foobar"");
        m.setTo(""baz"");
        assertNull(""Shouldn\'t match foobar"", m.mapFileName(""plonk""));
        String[] result = m.mapFileName(""foobar"");
        assertNotNull(""Should match foobar"", result);
        assertEquals(""only one result for foobar"", 1, result.length);
        assertEquals(""baz"", result[0]);
    }

    public void testPostfixOnly() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""*foo"");
        m.setTo(""*plonk"");
        assertNull(""Shouldn\'t match *foo"", m.mapFileName(""bar.baz""));
        String[] result = m.mapFileName(""bar.foo"");
        assertNotNull(""Should match *.foo"", result);
        assertEquals(""only one result for bar.foo"", 1, result.length);
        assertEquals(""bar.plonk"", result[0]);

        
        m.setTo(""foo*"");
        result = m.mapFileName(""bar.foo"");
        assertEquals(""foobar."", result[0]);
    }

    public void testPrefixOnly() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""foo*"");
        m.setTo(""plonk*"");
        assertNull(""Shouldn\'t match foo*"", m.mapFileName(""bar.baz""));
        String[] result = m.mapFileName(""foo.bar"");
        assertNotNull(""Should match foo*"", result);
        assertEquals(""only one result for foo.bar"", 1, result.length);
        assertEquals(""plonk.bar"", result[0]);

        
        m.setTo(""*foo"");
        result = m.mapFileName(""foo.bar"");
        assertEquals("".barfoo"", result[0]);
    }

    public void testPreAndPostfix() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""foo*bar"");
        m.setTo(""plonk*pling"");
        assertNull(""Shouldn\'t match foo*bar"", m.mapFileName(""bar.baz""));
        String[] result = m.mapFileName(""foo.bar"");
        assertNotNull(""Should match foo*bar"", result);
        assertEquals(""only one result for foo.bar"", 1, result.length);
        assertEquals(""plonk.pling"", result[0]);

        
        result = m.mapFileName(""foo.baz.bar"");
        assertNotNull(""Should match foo*bar"", result);
        assertEquals(""only one result for foo.baz.bar"", 1, result.length);
        assertEquals(""plonk.baz.pling"", result[0]);

        
        result = m.mapFileName(""foobar"");
        assertNotNull(""Should match foo*bar"", result);
        assertEquals(""only one result for foobar"", 1, result.length);
        assertEquals(""plonkpling"", result[0]);
    }
}
"
L45887,Class,JAXPUtilsTest,org.apache.tools.ant.util.JAXPUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/JAXPUtilsTest.java,64,1,80,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,3,1,0,0,1,3,0.333333,0.2,4,4,1,2,0.2,4,0,0,0,0,0,16,17,0,0,0,0,2,0,2,0,2,8,0,2,0,16,17,0,0,0,0,2,0,2,0,2,8,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import junit.framework.TestCase;

import java.io.File;


public class JAXPUtilsTest extends TestCase {
    public JAXPUtilsTest(String name){
        super(name);
    }

    public void testGetSystemId(){
        File file = null;
        if ( File.separatorChar == '\\' ){
            file = new File(""d:\\jdk"");
        } else {
            file = new File(""/user/local/bin"");
        }
        String systemid = JAXPUtils.getSystemId(file);
        assertTrue(""SystemIDs should start by file:
        assertTrue(""SystemIDs should not start with file:
    }
}
"
L45880,Class,JavaEnvUtilsTest,org.apache.tools.ant.util.JavaEnvUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/JavaEnvUtilsTest.java,68,1,175,2,0.0,0,0,0,0.0,0.0,0,0,3,3,3,18,3,0,0,7,11,0.2,0.0824742,8,5,1,4,0.0824742,8,0,0,0,0,0,89,108,0,0,0,0,4,0,4,0,4,47,0,4,0,89,108,0,0,0,0,4,0,4,0,4,47,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.TestCase;

import org.apache.tools.ant.taskdefs.condition.Os;


public class JavaEnvUtilsTest extends TestCase {
    public JavaEnvUtilsTest(String s) {
        super(s);
    }

    public void testGetExecutableNetware() {
        if (Os.isName(""netware"")) {
            assertEquals(""java"", JavaEnvUtils.getJreExecutable(""java""));
            assertEquals(""javac"", JavaEnvUtils.getJdkExecutable(""javac""));
            assertEquals(""foo"", JavaEnvUtils.getJreExecutable(""foo""));
            assertEquals(""foo"", JavaEnvUtils.getJdkExecutable(""foo""));
        }
    }

    public void testGetExecutableWindows() {
        if (Os.isFamily(""windows"")) {
            FileUtils fileUtils = FileUtils.newFileUtils();
            String javaHome =
                fileUtils.normalize(System.getProperty(""java.home""))
                .getAbsolutePath();

            String j = JavaEnvUtils.getJreExecutable(""java"");
            assertTrue(j.endsWith("".exe""));
            assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());
            try {
                assertTrue(j+"" is normalized and in the JRE dir"",
                           j.startsWith(javaHome));
            } catch (AssertionFailedError e) {
                
                assertEquals(""java.exe"", j);
            }

            j = JavaEnvUtils.getJdkExecutable(""javac"");
            assertTrue(j.endsWith("".exe""));
            try {
                assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());
                String javaHomeParent =
                    fileUtils.normalize(javaHome+""/.."").getAbsolutePath();
                assertTrue(j+"" is normalized and in the JDK dir"",
                           j.startsWith(javaHomeParent));

                if (JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_0 ||
                    JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_1) {
                    assertTrue(j+"" is normalized and in the JRE dir"",
                               j.startsWith(javaHome));
                } else {
                    assertTrue(j+"" is normalized and not in the JRE dir"",
                               !j.startsWith(javaHome));
                }

            } catch (AssertionFailedError e) {
                
                assertEquals(""javac.exe"", j);
            }

            assertEquals(""foo.exe"", JavaEnvUtils.getJreExecutable(""foo""));
            assertEquals(""foo.exe"", JavaEnvUtils.getJdkExecutable(""foo""));
        }
    }

    public void testGetExecutableMostPlatforms() {
        if (!Os.isName(""netware"") && !Os.isFamily(""windows"")) {
            FileUtils fileUtils = FileUtils.newFileUtils();
            String javaHome =
                fileUtils.normalize(System.getProperty(""java.home""))
                .getAbsolutePath();

            
            String extension = Os.isFamily(""dos"") ? "".exe"" : """";

            String j = JavaEnvUtils.getJreExecutable(""java"");
            if (!extension.equals("""")) {
                assertTrue(j.endsWith(extension));
            }
            assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());
            assertTrue(j+"" is normalized and in the JRE dir"",
                       j.startsWith(javaHome));

            j = JavaEnvUtils.getJdkExecutable(""javac"");
            if (!extension.equals("""")) {
                assertTrue(j.endsWith(extension));
            }
            assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());

            String javaHomeParent =
                fileUtils.normalize(javaHome+""/.."").getAbsolutePath();
            assertTrue(j+"" is normalized and in the JDK dir"",
                       j.startsWith(javaHomeParent));

            if (JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_0 ||
                JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_1 ||
                Os.isFamily(""mac"")) {
                assertTrue(j+"" is normalized and in the JRE dir"",
                           j.startsWith(javaHome));
            } else {
                assertTrue(j+"" is normalized and not in the JRE dir"",
                           !j.startsWith(javaHome));
            }

            assertEquals(""foo""+extension,
                         JavaEnvUtils.getJreExecutable(""foo""));
            assertEquals(""foo""+extension,
                         JavaEnvUtils.getJdkExecutable(""foo""));
        }

    }

}
"
L45892,Class,LazyFileOutputStreamTest,org.apache.tools.ant.util.LazyFileOutputStreamTest,L44233,L103,src/testcases/org/apache/tools/ant/util/LazyFileOutputStreamTest.java,63,1,105,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,7,1,0,0,5,12,0.125,0.0769231,3,3,1,7,0.0769231,3,0,0,0,0,0,36,43,2,0,2,0,7,0,7,1,7,16,0,7,1,36,43,2,0,2,0,7,0,7,1,7,16,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.io.File;
import java.io.IOException;
import junit.framework.TestCase;


public class LazyFileOutputStreamTest extends TestCase {
    private LazyFileOutputStream los;
    private final static File f = new File(""test.txt"");

    public LazyFileOutputStreamTest(String s) {
        super(s);
    }

    public void setUp() {
        los = new LazyFileOutputStream(f);
    }

    public void tearDown() throws IOException {
        try {
            los.close();
        } finally {
            f.delete();
        }
    }

    public void testNoFileWithoutWrite() throws IOException {
        los.close();
        assertTrue(f + "" has not been written."", !f.exists());
    }

    public void testOpen() throws IOException {
        los.open();
        los.close();
        assertTrue(f + "" has been written."", f.exists());
    }

    public void testSingleByte() throws IOException {
        los.write(0);
        los.close();
        assertTrue(f + "" has been written."", f.exists());
    }

    public void testByteArray() throws IOException {
        los.write(new byte[] {0});
        los.close();
        assertTrue(f + "" has been written."", f.exists());
    }
}
"
L45910,Class,LoaderUtilsTest,org.apache.tools.ant.util.LoaderUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/LoaderUtilsTest.java,62,1,79,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,2,4,0.333333,0.1875,3,3,1,2,0.1875,3,0,0,0,0,0,13,18,0,0,0,0,2,0,2,0,2,6,0,2,0,13,18,0,0,0,0,2,0,2,0,2,6,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.io.File;
import junit.framework.TestCase;


public class LoaderUtilsTest extends TestCase {

    public LoaderUtilsTest(String name) {
        super(name);
    }

    public void testGetXyzSource() {
        File f1 = LoaderUtils.getClassSource(LoaderUtils.class);
        assertNotNull(f1);

        File f2 = LoaderUtils.getResourceSource(null,
                                                ""org/apache/tools/ant/taskdefs/defaults.properties"");
        assertNotNull(f2);

        assertEquals(f1.getAbsolutePath(), f2.getAbsolutePath());
    }

}
"
L45915,Class,PackageNameMapperTest,org.apache.tools.ant.util.PackageNameMapperTest,L44233,L103,src/testcases/org/apache/tools/ant/util/PackageNameMapperTest.java,59,1,76,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,3,6,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,15,18,0,0,0,0,3,0,2,0,3,8,0,2,0,15,18,0,0,0,0,3,0,2,0,3,8,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
 package org.apache.tools.ant.util;

import java.io.File;
import junit.framework.TestCase;

public class PackageNameMapperTest extends TestCase {
    public PackageNameMapperTest(String name) { super(name); }
    
    public void testMapping() {
        PackageNameMapper mapper = new PackageNameMapper();
        mapper.setFrom(""*.java"");
        mapper.setTo(""TEST-*.xml"");
        String file = fixupPath(""org/apache/tools/ant/util/PackageNameMapperTest.java"");
        String result = mapper.mapFileName(file)[0];
        
        assertEquals(""TEST-org.apache.tools.ant.util.PackageNameMapperTest.xml"",
          result);
    }
    
    private String fixupPath(String file) {
        return file.replace('/', File.separatorChar);
    }
}
"
L45925,Class,ReferencesTest,org.apache.tools.ant.util.ReferencesTest,L44233,L103,src/testcases/org/apache/tools/ant/util/ReferencesTest.java,65,1,83,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,4,2,0,0,2,4,0.666667,0.380952,8,8,2,1,0.380952,8,0,0,0,0,0,13,19,0,0,0,0,2,0,2,0,2,5,0,2,0,13,19,0,0,0,0,2,0,2,0,2,5,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import junit.framework.TestCase;



public class ReferencesTest extends TestCase{

    public ReferencesTest(String s) {
        super(s);
    }

    
    public static void testReferencesAreSoft() {
        boolean isJava11=JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1);
        WeakishReference reference = WeakishReference.createReference(new Object());
        if ((reference.getClass().getName().indexOf(""HardReference"") > 0 )
            && !isJava11) {
            fail(""We should be creating soft references in this version of Java"");
        }
    }

}
"
L45932,Class,ResourceUtilsTest,org.apache.tools.ant.util.ResourceUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/ResourceUtilsTest.java,69,1,99,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,7,0,0,5,11,0.428571,0.2,6,5,3,4,0.2,6,1,2,0,0,2,24,31,1,1,1,1,6,0,6,2,6,7,0,6,2,24,31,1,1,1,1,6,0,6,2,6,7,0,6,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Echo;
import org.apache.tools.ant.types.Resource;
import org.apache.tools.ant.types.ResourceFactory;

import java.io.File;

import junit.framework.TestCase;


public class ResourceUtilsTest extends TestCase
    implements ResourceFactory, FileNameMapper {

    private Echo taskINeedForLogging = new Echo();

    public ResourceUtilsTest(String name) {
        super(name);
        taskINeedForLogging.setProject(new Project());
    }

    public void testNoDuplicates() {
        Resource r = new Resource(""samual vimes"", true, 1, false);
        Resource[] toNew = 
            ResourceUtils.selectOutOfDateSources(taskINeedForLogging,
                                                 new Resource[] {r},
                                                 this, this);
        assertEquals(1, toNew.length);
    }

    
    public Resource getResource(String name) {
        return new Resource(name); 
    }

    
    public void setFrom(String s) {}
    public void setTo(String s) {}
    public String[] mapFileName(String s) {
        return new String[] {""fred colon"", ""carrot ironfoundersson""};
    }
}
"
L45949,Class,StringUtilsTest,org.apache.tools.ant.util.StringUtilsTest,L44233,L103,src/testcases/org/apache/tools/ant/util/StringUtilsTest.java,64,1,96,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,4,1,0,0,3,7,0.2,0.121212,4,4,1,4,0.121212,4,0,0,0,0,0,29,33,0,0,0,0,4,0,4,0,4,19,0,4,0,29,33,0,0,0,0,4,0,4,0,4,19,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.util.Vector;

import junit.framework.TestCase;


public class StringUtilsTest extends TestCase {
    public StringUtilsTest(String s) {
        super(s);
    }

    public void testSplit(){
        final String data = ""a,b,,"";
        Vector res = StringUtils.split(data, ',');
        assertEquals(4, res.size());
        assertEquals(""a"", res.elementAt(0));
        assertEquals(""b"", res.elementAt(1));
        assertEquals("""", res.elementAt(2));
        assertEquals("""", res.elementAt(3));
    }

    public void testSplitLines(){
        final String data = ""a\r\nb\nc\nd\ne"";
        Vector res = StringUtils.lineSplit(data);
        assertEquals(5, res.size());
        assertEquals(""a\r"", res.elementAt(0));
        assertEquals(""b"", res.elementAt(1));
        assertEquals(""c"", res.elementAt(2));
        assertEquals(""d"", res.elementAt(3));
        assertEquals(""e"", res.elementAt(4));
    }

    public void testReplace() {
        final String data = ""abcabcabca"";
        String res = StringUtils.replace(data, ""a"", """");
        assertEquals(""bcbcbc"", res);
    }

}
"
L45957,Class,UnPackageNameMapperTest,org.apache.tools.ant.util.UnPackageNameMapperTest,L44233,L103,src/testcases/org/apache/tools/ant/util/UnPackageNameMapperTest.java,59,1,76,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,3,6,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,15,18,0,0,0,0,3,0,2,0,3,9,0,2,0,15,18,0,0,0,0,3,0,2,0,3,9,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.io.File;
import junit.framework.TestCase;

public class UnPackageNameMapperTest extends TestCase {
    public UnPackageNameMapperTest(String name) { super(name); }
    
    public void testMapping() {
        UnPackageNameMapper mapper = new UnPackageNameMapper();
        mapper.setFrom(""TEST-*.xml"");
        mapper.setTo(""*.java"");
        String file =""TEST-org.apache.tools.ant.util.UnPackageNameMapperTest.xml"";
        String result = mapper.mapFileName(file)[0];
        String expected = fixupPath(""org/apache/tools/ant/util/UnPackageNameMapperTest.java"");
        
        assertEquals(expected, result);
    }
    
    private String fixupPath(String file) {
        return file.replace('/', File.separatorChar);
    }
}
"
L44722,Class,FacadeTaskHelperTest,org.apache.tools.ant.util.facade.FacadeTaskHelperTest,L44678,L103,src/testcases/org/apache/tools/ant/util/facade/FacadeTaskHelperTest.java,63,1,100,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,1,0,0,6,9,0.25,0.114286,4,4,1,3,0.114286,4,0,0,0,0,0,31,38,0,0,0,0,3,0,3,0,3,23,0,3,0,31,38,0,0,0,0,3,0,3,0,3,23,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.facade;

import junit.framework.TestCase;


public class FacadeTaskHelperTest extends TestCase {

    public FacadeTaskHelperTest(String name) {
        super(name);
    }

    public void testPrecedenceRules() {
        FacadeTaskHelper fth = new FacadeTaskHelper(""foo"");
        assertEquals(""foo"", fth.getImplementation());

        fth.setMagicValue(""bar"");
        assertEquals(""bar"", fth.getImplementation());

        fth = new FacadeTaskHelper(""foo"", ""bar"");
        assertEquals(""bar"", fth.getImplementation());

        fth = new FacadeTaskHelper(""foo"", null);
        assertEquals(""foo"", fth.getImplementation());

        fth = new FacadeTaskHelper(""foo"");
        fth.setMagicValue(""bar"");
        fth.setImplementation(""baz"");
        assertEquals(""baz"", fth.getImplementation());
    }

    public void testHasBeenSet() {
        FacadeTaskHelper fth = new FacadeTaskHelper(""foo"");
        assertTrue(""nothing set"", !fth.hasBeenSet());
        fth.setMagicValue(null);
        assertTrue(""magic has not been set"", !fth.hasBeenSet());
        fth.setMagicValue(""foo"");
        assertTrue(""magic has been set"", fth.hasBeenSet());
        fth.setMagicValue(null);
        assertTrue(!fth.hasBeenSet());
        fth.setImplementation(""baz"");
        assertTrue(""set explicitly"", fth.hasBeenSet());
    }
}
"
L44728,Class,ImplementationSpecificArgumentTest,org.apache.tools.ant.util.facade.ImplementationSpecificArgumentTest,L44678,L103,src/testcases/org/apache/tools/ant/util/facade/ImplementationSpecificArgumentTest.java,63,1,96,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,2,0,0,5,7,0.333333,0.121212,4,4,1,2,0.121212,4,0,0,0,0,0,29,34,0,0,0,0,2,0,2,0,2,22,0,2,0,29,34,0,0,0,0,2,0,2,0,2,22,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.facade;

import junit.framework.TestCase;


public class ImplementationSpecificArgumentTest extends TestCase {

    public ImplementationSpecificArgumentTest(String name) {
        super(name);
    }

    public void testDependsOnImplementation() {
        ImplementationSpecificArgument ia = 
            new ImplementationSpecificArgument();
        ia.setLine(""A B"");
        String[] parts = ia.getParts();
        assertNotNull(parts);
        assertEquals(2, parts.length);
        assertEquals(""A"", parts[0]);
        assertEquals(""B"", parts[1]);

        parts = ia.getParts(null);
        assertNotNull(parts);
        assertEquals(2, parts.length);
        assertEquals(""A"", parts[0]);
        assertEquals(""B"", parts[1]);

        ia.setImplementation(""foo"");
        parts = ia.getParts(null);
        assertNotNull(parts);
        assertEquals(0, parts.length);

        parts = ia.getParts(""foo"");
        assertNotNull(parts);
        assertEquals(2, parts.length);
        assertEquals(""A"", parts[0]);
        assertEquals(""B"", parts[1]);
    }
}
"
L45491,Class,JakartaOroMatcherTest,org.apache.tools.ant.util.regexp.JakartaOroMatcherTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaOroMatcherTest.java,62,1,72,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,0,0,2,4,0.333333,0.384615,5,5,1,2,0.384615,5,1,1,0,0,1,8,11,2,2,0,1,2,0,2,0,21,2,1,16,1,8,11,2,2,0,1,2,0,2,0,21,2,1,16,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;


public class JakartaOroMatcherTest extends RegexpMatcherTest {

    public RegexpMatcher getImplementation() {
        return new JakartaOroMatcher();
    }

    public JakartaOroMatcherTest(String name) {
        super(name);
    }

}
"
L45501,Class,JakartaOroRegexpTest,org.apache.tools.ant.util.regexp.JakartaOroRegexpTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaOroRegexpTest.java,62,1,72,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,0,0,2,4,0.333333,0.384615,5,5,1,2,0.384615,5,2,2,0,0,1,8,11,4,3,0,1,2,0,2,0,26,2,1,21,1,8,11,4,3,0,1,2,0,2,0,26,2,1,21,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;


public class JakartaOroRegexpTest extends RegexpTest {

    public Regexp getRegexpImplementation() {
        return new JakartaOroRegexp();
    }

    public JakartaOroRegexpTest(String name) {
        super(name);
    }

}
"
L45514,Class,JakartaRegexpMatcherTest,org.apache.tools.ant.util.regexp.JakartaRegexpMatcherTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaRegexpMatcherTest.java,68,1,102,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,7,3,0,0,3,8,0.4,0.323529,11,11,2,3,0.323529,11,1,1,0,0,1,23,35,2,2,0,1,5,0,4,0,24,8,1,18,1,23,35,2,2,0,1,5,0,4,0,24,8,1,18,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.taskdefs.condition.Os;


public class JakartaRegexpMatcherTest extends RegexpMatcherTest {

    public RegexpMatcher getImplementation() {
        return new JakartaRegexpMatcher();
    }

    public JakartaRegexpMatcherTest(String name) {
        super(name);
    }

    public void testWindowsLineSeparator2() throws IOException {
        try {
            super.testWindowsLineSeparator2();
            fail(""Should trigger when this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e) {
        }
    }

    
    public void testUnixLineSeparator() throws IOException {
        try {
            super.testUnixLineSeparator();
            fail(""Should trigger once this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e) {
        }
    }


    
    protected void doEndTest2(String text) {}
}
"
L45529,Class,JakartaRegexpRegexpTest,org.apache.tools.ant.util.regexp.JakartaRegexpRegexpTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaRegexpRegexpTest.java,68,1,101,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,7,4,0,0,4,9,0.4,0.323529,11,11,2,3,0.323529,11,2,2,0,0,1,23,34,4,3,0,1,5,0,4,0,29,8,1,23,1,23,34,4,3,0,1,5,0,4,0,29,8,1,23,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.taskdefs.condition.Os;


public class JakartaRegexpRegexpTest extends RegexpTest {

    public Regexp getRegexpImplementation() {
        return new JakartaRegexpRegexp();
    }

    public JakartaRegexpRegexpTest(String name) {
        super(name);
    }

    public void testWindowsLineSeparator2() throws IOException {
        try {
            super.testWindowsLineSeparator2();
            fail(""Should trigger when this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e){
        }
    }

    
    public void testUnixLineSeparator() throws IOException {
        try {
            super.testUnixLineSeparator();
            fail(""Should trigger once this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e){
        }
    }

    
    protected void doEndTest2(String text) {}
}
"
L45543,Class,Jdk14RegexpMatcherTest,org.apache.tools.ant.util.regexp.Jdk14RegexpMatcherTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/Jdk14RegexpMatcherTest.java,66,1,107,2,0.0,0,0,0,0.0,0.0,0,0,4,1,1,10,3,0,0,6,12,0.142857,0.121951,5,5,1,6,0.121951,5,1,1,0,0,1,36,42,2,2,0,1,6,0,6,0,25,14,1,20,1,36,42,2,2,0,1,6,0,6,0,25,14,1,20,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;


public class Jdk14RegexpMatcherTest extends RegexpMatcherTest {

    public RegexpMatcher getImplementation() {
        return new Jdk14RegexpMatcher();
    }

    public Jdk14RegexpMatcherTest(String name) {
        super(name);
    }

    public void testParagraphCharacter() throws IOException {
        try {
            super.testParagraphCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testLineSeparatorCharacter() throws IOException {
        try {
            super.testLineSeparatorCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testStandaloneCR() throws IOException {
        try {
            super.testStandaloneCR();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testWindowsLineSeparator() throws IOException {
        try {
            super.testWindowsLineSeparator();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }
}
"
L45560,Class,Jdk14RegexpRegexpTest,org.apache.tools.ant.util.regexp.Jdk14RegexpRegexpTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/Jdk14RegexpRegexpTest.java,66,1,108,2,0.0,0,0,0,0.0,0.0,0,0,4,1,1,10,4,0,0,6,12,0.142857,0.121951,5,5,1,6,0.121951,5,2,2,0,0,1,36,43,4,3,0,1,6,0,6,0,30,14,1,25,1,36,43,4,3,0,1,6,0,6,0,30,14,1,25,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;


public class Jdk14RegexpRegexpTest extends RegexpTest {

    public Regexp getRegexpImplementation() {
        return new Jdk14RegexpRegexp();
    }

    public Jdk14RegexpRegexpTest(String name) {
        super(name);
    }

    public void testParagraphCharacter() throws IOException {
        try {
            super.testParagraphCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testLineSeparatorCharacter() throws IOException {
        try {
            super.testLineSeparatorCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testStandaloneCR() throws IOException {
        try {
            super.testStandaloneCR();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testWindowsLineSeparator() throws IOException {
        try {
            super.testWindowsLineSeparator();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

}
"
L45493,Class,RegexpMatcherTest,org.apache.tools.ant.util.regexp.RegexpMatcherTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java,69,1,243,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,20,1,6,19,4,24,0.125,0.0463576,7,7,2,14,0.0463576,7,0,0,4,7,0,144,175,2,2,2,2,20,1,15,1,20,91,1,15,1,144,175,2,2,2,2,20,1,15,1,20,91,1,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.*;
import java.util.Vector;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public abstract class RegexpMatcherTest extends TestCase {

    public final static String UNIX_LINE = ""\n"";

    private RegexpMatcher reg;

    public abstract RegexpMatcher getImplementation();

    protected final RegexpMatcher getReg() {return reg;}

    public RegexpMatcherTest(String name) {
        super(name);
    }

    public void setUp() {
        reg = getImplementation();
    }

    public void testMatches() {
        reg.setPattern(""aaaa"");
        assertTrue(""aaaa should match itself"", reg.matches(""aaaa""));
        assertTrue(""aaaa should match xaaaa"", reg.matches(""xaaaa""));
        assertTrue(""aaaa shouldn\'t match xaaa"", !reg.matches(""xaaa""));
        reg.setPattern(""^aaaa"");
        assertTrue(""^aaaa shouldn\'t match xaaaa"", !reg.matches(""xaaaa""));
        assertTrue(""^aaaa should match aaaax"", reg.matches(""aaaax""));
        reg.setPattern(""aaaa$"");
        assertTrue(""aaaa$ shouldn\'t match aaaax"", !reg.matches(""aaaax""));
        assertTrue(""aaaa$ should match xaaaa"", reg.matches(""xaaaa""));
        reg.setPattern(""[0-9]+"");
        assertTrue(""[0-9]+ should match 123"", reg.matches(""123""));
        assertTrue(""[0-9]+ should match 1"", reg.matches(""1""));
        assertTrue(""[0-9]+ shouldn\'t match \'\'"", !reg.matches(""""));
        assertTrue(""[0-9]+ shouldn\'t match a"", !reg.matches(""a""));
        reg.setPattern(""[0-9]*"");
        assertTrue(""[0-9]* should match 123"", reg.matches(""123""));
        assertTrue(""[0-9]* should match 1"", reg.matches(""1""));
        assertTrue(""[0-9]* should match \'\'"", reg.matches(""""));
        assertTrue(""[0-9]* should match a"", reg.matches(""a""));
        reg.setPattern(""([0-9]+)=\\1"");
        assertTrue(""([0-9]+)=\\1 should match 1=1"", reg.matches(""1=1""));
        assertTrue(""([0-9]+)=\\1 shouldn\'t match 1=2"", !reg.matches(""1=2""));
    }

    public void testGroups() {
        reg.setPattern(""aaaa"");
        Vector v = reg.getGroups(""xaaaa"");
        assertEquals(""No parens -> no extra groups"", 1, v.size());
        assertEquals(""Trivial match with no parens"", ""aaaa"", 
                     (String) v.elementAt(0));

        reg.setPattern(""(aaaa)"");
        v = reg.getGroups(""xaaaa"");
        assertEquals(""Trivial match with single paren"", 2, v.size());
        assertEquals(""Trivial match with single paren, full match"", ""aaaa"", 
                     (String) v.elementAt(0));
        assertEquals(""Trivial match with single paren, matched paren"", ""aaaa"", 
                     (String) v.elementAt(0));

        reg.setPattern(""(a+)b(b+)"");
        v = reg.getGroups(""xaabb"");
        assertEquals(3, v.size());
        assertEquals(""aabb"", (String) v.elementAt(0));
        assertEquals(""aa"", (String) v.elementAt(1));
        assertEquals(""b"", (String) v.elementAt(2));
    }

    public void testBugzillaReport14619() {
        reg.setPattern(""^(.*)/src/((.*/)*)([a-zA-Z0-9_\\.]+)\\.java$"");
        Vector v = reg.getGroups(""de/tom/src/Google.java"");
        assertEquals(5, v.size());
        assertEquals(""de/tom"", v.elementAt(1));
        assertEquals("""", v.elementAt(2));
        assertEquals("""", v.elementAt(3));
        assertEquals(""Google"", v.elementAt(4));
    }

    public void testCaseInsensitiveMatch() {
        reg.setPattern(""aaaa"");
        assertTrue(""aaaa doesn't match AAaa"", !reg.matches(""AAaa""));
        assertTrue(""aaaa matches AAaa ignoring case"", 
                   reg.matches(""AAaa"", RegexpMatcher.MATCH_CASE_INSENSITIVE));
    }





    public void testParagraphCharacter() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""paragraph character"", !reg.matches(""end of text\u2029""));
    }

    public void testLineSeparatorCharacter() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""line-separator character"", !reg.matches(""end of text\u2028""));
    }

    public void testNextLineCharacter() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""next-line character"", !reg.matches(""end of text\u0085""));
    }

    public void testStandaloneCR() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""standalone CR"", !reg.matches(""end of text\r""));
    }

    public void testWindowsLineSeparator() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""Windows line separator"", !reg.matches(""end of text\r\n""));
    }

    public void testWindowsLineSeparator2() throws IOException {
        reg.setPattern(""end of text\r$"");
        assertTrue(""Windows line separator"", reg.matches(""end of text\r\n""));
    }

    public void testUnixLineSeparator() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""Unix line separator"", reg.matches(""end of text\n""));
    }


    public void testMultiVersusSingleLine() throws IOException {
        StringBuffer buf = new StringBuffer();
        buf.append(""Line1"").append(UNIX_LINE);
        buf.append(""starttest Line2"").append(UNIX_LINE);
        buf.append(""Line3 endtest"").append(UNIX_LINE);
        buf.append(""Line4"").append(UNIX_LINE);
        String text = buf.toString();
        
        doStartTest1(text);
        doStartTest2(text);
        doEndTest1(text);
        doEndTest2(text);
    }

    protected void doStartTest1(String text) {
        reg.setPattern(""^starttest"");
        assertTrue(""^starttest in default mode"", !reg.matches(text));
        assertTrue(""^starttest in single line mode"", 
               !reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""^starttest in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

    protected void doStartTest2(String text) {
        reg.setPattern(""^Line1"");
        assertTrue(""^Line1 in default mode"", reg.matches(text));
        assertTrue(""^Line1 in single line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""^Line1 in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

    protected void doEndTest1(String text) {
        reg.setPattern(""endtest$"");
        assertTrue(""endtest$ in default mode"", !reg.matches(text));
        assertTrue(""endtest$ in single line mode"", 
               !reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""endtest$ in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

    protected void doEndTest2(String text) {
        reg.setPattern(""Line4$"");
        assertTrue(""Line4$ in default mode"", reg.matches(text));
        assertTrue(""Line4$ in single line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""Line4$ in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

}
"
L45503,Class,RegexpTest,org.apache.tools.ant.util.regexp.RegexpTest,L45231,L103,src/testcases/org/apache/tools/ant/util/regexp/RegexpTest.java,62,1,100,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,3,3,3,5,11,0.142857,0.135135,5,5,1,6,0.135135,5,1,1,3,3,1,32,39,4,3,2,2,6,0,6,0,25,14,1,20,1,32,39,4,3,2,2,6,0,6,0,25,14,1,20,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;


public abstract class RegexpTest extends RegexpMatcherTest {

    private static final String test = ""abcdefg-abcdefg"";
    private static final String pattern = ""ab([^d]*)d([^f]*)f"";

    public RegexpTest(String name) {
        super(name);
    }

    public final RegexpMatcher getImplementation() {
        return getRegexpImplementation();
    }

    public abstract Regexp getRegexpImplementation();

    public void testSubstitution() {
        Regexp reg = (Regexp) getReg();
        reg.setPattern(pattern);
        assertTrue(reg.matches(test));
        assertEquals(""abedcfg-abcdefg"", reg.substitute(test, ""ab\\2d\\1f"", 
                                                       Regexp.MATCH_DEFAULT));
    }

    public void testReplaceFirstSubstitution() {
        Regexp reg = (Regexp) getReg();
        reg.setPattern(pattern);
        assertTrue(reg.matches(test));
        assertEquals(""abedcfg-abcdefg"", reg.substitute(test, ""ab\\2d\\1f"", 
                                                       Regexp.REPLACE_FIRST));
    }

    public void testReplaceAllSubstitution() {
        Regexp reg = (Regexp) getReg();
        reg.setPattern(pattern);
        assertTrue(reg.matches(test));
        assertEquals(""abedcfg-abedcfg"", reg.substitute(test, ""ab\\2d\\1f"", 
                                                       Regexp.REPLACE_ALL));
    }
}
"
L47161,Class,MailMessageTest,org.apache.tools.mail.MailMessageTest,L46958,L103,src/testcases/org/apache/tools/mail/MailMessageTest.java,80,1,771,2,0.553917,12,84,37,0.478324,0.528881,331,293,1,3,3,29,2,2,0,9,18,0.8,0.125301,52,34,8,2,0.110754,69,0,0,0,0,0,363,459,2,0,2,0,9,0,9,1,9,161,0,9,1,554,692,19,2,19,2,23,0,21,3,23,266,0,21,3,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.mail;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.ServerSocket;
import java.util.Enumeration;
import java.util.Vector;

import org.apache.tools.mail.MailMessage;

import junit.framework.TestCase;


public class MailMessageTest extends TestCase {
    
    
    private static int TEST_PORT = 27224;
    
    private String local = null;
    
    public MailMessageTest(String name) {
        super(name);
    }    

    public void setUp() {
        try {
            local = InetAddress.getLocalHost().getHostName();
        } catch (java.net.UnknownHostException uhe) {
            
        }
    }
    
    
    public void testAPIExample() {
        
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();
        
        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.cc(""cc1@you.com"");
        testMailClient.cc(""cc2@you.com"");
        testMailClient.bcc(""bcc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc1@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc2@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <bcc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
        ""To: to@you.com\r\n"" +
        ""Cc: cc1@you.com, cc2@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        for (int icounter = 0; icounter<expectedResult.length(); icounter++) {
            if (icounter < result.length()) {
                if (expectedResult.charAt(icounter) != result.charAt(icounter)) {
                    System.out.println(""posit "" + icounter + "" expected ""
                        + expectedResult.charAt(icounter)
                    + "" result "" + result.charAt(icounter));
                }
            }
        }
        if (expectedResult.length()>result.length()) {
            System.out.println(""excedent of expected result ""
                + expectedResult.substring(result.length()));
        }
        if (expectedResult.length()<result.length()) {
            System.out.println(""excedent of result ""
                + result.substring(expectedResult.length()));
        }
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    public void testToOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail(""InterruptedException: "" + ie);
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testCcOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.cc(""cc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""Cc: cc@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result);
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testBccOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.bcc(""bcc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <bcc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals( expectedResult.length(), result.length() );
        assertEquals( expectedResult, result );
        if ( testMailClient.isFailed() ) {
            fail( testMailClient.getFailMessage() );
        }
    }
    
    
    
    public void testNoSubject() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals( expectedResult.length(), result.length() );
        assertEquals( expectedResult, result );
        if ( testMailClient.isFailed() ) {
            fail( testMailClient.getFailMessage() );
        }
    }
    
    
    
    public void testEmptyBody() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage("""");
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result);
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testAsciiCharset() {

        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage("""");

        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail(""InterruptedException: "" + ie);
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <abuse@mail-abuse.org>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
        PrintStream bos1 = new PrintStream(baos1, true);
        PrintStream bos2 = new PrintStream(baos2, true);

        bos1.print(expectedResult);
        bos2.print(result);

        assertEquals( ""expected message length != actual message length ""
            + ""in testAsciiCharset()"", expectedResult.length(), result.length() );
        assertEquals( ""baos1 and baos2 should be the same in testAsciiCharset()"",
            baos1.toString(), baos2.toString() ); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    

    
    
    private class ServerThread implements Runnable {
        
        private StringBuffer sb = null;
        private boolean loop = false;
        ServerSocket ssock = null;
        Socket sock = null;
        BufferedWriter out = null;
        BufferedReader in = null;
        private boolean data = false;  

        public void run() {

            try {
                ssock = new ServerSocket(TEST_PORT);
                sock = ssock.accept(); 
                in = new BufferedReader( new InputStreamReader(
                    sock.getInputStream()) );
                out = new BufferedWriter( new OutputStreamWriter(
                    sock.getOutputStream() ) );
                sb = new StringBuffer();
                send( ""220 test SMTP EmailTaskTest\r\n"" );
                loop = true;
                while ( loop ) {
                    String response = in.readLine();
                    if ( response == null ) {
                        loop = false;
                        break;
                    }
                    sb.append( response + ""\r\n"" );
                 
                    if ( !data && response.startsWith( ""HELO"" ) ) {
                        send( ""250 "" + local + "" Hello "" + local + "" "" +
                        ""[127.0.0.1], pleased to meet you\r\n"" );                   
                    } else if ( !data && response.startsWith(""MAIL"") ) {
                        send( ""250\r\n"" );
                    } else if ( !data && response.startsWith(""RCPT"")) {
                        send( ""250\r\n"" );
                    } else if (!data && response.startsWith(""DATA"")) {
                        send( ""354\r\n"" );
                        data = true;
                    } else if (data && response.equals(""."") ) {
                        send( ""250\r\n"" );
                        data = false;
                    } else if (!data && response.startsWith(""QUIT"")) {
                        send( ""221\r\n"" );
                        loop = false;
                    } else if (!data) {
                        
                        
                        send( ""500 5.5.1 Command unrecognized: \"""" +
                            response + ""\""\r\n"" );
                        loop = false;
                    } else {
                        
                    }
                    
                } 
            } catch (IOException ioe) {
                fail();
            } finally {
                disconnect();
            }
        }
        
        private void send(String retmsg) throws IOException {
            out.write( retmsg );
            out.flush();
            sb.append( retmsg );
        }
        
        private void disconnect() {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                    out = null;
                } catch (IOException e) {
                    
                }
            }
            if (in != null) {
                try {
                    in.close();
                    in = null;
                } catch (IOException e) {
                    
                }
            }
            if (sock != null) {
                try {
                    sock.close();
                    sock = null;
                } catch (IOException e) {
                    
                }
            }
            if (ssock != null) {
                try {
                    ssock.close();
                    ssock = null;
                } catch (IOException e) {
                    
                }
            }
        }
        
        public synchronized String getResult() {
            loop = false;
            return sb.toString();
        }
        
    }
    
    
    private class ClientThread implements Runnable {
        
        private MailMessage msg;
        private boolean fail = false;
        private String failMessage = null;
        
        protected String from = null;
        protected String subject = null;
        protected String message = null;
        
        protected Vector replyToList = new Vector();
        protected Vector toList = new Vector();
        protected Vector ccList = new Vector();
        protected Vector bccList = new Vector();
        

        public void run() {
            for (int i = 9; i > 0; i--) {
                try {
                    msg = new MailMessage(""localhost"", TEST_PORT);
                } catch (java.net.ConnectException ce) {
                    try {
                        Thread.sleep(10 * 1000);
                    } catch (InterruptedException ie) {
                        
                    }
                } catch (IOException ioe) {
                    fail = true;
                    failMessage = ""IOException: "" + ioe;
                    return;
                }
                if (msg != null) {
                    break;
                }
            }
            
            if (msg == null) {
                fail = true;
                failMessage = ""java.net.ConnectException: Connection refused"";
                return;
            }
            
            try {
                msg.from(from);
                
                Enumeration e;
                
                e = replyToList.elements();
                while (e.hasMoreElements()) {
                    msg.replyto(e.nextElement().toString());
                }
                
                e = toList.elements();
                while (e.hasMoreElements()) {
                    msg.to(e.nextElement().toString());
                }
                
                e = ccList.elements();
                while (e.hasMoreElements()) {
                    msg.cc(e.nextElement().toString());
                }
                
                e = bccList.elements();
                while (e.hasMoreElements()) {
                    msg.bcc(e.nextElement().toString());
                }
                
                if (subject != null) {
                    msg.setSubject(subject);
                }
                
                if (message != null ) {
                    PrintStream out = msg.getPrintStream();
                    out.println( message );
                }
                
                msg.sendAndClose();
            } catch (IOException ioe) {
                fail = true;
                failMessage = ""IOException: "" + ioe;
                return;
            }
        }
        
        public boolean isFailed() {
            return fail;
        }
        
        public String getFailMessage() {
            return failMessage;
        }
        
        public void replyTo(String replyTo) {
            replyToList.add(replyTo);
        }
        
        public void to(String to) {
            toList.add(to);
        }
        
        public void cc(String cc) {
            ccList.add(cc);
        }
        
        public void bcc(String bcc) {
            bccList.add(bcc);
        }
        
        public void setSubject(String subject) {
            this.subject = subject;
        }
        
        public void from(String from) {
            this.from = from;
        }
        
        public void setMessage(String message) {
            this.message = message;
        }
        
    }
    
}
"
L47180,Class,MailMessageTest$ClientThread,org.apache.tools.mail.MailMessageTest$ClientThread,L47161,L103,src/testcases/org/apache/tools/mail/MailMessageTest.java,649,5,769,6,0.333333,2,10,2,0.206612,0.210526,25,20,1,3,3,23,2,1,7,9,19,0.0909091,0.040404,4,3,1,10,0.040404,4,0,0,0,0,0,95,121,10,1,10,1,10,0,10,2,10,49,0,10,2,95,121,10,1,10,1,10,0,10,2,10,49,0,10,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.mail;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.ServerSocket;
import java.util.Enumeration;
import java.util.Vector;

import org.apache.tools.mail.MailMessage;

import junit.framework.TestCase;


public class MailMessageTest extends TestCase {
    
    
    private static int TEST_PORT = 27224;
    
    private String local = null;
    
    public MailMessageTest(String name) {
        super(name);
    }    

    public void setUp() {
        try {
            local = InetAddress.getLocalHost().getHostName();
        } catch (java.net.UnknownHostException uhe) {
            
        }
    }
    
    
    public void testAPIExample() {
        
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();
        
        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.cc(""cc1@you.com"");
        testMailClient.cc(""cc2@you.com"");
        testMailClient.bcc(""bcc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc1@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc2@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <bcc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
        ""To: to@you.com\r\n"" +
        ""Cc: cc1@you.com, cc2@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        for (int icounter = 0; icounter<expectedResult.length(); icounter++) {
            if (icounter < result.length()) {
                if (expectedResult.charAt(icounter) != result.charAt(icounter)) {
                    System.out.println(""posit "" + icounter + "" expected ""
                        + expectedResult.charAt(icounter)
                    + "" result "" + result.charAt(icounter));
                }
            }
        }
        if (expectedResult.length()>result.length()) {
            System.out.println(""excedent of expected result ""
                + expectedResult.substring(result.length()));
        }
        if (expectedResult.length()<result.length()) {
            System.out.println(""excedent of result ""
                + result.substring(expectedResult.length()));
        }
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    public void testToOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail(""InterruptedException: "" + ie);
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testCcOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.cc(""cc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""Cc: cc@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result);
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testBccOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.bcc(""bcc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <bcc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals( expectedResult.length(), result.length() );
        assertEquals( expectedResult, result );
        if ( testMailClient.isFailed() ) {
            fail( testMailClient.getFailMessage() );
        }
    }
    
    
    
    public void testNoSubject() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals( expectedResult.length(), result.length() );
        assertEquals( expectedResult, result );
        if ( testMailClient.isFailed() ) {
            fail( testMailClient.getFailMessage() );
        }
    }
    
    
    
    public void testEmptyBody() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage("""");
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result);
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testAsciiCharset() {

        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage("""");

        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail(""InterruptedException: "" + ie);
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <abuse@mail-abuse.org>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
        PrintStream bos1 = new PrintStream(baos1, true);
        PrintStream bos2 = new PrintStream(baos2, true);

        bos1.print(expectedResult);
        bos2.print(result);

        assertEquals( ""expected message length != actual message length ""
            + ""in testAsciiCharset()"", expectedResult.length(), result.length() );
        assertEquals( ""baos1 and baos2 should be the same in testAsciiCharset()"",
            baos1.toString(), baos2.toString() ); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    

    
    
    private class ServerThread implements Runnable {
        
        private StringBuffer sb = null;
        private boolean loop = false;
        ServerSocket ssock = null;
        Socket sock = null;
        BufferedWriter out = null;
        BufferedReader in = null;
        private boolean data = false;  

        public void run() {

            try {
                ssock = new ServerSocket(TEST_PORT);
                sock = ssock.accept(); 
                in = new BufferedReader( new InputStreamReader(
                    sock.getInputStream()) );
                out = new BufferedWriter( new OutputStreamWriter(
                    sock.getOutputStream() ) );
                sb = new StringBuffer();
                send( ""220 test SMTP EmailTaskTest\r\n"" );
                loop = true;
                while ( loop ) {
                    String response = in.readLine();
                    if ( response == null ) {
                        loop = false;
                        break;
                    }
                    sb.append( response + ""\r\n"" );
                 
                    if ( !data && response.startsWith( ""HELO"" ) ) {
                        send( ""250 "" + local + "" Hello "" + local + "" "" +
                        ""[127.0.0.1], pleased to meet you\r\n"" );                   
                    } else if ( !data && response.startsWith(""MAIL"") ) {
                        send( ""250\r\n"" );
                    } else if ( !data && response.startsWith(""RCPT"")) {
                        send( ""250\r\n"" );
                    } else if (!data && response.startsWith(""DATA"")) {
                        send( ""354\r\n"" );
                        data = true;
                    } else if (data && response.equals(""."") ) {
                        send( ""250\r\n"" );
                        data = false;
                    } else if (!data && response.startsWith(""QUIT"")) {
                        send( ""221\r\n"" );
                        loop = false;
                    } else if (!data) {
                        
                        
                        send( ""500 5.5.1 Command unrecognized: \"""" +
                            response + ""\""\r\n"" );
                        loop = false;
                    } else {
                        
                    }
                    
                } 
            } catch (IOException ioe) {
                fail();
            } finally {
                disconnect();
            }
        }
        
        private void send(String retmsg) throws IOException {
            out.write( retmsg );
            out.flush();
            sb.append( retmsg );
        }
        
        private void disconnect() {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                    out = null;
                } catch (IOException e) {
                    
                }
            }
            if (in != null) {
                try {
                    in.close();
                    in = null;
                } catch (IOException e) {
                    
                }
            }
            if (sock != null) {
                try {
                    sock.close();
                    sock = null;
                } catch (IOException e) {
                    
                }
            }
            if (ssock != null) {
                try {
                    ssock.close();
                    ssock = null;
                } catch (IOException e) {
                    
                }
            }
        }
        
        public synchronized String getResult() {
            loop = false;
            return sb.toString();
        }
        
    }
    
    
    private class ClientThread implements Runnable {
        
        private MailMessage msg;
        private boolean fail = false;
        private String failMessage = null;
        
        protected String from = null;
        protected String subject = null;
        protected String message = null;
        
        protected Vector replyToList = new Vector();
        protected Vector toList = new Vector();
        protected Vector ccList = new Vector();
        protected Vector bccList = new Vector();
        

        public void run() {
            for (int i = 9; i > 0; i--) {
                try {
                    msg = new MailMessage(""localhost"", TEST_PORT);
                } catch (java.net.ConnectException ce) {
                    try {
                        Thread.sleep(10 * 1000);
                    } catch (InterruptedException ie) {
                        
                    }
                } catch (IOException ioe) {
                    fail = true;
                    failMessage = ""IOException: "" + ioe;
                    return;
                }
                if (msg != null) {
                    break;
                }
            }
            
            if (msg == null) {
                fail = true;
                failMessage = ""java.net.ConnectException: Connection refused"";
                return;
            }
            
            try {
                msg.from(from);
                
                Enumeration e;
                
                e = replyToList.elements();
                while (e.hasMoreElements()) {
                    msg.replyto(e.nextElement().toString());
                }
                
                e = toList.elements();
                while (e.hasMoreElements()) {
                    msg.to(e.nextElement().toString());
                }
                
                e = ccList.elements();
                while (e.hasMoreElements()) {
                    msg.cc(e.nextElement().toString());
                }
                
                e = bccList.elements();
                while (e.hasMoreElements()) {
                    msg.bcc(e.nextElement().toString());
                }
                
                if (subject != null) {
                    msg.setSubject(subject);
                }
                
                if (message != null ) {
                    PrintStream out = msg.getPrintStream();
                    out.println( message );
                }
                
                msg.sendAndClose();
            } catch (IOException ioe) {
                fail = true;
                failMessage = ""IOException: "" + ioe;
                return;
            }
        }
        
        public boolean isFailed() {
            return fail;
        }
        
        public String getFailMessage() {
            return failMessage;
        }
        
        public void replyTo(String replyTo) {
            replyToList.add(replyTo);
        }
        
        public void to(String to) {
            toList.add(to);
        }
        
        public void cc(String cc) {
            ccList.add(cc);
        }
        
        public void bcc(String bcc) {
            bccList.add(bcc);
        }
        
        public void setSubject(String subject) {
            this.subject = subject;
        }
        
        public void from(String from) {
            this.from = from;
        }
        
        public void setMessage(String message) {
            this.message = message;
        }
        
    }
    
}
"
L47175,Class,MailMessageTest$ServerThread,org.apache.tools.mail.MailMessageTest$ServerThread,L47161,L103,src/testcases/org/apache/tools/mail/MailMessageTest.java,533,5,644,6,0.0,0,0,0,0.0,0.0,0,0,1,9,3,28,1,1,7,0,4,0.333333,0.119266,13,3,1,2,0.119266,13,0,0,0,0,0,96,112,7,1,7,1,4,0,2,0,4,56,0,2,0,96,112,7,1,7,1,4,0,2,0,4,56,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.mail;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.ServerSocket;
import java.util.Enumeration;
import java.util.Vector;

import org.apache.tools.mail.MailMessage;

import junit.framework.TestCase;


public class MailMessageTest extends TestCase {
    
    
    private static int TEST_PORT = 27224;
    
    private String local = null;
    
    public MailMessageTest(String name) {
        super(name);
    }    

    public void setUp() {
        try {
            local = InetAddress.getLocalHost().getHostName();
        } catch (java.net.UnknownHostException uhe) {
            
        }
    }
    
    
    public void testAPIExample() {
        
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();
        
        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.cc(""cc1@you.com"");
        testMailClient.cc(""cc2@you.com"");
        testMailClient.bcc(""bcc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc1@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc2@you.com>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <bcc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
        ""To: to@you.com\r\n"" +
        ""Cc: cc1@you.com, cc2@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        for (int icounter = 0; icounter<expectedResult.length(); icounter++) {
            if (icounter < result.length()) {
                if (expectedResult.charAt(icounter) != result.charAt(icounter)) {
                    System.out.println(""posit "" + icounter + "" expected ""
                        + expectedResult.charAt(icounter)
                    + "" result "" + result.charAt(icounter));
                }
            }
        }
        if (expectedResult.length()>result.length()) {
            System.out.println(""excedent of expected result ""
                + expectedResult.substring(result.length()));
        }
        if (expectedResult.length()<result.length()) {
            System.out.println(""excedent of result ""
                + result.substring(expectedResult.length()));
        }
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    public void testToOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail(""InterruptedException: "" + ie);
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testCcOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.cc(""cc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <cc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""Cc: cc@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result);
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testBccOnly() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.bcc(""bcc@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <bcc@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals( expectedResult.length(), result.length() );
        assertEquals( expectedResult, result );
        if ( testMailClient.isFailed() ) {
            fail( testMailClient.getFailMessage() );
        }
    }
    
    
    
    public void testNoSubject() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setMessage( ""test line 1\n"" +
            ""test line 2"" );
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""test line 1\r\n"" +
        ""test line 2\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals( expectedResult.length(), result.length() );
        assertEquals( expectedResult, result );
        if ( testMailClient.isFailed() ) {
            fail( testMailClient.getFailMessage() );
        }
    }
    
    
    
    public void testEmptyBody() {
        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""to@you.com"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage("""");
            
        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail( ""InterruptedException: "" + ie );
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <to@you.com>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: to@you.com\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        assertEquals(expectedResult.length(), result.length());
        assertEquals(expectedResult, result);
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    
    
    public void testAsciiCharset() {

        ServerThread testMailServer = new ServerThread();
        Thread server = new Thread(testMailServer);
        server.start();

        ClientThread testMailClient = new ClientThread();
        
        testMailClient.from(""Mail Message <EmailTaskTest@ant.apache.org>"");
        testMailClient.to(""Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>"");
        testMailClient.setSubject(""Test subject"");
        testMailClient.setMessage("""");

        Thread client = new Thread(testMailClient);
        client.start();
        
        try {
            server.join(60 * 1000); 
            client.join(30 * 1000); 
        } catch (InterruptedException ie ) {
            fail(""InterruptedException: "" + ie);
        }
        
        String result = testMailServer.getResult();
        String expectedResult = ""220 test SMTP EmailTaskTest\r\n"" +
        ""HELO "" + local + ""\r\n"" +
        ""250 "" + local + "" Hello "" + local + "" [127.0.0.1], pleased to meet you\r\n"" +
        ""MAIL FROM: <EmailTaskTest@ant.apache.org>\r\n"" +
        ""250\r\n"" +
        ""RCPT TO: <abuse@mail-abuse.org>\r\n"" +
        ""250\r\n"" +
        ""DATA\r\n"" +
        ""354\r\n"" +
        ""Subject: Test subject\r\n"" +
            ""From: Mail Message <EmailTaskTest@ant.apache.org>\r\n"" +
            ""To: Ceki G\u00fclc\u00fc <abuse@mail-abuse.org>\r\n"" +
        ""X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        ""\r\n"" +
        "".\r\n"" +
        ""250\r\n"" +
        ""QUIT\r\n"" +
        ""221\r\n"";
        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
        PrintStream bos1 = new PrintStream(baos1, true);
        PrintStream bos2 = new PrintStream(baos2, true);

        bos1.print(expectedResult);
        bos2.print(result);

        assertEquals( ""expected message length != actual message length ""
            + ""in testAsciiCharset()"", expectedResult.length(), result.length() );
        assertEquals( ""baos1 and baos2 should be the same in testAsciiCharset()"",
            baos1.toString(), baos2.toString() ); 
        if (testMailClient.isFailed()) {
            fail(testMailClient.getFailMessage());
        }
    }
    
    

    
    
    private class ServerThread implements Runnable {
        
        private StringBuffer sb = null;
        private boolean loop = false;
        ServerSocket ssock = null;
        Socket sock = null;
        BufferedWriter out = null;
        BufferedReader in = null;
        private boolean data = false;  

        public void run() {

            try {
                ssock = new ServerSocket(TEST_PORT);
                sock = ssock.accept(); 
                in = new BufferedReader( new InputStreamReader(
                    sock.getInputStream()) );
                out = new BufferedWriter( new OutputStreamWriter(
                    sock.getOutputStream() ) );
                sb = new StringBuffer();
                send( ""220 test SMTP EmailTaskTest\r\n"" );
                loop = true;
                while ( loop ) {
                    String response = in.readLine();
                    if ( response == null ) {
                        loop = false;
                        break;
                    }
                    sb.append( response + ""\r\n"" );
                 
                    if ( !data && response.startsWith( ""HELO"" ) ) {
                        send( ""250 "" + local + "" Hello "" + local + "" "" +
                        ""[127.0.0.1], pleased to meet you\r\n"" );                   
                    } else if ( !data && response.startsWith(""MAIL"") ) {
                        send( ""250\r\n"" );
                    } else if ( !data && response.startsWith(""RCPT"")) {
                        send( ""250\r\n"" );
                    } else if (!data && response.startsWith(""DATA"")) {
                        send( ""354\r\n"" );
                        data = true;
                    } else if (data && response.equals(""."") ) {
                        send( ""250\r\n"" );
                        data = false;
                    } else if (!data && response.startsWith(""QUIT"")) {
                        send( ""221\r\n"" );
                        loop = false;
                    } else if (!data) {
                        
                        
                        send( ""500 5.5.1 Command unrecognized: \"""" +
                            response + ""\""\r\n"" );
                        loop = false;
                    } else {
                        
                    }
                    
                } 
            } catch (IOException ioe) {
                fail();
            } finally {
                disconnect();
            }
        }
        
        private void send(String retmsg) throws IOException {
            out.write( retmsg );
            out.flush();
            sb.append( retmsg );
        }
        
        private void disconnect() {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                    out = null;
                } catch (IOException e) {
                    
                }
            }
            if (in != null) {
                try {
                    in.close();
                    in = null;
                } catch (IOException e) {
                    
                }
            }
            if (sock != null) {
                try {
                    sock.close();
                    sock = null;
                } catch (IOException e) {
                    
                }
            }
            if (ssock != null) {
                try {
                    ssock.close();
                    ssock = null;
                } catch (IOException e) {
                    
                }
            }
        }
        
        public synchronized String getResult() {
            loop = false;
            return sb.toString();
        }
        
    }
    
    
    private class ClientThread implements Runnable {
        
        private MailMessage msg;
        private boolean fail = false;
        private String failMessage = null;
        
        protected String from = null;
        protected String subject = null;
        protected String message = null;
        
        protected Vector replyToList = new Vector();
        protected Vector toList = new Vector();
        protected Vector ccList = new Vector();
        protected Vector bccList = new Vector();
        

        public void run() {
            for (int i = 9; i > 0; i--) {
                try {
                    msg = new MailMessage(""localhost"", TEST_PORT);
                } catch (java.net.ConnectException ce) {
                    try {
                        Thread.sleep(10 * 1000);
                    } catch (InterruptedException ie) {
                        
                    }
                } catch (IOException ioe) {
                    fail = true;
                    failMessage = ""IOException: "" + ioe;
                    return;
                }
                if (msg != null) {
                    break;
                }
            }
            
            if (msg == null) {
                fail = true;
                failMessage = ""java.net.ConnectException: Connection refused"";
                return;
            }
            
            try {
                msg.from(from);
                
                Enumeration e;
                
                e = replyToList.elements();
                while (e.hasMoreElements()) {
                    msg.replyto(e.nextElement().toString());
                }
                
                e = toList.elements();
                while (e.hasMoreElements()) {
                    msg.to(e.nextElement().toString());
                }
                
                e = ccList.elements();
                while (e.hasMoreElements()) {
                    msg.cc(e.nextElement().toString());
                }
                
                e = bccList.elements();
                while (e.hasMoreElements()) {
                    msg.bcc(e.nextElement().toString());
                }
                
                if (subject != null) {
                    msg.setSubject(subject);
                }
                
                if (message != null ) {
                    PrintStream out = msg.getPrintStream();
                    out.println( message );
                }
                
                msg.sendAndClose();
            } catch (IOException ioe) {
                fail = true;
                failMessage = ""IOException: "" + ioe;
                return;
            }
        }
        
        public boolean isFailed() {
            return fail;
        }
        
        public String getFailMessage() {
            return failMessage;
        }
        
        public void replyTo(String replyTo) {
            replyToList.add(replyTo);
        }
        
        public void to(String to) {
            toList.add(to);
        }
        
        public void cc(String cc) {
            ccList.add(cc);
        }
        
        public void bcc(String bcc) {
            bccList.add(bcc);
        }
        
        public void setSubject(String subject) {
            this.subject = subject;
        }
        
        public void from(String from) {
            this.from = from;
        }
        
        public void setMessage(String message) {
            this.message = message;
        }
        
    }
    
}
"
L47780,Class,TarEntryTest,org.apache.tools.tar.TarEntryTest,L47279,L103,src/testcases/org/apache/tools/tar/TarEntryTest.java,62,1,74,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,1,3,0.666667,0.428571,6,6,2,1,0.428571,6,0,0,0,0,0,8,13,0,0,0,0,2,0,2,0,2,2,0,2,0,8,13,0,0,0,0,2,0,2,0,2,2,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.tar;

import junit.framework.TestCase;


public class TarEntryTest extends TestCase {

    public TarEntryTest(String name) {
        super(name);
    }

    
    public void testFileConstructor() {
        new TarEntry(new java.io.File(""/foo""));
    }
}
"
L47786,Class,TarRoundTripTest,org.apache.tools.tar.TarRoundTripTest,L47279,L103,src/testcases/org/apache/tools/tar/TarRoundTripTest.java,61,1,94,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,3,0,0,10,12,0.333333,0.107143,3,3,1,2,0.107143,3,0,0,0,0,0,25,34,1,0,1,0,2,0,2,0,2,15,0,2,0,25,34,1,0,1,0,2,0,2,0,2,15,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.tar;

import java.io.IOException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import junit.framework.TestCase;

public class TarRoundTripTest extends TestCase {

    private static final String LONG_NAME
        = ""this/path/name/contains/more/than/one/hundred/characters/in/order/""
            + ""to/test/the/GNU/long/file/name/capability/round/tripped"";

    public TarRoundTripTest(String name) {
        super(name);
    }

    
    public void testLongRoundTripping() throws IOException {
        TarEntry original = new TarEntry(LONG_NAME);
        assertEquals(""over 100 chars"", true, LONG_NAME.length() > 100);
        assertEquals(""original name"", LONG_NAME, original.getName());


        ByteArrayOutputStream buff = new ByteArrayOutputStream();
        TarOutputStream tos = new TarOutputStream(buff);
        tos.setLongFileMode(TarOutputStream.LONGFILE_GNU);
        tos.putNextEntry(original);
        tos.closeEntry();
        tos.close();

        TarInputStream tis
            = new TarInputStream(new ByteArrayInputStream(buff.toByteArray()));
        TarEntry tripped = tis.getNextEntry();
        assertEquals(""round-tripped name"", LONG_NAME, tripped.getName());
        assertNull(""no more entries"", tis.getNextEntry());
        tis.close();
    }
}


"
L48493,Class,AsiExtraFieldTest,org.apache.tools.zip.AsiExtraFieldTest,L47793,L103,src/testcases/org/apache/tools/zip/AsiExtraFieldTest.java,64,1,178,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,7,3,0,0,16,20,0.8,0.296296,40,14,4,1,0.296296,40,1,1,0,0,1,95,115,7,0,0,0,4,0,4,0,4,61,7,4,0,95,115,7,0,0,0,4,0,4,0,4,61,7,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class AsiExtraFieldTest extends TestCase implements UnixStat {
    public AsiExtraFieldTest(String name) {
        super(name);
    }

    
    public void testModes() {
        AsiExtraField a = new AsiExtraField();
        a.setMode(0123);
        assertEquals(""plain file"", 0100123, a.getMode());
        a.setDirectory(true);
        assertEquals(""directory"", 040123, a.getMode());
        a.setLinkedFile(""test"");
        assertEquals(""symbolic link"", 0120123, a.getMode());
    }

    
    public void testContent() {
        AsiExtraField a = new AsiExtraField();
        a.setMode(0123);
        a.setUserId(5);
        a.setGroupId(6);
        byte[] b = a.getLocalFileDataData();
        
        
        byte[] expect = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, 
                         0123, (byte)0x80,                   
                         0, 0, 0, 0,                         
                         5, 0, 6, 0};                        
        assertEquals(""no link"", expect.length, b.length);
        for (int i=0; i<expect.length; i++) {
            assertEquals(""no link, byte ""+i, expect[i], b[i]);
        }

        a.setLinkedFile(""test"");
        expect = new byte[] {0x75, (byte)0x8E, 0x41, (byte)0xFD, 
                             0123, (byte)0xA0,                   
                             4, 0, 0, 0,                         
                             5, 0, 6, 0,                         
                             (byte)'t', (byte)'e', (byte)'s', (byte)'t'};
        b = a.getLocalFileDataData();
        assertEquals(""no link"", expect.length, b.length);
        for (int i=0; i<expect.length; i++) {
            assertEquals(""no link, byte ""+i, expect[i], b[i]);
        }

    }

    
    public void testReparse() throws Exception {
        
        byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, 
                       0123, (byte)0x80,                   
                       0, 0, 0, 0,                         
                       5, 0, 6, 0};                        
        AsiExtraField a = new AsiExtraField();
        a.parseFromLocalFileData(data, 0, data.length);
        assertEquals(""length plain file"", data.length, 
                     a.getLocalFileDataLength().getValue());
        assertTrue(""plain file, no link"", !a.isLink());
        assertTrue(""plain file, no dir"", !a.isDirectory());
        assertEquals(""mode plain file"", FILE_FLAG | 0123, a.getMode());
        assertEquals(""uid plain file"", 5, a.getUserId());
        assertEquals(""gid plain file"", 6, a.getGroupId());

        data = new byte[] {0x75, (byte)0x8E, 0x41, (byte)0xFD, 
                           0123, (byte)0xA0,                   
                           4, 0, 0, 0,                         
                           5, 0, 6, 0,                         
                           (byte)'t', (byte)'e', (byte)'s', (byte)'t'};
        a = new AsiExtraField();
        a.parseFromLocalFileData(data, 0, data.length);
        assertEquals(""length link"", data.length, 
                     a.getLocalFileDataLength().getValue());
        assertTrue(""link, is link"", a.isLink());
        assertTrue(""link, no dir"", !a.isDirectory());
        assertEquals(""mode link"", LINK_FLAG | 0123, a.getMode());
        assertEquals(""uid link"", 5, a.getUserId());
        assertEquals(""gid link"", 6, a.getGroupId());
        assertEquals(""test"", a.getLinkedFile());

        data = new byte[] {(byte)0x8E, 0x01, (byte)0xBF, (byte)0x0E, 
                           0123, (byte)0x40,                         
                           0, 0, 0, 0,                               
                           5, 0, 6, 0};                          
        a = new AsiExtraField();
        a.parseFromLocalFileData(data, 0, data.length);
        assertEquals(""length dir"", data.length, 
                     a.getLocalFileDataLength().getValue());
        assertTrue(""dir, no link"", !a.isLink());
        assertTrue(""dir, is dir"", a.isDirectory());
        assertEquals(""mode dir"", DIR_FLAG | 0123, a.getMode());
        assertEquals(""uid dir"", 5, a.getUserId());
        assertEquals(""gid dir"", 6, a.getGroupId());

        data = new byte[] {0, 0, 0, 0,                           
                           0123, (byte)0x40,                     
                           0, 0, 0, 0,                           
                           5, 0, 6, 0};                          
        a = new AsiExtraField();
        try {
            a.parseFromLocalFileData(data, 0, data.length);
            fail(""should raise bad CRC exception"");
        } catch (Exception e) {
            assertEquals(""bad CRC checksum 0 instead of ebf018e"", 
                         e.getMessage());
        }
    }
}
"
L48508,Class,ExtraFieldUtilsTest,org.apache.tools.zip.ExtraFieldUtilsTest,L47793,L103,src/testcases/org/apache/tools/zip/ExtraFieldUtilsTest.java,64,1,151,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,7,6,0,0,22,26,0.6,0.134146,11,11,3,2,0.134146,11,1,1,0,0,1,71,88,11,0,4,0,4,0,4,1,4,46,7,4,1,71,88,11,0,4,0,4,0,4,1,4,46,7,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ExtraFieldUtilsTest extends TestCase implements UnixStat {
    public ExtraFieldUtilsTest(String name) {
        super(name);
    }

    private AsiExtraField a;
    private UnrecognizedExtraField dummy;
    private byte[] data;
    private byte[] aLocal;

    public void setUp() {
        a = new AsiExtraField();
        a.setMode(0755);
        a.setDirectory(true);
        dummy = new UnrecognizedExtraField();
        dummy.setHeaderId(new ZipShort(1));
        dummy.setLocalFileDataData(new byte[0]);
        dummy.setCentralDirectoryData(new byte[] {0});

        aLocal = a.getLocalFileDataData();
        byte[] dummyLocal = dummy.getLocalFileDataData();
        data = new byte[4 + aLocal.length + 4 + dummyLocal.length];
        System.arraycopy(a.getHeaderId().getBytes(), 0, data, 0, 2);
        System.arraycopy(a.getLocalFileDataLength().getBytes(), 0, data, 2, 2);
        System.arraycopy(aLocal, 0, data, 4, aLocal.length);
        System.arraycopy(dummy.getHeaderId().getBytes(), 0, data, 
                         4+aLocal.length, 2);
        System.arraycopy(dummy.getLocalFileDataLength().getBytes(), 0, data, 
                         4+aLocal.length+2, 2);
        System.arraycopy(dummyLocal, 0, data, 
                         4+aLocal.length+4, dummyLocal.length);

    }

    
    public void testParse() throws Exception {
        ZipExtraField[] ze = ExtraFieldUtils.parse(data);
        assertEquals(""number of fields"", 2, ze.length);
        assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);
        assertEquals(""mode field 1"", 040755,
                     ((AsiExtraField) ze[0]).getMode());
        assertTrue(""type field 2"", ze[1] instanceof UnrecognizedExtraField);
        assertEquals(""data length field 2"", 0, 
                     ze[1].getLocalFileDataLength().getValue());

        byte[] data2 = new byte[data.length-1];
        System.arraycopy(data, 0, data2, 0, data2.length);
        try {
            ExtraFieldUtils.parse(data2);
            fail(""data should be invalid"");
        } catch (Exception e) {
            assertEquals(""message"", 
                         ""data starting at ""+(4+aLocal.length)+"" is in unknown format"",
                         e.getMessage());
        }
    }

    
    public void testMerge() {
        byte[] local = 
            ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, dummy});
        assertEquals(""local length"", data.length, local.length);
        for (int i=0; i<local.length; i++) {
            assertEquals(""local byte ""+i, data[i], local[i]);
        }
        
        byte[] dummyCentral = dummy.getCentralDirectoryData();
        byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length];
        System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2);
        System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, 
                         data2, 4+aLocal.length+2, 2);
        System.arraycopy(dummyCentral, 0, data2, 
                         4+aLocal.length+4, dummyCentral.length);


        byte[] central = 
            ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] {a, dummy});
        assertEquals(""central length"", data2.length, central.length);
        for (int i=0; i<central.length; i++) {
            assertEquals(""central byte ""+i, data2[i], central[i]);
        }
        
    }
}
"
L48530,Class,ZipEntryTest,org.apache.tools.zip.ZipEntryTest,L47793,L103,src/testcases/org/apache/tools/zip/ZipEntryTest.java,64,1,155,2,0.351931,1,2,2,0.26087,0.297297,24,22,2,1,1,4,5,0,0,14,17,0.5,0.119048,10,10,2,2,0.119048,10,0,0,0,0,0,74,92,0,0,0,0,3,0,3,0,3,60,0,3,0,74,92,0,0,0,0,3,0,3,0,3,60,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ZipEntryTest extends TestCase {

    public ZipEntryTest(String name) {
        super(name);
    }

    
    public void testExtraFields() {
        AsiExtraField a = new AsiExtraField();
        a.setDirectory(true);
        a.setMode(0755);
        UnrecognizedExtraField u = new UnrecognizedExtraField();
        u.setHeaderId(new ZipShort(1));
        u.setLocalFileDataData(new byte[0]);

        ZipEntry ze = new ZipEntry(""test/"");
        ze.setExtraFields(new ZipExtraField[] {a, u});
        byte[] data1 = ze.getExtra();
        ZipExtraField[] result = ze.getExtraFields();
        assertEquals(""first pass"", 2, result.length);
        assertSame(a, result[0]);
        assertSame(u, result[1]);

        UnrecognizedExtraField u2 = new UnrecognizedExtraField();
        u2.setHeaderId(new ZipShort(1));
        u2.setLocalFileDataData(new byte[] {1});

        ze.addExtraField(u2);
        byte[] data2 = ze.getExtra();
        result = ze.getExtraFields();
        assertEquals(""second pass"", 2, result.length);
        assertSame(a, result[0]);
        assertSame(u2, result[1]);
        assertEquals(""length second pass"", data1.length+1, data2.length);

        UnrecognizedExtraField u3 = new UnrecognizedExtraField();
        u3.setHeaderId(new ZipShort(2));
        u3.setLocalFileDataData(new byte[] {1});
        ze.addExtraField(u3);
        result = ze.getExtraFields();
        assertEquals(""third pass"", 3, result.length);

        ze.removeExtraField(new ZipShort(1));
        byte[] data3 = ze.getExtra();
        result = ze.getExtraFields();
        assertEquals(""fourth pass"", 2, result.length);
        assertSame(a, result[0]);
        assertSame(u3, result[1]);
        assertEquals(""length fourth pass"", data2.length, data3.length);

        try {
            ze.removeExtraField(new ZipShort(1));
            fail(""should be no such element"");
        } catch (java.util.NoSuchElementException nse) {
        }
    }

    public void testUnixMode() {
        ZipEntry ze = new ZipEntry(""foo"");
        assertEquals(0, ze.getPlatform());
        ze.setUnixMode(0755);
        assertEquals(3, ze.getPlatform());
        assertEquals(0755, 
                     (ze.getExternalAttributes() >> 16) & 0xFFFF);
        assertEquals(0, ze.getExternalAttributes()  & 0xFFFF);

        ze.setUnixMode(0444);
        assertEquals(3, ze.getPlatform());
        assertEquals(0444, 
                     (ze.getExternalAttributes() >> 16) & 0xFFFF);
        assertEquals(1, ze.getExternalAttributes()  & 0xFFFF);

        ze = new ZipEntry(""foo/"");
        assertEquals(0, ze.getPlatform());
        ze.setUnixMode(0777);
        assertEquals(3, ze.getPlatform());
        assertEquals(0777, 
                     (ze.getExternalAttributes() >> 16) & 0xFFFF);
        assertEquals(0x10, ze.getExternalAttributes()  & 0xFFFF);

        ze.setUnixMode(0577);
        assertEquals(3, ze.getPlatform());
        assertEquals(0577, 
                     (ze.getExternalAttributes() >> 16) & 0xFFFF);
        assertEquals(0x11, ze.getExternalAttributes()  & 0xFFFF);
    }

}
"
L48539,Class,ZipLongTest,org.apache.tools.zip.ZipLongTest,L47793,L103,src/testcases/org/apache/tools/zip/ZipLongTest.java,64,1,119,2,0.394872,1,1,1,0.267857,0.323529,15,11,4,0,0,5,1,0,0,5,10,0.833333,0.333333,17,17,5,1,0.333333,17,0,0,0,0,0,34,56,0,0,0,0,5,0,5,0,5,22,0,5,0,34,56,0,0,0,0,5,0,5,0,5,22,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ZipLongTest extends TestCase {

    public ZipLongTest(String name) {
        super(name);
    }

    
    public void testToBytes() {
        ZipLong zl = new ZipLong(0x12345678);
        byte[] result = zl.getBytes();
        assertEquals(""length getBytes"", 4, result.length);
        assertEquals(""first byte getBytes"", 0x78, result[0]);
        assertEquals(""second byte getBytes"", 0x56, result[1]);
        assertEquals(""third byte getBytes"", 0x34, result[2]);
        assertEquals(""fourth byte getBytes"", 0x12, result[3]);
    }

    
    public void testFromBytes() {
        byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12};
        ZipLong zl = new ZipLong(val);
        assertEquals(""value from bytes"", 0x12345678, zl.getValue());
    }

    
    public void testEquals() {
        ZipLong zl = new ZipLong(0x12345678);
        ZipLong zl2 = new ZipLong(0x12345678);
        ZipLong zl3 = new ZipLong(0x87654321);

        assertTrue(""reflexive"", zl.equals(zl));

        assertTrue(""works"", zl.equals(zl2));
        assertTrue(""works, part two"", !zl.equals(zl3));

        assertTrue(""symmetric"", zl2.equals(zl));

        assertTrue(""null handling"", !zl.equals(null));
        assertTrue(""non ZipLong handling"", !zl.equals(new Integer(0x1234)));
    }

    
    public void testSign() {
        ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});
        assertEquals(0x00000000FFFFFFFFl, zl.getValue());
    }

}
"
L48551,Class,ZipShortTest,org.apache.tools.zip.ZipShortTest,L47793,L103,src/testcases/org/apache/tools/zip/ZipShortTest.java,64,1,117,2,0.450292,1,1,1,0.277778,0.34375,15,11,4,0,0,5,1,0,0,5,10,0.833333,0.346939,17,17,5,1,0.346939,17,0,0,0,0,0,32,54,0,0,0,0,5,0,5,0,5,20,0,5,0,32,54,0,0,0,0,5,0,5,0,5,20,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ZipShortTest extends TestCase {

    public ZipShortTest(String name) {
        super(name);
    }

    
    public void testToBytes() {
        ZipShort zs = new ZipShort(0x1234);
        byte[] result = zs.getBytes();
        assertEquals(""length getBytes"", 2, result.length);
        assertEquals(""first byte getBytes"", 0x34, result[0]);
        assertEquals(""second byte getBytes"", 0x12, result[1]);
    }

    
    public void testFromBytes() {
        byte[] val = new byte[] {0x34, 0x12};
        ZipShort zs = new ZipShort(val);
        assertEquals(""value from bytes"", 0x1234, zs.getValue());
    }

    
    public void testEquals() {
        ZipShort zs = new ZipShort(0x1234);
        ZipShort zs2 = new ZipShort(0x1234);
        ZipShort zs3 = new ZipShort(0x5678);

        assertTrue(""reflexive"", zs.equals(zs));

        assertTrue(""works"", zs.equals(zs2));
        assertTrue(""works, part two"", !zs.equals(zs3));

        assertTrue(""symmetric"", zs2.equals(zs));

        assertTrue(""null handling"", !zs.equals(null));
        assertTrue(""non ZipShort handling"", !zs.equals(new Integer(0x1234)));
    }

    
    public void testSign() {
        ZipShort zs = new ZipShort(new byte[] {(byte)0xFF, (byte)0xFF});
        assertEquals(0x0000FFFF, zs.getValue());
    }

}
"
L48569,Class,Output,org.example.junit.Output,L48564,L103,src/testcases/org/example/junit/Output.java,65,1,74,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,0,0,0,2,0.333333,0.466667,7,7,1,2,0.466667,7,0,0,0,0,0,8,10,0,0,0,0,2,0,2,0,2,2,0,2,0,8,10,0,0,0,0,2,0,2,0,2,2,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.example.junit;

import junit.framework.TestCase;


public class Output extends TestCase {

    public Output(String s) {
        super(s);
    }

    public void testOutput() {
        System.out.println(""foo"");
    }
}
"
L48574,Class,ThreadedOutput,org.example.junit.ThreadedOutput,L48564,L103,src/testcases/org/example/junit/ThreadedOutput.java,65,1,80,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,0,0,0,2,0.333333,0.388889,7,7,1,2,0.333333,7,0,0,0,0,0,11,13,0,0,0,0,2,0,2,0,2,4,0,2,0,14,16,0,0,0,0,3,0,3,0,3,5,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.example.junit;

import junit.framework.TestCase;


public class ThreadedOutput extends TestCase {

    public ThreadedOutput(String s) {
        super(s);
    }

    public void testOutput() throws InterruptedException {
        Thread t = new Thread(new Runnable() {
                public void run() {
                    System.out.println(""foo"");
                }
            });
        t.start();
        t.join();
    }
}
"
L48581,Class,ThreadedOutput$1,org.example.junit.ThreadedOutput$1,L48578,L103,src/testcases/org/example/junit/ThreadedOutput.java,72,46,76,14,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.example.junit;

import junit.framework.TestCase;


public class ThreadedOutput extends TestCase {

    public ThreadedOutput(String s) {
        super(s);
    }

    public void testOutput() throws InterruptedException {
        Thread t = new Thread(new Runnable() {
                public void run() {
                    System.out.println(""foo"");
                }
            });
        t.start();
        t.join();
    }
}
"
L48587,Class,TaskdefTestContainerTask,org.example.tasks.TaskdefTestContainerTask,L48583,L103,src/testcases/org/example/tasks/TaskdefTestContainerTask.java,59,1,61,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,3,4,0,0,1,3,3,10,9,0,0,1,0,1,0,38,0,0,28,7,3,3,10,9,0,0,1,0,1,0,38,0,0,28,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.tasks;

import org.apache.tools.ant.taskdefs.Sequential;

public class TaskdefTestContainerTask extends Sequential {
    public TaskdefTestContainerTask() {}
}
"
L48592,Class,TaskdefTestSimpleTask,org.example.tasks.TaskdefTestSimpleTask,L48583,L103,src/testcases/org/example/tasks/TaskdefTestSimpleTask.java,60,1,80,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,3,0,0,3,6,0.0,0.0,0,0,0,4,0.0,0,2,2,0,0,1,11,16,10,9,1,0,3,0,3,0,38,3,0,28,7,16,21,11,9,2,0,5,0,4,1,40,4,0,29,8,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.tasks;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;

public class TaskdefTestSimpleTask extends Task {

    public class Echo {
        Echo() {}
        private String message = null;
        public void setMessage(String s) {message = s;}
    }
    
    public TaskdefTestSimpleTask() {}
    
    private Echo echo;
    public Echo createEcho() {
        echo = new Echo();
        return echo;
    }
    
    public void execute() {
        log(""simpletask: ""+echo.message, Project.MSG_INFO);
    }

}

"
L48593,Class,TaskdefTestSimpleTask$Echo,org.example.tasks.TaskdefTestSimpleTask$Echo,L48592,L103,src/testcases/org/example/tasks/TaskdefTestSimpleTask.java,62,5,66,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,0,1,1,0,2,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,1,0,1,0,2,0,1,1,2,1,0,1,1,5,5,1,0,1,0,2,0,1,1,2,1,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.tasks;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;

public class TaskdefTestSimpleTask extends Task {

    public class Echo {
        Echo() {}
        private String message = null;
        public void setMessage(String s) {message = s;}
    }
    
    public TaskdefTestSimpleTask() {}
    
    private Echo echo;
    public Echo createEcho() {
        echo = new Echo();
        return echo;
    }
    
    public void execute() {
        log(""simpletask: ""+echo.message, Project.MSG_INFO);
    }

}

"
L48610,Class,TypedefTestType,org.example.types.TypedefTestType,L48607,L103,src/testcases/org/example/types/TypedefTestType.java,59,1,60,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,0,0,1,2,2,1,1,0,0,0,0,0,0,5,0,0,5,1,2,2,1,1,0,0,0,0,0,0,5,0,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.types;

import org.apache.tools.ant.ProjectComponent;

public class TypedefTestType extends ProjectComponent {
}

"
L189,Class,ContainsOnlyInner,test.ContainsOnlyInner,L104,L103,src/etc/testcases/taskdefs/optional/depend/src4/test/ContainsOnlyInner.java,3,1,7,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,2,1,0,0,1,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,0,0,1,1,0,0,0,5,5,0,0,0,0,1,0,0,0,1,1,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"package test;

public class ContainsOnlyInner {
    void method1() {
        System.out.println(Outer.Inner.class);
    }    
}

"
L207,Class,MethodParam,test.MethodParam,L104,L103,src/etc/testcases/taskdefs/optional/depend/src4/test/MethodParam.java,3,1,7,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,0,1,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,0,0,1,1,0,0,0,5,5,0,0,0,0,1,0,0,0,1,1,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"package test;

public class MethodParam {
    void method1() {
        System.out.print(ContainsOnlyInner.class);
    }
}

"
L204,Class,Outer,test.Outer,L104,L103,src/etc/testcases/taskdefs/optional/depend/src4/test/Outer.java,3,1,6,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"package test;

public class Outer {
    static class Inner {
    }
}

"
L201,Class,Outer$Inner,test.Outer$Inner,L204,L103,src/etc/testcases/taskdefs/optional/depend/src4/test/Outer.java,4,5,5,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"package test;

public class Outer {
    static class Inner {
    }
}

"
L127,Class,SpecialSeq,test.SpecialSeq,L104,L103,src/etc/testcases/core/containersrc/test/SpecialSeq.java,63,1,103,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,7,7,0,0,5,9,0.4,0.285714,10,10,2,3,0.285714,10,2,3,0,0,2,25,41,12,9,3,0,4,0,4,0,39,11,0,29,7,25,41,12,9,3,0,4,0,4,0,39,11,0,29,7,,,,,,,,,,,,,,,,,,,,,,,,,"
package test;

import org.apache.tools.ant.Task;
import org.apache.tools.ant.TaskContainer;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.taskdefs.Echo;
import java.util.*;

public class SpecialSeq extends Task implements TaskContainer {
    
    private Vector nestedTasks = new Vector();

    private FileSet fileset;
    
    private Echo nestedEcho;
    
    
    public void addTask(Task nestedTask) {
        nestedTasks.addElement(nestedTask);
    }

    
    public void execute() throws BuildException {
        if (fileset == null || fileset.getDir(getProject()) == null) {
            throw new BuildException(""Fileset was not configured"");
        }
        for (Enumeration e = nestedTasks.elements(); e.hasMoreElements();) {
            Task nestedTask = (Task) e.nextElement();
            nestedTask.perform();
        }
        nestedEcho.reconfigure();
        nestedEcho.perform();
    }

    public void addFileset(FileSet fileset) {
        this.fileset = fileset;
    }
    
    public void addNested(Echo nestedEcho) {
        this.nestedEcho = nestedEcho;
    }
}
"
