ID,Type,Name,LongName,Parent,Component,Path,Line,Column,EndLine,EndColumn,CC,CCL,CCO,CI,CLC,CLLC,LDC,LLDC,LCOM5,NL,NLE,WMC,CBO,CBOI,NII,NOI,RFC,AD,CD,CLOC,DLOC,PDA,PUA,TCD,TCLOC,DIT,NOA,NOC,NOD,NOP,LLOC,LOC,NA,NG,NLA,NLG,NLM,NLPA,NLPM,NLS,NM,NOS,NPA,NPM,NS,TLLOC,TLOC,TNA,TNG,TNLA,TNLG,TNLM,TNLPA,TNLPM,TNLS,TNM,TNOS,TNPA,TNPM,TNS,name,version,name.1,wmc,dit,noc,cbo,rfc,lcom,ca,ce,npm,lcom3,loc,dam,moa,mfa,cam,ic,cbm,amc,max_cc,avg_cc,bug,code
L284,Class,A,A,L104,L103,src/etc/testcases/taskdefs/optional/depend/src1/A.java,1,1,3,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,2,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A extends B {
    private D d = new D();
}

"
L301,Class,A,A,L104,L103,src/etc/testcases/taskdefs/optional/depend/src2/A.java,1,1,4,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner extends B {
    }
}

"
L307,Class,A,A,L104,L103,src/etc/testcases/taskdefs/optional/depend/src3/A.java,1,1,6,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner {
        static private class Inner2 extends B {
        }
    }
}

"
L315,Class,A,A,L104,L103,src/etc/testcases/taskdefs/optional/depend/src5/A.java,1,1,3,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,3,3,1,0,1,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    APrivate dependency = new APrivate();
}

class APrivate extends B {
}
"
L303,Class,A$Inner,A$Inner,L301,L103,src/etc/testcases/taskdefs/optional/depend/src2/A.java,2,5,3,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner extends B {
    }
}

"
L309,Class,A$Inner,A$Inner,L307,L103,src/etc/testcases/taskdefs/optional/depend/src3/A.java,2,5,5,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner {
        static private class Inner2 extends B {
        }
    }
}

"
L311,Class,A$Inner$Inner2,A$Inner$Inner2,L309,L103,src/etc/testcases/taskdefs/optional/depend/src3/A.java,3,9,4,10,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    static private class Inner {
        static private class Inner2 extends B {
        }
    }
}

"
L318,Class,APrivate,APrivate,L104,L103,src/etc/testcases/taskdefs/optional/depend/src5/A.java,5,1,6,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,2,2,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class A {
    APrivate dependency = new APrivate();
}

class APrivate extends B {
}
"
L285,Class,B,B,L104,L103,src/etc/testcases/taskdefs/optional/depend/src1/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,4,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,4,4,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B extends C {
}

"
L305,Class,B,B,L104,L103,src/etc/testcases/taskdefs/optional/depend/src2/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B {
}

"
L313,Class,B,B,L104,L103,src/etc/testcases/taskdefs/optional/depend/src3/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B {
}

"
L322,Class,B,B,L104,L103,src/etc/testcases/taskdefs/optional/depend/src5/B.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class B {
}

"
L295,Class,C,C,L104,L103,src/etc/testcases/taskdefs/optional/depend/src1/C.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,1,5,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class C {
}

"
L292,Class,D,D,L104,L103,src/etc/testcases/taskdefs/optional/depend/src1/D.java,1,1,2,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class D {
}

"
L153,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk1.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,2,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L182,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk2.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L188,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk3.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L194,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk4.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L200,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk5.java,1,1,13,1,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.411765,7,0,0,3,0.411765,7,0,0,0,0,0,10,13,1,0,1,0,1,1,1,0,1,4,1,1,0,10,13,1,0,1,0,1,1,1,0,1,4,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have      a tab"");
        
        if (mybool) {   char mychar = '   ';      
        } 
        
    } 
}
"
L206,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk6.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L212,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk7.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L218,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk8.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L224,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/expected/Junk9.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L230,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk1.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L236,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk2.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L242,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk3.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L248,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk4.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L254,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk5.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L260,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk6.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L266,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk7.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
        System.out.println(""I have	a tab"");
        
        if (mybool) {   char mychar = '	';      
        } 
        
    } 
}
"
L272,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk8.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L278,Class,Junk1,Junk1,L104,L103,src/etc/testcases/taskdefs/fixcrlf/input/Junk9.java,1,1,12,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.4375,7,0,0,3,0.4375,7,0,0,0,0,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,9,12,1,0,1,0,1,1,1,0,1,3,1,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"public class Junk1 {
    public boolean mybool;
    public static void main (String[] args) {
	System.out.println(""I have	a tab"");
	
	if (mybool) {	char mychar = '	';	
	} 
	
    } 
}
"
L34106,Class,AntClassLoaderTest,org.apache.tools.ant.AntClassLoaderTest,L335,L103,src/testcases/org/apache/tools/ant/AntClassLoaderTest.java,64,1,111,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,8,4,0,0,7,10,0.25,0.255319,12,5,1,3,0.255319,12,0,0,0,0,0,35,48,1,0,1,0,3,0,3,1,3,18,0,3,1,35,48,1,0,1,0,3,0,3,1,3,18,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;
import org.apache.tools.ant.types.Path;
import junit.framework.TestCase;


public class AntClassLoaderTest extends TestCase {

    private Project p;

    public AntClassLoaderTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
    }

    public void testCleanup() throws BuildException {
        Path path = new Path(p, ""."");
        AntClassLoader loader = new AntClassLoader(p, path);
        try {
            
            loader.findClass(""fubar"");
            fail(""Did not expect to find fubar class"");
        } catch (ClassNotFoundException e) {
            
        }
        
        loader.cleanup();
        try {
            
            loader.findClass(""fubar"");
            fail(""Did not expect to find fubar class"");
        } catch (ClassNotFoundException e) {
            
        } catch (NullPointerException e) {
            fail(""loader should not fail even if cleaned up"");
        }
        
        
        p.fireBuildFinished(null);
        try {
            
            loader.findClass(""fubar"");
            fail(""Did not expect to find fubar class"");
        } catch (ClassNotFoundException e) {
            
        } catch (NullPointerException e) {
            fail(""loader should not fail even if project finished"");
        }
    }
}

"
L12728,Class,BuildFileTest,org.apache.tools.ant.BuildFileTest,L335,L103,src/testcases/org/apache/tools/ant/BuildFileTest.java,72,1,466,2,0.0,0,0,0,0.0,0.0,0,0,1,3,3,34,5,71,595,8,32,1.0,0.440559,126,126,2,0,0.480556,173,0,0,69,69,0,160,320,6,8,6,8,24,0,1,0,24,88,0,1,0,187,395,6,8,6,8,32,0,9,0,32,92,0,9,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.*;
import org.apache.tools.ant.*;
import java.io.*;
import java.net.URL;


public abstract class BuildFileTest extends TestCase { 
    
    protected Project project;
    
    private StringBuffer logBuffer;
    private StringBuffer fullLogBuffer;
    private StringBuffer outBuffer;
    private StringBuffer errBuffer;
    private BuildException buildException;
    
        
    public BuildFileTest(String name) {
        super(name);
    }
    
        
    protected void expectBuildException(String target, String cause) { 
        expectSpecificBuildException(target, cause, null);
    }

    
    protected void expectLog(String target, String log) { 
        executeTarget(target);
        String realLog = getLog();
        assertEquals(log, realLog);
    }

    
    protected void expectLogContaining(String target, String log) { 
        executeTarget(target);
        String realLog = getLog();
        assertTrue(""expecting log to contain \""""+log+""\"" log was \""""
                   + realLog + ""\"""", 
                   realLog.indexOf(log) >= 0);
    }

        
    protected String getLog() { 
        return logBuffer.toString();
    }

    
    protected void expectDebuglog(String target, String log) { 
        executeTarget(target);
        String realLog = getFullLog();
        assertEquals(log, realLog);
    }

    
    protected String getFullLog() { 
        return fullLogBuffer.toString();
    }

    
    
    protected void expectOutput(String target, String output) { 
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
    }

    
     
    protected void expectOutputAndError(String target, String output, String error) { 
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
        String realError = getError();
        assertEquals(error, realError);
    }

    protected String getOutput() {
        return cleanBuffer(outBuffer);
    }
     
    protected String getError() {
        return cleanBuffer(errBuffer);
    }
        
    protected BuildException getBuildException() {
        return buildException;
    }

    private String cleanBuffer(StringBuffer buffer) {
        StringBuffer cleanedBuffer = new StringBuffer();
        boolean cr = false;
        for (int i = 0; i < buffer.length(); i++) { 
            char ch = buffer.charAt(i);
            if (ch == '\r') {
                cr = true;
                continue;
            }

            if (!cr) { 
                cleanedBuffer.append(ch);
            } else { 
                if (ch == '\n') {
                    cleanedBuffer.append(ch);
                } else {
                    cleanedBuffer.append('\r').append(ch);
                }
            }
        }
        return cleanedBuffer.toString();
    }
    
        
    protected void configureProject(String filename) throws BuildException { 
        logBuffer = new StringBuffer();
        fullLogBuffer = new StringBuffer();
        project = new Project();
        project.init();
        project.setUserProperty( ""ant.file"" , new File(filename).getAbsolutePath() );
        project.addBuildListener(new AntTestListener());
        ProjectHelper.configureProject(project, new File(filename));
    }
    
        
    protected void executeTarget(String targetName) { 
        PrintStream sysOut = System.out;
        PrintStream sysErr = System.err;
        try { 
            sysOut.flush();
            sysErr.flush();
            outBuffer = new StringBuffer();
            PrintStream out = new PrintStream(new AntOutputStream());
            System.setOut(out);
            errBuffer = new StringBuffer();
            PrintStream err = new PrintStream(new AntOutputStream());
            System.setErr(err);
            logBuffer = new StringBuffer();
            fullLogBuffer = new StringBuffer();
            buildException = null;
            project.executeTarget(targetName);
        } finally { 
            System.setOut(sysOut);
            System.setErr(sysErr);
        }
        
    }
    
    
    protected Project getProject() {
        return project;
    }

    
    protected File getProjectDir() {
        return project.getBaseDir();
    }

        
    protected void expectSpecificBuildException(String target, String cause, String msg) { 
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != msg) && (!ex.getMessage().equals(msg))) {
                fail(""Should throw BuildException because '"" + cause
                        + ""' with message '"" + msg
                        + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }
    
    
    protected void expectBuildExceptionContaining(String target, String cause, String contains) { 
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {
                fail(""Should throw BuildException because '"" + cause + ""' with message containing '"" + contains + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }
    

    

    protected void expectPropertySet(String target, String property, String value) {
        executeTarget(target);
        assertPropertyEquals(property, value);
    }

    
    protected void assertPropertyEquals(String property, String value) {
        String result = project.getProperty(property);
        assertEquals(""property "" + property,value,result);
    }

    
    protected void assertPropertySet(String property) {
        assertPropertyEquals(property, ""true"");
    }

    
    protected void assertPropertyUnset(String property) {
        assertPropertyEquals(property, null);
    }


    
    protected void expectPropertySet(String target, String property) {
        expectPropertySet(target, property, ""true"");
    }


    
    protected void expectPropertyUnset(String target, String property) {
        expectPropertySet(target, property, null);
    }

    
    protected URL getResource(String resource){
        URL url = getClass().getResource(resource);
        assertNotNull(""Could not find resource :"" + resource, url);
        return url;
    }

    
    private class AntOutputStream extends java.io.OutputStream {
        public void write(int b) { 
            outBuffer.append((char)b);
        }
    }

    
    private class AntTestListener implements BuildListener {
        
        public void buildStarted(BuildEvent event) {
        }

        
        public void buildFinished(BuildEvent event) {
        }

        
        public void targetStarted(BuildEvent event) {
            
        }

        
        public void targetFinished(BuildEvent event) {
            
        }

        
        public void taskStarted(BuildEvent event) {
            
        }

        
        public void taskFinished(BuildEvent event) {
            
        }

        
        public void messageLogged(BuildEvent event) {
            if (event.getPriority() == Project.MSG_INFO ||
                event.getPriority() == Project.MSG_WARN ||
                event.getPriority() == Project.MSG_ERR) {
                logBuffer.append(event.getMessage());
            }
            fullLogBuffer.append(event.getMessage());
            
        }
    }


}
"
L34169,Class,BuildFileTest$AntOutputStream,org.apache.tools.ant.BuildFileTest$AntOutputStream,L12728,L103,src/testcases/org/apache/tools/ant/BuildFileTest.java,385,5,389,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,1,0,0,1,0.5,0.375,3,3,1,1,0.375,3,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.*;
import org.apache.tools.ant.*;
import java.io.*;
import java.net.URL;


public abstract class BuildFileTest extends TestCase { 
    
    protected Project project;
    
    private StringBuffer logBuffer;
    private StringBuffer fullLogBuffer;
    private StringBuffer outBuffer;
    private StringBuffer errBuffer;
    private BuildException buildException;
    
        
    public BuildFileTest(String name) {
        super(name);
    }
    
        
    protected void expectBuildException(String target, String cause) { 
        expectSpecificBuildException(target, cause, null);
    }

    
    protected void expectLog(String target, String log) { 
        executeTarget(target);
        String realLog = getLog();
        assertEquals(log, realLog);
    }

    
    protected void expectLogContaining(String target, String log) { 
        executeTarget(target);
        String realLog = getLog();
        assertTrue(""expecting log to contain \""""+log+""\"" log was \""""
                   + realLog + ""\"""", 
                   realLog.indexOf(log) >= 0);
    }

        
    protected String getLog() { 
        return logBuffer.toString();
    }

    
    protected void expectDebuglog(String target, String log) { 
        executeTarget(target);
        String realLog = getFullLog();
        assertEquals(log, realLog);
    }

    
    protected String getFullLog() { 
        return fullLogBuffer.toString();
    }

    
    
    protected void expectOutput(String target, String output) { 
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
    }

    
     
    protected void expectOutputAndError(String target, String output, String error) { 
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
        String realError = getError();
        assertEquals(error, realError);
    }

    protected String getOutput() {
        return cleanBuffer(outBuffer);
    }
     
    protected String getError() {
        return cleanBuffer(errBuffer);
    }
        
    protected BuildException getBuildException() {
        return buildException;
    }

    private String cleanBuffer(StringBuffer buffer) {
        StringBuffer cleanedBuffer = new StringBuffer();
        boolean cr = false;
        for (int i = 0; i < buffer.length(); i++) { 
            char ch = buffer.charAt(i);
            if (ch == '\r') {
                cr = true;
                continue;
            }

            if (!cr) { 
                cleanedBuffer.append(ch);
            } else { 
                if (ch == '\n') {
                    cleanedBuffer.append(ch);
                } else {
                    cleanedBuffer.append('\r').append(ch);
                }
            }
        }
        return cleanedBuffer.toString();
    }
    
        
    protected void configureProject(String filename) throws BuildException { 
        logBuffer = new StringBuffer();
        fullLogBuffer = new StringBuffer();
        project = new Project();
        project.init();
        project.setUserProperty( ""ant.file"" , new File(filename).getAbsolutePath() );
        project.addBuildListener(new AntTestListener());
        ProjectHelper.configureProject(project, new File(filename));
    }
    
        
    protected void executeTarget(String targetName) { 
        PrintStream sysOut = System.out;
        PrintStream sysErr = System.err;
        try { 
            sysOut.flush();
            sysErr.flush();
            outBuffer = new StringBuffer();
            PrintStream out = new PrintStream(new AntOutputStream());
            System.setOut(out);
            errBuffer = new StringBuffer();
            PrintStream err = new PrintStream(new AntOutputStream());
            System.setErr(err);
            logBuffer = new StringBuffer();
            fullLogBuffer = new StringBuffer();
            buildException = null;
            project.executeTarget(targetName);
        } finally { 
            System.setOut(sysOut);
            System.setErr(sysErr);
        }
        
    }
    
    
    protected Project getProject() {
        return project;
    }

    
    protected File getProjectDir() {
        return project.getBaseDir();
    }

        
    protected void expectSpecificBuildException(String target, String cause, String msg) { 
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != msg) && (!ex.getMessage().equals(msg))) {
                fail(""Should throw BuildException because '"" + cause
                        + ""' with message '"" + msg
                        + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }
    
    
    protected void expectBuildExceptionContaining(String target, String cause, String contains) { 
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {
                fail(""Should throw BuildException because '"" + cause + ""' with message containing '"" + contains + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }
    

    

    protected void expectPropertySet(String target, String property, String value) {
        executeTarget(target);
        assertPropertyEquals(property, value);
    }

    
    protected void assertPropertyEquals(String property, String value) {
        String result = project.getProperty(property);
        assertEquals(""property "" + property,value,result);
    }

    
    protected void assertPropertySet(String property) {
        assertPropertyEquals(property, ""true"");
    }

    
    protected void assertPropertyUnset(String property) {
        assertPropertyEquals(property, null);
    }


    
    protected void expectPropertySet(String target, String property) {
        expectPropertySet(target, property, ""true"");
    }


    
    protected void expectPropertyUnset(String target, String property) {
        expectPropertySet(target, property, null);
    }

    
    protected URL getResource(String resource){
        URL url = getClass().getResource(resource);
        assertNotNull(""Could not find resource :"" + resource, url);
        return url;
    }

    
    private class AntOutputStream extends java.io.OutputStream {
        public void write(int b) { 
            outBuffer.append((char)b);
        }
    }

    
    private class AntTestListener implements BuildListener {
        
        public void buildStarted(BuildEvent event) {
        }

        
        public void buildFinished(BuildEvent event) {
        }

        
        public void targetStarted(BuildEvent event) {
            
        }

        
        public void targetFinished(BuildEvent event) {
            
        }

        
        public void taskStarted(BuildEvent event) {
            
        }

        
        public void taskFinished(BuildEvent event) {
            
        }

        
        public void messageLogged(BuildEvent event) {
            if (event.getPriority() == Project.MSG_INFO ||
                event.getPriority() == Project.MSG_WARN ||
                event.getPriority() == Project.MSG_ERR) {
                logBuffer.append(event.getMessage());
            }
            fullLogBuffer.append(event.getMessage());
            
        }
    }


}
"
L34162,Class,BuildFileTest$AntTestListener,org.apache.tools.ant.BuildFileTest$AntTestListener,L12728,L103,src/testcases/org/apache/tools/ant/BuildFileTest.java,394,5,463,6,0.0,0,0,0,0.0,0.0,0,0,7,1,1,10,4,1,0,2,9,1.0,0.666667,44,40,8,0,0.666667,44,1,1,0,0,1,22,70,0,0,0,0,7,0,7,0,7,3,0,7,0,22,70,0,0,0,0,7,0,7,0,7,3,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.*;
import org.apache.tools.ant.*;
import java.io.*;
import java.net.URL;


public abstract class BuildFileTest extends TestCase { 
    
    protected Project project;
    
    private StringBuffer logBuffer;
    private StringBuffer fullLogBuffer;
    private StringBuffer outBuffer;
    private StringBuffer errBuffer;
    private BuildException buildException;
    
        
    public BuildFileTest(String name) {
        super(name);
    }
    
        
    protected void expectBuildException(String target, String cause) { 
        expectSpecificBuildException(target, cause, null);
    }

    
    protected void expectLog(String target, String log) { 
        executeTarget(target);
        String realLog = getLog();
        assertEquals(log, realLog);
    }

    
    protected void expectLogContaining(String target, String log) { 
        executeTarget(target);
        String realLog = getLog();
        assertTrue(""expecting log to contain \""""+log+""\"" log was \""""
                   + realLog + ""\"""", 
                   realLog.indexOf(log) >= 0);
    }

        
    protected String getLog() { 
        return logBuffer.toString();
    }

    
    protected void expectDebuglog(String target, String log) { 
        executeTarget(target);
        String realLog = getFullLog();
        assertEquals(log, realLog);
    }

    
    protected String getFullLog() { 
        return fullLogBuffer.toString();
    }

    
    
    protected void expectOutput(String target, String output) { 
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
    }

    
     
    protected void expectOutputAndError(String target, String output, String error) { 
        executeTarget(target);
        String realOutput = getOutput();
        assertEquals(output, realOutput);
        String realError = getError();
        assertEquals(error, realError);
    }

    protected String getOutput() {
        return cleanBuffer(outBuffer);
    }
     
    protected String getError() {
        return cleanBuffer(errBuffer);
    }
        
    protected BuildException getBuildException() {
        return buildException;
    }

    private String cleanBuffer(StringBuffer buffer) {
        StringBuffer cleanedBuffer = new StringBuffer();
        boolean cr = false;
        for (int i = 0; i < buffer.length(); i++) { 
            char ch = buffer.charAt(i);
            if (ch == '\r') {
                cr = true;
                continue;
            }

            if (!cr) { 
                cleanedBuffer.append(ch);
            } else { 
                if (ch == '\n') {
                    cleanedBuffer.append(ch);
                } else {
                    cleanedBuffer.append('\r').append(ch);
                }
            }
        }
        return cleanedBuffer.toString();
    }
    
        
    protected void configureProject(String filename) throws BuildException { 
        logBuffer = new StringBuffer();
        fullLogBuffer = new StringBuffer();
        project = new Project();
        project.init();
        project.setUserProperty( ""ant.file"" , new File(filename).getAbsolutePath() );
        project.addBuildListener(new AntTestListener());
        ProjectHelper.configureProject(project, new File(filename));
    }
    
        
    protected void executeTarget(String targetName) { 
        PrintStream sysOut = System.out;
        PrintStream sysErr = System.err;
        try { 
            sysOut.flush();
            sysErr.flush();
            outBuffer = new StringBuffer();
            PrintStream out = new PrintStream(new AntOutputStream());
            System.setOut(out);
            errBuffer = new StringBuffer();
            PrintStream err = new PrintStream(new AntOutputStream());
            System.setErr(err);
            logBuffer = new StringBuffer();
            fullLogBuffer = new StringBuffer();
            buildException = null;
            project.executeTarget(targetName);
        } finally { 
            System.setOut(sysOut);
            System.setErr(sysErr);
        }
        
    }
    
    
    protected Project getProject() {
        return project;
    }

    
    protected File getProjectDir() {
        return project.getBaseDir();
    }

        
    protected void expectSpecificBuildException(String target, String cause, String msg) { 
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != msg) && (!ex.getMessage().equals(msg))) {
                fail(""Should throw BuildException because '"" + cause
                        + ""' with message '"" + msg
                        + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }
    
    
    protected void expectBuildExceptionContaining(String target, String cause, String contains) { 
        try {
            executeTarget(target);
        } catch (org.apache.tools.ant.BuildException ex) {
            buildException = ex;
            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {
                fail(""Should throw BuildException because '"" + cause + ""' with message containing '"" + contains + ""' (actual message '"" + ex.getMessage() + ""' instead)"");
            }
            return;
        }
        fail(""Should throw BuildException because: "" + cause);
    }
    

    

    protected void expectPropertySet(String target, String property, String value) {
        executeTarget(target);
        assertPropertyEquals(property, value);
    }

    
    protected void assertPropertyEquals(String property, String value) {
        String result = project.getProperty(property);
        assertEquals(""property "" + property,value,result);
    }

    
    protected void assertPropertySet(String property) {
        assertPropertyEquals(property, ""true"");
    }

    
    protected void assertPropertyUnset(String property) {
        assertPropertyEquals(property, null);
    }


    
    protected void expectPropertySet(String target, String property) {
        expectPropertySet(target, property, ""true"");
    }


    
    protected void expectPropertyUnset(String target, String property) {
        expectPropertySet(target, property, null);
    }

    
    protected URL getResource(String resource){
        URL url = getClass().getResource(resource);
        assertNotNull(""Could not find resource :"" + resource, url);
        return url;
    }

    
    private class AntOutputStream extends java.io.OutputStream {
        public void write(int b) { 
            outBuffer.append((char)b);
        }
    }

    
    private class AntTestListener implements BuildListener {
        
        public void buildStarted(BuildEvent event) {
        }

        
        public void buildFinished(BuildEvent event) {
        }

        
        public void targetStarted(BuildEvent event) {
            
        }

        
        public void targetFinished(BuildEvent event) {
            
        }

        
        public void taskStarted(BuildEvent event) {
            
        }

        
        public void taskFinished(BuildEvent event) {
            
        }

        
        public void messageLogged(BuildEvent event) {
            if (event.getPriority() == Project.MSG_INFO ||
                event.getPriority() == Project.MSG_WARN ||
                event.getPriority() == Project.MSG_ERR) {
                logBuffer.append(event.getMessage());
            }
            fullLogBuffer.append(event.getMessage());
            
        }
    }


}
"
L34227,Class,DirectoryScannerTest,org.apache.tools.ant.DirectoryScannerTest,L335,L103,src/testcases/org/apache/tools/ant/DirectoryScannerTest.java,70,1,208,2,0.595142,2,16,4,0.410072,0.50505,57,50,2,5,4,19,3,0,0,8,11,0.75,0.188525,23,15,3,1,0.188525,23,0,0,0,0,0,99,139,1,0,1,0,3,0,3,0,3,78,0,3,0,99,139,1,0,1,0,3,0,3,0,3,78,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.taskdefs.condition.Os;
import org.apache.tools.ant.util.JavaEnvUtils;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;
import java.io.File;
import java.io.IOException;


public class DirectoryScannerTest extends TestCase {

    public DirectoryScannerTest(String name) {super(name);}


    
    private boolean supportsSymlinks = Os.isFamily(""unix"") 
        && !JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1);

    

    public void testSetFollowLinks() {
        if (supportsSymlinks) {
            try {
                
                String[] command = new String[] {
                    ""ln"", ""-s"", ""ant"", ""src/main/org/apache/tools/ThisIsALink""
                };
                try {
                    Runtime.getRuntime().exec(command);
                    
                    
                    
                    Thread.sleep(1000);    
                } catch (IOException ioe) {
                    fail(""IOException making link ""+ioe);
                } catch (InterruptedException ie) {
                }
                
                File dir = new File(""src/main/org/apache/tools"");
                DirectoryScanner ds = new DirectoryScanner();

                
                
                ds.setFollowSymlinks(true);
                
                ds.setBasedir(dir);
                ds.setExcludes(new String[] {""ant
    public void testChildrenOfExcludedDirectory() {
        File dir = new File(""src/main/org/apache/tools"");
        DirectoryScanner ds = new DirectoryScanner();
        ds.setBasedir(dir);
        ds.setExcludes(new String[] {""ant/**""});
        ds.scan();

        boolean haveZipPackage = false;
        boolean haveTaskdefsPackage = false;
        String[] included = ds.getIncludedDirectories();
        for (int i=0; i<included.length; i++) {
            if (included[i].equals(""zip"")) {
                haveZipPackage = true;
            } else if (included[i].equals(""ant""+File.separator+""taskdefs"")) {
                haveTaskdefsPackage = true;
            }
        }
        assertTrue(""(1) zip package included"", haveZipPackage);
        assertTrue(""(1) taskdefs package not included"", !haveTaskdefsPackage);

        ds = new DirectoryScanner();
        ds.setBasedir(dir);
        ds.setExcludes(new String[] {""ant""});
        ds.scan();
        haveZipPackage = false;
        included = ds.getIncludedDirectories();
        for (int i=0; i<included.length; i++) {
            if (included[i].equals(""zip"")) {
                haveZipPackage = true;
            } else if (included[i].equals(""ant""+File.separator+""taskdefs"")) {
                haveTaskdefsPackage = true;
            }
        }
        assertTrue(""(2) zip package included"", haveZipPackage);
        assertTrue(""(2) taskdefs package included"", haveTaskdefsPackage);

    }

}
"
L34238,Class,DummyTaskAbstract,org.apache.tools.ant.DummyTaskAbstract,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskAbstract.java,59,1,68,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,1,1,0,1,4,0.0,0.0,0,0,0,4,0.0,0,2,2,0,0,1,7,10,9,7,0,0,3,0,3,0,31,0,0,25,7,7,10,9,7,0,0,3,0,3,0,31,0,0,25,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public abstract class DummyTaskAbstract extends Task {

    public DummyTaskAbstract() {
    }

    public void execute() {
    }
    
    public abstract void abstractDummy();
}
"
L34242,Interface,DummyTaskInterface,org.apache.tools.ant.DummyTaskInterface,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskInterface.java,57,1,61,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,3,5,0,0,0,0,1,0,1,0,1,0,0,1,0,3,5,0,0,0,0,1,0,1,0,1,0,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public interface DummyTaskInterface {

    void execute();

}
"
L34244,Class,DummyTaskOk,org.apache.tools.ant.DummyTaskOk,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskOk.java,59,1,67,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,6,9,9,7,0,0,2,0,2,0,30,0,0,24,7,6,9,9,7,0,0,2,0,2,0,30,0,0,24,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public class DummyTaskOk extends Task {

    public DummyTaskOk() {
    }

    public void execute() {
    }
    
}
"
L34247,Class,DummyTaskOkNonTask,org.apache.tools.ant.DummyTaskOkNonTask,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskOkNonTask.java,57,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskOkNonTask {

    public DummyTaskOkNonTask() {
    }

    public void execute() {
    }
    
}
"
L34445,Class,DummyTaskPackage,org.apache.tools.ant.DummyTaskPackage,L335,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,247,1,250,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,4,4,9,7,0,0,2,0,2,0,30,0,0,24,7,4,4,9,7,0,0,2,0,2,0,30,0,0,24,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L34250,Class,DummyTaskWithNonPublicExecute,org.apache.tools.ant.DummyTaskWithNonPublicExecute,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskWithNonPublicExecute.java,57,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,6,9,0,0,0,0,2,0,1,0,2,0,0,1,0,6,9,0,0,0,0,2,0,1,0,2,0,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskWithNonPublicExecute {

    public DummyTaskWithNonPublicExecute() {
    }

    void execute() {
    }
    
}
"
L34253,Class,DummyTaskWithNonVoidExecute,org.apache.tools.ant.DummyTaskWithNonVoidExecute,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskWithNonVoidExecute.java,57,1,66,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,7,10,0,0,0,0,2,0,2,0,2,1,0,2,0,7,10,0,0,0,0,2,0,2,0,2,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskWithNonVoidExecute {

    public DummyTaskWithNonVoidExecute() {
    }

    public int execute() {
        return 0;
    }
    
}
"
L34256,Class,DummyTaskWithoutDefaultConstructor,org.apache.tools.ant.DummyTaskWithoutDefaultConstructor,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskWithoutDefaultConstructor.java,59,1,67,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,6,9,9,7,0,0,2,0,2,0,30,0,0,24,7,6,9,9,7,0,0,2,0,2,0,30,0,0,24,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public class DummyTaskWithoutDefaultConstructor extends Task {

    public DummyTaskWithoutDefaultConstructor(int dummy) {
    }

    public void execute() {
    }
    
}
"
L34260,Class,DummyTaskWithoutExecute,org.apache.tools.ant.DummyTaskWithoutExecute,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskWithoutExecute.java,57,1,65,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,1,0,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,6,9,0,0,0,0,2,0,2,0,2,0,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

public class DummyTaskWithoutExecute {

    public DummyTaskWithoutExecute() {
    }

    public void execute(String dummy) {
    }
    
}
"
L34264,Class,DummyTaskWithoutPublicConstructor,org.apache.tools.ant.DummyTaskWithoutPublicConstructor,L335,L103,src/testcases/org/apache/tools/ant/DummyTaskWithoutPublicConstructor.java,59,1,67,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,2,0.0,0,2,2,0,0,1,6,9,9,7,0,0,2,0,1,0,30,0,0,23,7,6,9,9,7,0,0,2,0,1,0,30,0,0,23,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.Task;

public class DummyTaskWithoutPublicConstructor extends Task {

    DummyTaskWithoutPublicConstructor() {
    }

    public void execute() {
    }
    
}
"
L34267,Class,ImmutableTest,org.apache.tools.ant.ImmutableTest,L335,L103,src/testcases/org/apache/tools/ant/ImmutableTest.java,62,1,114,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,9,2,0,0,4,13,0.8,0.208333,10,10,8,2,0.208333,10,1,1,0,0,1,38,53,6,8,0,0,9,0,9,1,33,18,0,10,1,38,53,6,8,0,0,9,0,9,1,33,18,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.BuildFileTest;


public class ImmutableTest extends BuildFileTest { 

    public ImmutableTest(String name) { 
        super(name);
    }
    
    public void setUp() { 
        configureProject(""src/etc/testcases/core/immutable.xml"");
    }
    
    
    public void test1() { 
        executeTarget(""test1"");
        assertEquals(""override"", project.getProperty(""test""));
    }
    
    
    public void test2() {
        executeTarget(""test2"");
        assertNotNull(project.getProperty(""DSTAMP""));
        assertNotNull(project.getProperty(""start.DSTAMP""));
    }

    
    public void test3() {
        executeTarget(""test3"");
        assertEquals(""original"", project.getProperty(""DSTAMP""));
    }

    
    public void test4() {
        executeTarget(""test4"");
        assertEquals(""original"", project.getProperty(""test""));
    }
    
    public void test5() {
        executeTarget(""test5"");
        assertEquals(""original"", project.getProperty(""test""));
    }

    
    public void test6() {
        executeTarget(""test6"");
        assertEquals(""original"", project.getProperty(""test1""));
        assertEquals(""original"", project.getProperty(""test2""));
    }

    
    public void test7() {
        executeTarget(""test7"");
        assertEquals(""original"", project.getProperty(""test""));
    }
}

"
L34286,Class,IncludeTest,org.apache.tools.ant.IncludeTest,L335,L103,src/testcases/org/apache/tools/ant/IncludeTest.java,64,1,148,2,0.751825,2,8,4,0.576471,0.662162,49,49,1,1,1,14,3,0,0,6,16,0.0909091,0.0632911,5,5,1,10,0.0632911,5,1,1,0,0,1,74,85,6,8,0,0,10,0,10,0,34,31,0,11,0,74,85,6,8,0,0,10,0,10,0,34,31,0,11,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.BuildFileTest;


public class IncludeTest extends BuildFileTest { 
    
    public IncludeTest(String name) { 
        super(name);
    }    
    
    public void test1() { 
        configureProject(""src/etc/testcases/core/include/basic/include.xml"");
        expectLog(""test1"", ""from included entity"");
    }
    
    public void test2() { 
        configureProject(""src/etc/testcases/core/include/frag#ment/include.xml"");
        expectLog(""test1"", ""from included entity"");
    }
    
    public void test3() { 
        configureProject(""src/etc/testcases/core/include/frag#ment/simple.xml"");
        expectLog(""test1"", ""from simple buildfile"");
    }
    
    public void test4() { 
        configureProject(""src/etc/testcases/core/include/basic/relative.xml"");
        expectLog(""test1"", ""from included entity"");
    }
    
    public void test5() { 
        configureProject(""src/etc/testcases/core/include/frag#ment/relative.xml"");
        expectLog(""test1"", ""from included entity"");
    }

    public void testParseErrorInIncluding() {
        try {
            configureProject(""src/etc/testcases/core/include/including_file_parse_error/build.xml"");
            fail(""should have caused a parser exception"");
        } catch (BuildException e) {
            assertTrue(e.getLocation().toString() 
                       + "" should refer to build.xml"",
                       e.getLocation().toString().indexOf(""build.xml:"") > -1);
        }
    }

    public void testTaskErrorInIncluding() {
        configureProject(""src/etc/testcases/core/include/including_file_task_error/build.xml"");
        try {
            executeTarget(""test"");
            fail(""should have cause a build failure"");
        } catch (BuildException e) {
            assertTrue(e.getMessage() 
                       + "" should start with \'Warning: Could not find"",
                         e.getMessage().startsWith(""Warning: Could not find file ""));
            assertTrue(e.getLocation().toString() 
                       + "" should end with build.xml:14: "",
                       e.getLocation().toString().endsWith(""build.xml:14: ""));
        }
    }

    public void testParseErrorInIncluded() {
        try {
            configureProject(""src/etc/testcases/core/include/included_file_parse_error/build.xml"");
            fail(""should have caused a parser exception"");
        } catch (BuildException e) {
            assertTrue(e.getLocation().toString() 
                       + "" should refer to included_file.xml"",
                       e.getLocation().toString()
                       .indexOf(""included_file.xml:"") > -1);
        }
    }

    public void testTaskErrorInIncluded() {
        configureProject(""src/etc/testcases/core/include/included_file_task_error/build.xml"");
        try {
            executeTarget(""test"");
            fail(""should have cause a build failure"");
        } catch (BuildException e) {
            assertTrue(e.getMessage() 
                       + "" should start with \'Warning: Could not find"",
                         e.getMessage().startsWith(""Warning: Could not find file ""));
            assertTrue(e.getLocation().toString() 
                       + "" should end with included_file.xml:2: "",
                       e.getLocation().toString().endsWith(""included_file.xml:2: ""));
        }
    }

}
"
L34299,Class,IntrospectionHelperTest,org.apache.tools.ant.IntrospectionHelperTest,L335,L103,src/testcases/org/apache/tools/ant/IntrospectionHelperTest.java,69,1,494,2,0.547701,16,191,53,0.471831,0.540541,201,200,19,2,1,80,4,0,0,13,54,0.0238095,0.0339426,13,5,1,41,0.0339426,13,0,0,0,0,0,370,426,2,0,2,0,41,0,41,19,41,217,0,41,19,370,426,2,0,2,0,41,0,41,19,41,217,0,41,19,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;
import java.io.File;
import java.util.*;
import org.apache.tools.ant.taskdefs.condition.Os;



public class IntrospectionHelperTest extends TestCase {

    private Project p;
    private static final String projectBasedir = File.separator;

    public IntrospectionHelperTest(String name) {
        super(name);
    }
    
    public void setUp() {
        p = new Project();
        p.setBasedir(projectBasedir);
    }

    public void testAddText() throws BuildException {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(java.lang.String.class);
        try {
            ih.addText(p, """", ""test"");
            fail(""String doesn\'t support addText"");
        } catch (BuildException be) {
        }

        ih = IntrospectionHelper.getHelper(getClass());
        ih.addText(p, this, ""test"");
        try {
            ih.addText(p, this, ""test2"");
            fail(""test2 shouldn\'t be equal to test"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
    }

    public void testSupportsCharacters() {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(java.lang.String.class);
        assertTrue(""String doesn\'t support addText"", !ih.supportsCharacters());
        ih = IntrospectionHelper.getHelper(getClass());
        assertTrue(""IntrospectionHelperTest supports addText"", 
               ih.supportsCharacters());
    }

    public void addText(String text) {
        assertEquals(""test"", text);
    }
    
    public void testElementCreators() throws BuildException {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        try {
            ih.getElementType(""one"");
            fail(""don't have element type one"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""two"");
            fail(""createTwo takes arguments"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""three"");
            fail(""createThree returns void"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""four"");
            fail(""createFour returns array"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""five"");
            fail(""createFive returns primitive type"");
        } catch (BuildException be) {
        }
        assertEquals(java.lang.String.class, ih.getElementType(""six""));
        assertEquals(""test"", ih.createElement(p, this, ""six""));

        try {
            ih.getElementType(""seven"");
            fail(""addSeven takes two arguments"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""eight"");
            fail(""addEight takes no arguments"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""nine"");
            fail(""nine return non void"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""ten"");
            fail(""addTen takes array argument"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""eleven"");
            fail(""addEleven takes primitive argument"");
        } catch (BuildException be) {
        }
        try {
            ih.getElementType(""twelve"");
            fail(""no primitive constructor for java.lang.Class"");
        } catch (BuildException be) {
        }
        assertEquals(java.lang.StringBuffer.class, ih.getElementType(""thirteen""));
        assertEquals(""test"", ih.createElement(p, this, ""thirteen"").toString());

        try {
            ih.createElement(p, this, ""fourteen"");
            fail(""fourteen throws NullPointerException"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof NullPointerException);
        }

        try {
            ih.createElement(p, this, ""fourteen"");
            fail(""fifteen throws NullPointerException"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof NullPointerException);
        }
    }
    
    public void testGetNestedElements() {
        Hashtable h = new Hashtable();
        h.put(""six"", java.lang.String.class);
        h.put(""thirteen"", java.lang.StringBuffer.class);
        h.put(""fourteen"", java.lang.StringBuffer.class);
        h.put(""fifteen"", java.lang.StringBuffer.class);
        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        Enumeration enum = ih.getNestedElements();
        while (enum.hasMoreElements()) {
            String name = (String) enum.nextElement();
            Class expect = (Class) h.get(name);
            assertNotNull(""Support for ""+name+"" in IntrospectioNHelperTest?"",
                          expect);
            assertEquals(""Return type of ""+name, expect, ih.getElementType(name));
            h.remove(name);
        }
        assertTrue(""Found all"", h.isEmpty());
    }

    public Object createTwo(String s) {
        return null;
    }

    public void createThree() {}

    public Object[] createFour() {
        return null;
    }

    public int createFive() {
        return 0;
    }

    public String createSix() {
        return ""test"";
    }

    public StringBuffer createFifteen() {
        throw new NullPointerException();
    }

    public void addSeven(String s, String s2) {}

    public void addEight() {}

    public String addNine(String s) {
        return null;
    }

    public void addTen(String[] s) {}

    public void addEleven(int i) {}

    public void addTwelve(Class c) {}

    public void addThirteen(StringBuffer sb) {
        sb.append(""test"");
    }
    
    public void addFourteen(StringBuffer s) {
        throw new NullPointerException();
    }

    public void testAttributeSetters() throws BuildException {
        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        try {
            ih.setAttribute(p, this, ""one"", ""test"");
            fail(""setOne doesn't exist"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""two"", ""test"");
            fail(""setTwo returns non void"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""three"", ""test"");
            fail(""setThree takes no args"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""four"", ""test"");
            fail(""setFour takes two args"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""five"", ""test"");
            fail(""setFive takes array arg"");
        } catch (BuildException be) {
        }
        try {
            ih.setAttribute(p, this, ""six"", ""test"");
            fail(""Project doesn't have a String constructor"");
        } catch (BuildException be) {
        }
        ih.setAttribute(p, this, ""seven"", ""2"");
        try {
            ih.setAttribute(p, this, ""seven"", ""3"");
            fail(""2 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""eight"", ""2"");
        try {
            ih.setAttribute(p, this, ""eight"", ""3"");
            fail(""2 shouldn't be equals to three - as int"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""nine"", ""2"");
        try {
            ih.setAttribute(p, this, ""nine"", ""3"");
            fail(""2 shouldn't be equals to three - as Integer"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""ten"", ""2"");
        try {
            ih.setAttribute(p, this, ""ten"", ""3"");
            fail(projectBasedir+""2 shouldn't be equals to ""+projectBasedir+""3"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""eleven"", ""2"");
        try {
            ih.setAttribute(p, this, ""eleven"", ""on"");
            fail(""on shouldn't be false"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""twelve"", ""2"");
        try {
            ih.setAttribute(p, this, ""twelve"", ""on"");
            fail(""on shouldn't be false"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""thirteen"", ""org.apache.tools.ant.Project"");
        try {
            ih.setAttribute(p, this, ""thirteen"", ""org.apache.tools.ant.ProjectHelper"");
            fail(""org.apache.tools.ant.Project shouldn't be equal to org.apache.tools.ant.ProjectHelper"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        try {
            ih.setAttribute(p, this, ""thirteen"", ""org.apache.tools.ant.Project2"");
            fail(""org.apache.tools.ant.Project2 doesn't exist"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof ClassNotFoundException);
        }
        ih.setAttribute(p, this, ""fourteen"", ""2"");
        try {
            ih.setAttribute(p, this, ""fourteen"", ""on"");
            fail(""2 shouldn't be equals to three - as StringBuffer"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""fifteen"", ""abcd"");
        try {
            ih.setAttribute(p, this, ""fifteen"", ""on"");
            fail(""o shouldn't be equal to a"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""sixteen"", ""abcd"");
        try {
            ih.setAttribute(p, this, ""sixteen"", ""on"");
            fail(""o shouldn't be equal to a"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""seventeen"", ""17"");
        try {
            ih.setAttribute(p, this, ""seventeen"", ""3"");
            fail(""17 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""eightteen"", ""18"");
        try {
            ih.setAttribute(p, this, ""eightteen"", ""3"");
            fail(""18 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
        ih.setAttribute(p, this, ""nineteen"", ""19"");
        try {
            ih.setAttribute(p, this, ""nineteen"", ""3"");
            fail(""19 shouldn't be equals to three"");
        } catch (BuildException be) {
            assertTrue(be.getException() instanceof AssertionFailedError);
        }
    }

    public void testGetAttributes() {
        Hashtable h = new Hashtable();
        h.put(""seven"", java.lang.String.class);
        h.put(""eight"", java.lang.Integer.TYPE);
        h.put(""nine"", java.lang.Integer.class);
        h.put(""ten"", java.io.File.class);
        h.put(""eleven"", java.lang.Boolean.TYPE);
        h.put(""twelve"", java.lang.Boolean.class);
        h.put(""thirteen"", java.lang.Class.class);
        h.put(""fourteen"", java.lang.StringBuffer.class);
        h.put(""fifteen"", java.lang.Character.TYPE);
        h.put(""sixteen"", java.lang.Character.class);
        h.put(""seventeen"", java.lang.Byte.TYPE);
        h.put(""eightteen"", java.lang.Short.TYPE);
        h.put(""nineteen"", java.lang.Double.TYPE);

        
        h.put(""name"", java.lang.String.class);

        IntrospectionHelper ih = IntrospectionHelper.getHelper(getClass());
        Enumeration enum = ih.getAttributes();
        while (enum.hasMoreElements()) {
            String name = (String) enum.nextElement();
            Class expect = (Class) h.get(name);
            assertNotNull(""Support for ""+name+"" in IntrospectionHelperTest?"",
                          expect);
            assertEquals(""Type of ""+name, expect, ih.getAttributeType(name));
            h.remove(name);
        }
        h.remove(""name"");
        assertTrue(""Found all"", h.isEmpty());
    }

    public int setTwo(String s) {
        return 0;
    }

    public void setThree() {}

    public void setFour(String s1, String s2) {}

    public void setFive(String[] s) {}

    public void setSix(Project p) {}

    public void setSeven(String s) {
        assertEquals(""2"", s);
    }

    public void setEight(int i) {
        assertEquals(2, i);
    }

    public void setNine(Integer i) {
        assertEquals(2, i.intValue());
    }

    public void setTen(File f) {
        if (Os.isFamily(""unix"")) { 
            assertEquals(projectBasedir+""2"", f.getAbsolutePath());
        } else if (Os.isFamily(""netware"")) {
            assertEquals(projectBasedir+""2"", f.getAbsolutePath().toLowerCase(Locale.US));
        } else {
            assertEquals("":""+projectBasedir+""2"", f.getAbsolutePath().toLowerCase(Locale.US).substring(1));
        }
    }

    public void setEleven(boolean b) {
        assertTrue(!b);
    }

    public void setTwelve(Boolean b) {
        assertTrue(!b.booleanValue());
    }

    public void setThirteen(Class c) {
        assertEquals(Project.class, c);
    }

    public void setFourteen(StringBuffer sb) {
        assertEquals(""2"", sb.toString());
    }

    public void setFifteen(char c) {
        assertEquals(c, 'a');
    }

    public void setSixteen(Character c) {
        assertEquals(c.charValue(), 'a');
    }

    public void setSeventeen(byte b) {
        assertEquals(17, b);
    }

    public void setEightteen(short s) {
        assertEquals(18, s);
    }

    public void setNineteen(double d) {
        assertEquals(19, d, 1e-6);
    }

}
"
L34382,Class,MockBuildListener,org.apache.tools.ant.MockBuildListener,L335,L103,src/testcases/org/apache/tools/ant/MockBuildListener.java,61,1,99,2,0.0,0,0,0,0.0,0.0,0,0,7,1,1,11,3,1,3,5,15,0.0,0.0,0,0,0,11,0.0,0,1,1,0,0,1,31,39,2,0,2,0,10,0,10,0,10,13,0,10,0,31,39,2,0,2,0,10,0,10,0,10,13,0,10,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import java.util.Vector;

import junit.framework.Assert;

public class MockBuildListener extends Assert implements BuildListener {
  
    private final Vector buffer = new Vector();
    private final Project project;
    
    public MockBuildListener(final Project project) {
        this.project = project;
    }
    
    public void buildStarted(BuildEvent event) {}
    public void buildFinished(BuildEvent event) {}
    public void targetStarted(BuildEvent event) {}
    public void targetFinished(BuildEvent event) {}
    public void taskStarted(BuildEvent event) {}
    public void taskFinished(BuildEvent event) {}
            
    public void messageLogged(final BuildEvent actual) {
        if(actual.getPriority()==Project.MSG_DEBUG)
            return;
        assertTrue(""unexpected messageLogged: ""+actual.getMessage(), !buffer.isEmpty());
        assertEquals(""unexpected project "", project, actual.getProject());

        BuildEvent expected = (BuildEvent) buffer.elementAt(0);
        buffer.removeElementAt(0);
        assertEquals(""unexpected messageLogged "", expected.getMessage(), actual.getMessage());
        assertEquals(""unexpected priority "", expected.getPriority(), actual.getPriority());
    }
    
    public void assertEmpty() {
        assertTrue(""MockBuildListener is not empty"", buffer.isEmpty());
    }
    
    public void addBuildEvent(final String message, final int priority) {
        final BuildEvent be = new BuildEvent(project);
        be.setMessage(message, priority);
        buffer.addElement(be);
    }
    
}
"
L34407,Class,ProjectTest,org.apache.tools.ant.ProjectTest,L335,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,75,1,245,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,10,22,0,0,14,22,0.285714,0.201389,29,11,2,5,0.190789,29,0,0,0,0,0,115,163,3,0,3,0,8,0,6,1,8,67,0,6,1,123,171,12,14,3,0,12,0,10,1,68,67,0,54,15,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L34439,Class,ProjectTest$DummyTaskPrivate,org.apache.tools.ant.ProjectTest$DummyTaskPrivate,L34407,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,235,5,238,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,4,4,9,7,0,0,2,0,2,0,30,0,0,24,7,4,4,9,7,0,0,2,0,2,0,30,0,0,24,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L34442,Class,ProjectTest$DummyTaskProtected,org.apache.tools.ant.ProjectTest$DummyTaskProtected,L34407,L103,src/testcases/org/apache/tools/ant/ProjectTest.java,240,5,243,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,2,2,0,0,1,4,4,9,7,0,0,2,0,2,0,30,0,0,24,7,4,4,9,7,0,0,2,0,2,0,30,0,0,24,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant;

import org.apache.tools.ant.input.DefaultInputHandler;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.*;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class ProjectTest extends TestCase {

    private Project p;
    private String root;
    private MockBuildListener mbl;

    public ProjectTest(String name) {
        super(name);
    }

    public void setUp() {
        p = new Project();
        p.init();
        root = new File(File.separator).getAbsolutePath();
        mbl = new MockBuildListener(p);
    }

    public void testDataTypes() throws BuildException {
        assertNull(""dummy is not a known data type"", 
                   p.createDataType(""dummy""));
        Object o = p.createDataType(""fileset"");
        assertNotNull(""fileset is a known type"", o);
        assertTrue(""fileset creates FileSet"", o instanceof FileSet);
        assertTrue(""PatternSet"", 
               p.createDataType(""patternset"") instanceof PatternSet);
        assertTrue(""Path"", p.createDataType(""path"") instanceof Path);
    }

    
    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     p.resolveFile(""/"", null).getPath());
        assertEquals(File.separator, 
                     p.resolveFile(""\\"", null).getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\"", null).getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""/"", null).getPath());
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpecLower + ""\\"", null).getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     p.resolveFile(driveSpec + ""\\\\\\\\\\\\"", null).getPath());

        
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile("".\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""./.\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../3/4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\3\\4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""../../5/.././2/./3/6/../4"", new File(localize(""/1/2/3""))).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     p.resolveFile(""..\\../5/..\\./2/./3/6\\../4"", new File(localize(""/1/2/3""))).getPath());

    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
    

    private void assertTaskDefFails(final Class taskClass, 
                                       final String message) {
        final String dummyName = ""testTaskDefinitionDummy"";
        try {
            mbl.addBuildEvent(message, Project.MSG_ERR);
            p.addTaskDefinition(dummyName, taskClass);
            fail(""expected BuildException(\""""+message+""\"", Project.MSG_ERR) when adding task "" + taskClass);
        }
        catch(BuildException e) {
            assertEquals(message, e.getMessage());
            mbl.assertEmpty();
            assertTrue(!p.getTaskDefinitions().containsKey(dummyName));
        }
    }
    
    public void testAddTaskDefinition() {
        p.addBuildListener(mbl);

        p.addTaskDefinition(""Ok"", DummyTaskOk.class);
        assertEquals(DummyTaskOk.class, p.getTaskDefinitions().get(""Ok""));
        p.addTaskDefinition(""OkNonTask"", DummyTaskOkNonTask.class);
        assertEquals(DummyTaskOkNonTask.class, p.getTaskDefinitions().get(""OkNonTask""));
        mbl.assertEmpty();

        assertTaskDefFails(DummyTaskPrivate.class,   DummyTaskPrivate.class   + "" is not public"");

        try {
            assertTaskDefFails(DummyTaskProtected.class, 
                               DummyTaskProtected.class + "" is not public"");
        } catch (AssertionFailedError e) {
            
            assertTrue(JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1));
            assertTaskDefFails(DummyTaskProtected.class, 
                               ""No public no-arg constructor in "" 
                               + DummyTaskProtected.class);
        }
        
        assertTaskDefFails(DummyTaskPackage.class,   DummyTaskPackage.class   + "" is not public"");

        assertTaskDefFails(DummyTaskAbstract.class,  DummyTaskAbstract.class  + "" is abstract""); 
        assertTaskDefFails(DummyTaskInterface.class, DummyTaskInterface.class + "" is abstract"");

        assertTaskDefFails(DummyTaskWithoutDefaultConstructor.class, ""No public no-arg constructor in "" + DummyTaskWithoutDefaultConstructor.class);
        assertTaskDefFails(DummyTaskWithoutPublicConstructor.class,  ""No public no-arg constructor in "" + DummyTaskWithoutPublicConstructor.class);
        
        assertTaskDefFails(DummyTaskWithoutExecute.class,       ""No public execute() in "" + DummyTaskWithoutExecute.class);
        assertTaskDefFails(DummyTaskWithNonPublicExecute.class, ""No public execute() in "" + DummyTaskWithNonPublicExecute.class);
        
        mbl.addBuildEvent(""return type of execute() should be void but was \""int\"" in "" + DummyTaskWithNonVoidExecute.class, Project.MSG_WARN);
        p.addTaskDefinition(""NonVoidExecute"", DummyTaskWithNonVoidExecute.class);
        mbl.assertEmpty();
        assertEquals(DummyTaskWithNonVoidExecute.class, p.getTaskDefinitions().get(""NonVoidExecute""));
    }
        
    public void testInputHandler() {
        InputHandler ih = p.getInputHandler();
        assertNotNull(ih);
        assertTrue(ih instanceof DefaultInputHandler);
        InputHandler pfih = new PropertyFileInputHandler();
        p.setInputHandler(pfih);
        assertSame(pfih, p.getInputHandler());
    }

    public void testTaskDefinitionContainsKey() {
        assertTrue(p.getTaskDefinitions().containsKey(""echo""));
    }

    public void testTaskDefinitionContains() {
        assertTrue(p.getTaskDefinitions().contains(org.apache.tools.ant.taskdefs.Echo.class));
    }

    private class DummyTaskPrivate extends Task {
        public DummyTaskPrivate() {}
        public void execute() {}
    }

    protected class DummyTaskProtected extends Task {
        public DummyTaskProtected() {}
        public void execute() {}
    }

}

class DummyTaskPackage extends Task {
    public DummyTaskPackage() {}
    public void execute() {}
}
"
L34469,Class,PropertyExpansionTest,org.apache.tools.ant.PropertyExpansionTest,L335,L103,src/testcases/org/apache/tools/ant/PropertyExpansionTest.java,61,1,126,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,2,0,0,4,10,0.833333,0.333333,20,19,5,1,0.333333,20,1,1,0,0,1,40,66,6,8,0,0,6,0,5,1,30,26,0,6,1,40,66,6,8,0,0,6,0,5,1,30,26,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"


package org.apache.tools.ant;


public class PropertyExpansionTest extends BuildFileTest {


    public PropertyExpansionTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/core/immutable.xml"");
    }

    
    public void testPropertyExpansion() {
        assertExpandsTo("""","""");
        assertExpandsTo(""$"",""$"");
        assertExpandsTo(""$$-"",""$-"");
        assertExpandsTo(""$$"",""$"");
        project.setProperty(""expanded"",""EXPANDED"");
        assertExpandsTo(""a${expanded}b"",""aEXPANDEDb"");
        assertExpandsTo(""${expanded}${expanded}"",""EXPANDEDEXPANDED"");
        assertExpandsTo(""$$$"",""$$"");
        assertExpandsTo(""$$$$-"",""$$-"");
        assertExpandsTo("""","""");
        assertExpandsTo(""Class$$subclass"",""Class$subclass"");    
    }
    
    
    public void testDollarPassthru() {
        assertExpandsTo(""$-"",""$-"");    
        assertExpandsTo(""Class$subclass"",""Class$subclass"");    
        assertExpandsTo(""$$$-"",""$$-"");
        assertExpandsTo(""$$$$$"",""$$$"");
        assertExpandsTo(""${unassigned.property}"",""${unassigned.property}"");
        assertExpandsTo(""a$b"",""a$b"");
        assertExpandsTo(""$}}"",""$}}"");
    }

    
    
    public void oldtestQuirkyLegacyBehavior() {
        assertExpandsTo(""Class$subclass"",""Classsubclass"");    
        assertExpandsTo(""$$$-"",""$-"");
        assertExpandsTo(""a$b"",""ab"");
        assertExpandsTo(""$}}"",""}}"");
    }

    
    private void assertExpandsTo(String source,String expected) {
        String actual=project.replaceProperties(source);
        assertEquals(source,expected,actual);
    }


}
"
L29137,Class,AbstractCvsTaskTest,org.apache.tools.ant.taskdefs.AbstractCvsTaskTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/AbstractCvsTaskTest.java,65,1,100,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,2,0,0,6,13,0.125,0.147059,5,5,1,7,0.147059,5,1,1,0,0,1,29,36,6,8,0,0,7,0,7,1,31,13,0,8,1,29,36,6,8,0,0,7,0,7,1,31,13,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;
 
import java.io.File;

import org.apache.tools.ant.BuildFileTest;


public class AbstractCvsTaskTest extends BuildFileTest {

    public AbstractCvsTaskTest() {
        this( ""AbstractCvsTaskTest"" );
    }

    public AbstractCvsTaskTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/abstractcvstask.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testAbstractCvsTask() {
        executeTarget( ""all"" );
    }

    public void testPackageAttribute() {
        File f = getProject().resolveFile(""tmpdir/ant/build.xml"");
        assertTrue(""starting empty"", !f.exists());
        expectLogContaining(""package-attribute"", ""U ant/build.xml"");
        assertTrue(""now it is there"", f.exists());
    }

    public void testTagAttribute() {
        File f = getProject().resolveFile(""tmpdir/ant/build.xml"");
        assertTrue(""starting empty"", !f.exists());
        expectLogContaining(""tag-attribute"", ""ANT_141 (revision: 1.175.2.13)"");
        assertTrue(""now it is there"", f.exists());
    }
}
"
L29148,Class,AntStructureTest,org.apache.tools.ant.taskdefs.AntStructureTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/AntStructureTest.java,61,1,74,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,1,0,0,3,6,0.25,0.214286,3,3,1,3,0.214286,3,1,1,0,0,1,11,14,6,8,0,0,3,0,3,1,27,3,0,4,1,11,14,6,8,0,0,3,0,3,1,27,3,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class AntStructureTest extends BuildFileTest { 
    
    public AntStructureTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/antstructure.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }
}
"
L29154,Class,AntTest,org.apache.tools.ant.taskdefs.AntTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,73,1,477,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,32,10,0,0,27,53,0.12,0.0353535,7,7,3,22,0.0225352,8,1,1,0,0,1,191,227,6,8,0,0,26,0,24,1,50,93,0,25,1,347,405,20,12,14,4,63,0,52,1,87,148,0,53,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest { 
    
    public AntTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""target doesn't exist"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys, 
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }
        
        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc = 
            new PropertyChecker(""testprop"",
                                new String[] {null, 
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    String msg = 
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L29177,Class,AntTest$BasedirChecker,org.apache.tools.ant.taskdefs.AntTest$BasedirChecker,L29154,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,294,5,325,6,0.0,0,0,0,0.0,0.0,0,0,7,2,2,11,3,1,1,2,11,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,27,32,3,1,3,1,9,0,7,0,9,6,0,7,0,27,32,3,1,3,1,9,0,7,0,9,6,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest { 
    
    public AntTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""target doesn't exist"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys, 
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }
        
        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc = 
            new PropertyChecker(""testprop"",
                                new String[] {null, 
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    String msg = 
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L29205,Class,AntTest$InputHandlerChecker,org.apache.tools.ant.taskdefs.AntTest$InputHandlerChecker,L29154,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,393,5,439,6,0.0,0,0,0,0.0,0.0,0,0,1,2,2,12,4,1,1,2,12,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,41,47,2,1,2,1,10,0,7,0,10,14,0,7,0,41,47,2,1,2,1,10,0,7,0,10,14,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest { 
    
    public AntTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""target doesn't exist"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys, 
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }
        
        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc = 
            new PropertyChecker(""testprop"",
                                new String[] {null, 
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    String msg = 
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L29215,Class,AntTest$PropertyChecker,org.apache.tools.ant.taskdefs.AntTest$PropertyChecker,L29154,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,441,5,474,6,0.0,0,0,0,0.0,0.0,0,0,7,2,2,11,3,1,1,2,11,0.0,0.0,0,0,0,8,0.0,0,1,1,0,0,1,29,34,4,1,4,1,9,0,7,0,9,7,0,7,0,29,34,4,1,4,1,9,0,7,0,9,7,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest { 
    
    public AntTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""target doesn't exist"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys, 
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }
        
        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc = 
            new PropertyChecker(""testprop"",
                                new String[] {null, 
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    String msg = 
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L29193,Class,AntTest$ReferenceChecker,org.apache.tools.ant.taskdefs.AntTest$ReferenceChecker,L29154,L103,src/testcases/org/apache/tools/ant/taskdefs/AntTest.java,327,5,391,6,0.0,0,0,0,0.0,0.0,0,0,7,7,7,17,4,1,1,3,12,0.0,0.0166667,1,0,0,8,0.0166667,1,1,1,0,0,1,59,65,5,1,5,1,9,0,7,0,9,28,0,7,0,59,65,5,1,5,1,9,0,7,0,9,28,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.input.InputHandler;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.types.Path;


public class AntTest extends BuildFileTest { 
    
    public AntTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/ant.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    
    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() { 
        expectBuildException(""test1"", ""recursive call"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""target doesn't exist"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        executeTarget(""test6"");
    }

    public void testExplicitBasedir1() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir1"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testExplicitBasedir2() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile("".."");
        testBaseDirs(""explicitBasedir2"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testInheritBasedir() {
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""inheritBasedir"", new String[] {basedir, basedir});
    }

    public void testDoNotInheritBasedir() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        String basedir = getProjectDir().getAbsolutePath();
        testBaseDirs(""doNotInheritBasedir"",
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath()
                     });
    }

    public void testBasedirTripleCall() {
        File dir1 = getProjectDir();
        File dir2 = project.resolveFile(""ant"");
        testBaseDirs(""tripleCall"", 
                     new String[] {dir1.getAbsolutePath(), 
                                   dir2.getAbsolutePath(),
                                   dir1.getAbsolutePath()
                     });
    }

    protected void testBaseDirs(String target, String[] dirs) {
        BasedirChecker bc = new BasedirChecker(dirs);
        project.addBuildListener(bc);
        executeTarget(target);
        AssertionFailedError ae = bc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(bc);
    }

    public void testReferenceInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, true}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceNoInheritance() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        project.addReference(""no-override"", p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testNoInherit"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {true, false}, p);
        testReference(""testInherit"", 
                      new String[] {""no-override"", ""no-override""},
                      new boolean[] {false, false}, null);
    }

    public void testReferenceRename() {
        Path p = Path.systemClasspath;
        p.setProject(project);
        project.addReference(""path"", p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {true, false}, p);
        testReference(""testRename"", new String[] {""path"", ""path""},
                      new boolean[] {false, true}, null);
        testReference(""testRename"", new String[] {""newpath"", ""newpath""},
                      new boolean[] {false, true}, p);
    }

    protected void testReference(String target, String[] keys, 
                                 boolean[] expect, Object value) {
        ReferenceChecker rc = new ReferenceChecker(keys, expect, value);
        project.addBuildListener(rc);
        executeTarget(target);
        AssertionFailedError ae = rc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(rc);
    }

    public void testLogfilePlacement() {
        File[] logFiles = new File[] {
            getProject().resolveFile(""test1.log""),
            getProject().resolveFile(""test2.log""),
            getProject().resolveFile(""ant/test3.log""),
            getProject().resolveFile(""ant/test4.log"")
        };
        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" doesn\'t exist"",
                       !logFiles[i].exists());
        }
        
        executeTarget(""testLogfilePlacement"");

        for (int i=0; i<logFiles.length; i++) {
            assertTrue(logFiles[i].getName()+"" exists"",
                       logFiles[i].exists());
        }
    }

    public void testInputHandlerInheritance() {
        InputHandler ih = new PropertyFileInputHandler();
        getProject().setInputHandler(ih);
        InputHandlerChecker ic = new InputHandlerChecker(ih);
        getProject().addBuildListener(ic);
        executeTarget(""tripleCall"");
        AssertionFailedError ae = ic.getError();
        if (ae != null) {
            throw ae;
        }
        getProject().removeBuildListener(ic);
    }

    public void testRefId() {
        Path testPath = new Path(project);
        testPath.createPath().setPath(System.getProperty(""java.class.path""));
        PropertyChecker pc = 
            new PropertyChecker(""testprop"",
                                new String[] {null, 
                                              testPath.toString()});
        project.addBuildListener(pc);
        executeTarget(""testRefid"");
        AssertionFailedError ae = pc.getError();
        if (ae != null) {
            throw ae;
        }
        project.removeBuildListener(pc);
    }

    public void testUserPropertyWinsInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testUserPropertyWinsNoInheritAll() {
        getProject().setUserProperty(""test"", ""7"");
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 7"");
    }

    public void testOverrideWinsInheritAll() {
        expectLogContaining(""test-property-override-inheritall-start"",
                            ""The value of test is 4"");
    }

    public void testOverrideWinsNoInheritAll() {
        expectLogContaining(""test-property-override-no-inheritall-start"",
                            ""The value of test is 4"");
    }

    private class BasedirChecker implements BuildListener {
        private String[] expectedBasedirs;
        private int calls = 0;
        private AssertionFailedError error;

        BasedirChecker(String[] dirs) {
            expectedBasedirs = dirs;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedBasedirs[calls++],
                                 event.getProject().getBaseDir().getAbsolutePath());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class ReferenceChecker implements BuildListener {
        private String[] keys;
        private boolean[] expectSame;
        private Object value;
        private int calls = 0;
        private AssertionFailedError error;

        ReferenceChecker(String[] keys, boolean[] expectSame, Object value) {
            this.keys = keys;
            this.expectSame = expectSame;
            this.value = value;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    String msg = 
                        ""Call "" + calls + "" refid=\'"" + keys[calls] + ""\'"";
                    if (value == null) {
                        Object o = event.getProject().getReference(keys[calls]);
                        if (expectSame[calls++]) {
                            assertNull(msg, o);
                        } else {
                            assertNotNull(msg, o);
                        }
                    } else {
                        
                        Path expect = (Path) value;
                        Path received = (Path) event.getProject().getReference(keys[calls]);
                        boolean shouldBeEqual = expectSame[calls++];
                        if (received == null) {
                            assertTrue(msg, !shouldBeEqual);
                        } else {
                            String[] l1 = expect.list();
                            String[] l2 = received.list();
                            if (l1.length == l2.length) {
                                for (int i=0; i<l1.length; i++) {
                                    if (!l1[i].equals(l2[i])) {
                                        assertTrue(msg, !shouldBeEqual);
                                    }
                                }
                                assertTrue(msg, shouldBeEqual);
                            } else {
                                assertTrue(msg, !shouldBeEqual);
                            }
                        }
                    }
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class InputHandlerChecker implements BuildListener {
        private InputHandler ih;
        private AssertionFailedError error;

        InputHandlerChecker(InputHandler value) {
            ih = value;
        }

        public void buildStarted(BuildEvent event) {
            check(event);
        }
        public void buildFinished(BuildEvent event) {
            check(event);
        }
        public void targetFinished(BuildEvent event) {
            check(event);
        }
        public void taskStarted(BuildEvent event) {
            check(event);
        }
        public void taskFinished(BuildEvent event) {
            check(event);
        }
        public void messageLogged(BuildEvent event) {
            check(event);
        }

        public void targetStarted(BuildEvent event) {
            check(event);
        }

        private void check(BuildEvent event) {
            if (error == null) {
                try {
                    assertNotNull(event.getProject().getInputHandler());
                    assertSame(ih, event.getProject().getInputHandler());
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }

    private class PropertyChecker implements BuildListener {
        private String[] expectedValues;
        private String key;
        private int calls = 0;
        private AssertionFailedError error;

        PropertyChecker(String key, String[] values) {
            this.key = key;
            this.expectedValues = values;
        }

        public void buildStarted(BuildEvent event) {}
        public void buildFinished(BuildEvent event) {}
        public void targetFinished(BuildEvent event){}
        public void taskStarted(BuildEvent event) {}
        public void taskFinished(BuildEvent event) {}
        public void messageLogged(BuildEvent event) {}

        public void targetStarted(BuildEvent event) {
            if (error == null) {
                try {
                    assertEquals(expectedValues[calls++],
                                 event.getProject().getProperty(key));
                } catch (AssertionFailedError e) {
                    error = e;
                }
            }
        }

        AssertionFailedError getError() {
            return error;
        }

    }


}
"
L29320,Class,AvailableTest,org.apache.tools.ant.taskdefs.AvailableTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/AvailableTest.java,64,1,237,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,28,2,0,0,5,33,0.931035,0.263514,39,39,27,2,0.263514,39,1,1,0,0,1,109,174,6,8,0,0,28,0,28,1,52,51,0,29,1,109,174,6,8,0,0,28,0,28,1,52,51,0,29,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.JavaEnvUtils;


public class AvailableTest extends BuildFileTest {

    public AvailableTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/available.xml"");
    }

    
    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    
    public void test3() {
        expectBuildException(""test3"", ""required argument not specified"");
    }

    
    public void test4() {
        executeTarget(""test4"");
        assertTrue(project.getProperty(""test"") == null);
    }

    
    public void test5() {
        executeTarget(""test5"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test6() {
        executeTarget(""test6"");
        assertTrue(project.getProperty(""test"") == null);
    }

    
    public void test7() {
        executeTarget(""test7"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test8() {
        executeTarget(""test8"");
        assertTrue(project.getProperty(""test"") == null);
    }

    
    public void test9() {
        executeTarget(""test9"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test10() {
        executeTarget(""test10"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test11() {
        executeTarget(""test11"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test12() {
        executeTarget(""test12"");
        assertNull(project.getProperty(""test""));
        assertEquals(""true"", project.getProperty(""""));
    }

    
    public void test13() {
        executeTarget(""test13"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test13b() {
        executeTarget(""test13b"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    





    
    public void test15() {
        executeTarget(""test15"");
        assertNull(project.getProperty(""test""));
    }

    
    
    public void test16() {
        executeTarget(""test16"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    
    public void test17() {
        executeTarget(""test17"");
        assertEquals(""true"", project.getProperty(""test""));
    }

    
    public void test18() {
        executeTarget(""test18"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test19() {
        expectBuildException(""test19"", ""Invalid value for type attribute."");
    }

    
    public void test20() {
        executeTarget(""test20"");
        assertNull(project.getProperty(""test""));
    }

    
    public void test21() {
        executeTarget(""test21"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void test22() {
        executeTarget(""test22"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void test23() {
        executeTarget(""test23"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void test24() {
        executeTarget(""test24"");
        assertEquals(""true"",project.getProperty(""test""));
    }

    
    public void testSearchInPathNotThere() {
        executeTarget(""searchInPathNotThere"");
        assertNull(project.getProperty(""test""));
    }

    
    public void testSearchInPathIsThere() {
        executeTarget(""searchInPathIsThere"");
        assertEquals(""true"",project.getProperty(""test""));
    }
}
"
L29395,Class,BUnzip2Test,org.apache.tools.ant.taskdefs.BUnzip2Test,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/BUnzip2Test.java,66,1,86,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,3,0,0,6,10,0.2,0.190476,4,4,1,4,0.190476,4,1,1,0,0,1,17,21,6,8,0,0,4,0,4,1,28,6,0,5,1,17,21,6,8,0,0,4,0,4,1,28,6,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.IOException;


public class BUnzip2Test extends BuildFileTest {

    public BUnzip2Test(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/bunzip2.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""expected/asf-logo-huge.tar""),
                                           project.resolveFile(""asf-logo-huge.tar"")));
    }
}
"
L29402,Class,BZip2Test,org.apache.tools.ant.taskdefs.BZip2Test,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/BZip2Test.java,66,1,95,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,3,0,0,7,12,0.166667,0.142857,4,4,1,5,0.142857,4,1,1,0,0,1,24,30,6,8,0,0,5,0,5,1,29,9,0,6,1,24,30,6,8,0,0,5,0,5,1,29,9,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.IOException;


public class BZip2Test extends BuildFileTest {

    public BZip2Test(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/bzip2.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""expected/asf-logo-huge.tar.bz2""),
                                           project.resolveFile(""asf-logo-huge.tar.bz2"")));
    }

    public void testDateCheck(){
        executeTarget(""testDateCheck"");
        String log = getLog();
        assertTrue(
            ""Expecting message ending with 'asf-logo.gif.bz2 is up to date.' but got '"" + log + ""'"",
            log.endsWith(""asf-logo.gif.bz2 is up to date.""));
    }

}
"
L29385,Class,BasenameTest,org.apache.tools.ant.taskdefs.BasenameTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/BasenameTest.java,63,1,103,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,2,0,0,5,12,0.125,0.0833333,3,3,1,7,0.0833333,3,1,1,0,0,1,33,41,6,8,0,0,7,0,7,1,31,15,0,8,1,33,41,6,8,0,0,7,0,7,1,31,15,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class BasenameTest extends BuildFileTest { 
    
    public BasenameTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/basename.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required attribute missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required attribute missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required attribute missing"");
    }

    public void test4() { 
        executeTarget(""test4"");
        String checkprop = project.getProperty(""file.w.suf"");
        assertEquals(""foo.txt"", checkprop);
    }
    
    public void test5() { 
        executeTarget(""test5"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals(""foo"", checkprop);
    }
    
    public void testMultipleDots() { 
        executeTarget(""testMultipleDots"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals(""foo.bar"", checkprop);
    }
    
    public void testNoDots() { 
        executeTarget(""testNoDots"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals(""foo.bar"", checkprop);
    }

    public void testValueEqualsSuffixWithDot() { 
        executeTarget(""testValueEqualsSuffixWithDot"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals("""", checkprop);
    }

    public void testValueEqualsSuffixWithoutDot() { 
        executeTarget(""testValueEqualsSuffixWithoutDot"");
        String checkprop = project.getProperty(""file.wo.suf"");
        assertEquals("""", checkprop);
    }

}
"
L29540,Class,CVSPassTest,org.apache.tools.ant.taskdefs.CVSPassTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/CVSPassTest.java,66,1,159,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,13,2,0,0,4,13,0.111111,0.0625,5,5,1,8,0.0625,5,1,1,0,0,1,75,94,10,8,4,0,9,0,8,1,33,33,0,9,1,75,94,10,8,4,0,9,0,8,1,33,33,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.*;
import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;


public class CVSPassTest extends BuildFileTest { 
    private final String EOL = System.getProperty(""line.separator"");
    private final String JAKARTA_URL =
        "":pserver:anoncvs@jakarta.apache.org:/home/cvspublic Ay=0=h<Z"";
    private final String XML_URL =
        "":pserver:anoncvs@xml.apache.org:/home/cvspublic Ay=0=h<Z"";
    private final String TIGRIS_URL =
        "":pserver:guest@cvs.tigris.org:/cvs AIbdZ,"";
    
    
    public CVSPassTest(String name) { 
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/cvspass.xml"");
    }

    public void testNoCVSRoot() { 
        try{
            executeTarget(""test1"");
            fail(""BuildException not thrown"");
        }catch(BuildException e){
            assertEquals(""cvsroot is required"", e.getMessage());
        }
    }

    public void testNoPassword() { 
        try{
            executeTarget(""test2"");
            fail(""BuildException not thrown"");
        }catch(BuildException e){
            assertEquals(""password is required"", e.getMessage());
        }
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testPassFile() throws Exception { 
        executeTarget(""test3"");
        File f = new File(getProjectDir(), ""testpassfile.tmp"");

        assertTrue( ""Passfile ""+f+"" not created"", f.exists());

        assertEquals(JAKARTA_URL+EOL, readFile(f));

    }

    public void testPassFileDuplicateEntry() throws Exception { 
        executeTarget(""test4"");
        File f = new File(getProjectDir(), ""testpassfile.tmp"");

        assertTrue( ""Passfile ""+f+"" not created"", f.exists());

        assertEquals(
            JAKARTA_URL+ EOL+
            TIGRIS_URL+ EOL,
            readFile(f));
    }

    public void testPassFileMultipleEntry() throws Exception { 
        executeTarget(""test5"");
        File f = new File(getProjectDir(), ""testpassfile.tmp"");

        assertTrue( ""Passfile ""+f+"" not created"", f.exists());

        assertEquals(
            JAKARTA_URL+ EOL+
            XML_URL+ EOL+
            TIGRIS_URL+ EOL,
            readFile(f));
    }

    private String readFile(File f) throws Exception {
        BufferedReader reader = null; 
        
        try {
            reader = new BufferedReader(new FileReader(f));

            StringBuffer buf = new StringBuffer();
            String line=null;
            while((line=reader.readLine())!=null){
                buf.append(line + EOL);
            }
            return buf.toString();
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }
}
"
L29410,Class,ChecksumTest,org.apache.tools.ant.taskdefs.ChecksumTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ChecksumTest.java,66,1,113,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,8,3,0,0,7,15,0.125,0.0930233,4,4,1,7,0.0930233,4,1,1,0,0,1,39,48,6,8,0,0,8,0,7,1,32,19,0,8,1,39,48,6,8,0,0,8,0,7,1,32,19,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.io.IOException;


public class ChecksumTest extends BuildFileTest {

    public ChecksumTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/checksum.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testCreateMd5() throws IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""createMd5"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""expected/asf-logo.gif.md5""),
                                           project.resolveFile(""../asf-logo.gif.md5"")));
    }

    public void testSetProperty() {
        executeTarget(""setProperty"");
        assertEquals(""0541d3df42520911f268abc730f3afe0"",
                     project.getProperty(""logo.md5""));
        assertTrue(!project.resolveFile(""../asf-logo.gif.MD5"").exists());
    }

    public void testVerifyAsTask() {
        testVerify(""verifyAsTask"");
        assertNotNull(project.getProperty(""no.logo.md5""));
        assertEquals(""false"", project.getProperty(""no.logo.md5""));
    }

    public void testVerifyAsCondition() {
        testVerify(""verifyAsCondition"");
        assertNull(project.getProperty(""no.logo.md5""));
    }

    private void testVerify(String target) {
        assertNull(project.getProperty(""logo.md5""));
        assertNull(project.getProperty(""no.logo.md5""));
        executeTarget(target);
        assertNotNull(project.getProperty(""logo.md5""));
        assertEquals(""true"", project.getProperty(""logo.md5""));
    }

}
"
L29423,Class,ConcatTest,org.apache.tools.ant.taskdefs.ConcatTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ConcatTest.java,67,1,164,2,0.0,0,0,0,0.0,0.0,0,0,3,2,2,11,1,0,0,6,14,1.0,0.458824,39,38,9,0,0.458824,39,1,1,0,0,1,46,98,8,8,2,0,8,0,8,1,32,24,0,9,1,46,98,8,8,2,0,8,0,8,1,32,24,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

import java.io.File;


public class ConcatTest 
    extends BuildFileTest {

    
    private static final String tempFile = ""concat.tmp"";

    
    private static final String tempFile2 = ""concat.tmp.2"";

    
    public ConcatTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/concat.xml"");
    }

    
    public void tearDown() {
        
        String[] rm = new String[] { tempFile, tempFile2 };
        for (int i = 0; i < rm.length; i++) {
            File f = new File(getProjectDir(), rm[i]);
            if (f.exists()) {
                f.delete();
            }
        }
    }

    
    public void test1() {
        expectBuildException(""test1"", ""Insufficient information."");
    }

    
    public void test2() {
        expectBuildException(""test2"", ""Invalid destination file."");
    }

    
    public void test3() {

        File file = new File(getProjectDir(), tempFile);
        if (file.exists()) {
            file.delete();
        }

        executeTarget(""test3"");

        assertTrue(file.exists());
    }

    
    public void test4() {

        test3();

        File file = new File(getProjectDir(), tempFile);
        final long origSize = file.length();

        executeTarget(""test4"");

        File file2 = new File(getProjectDir(), tempFile2);
        final long newSize = file2.length();

        assertEquals(origSize * 3, newSize);
    }

    
    public void test5() {
        expectLog(""test5"", ""Hello, World!"");
    }

    public void test6() {
        String filename = ""src/etc/testcases/taskdefs/thisfiledoesnotexist""
            .replace('/', File.separatorChar);
        expectLogContaining(""test6"", filename +"" does not exist."");
    }

}
"
L29449,Class,ConditionTest,org.apache.tools.ant.taskdefs.ConditionTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ConditionTest.java,65,1,267,2,0.0,0,0,0,0.0,0.0,0,0,5,0,0,41,1,0,0,7,48,0.0952381,0.0949367,15,15,4,38,0.0949367,15,1,1,0,0,1,143,203,6,8,0,0,41,0,41,1,65,41,0,42,1,143,203,6,8,0,0,41,0,41,1,65,41,0,42,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;
import java.lang.reflect.InvocationTargetException;


public class ConditionTest extends BuildFileTest {

    
    public ConditionTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/condition.xml"");
    }


    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testBasic() {
       expectPropertySet(""basic"",""basic""); 
    }

    public void testConditionIncomplete() {
        expectSpecificBuildException(""condition-incomplete"", 
                                     ""property attribute has been omitted"",
                                     ""The property attribute is required.""); 
    }
    
    public void testConditionEmpty() {
        expectSpecificBuildException(""condition-empty"", 
                                     ""no conditions"",
                                     ""You must nest a condition into <condition>""); 
    }    

    public void testShortcut() {
        expectPropertySet(""shortcut"",""shortcut"",""set""); 
    }
    
    public void testUnset() {
        expectPropertyUnset(""dontset"",""dontset""); 
    }
  
    public void testSetValue() {
        expectPropertySet(""setvalue"",""setvalue"",""woowoo""); 
    }
    
    public void testNegation() {
        expectPropertySet(""negation"",""negation""); 
    }
    
    public void testNegationFalse() {
        expectPropertyUnset(""negationfalse"",""negationfalse""); 
    }
    
    public void testNegationIncomplete() {
        expectSpecificBuildException(""negationincomplete"", 
                                     ""no conditions in <not>"",
                                     ""You must nest a condition into <not>""); 
    }
    
    public void testAnd() {
        expectPropertySet(""and"",""and""); 
    }   
        
    public void testAndFails() {
        expectPropertyUnset(""andfails"",""andfails""); 
    }   
 
    public void testAndIncomplete() {
        expectPropertyUnset(""andincomplete"",""andincomplete""); 
    } 

    public void testAndempty() {
        expectPropertySet(""andempty"",""andempty""); 
    }   
    
    public void testOr() {
        expectPropertySet(""or"",""or""); 
    }

    public void testOrincomplete() {
        expectPropertySet(""or"",""or""); 
    } 
  
    public void testOrFails() {
        expectPropertyUnset(""orfails"",""orfails""); 
    }   
 
    public void testOrboth() {
        expectPropertySet(""orboth"",""orboth""); 
    }   

    public void testFilesmatchIdentical() {
        expectPropertySet(""filesmatch-identical"",""filesmatch-identical""); 
    }       
    
    
    public void testFilesmatchIncomplete() {
        expectSpecificBuildException(""filesmatch-incomplete"", 
                                     ""Missing file2 attribute"",
                                     ""both file1 and file2 are required in filesmatch""); 
    }
    
    public void testFilesmatchOddsizes() {
        expectPropertyUnset(""filesmatch-oddsizes"",""filesmatch-oddsizes""); 
    }    
    
    public void testFilesmatchExistence() {
        expectPropertyUnset(""filesmatch-existence"", ""filesmatch-existence""); 
    } 

    public void testFilesmatchDifferent() {
        expectPropertyUnset(""filesmatch-different"",""filesmatch-different""); 
    } 
    
    public void testFilesmatchMatch() {
        expectPropertySet(""filesmatch-match"",""filesmatch-match""); 
    }   
    
    public void testFilesmatchDifferentSizes() {
        expectPropertyUnset(""filesmatch-different-sizes"",
            ""filesmatch-different-sizes""); 
    } 

    public void testFilesmatchDifferentOnemissing() {
        expectPropertyUnset(""filesmatch-different-onemissing"",
            ""filesmatch-different-onemissing""); 
    } 
    
    public void testContains() {
        expectPropertySet(""contains"",""contains""); 
    }   
        
    
    public void testContainsDoesnt() {
        expectPropertyUnset(""contains-doesnt"",""contains-doesnt""); 
    }   

    public void testContainsAnycase() {
        expectPropertySet(""contains-anycase"",""contains-anycase""); 
    } 

    
    public void testContainsIncomplete1() {
        expectSpecificBuildException(""contains-incomplete1"", 
                    ""Missing contains attribute"",
                    ""both string and substring are required in contains""); 
    } 
    
    public void testContainsIncomplete2() {
        expectSpecificBuildException(""contains-incomplete2"", 
                    ""Missing contains attribute"",
                    ""both string and substring are required in contains""); 
    } 
    
    public void testIstrue() {
        expectPropertySet(""istrue"",""istrue""); 
    } 

    public void testIstrueNot() {
        expectPropertyUnset(""istrue-not"",""istrue-not""); 
    } 
 
    public void testIstrueFalse() {
        expectPropertyUnset(""istrue-false"",""istrue-false""); 
    } 

    
    public void testIstrueIncomplete1() {
        expectSpecificBuildException(""istrue-incomplete"", 
                    ""Missing attribute"",
                    ""Nothing to test for truth""); 
    } 

    public void testIsfalseTrue() {
        expectPropertyUnset(""isfalse-true"",""isfalse-true""); 
    } 

    public void testIsfalseNot() {
        expectPropertySet(""isfalse-not"",""isfalse-not""); 
    } 
 
    public void testIsfalseFalse() {
        expectPropertySet(""isfalse-false"",""isfalse-false""); 
    } 

    
    public void testIsfalseIncomplete1() {
        expectSpecificBuildException(""isfalse-incomplete"", 
                    ""Missing attribute"",
                    ""Nothing to test for falsehood""); 
    }     
    
}

"
L29528,Class,CopyTest,org.apache.tools.ant.taskdefs.CopyTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/CopyTest.java,69,1,153,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,15,3,0,0,7,16,0.1,0.0897436,7,5,1,9,0.0897436,7,1,1,0,0,1,71,85,6,8,0,0,9,0,9,1,33,44,0,10,1,71,85,6,8,0,0,9,0,9,1,33,44,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.util.JavaEnvUtils;
import java.io.File;
import java.io.IOException;


public class CopyTest extends BuildFileTest {

    public CopyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/copy.xml"");
    }

    public void test1() {
        executeTarget(""test1"");
        File f = new File(getProjectDir(), ""copytest1.tmp"");
        if ( !f.exists()) {
            fail(""Copy failed"");
        }
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test2() {
        executeTarget(""test2"");
        File f = new File(getProjectDir(), ""copytest1dir/copy.xml"");
        if ( !f.exists()) {
            fail(""Copy failed"");
        }
    }

    public void test3() {
        executeTarget(""test3"");
        File file3  = new File(getProjectDir(), ""copytest3.tmp"");
        assertTrue(file3.exists());
        File file3a = new File(getProjectDir(), ""copytest3a.tmp"");
        assertTrue(file3a.exists());
        File file3b = new File(getProjectDir(), ""copytest3b.tmp"");
        assertTrue(file3b.exists());
        File file3c = new File(getProjectDir(), ""copytest3c.tmp"");
        assertTrue(file3c.exists());

        
        if(file3.length()==0) {
            fail(""could not overwrite an existing, older file"");
        }
        if(file3c.length()!=0) {
            fail(""could not force overwrite an existing, newer file"");
        }
        if(file3b.length()==0) {
            fail(""unexpectedly overwrote an existing, newer file"");
        }

        
        if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            assertTrue(file3a.lastModified()==file3.lastModified());
            assertTrue(file3c.lastModified()<file3a.lastModified());
        }

    }

    public void testFilterSet() throws IOException {
        executeTarget(""testFilterSet"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""copy.filterset.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    public void testFilterChain() throws IOException {
        executeTarget(""testFilterChain"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""copy.filterchain.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    public void testSingleFileFileset() {
        executeTarget(""test_single_file_fileset"");
        File file  = new File(getProjectDir(),
                                        ""copytest_single_file_fileset.tmp"");
        assertTrue(file.exists());
    }
}
"
L29504,Class,CopydirTest,org.apache.tools.ant.taskdefs.CopydirTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/CopydirTest.java,63,1,106,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,11,1,0,0,6,15,0.1,0.108108,4,3,1,9,0.108108,4,1,1,0,0,1,33,44,6,8,0,0,9,0,9,1,33,12,0,10,1,33,44,6,8,0,0,9,0,9,1,33,12,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class CopydirTest extends BuildFileTest { 
    
    public CopydirTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/copydir.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectLog(""test4"", ""DEPRECATED - The copydir task is deprecated.  Use copy instead.Warning: src == dest"");
    }
    
    public void test5() { 
        executeTarget(""test5"");
        java.io.File f = new java.io.File(getProjectDir(), ""../taskdefs.tmp"");
        if (!f.exists() || !f.isDirectory()) { 
            fail(""Copy failed"");
        }
        
    }

    public void test6() { 
        expectBuildException(""test6"", ""target is file"");
    }
    
}
"
L29516,Class,CopyfileTest,org.apache.tools.ant.taskdefs.CopyfileTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/CopyfileTest.java,63,1,106,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,10,1,0,0,6,15,0.1,0.0789474,3,3,1,9,0.0789474,3,1,1,0,0,1,35,44,6,8,0,0,9,0,9,1,33,13,0,10,1,35,44,6,8,0,0,9,0,9,1,33,13,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class CopyfileTest extends BuildFileTest { 
    
    public void test6() { 
        expectBuildException(""test6"", ""target is directory"");
    }

    public CopyfileTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/copyfile.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectLog(""test4"", ""DEPRECATED - The copyfile task is deprecated.  Use copy instead.Warning: src == dest"");
    }

    public void test5() { 
        executeTarget(""test5"");
        java.io.File f = new java.io.File(getProjectDir(), ""copyfile.tmp"");
        if (f.exists()) { 
            f.delete();
        } else {
            fail(""Copy failed"");
        }
    }
}
"
L29562,Class,DeleteTest,org.apache.tools.ant.taskdefs.DeleteTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DeleteTest.java,62,1,87,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,1,0,0,4,10,0.142857,0.130435,3,3,1,6,0.130435,3,1,1,0,0,1,20,26,6,8,0,0,6,0,6,1,30,6,0,7,1,20,26,6,8,0,0,6,0,6,1,30,6,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class DeleteTest extends BuildFileTest { 
    
    public DeleteTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/delete.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        executeTarget(""test2"");
    }

    public void test4() { 
        executeTarget(""test4"");
    }
}
"
L29571,Class,DeltreeTest,org.apache.tools.ant.taskdefs.DeltreeTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DeltreeTest.java,62,1,81,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,4,1,0,0,4,8,0.2,0.222222,4,3,1,4,0.222222,4,1,1,0,0,1,14,20,6,8,0,0,4,0,4,1,28,4,0,5,1,14,20,6,8,0,0,4,0,4,1,28,4,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class DeltreeTest extends BuildFileTest { 
    
    public DeltreeTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/deltree.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        
        executeTarget(""test2"");
    }

}
"
L29578,Class,DemuxOutputTask,org.apache.tools.ant.taskdefs.DemuxOutputTask,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DemuxOutputTask.java,68,1,109,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,9,2,1,0,1,4,0.5,0.204545,9,9,1,1,0.204545,9,2,2,0,0,1,35,42,13,7,4,0,3,0,1,0,31,17,0,23,7,35,42,13,7,4,0,3,0,1,0,31,17,0,23,7,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;
import java.util.Random;

public class DemuxOutputTask extends Task {
    private String randomOutValue;
    private String randomErrValue;
    private boolean outputReceived = false;
    private boolean errorReceived = false;
    
    public void execute() {
        Random generator = new Random();
        randomOutValue = ""Output Value is "" + generator.nextInt();
        randomErrValue = ""Error Value is "" + generator.nextInt();
        
        System.out.println(randomOutValue);
        System.err.println(randomErrValue);
        if (!outputReceived) {
            throw new BuildException(""Did not receive output"");
        } 
        
        if (!errorReceived) {
            throw new BuildException(""Did not receive error"");
        }
    }

    protected void handleOutput(String line) {
        if (line.length() != 0 && !line.equals(randomOutValue)) {
            String message = ""Received = ["" + line + ""], expected = ["" 
                + randomOutValue + ""]"";
            throw new BuildException(message);
        }
        outputReceived = true;
    }
    
    protected void handleErrorOutput(String line) {
        if (line.length() != 0 && !line.equals(randomErrValue)) {
            String message = ""Received = ["" + line + ""], expected = ["" 
                + randomErrValue + ""]"";
            throw new BuildException(message);
        }
        errorReceived = true;
    }
    
    
}

"
L29596,Class,DependSetTest,org.apache.tools.ant.taskdefs.DependSetTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DependSetTest.java,64,1,102,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,1,0,0,5,13,0.111111,0.142857,5,5,1,8,0.142857,5,1,1,0,0,1,30,39,6,8,0,0,8,0,8,1,32,11,0,9,1,30,39,6,8,0,0,8,0,8,1,32,11,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class DependSetTest extends BuildFileTest { 
    
    public DependSetTest(String name) { 
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/dependset.xml"");
    }

    public void test1() { 
       expectBuildException(""test1"",""At least one <srcfileset> or <srcfilelist> element must be set"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test2() { 
       expectBuildException(""test2"",""At least one <targetfileset> or <targetfilelist> element must be set"");
    }

    public void test3() { 
       expectBuildException(""test1"",""At least one <srcfileset> or <srcfilelist> element must be set"");
    }

    public void test4() { 
        executeTarget(""test4"");
    }

    public void test5() { 
        executeTarget(""test5"");
        java.io.File f = new java.io.File(getProjectDir(), ""older.tmp"");
        if (f.exists()) {
           fail(""dependset failed to remove out of date file "" + f.toString());
        }
    }

}
"
L29634,Class,DirnameTest,org.apache.tools.ant.taskdefs.DirnameTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DirnameTest.java,63,1,104,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,2,0,0,5,12,0.125,0.0810811,3,3,1,7,0.0810811,3,1,1,0,0,1,34,42,6,8,0,0,7,0,7,1,31,16,0,8,1,34,42,6,8,0,0,7,0,7,1,31,16,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class DirnameTest extends BuildFileTest { 
    
    public DirnameTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/dirname.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required attribute missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required attribute missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required attribute missing"");
    }

    public void test4() { 
        executeTarget(""test4"");
        String filesep = System.getProperty(""file.separator"");
        String expected = filesep + ""usr"" + filesep + ""local"";
        String checkprop = project.getProperty(""local.dir"");
        if (!checkprop.equals(expected)) { 
            fail(""dirname failed"");
        }
    }
    
    public void test5() { 
        executeTarget(""test5"");
        String expected = project.getProperty(""basedir"");
        String checkprop = project.getProperty(""base.dir"");
        if (!checkprop.equals(expected)) { 
            fail(""dirname failed"");
        }
    }
    
}
"
L29644,Class,DynamicTask,org.apache.tools.ant.taskdefs.DynamicTask,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DynamicTask.java,60,1,82,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,5,0,0,1,4,0.0,0.0,0,0,0,4,0.0,0,2,3,0,0,2,10,14,9,7,0,0,3,0,3,1,31,2,0,25,8,18,23,9,7,0,0,5,0,5,2,33,4,0,27,9,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.DynamicConfigurator;
import org.apache.tools.ant.Task;

public class DynamicTask extends Task implements DynamicConfigurator {

    public void execute() {
    }

    public void setDynamicAttribute(String name, String value) {
        project.setNewProperty(name, value);
    }

    public Object createDynamicElement(String name) {
        return new Sub();
    }

    public class Sub implements DynamicConfigurator {
        public void setDynamicAttribute(String name, String value) {
            getProject().setNewProperty(name, value);
        }

        public Object createDynamicElement(String name) {
            return null;
        }
    }
}
"
L29652,Class,DynamicTask$Sub,org.apache.tools.ant.taskdefs.DynamicTask$Sub,L29644,L103,src/testcases/org/apache/tools/ant/taskdefs/DynamicTask.java,73,5,81,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,3,1,0,2,4,0.0,0.0,0,0,0,3,0.0,0,1,1,0,0,1,8,9,0,0,0,0,2,0,2,1,2,2,0,2,1,8,9,0,0,0,0,2,0,2,1,2,2,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.DynamicConfigurator;
import org.apache.tools.ant.Task;

public class DynamicTask extends Task implements DynamicConfigurator {

    public void execute() {
    }

    public void setDynamicAttribute(String name, String value) {
        project.setNewProperty(name, value);
    }

    public Object createDynamicElement(String name) {
        return new Sub();
    }

    public class Sub implements DynamicConfigurator {
        public void setDynamicAttribute(String name, String value) {
            getProject().setNewProperty(name, value);
        }

        public Object createDynamicElement(String name) {
            return null;
        }
    }
}
"
L29662,Class,DynamicTest,org.apache.tools.ant.taskdefs.DynamicTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/DynamicTest.java,59,1,76,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,4,7,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,15,18,6,8,0,0,3,0,3,1,27,7,0,4,1,15,18,6,8,0,0,3,0,3,1,27,7,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class DynamicTest extends BuildFileTest { 
    
    public DynamicTest(String name) { 
        super(name);
    }
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/dynamictask.xml"");
    }

    public void testSimple() {
        executeTarget(""simple"");
        assertEquals(""1"", project.getProperty(""prop1""));
        assertEquals(""2"", project.getProperty(""prop2""));
        assertEquals(""3"", project.getProperty(""prop3""));
        assertEquals(""4"", project.getProperty(""prop4""));
    }
}
"
L29667,Class,EchoTest,org.apache.tools.ant.taskdefs.EchoTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/EchoTest.java,62,1,91,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,1,0,0,3,8,0.5,0.178571,5,5,3,3,0.178571,5,1,1,0,0,1,23,30,6,8,0,0,5,0,5,1,29,5,0,6,1,23,30,6,8,0,0,5,0,5,1,29,5,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class EchoTest extends BuildFileTest { 
    
    public EchoTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/echo.xml"");
    }
    
    
    public void test1() { 
        expectLog(""test1"", """");
    }

    
    public void test2() { 
        expectLog(""test2"", ""OUTPUT OF ECHO"");
    }
    
    public void test3() { 
        expectLog(""test3"", ""\n""+
                              ""    This \n""+
                              ""    is\n""+
                              ""    a \n""+
                              ""    multiline\n""+
                              ""    message\n""+
                              ""    "");
    }
}
"
L29677,Class,ExecuteJavaTest,org.apache.tools.ant.taskdefs.ExecuteJavaTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecuteJavaTest.java,73,1,149,2,0.249084,1,3,1,0.220779,0.245614,17,14,1,1,1,8,7,0,0,13,19,0.5,0.185714,13,12,2,2,0.185714,13,0,0,0,0,0,57,77,5,2,5,2,6,0,3,1,6,29,0,3,1,57,77,5,2,5,2,6,0,3,1,6,29,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.TestCase;


public class ExecuteJavaTest extends TestCase {

    private final static int TIME_OUT = 5000;

    private final static int CLOCK_ERROR=200;
    private final static int TIME_OUT_TEST=TIME_OUT-CLOCK_ERROR;
    
    private ExecuteJava ej;
    private Project project;

    public ExecuteJavaTest(String name) {
        super(name);
    }

    protected void setUp(){
        ej = new ExecuteJava();
        ej.setTimeout(new Long(TIME_OUT));
        project = new Project();
        project.setBasedir(""."");
        ej.setClasspath(new Path(project, getTestClassPath()));
    }

    private Commandline getCommandline(int timetorun) throws Exception {
        Commandline cmd = new Commandline();
        cmd.setExecutable(TimeProcess.class.getName());
        cmd.createArgument().setValue(String.valueOf(timetorun));
        return cmd;
    }

    public void testNoTimeOut() throws Exception {
        Commandline cmd = getCommandline(TIME_OUT/2);
        ej.setJavaCommand(cmd);
        ej.execute(project);
        assertTrue(""process should not have been killed"", !ej.killedProcess());
    }

    
    public void testTimeOut() throws Exception {
        Commandline cmd = getCommandline(TIME_OUT*2);
        ej.setJavaCommand(cmd);
        long now = System.currentTimeMillis();
        ej.execute(project);
        long elapsed = System.currentTimeMillis() - now;
        assertTrue(""process should have been killed"", ej.killedProcess());

        assertTrue(""elapse time of ""+elapsed
                   +"" ms is less than timeout value of ""+TIME_OUT_TEST+"" ms"", 
                   elapsed >= TIME_OUT_TEST);
        assertTrue(""elapse time of ""+elapsed
                   +"" ms is greater than run value of ""+(TIME_OUT*2)+"" ms"", 
                   elapsed < TIME_OUT*2);
    }


    
    private static String getTestClassPath(){
        String classpath = System.getProperty(""build.tests"");
        if (classpath == null) {
            System.err.println(""WARNING: 'build.tests' property is not available !"");
            classpath = System.getProperty(""java.class.path"");
        }

        
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            classpath +=   File.pathSeparator
                + System.getProperty(""java.home"")
                + File.separator + ""lib""
                + File.separator + ""classes.zip"";
        }

        return classpath;
    }

}
"
L29705,Class,ExecuteWatchdogTest,org.apache.tools.ant.taskdefs.ExecuteWatchdogTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecuteWatchdogTest.java,68,1,200,2,0.148148,1,3,1,0.12782,0.14433,17,14,1,2,2,15,3,0,0,5,15,0.5,0.181818,20,11,3,3,0.177966,21,0,0,0,0,0,90,125,5,3,5,3,10,0,5,1,10,51,0,5,1,97,133,5,3,5,3,11,0,6,1,11,54,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.util.JavaEnvUtils;

import java.net.*;
import junit.framework.*;
import java.io.*;


public class ExecuteWatchdogTest extends TestCase {

    private final static int TIME_OUT = 5000;

    private final static String TEST_CLASSPATH = getTestClassPath();

    private final static int CLOCK_ERROR=200;
    private final static int TIME_OUT_TEST=TIME_OUT-CLOCK_ERROR;
    
    private ExecuteWatchdog watchdog;

    public ExecuteWatchdogTest(String name) {
        super(name);
    }

    protected void setUp(){
        watchdog = new ExecuteWatchdog(TIME_OUT);
    }

    
    private static String getTestClassPath(){
        String classpath = System.getProperty(""build.tests"");
        if (classpath == null) {
            System.err.println(""WARNING: 'build.tests' property is not available !"");
            classpath = System.getProperty(""java.class.path"");
        }

        
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            classpath +=   File.pathSeparator
                + System.getProperty(""java.home"")
                + File.separator + ""lib""
                + File.separator + ""classes.zip"";
        }

        return classpath;
    }

    private Process getProcess(int timetorun) throws Exception {
        String[] cmdArray = {
            JavaEnvUtils.getJreExecutable(""java""), ""-classpath"", TEST_CLASSPATH,
            TimeProcess.class.getName(), String.valueOf(timetorun)
        };
        
        return Runtime.getRuntime().exec(cmdArray);
    }

    private String getErrorOutput(Process p) throws Exception {
        BufferedReader err = new BufferedReader( new InputStreamReader(p.getErrorStream()) );
        StringBuffer buf = new StringBuffer();
        String line;
        while ( (line = err.readLine()) != null){
            buf.append(line);
        }
        return buf.toString();
    }
    
    private int waitForEnd(Process p) throws Exception {
        int retcode = p.waitFor();
        if (retcode != 0){
            String err = getErrorOutput(p);
            if (err.length() > 0){
                System.err.println(""ERROR:"");
                System.err.println(err);
            }
        }
        return retcode;
    }

    public void testNoTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT/2);
        watchdog.start(process);
        int retCode = waitForEnd(process);
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertEquals(0, retCode);
    }

    
    public void testTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT*2);
        long now = System.currentTimeMillis();
        watchdog.start(process);
        int retCode = process.waitFor();
        long elapsed = System.currentTimeMillis() - now;
        assertTrue(""process should have been killed"", watchdog.killedProcess());
                
        assertTrue(""elapse time of ""+elapsed+"" ms is less than timeout value of ""+TIME_OUT_TEST+"" ms"", elapsed >= TIME_OUT_TEST);
        assertTrue(""elapse time of ""+elapsed+"" ms is greater than run value of ""+(TIME_OUT*2)+"" ms"", elapsed < TIME_OUT*2);
    }

    
    public void testFailed() throws Exception {
        Process process = getProcess(-1); 
        watchdog.start(process);
        int retCode = process.waitFor();
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertTrue(""return code is invalid: "" + retCode, retCode!=0);
    }

    public void testManualStop() throws Exception {
        final Process process = getProcess(TIME_OUT*2);
        watchdog.start(process);

        
        Thread thread = new Thread(){
                public void run(){
                    try {
                        process.waitFor();
                    } catch(InterruptedException e){
                        
                        fail(""process interrupted in thread"");
                    }
                }
        };
        thread.start();

        
        thread.join(TIME_OUT/2);

         
        watchdog.stop();

        
        thread.join();

        
        assertEquals(0, process.exitValue());
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
    }
}
"
L29742,Class,ExecuteWatchdogTest$1,org.apache.tools.ant.taskdefs.ExecuteWatchdogTest$1,L29739,L103,src/testcases/org/apache/tools/ant/taskdefs/ExecuteWatchdogTest.java,175,37,184,10,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,0,0,0,1,0.0,0.1,1,0,0,2,0.1,1,0,0,0,0,0,9,10,0,0,0,0,1,0,1,0,1,3,0,1,0,9,10,0,0,0,0,1,0,1,0,1,3,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.util.JavaEnvUtils;

import java.net.*;
import junit.framework.*;
import java.io.*;


public class ExecuteWatchdogTest extends TestCase {

    private final static int TIME_OUT = 5000;

    private final static String TEST_CLASSPATH = getTestClassPath();

    private final static int CLOCK_ERROR=200;
    private final static int TIME_OUT_TEST=TIME_OUT-CLOCK_ERROR;
    
    private ExecuteWatchdog watchdog;

    public ExecuteWatchdogTest(String name) {
        super(name);
    }

    protected void setUp(){
        watchdog = new ExecuteWatchdog(TIME_OUT);
    }

    
    private static String getTestClassPath(){
        String classpath = System.getProperty(""build.tests"");
        if (classpath == null) {
            System.err.println(""WARNING: 'build.tests' property is not available !"");
            classpath = System.getProperty(""java.class.path"");
        }

        
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            classpath +=   File.pathSeparator
                + System.getProperty(""java.home"")
                + File.separator + ""lib""
                + File.separator + ""classes.zip"";
        }

        return classpath;
    }

    private Process getProcess(int timetorun) throws Exception {
        String[] cmdArray = {
            JavaEnvUtils.getJreExecutable(""java""), ""-classpath"", TEST_CLASSPATH,
            TimeProcess.class.getName(), String.valueOf(timetorun)
        };
        
        return Runtime.getRuntime().exec(cmdArray);
    }

    private String getErrorOutput(Process p) throws Exception {
        BufferedReader err = new BufferedReader( new InputStreamReader(p.getErrorStream()) );
        StringBuffer buf = new StringBuffer();
        String line;
        while ( (line = err.readLine()) != null){
            buf.append(line);
        }
        return buf.toString();
    }
    
    private int waitForEnd(Process p) throws Exception {
        int retcode = p.waitFor();
        if (retcode != 0){
            String err = getErrorOutput(p);
            if (err.length() > 0){
                System.err.println(""ERROR:"");
                System.err.println(err);
            }
        }
        return retcode;
    }

    public void testNoTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT/2);
        watchdog.start(process);
        int retCode = waitForEnd(process);
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertEquals(0, retCode);
    }

    
    public void testTimeOut() throws Exception {
        Process process = getProcess(TIME_OUT*2);
        long now = System.currentTimeMillis();
        watchdog.start(process);
        int retCode = process.waitFor();
        long elapsed = System.currentTimeMillis() - now;
        assertTrue(""process should have been killed"", watchdog.killedProcess());
                
        assertTrue(""elapse time of ""+elapsed+"" ms is less than timeout value of ""+TIME_OUT_TEST+"" ms"", elapsed >= TIME_OUT_TEST);
        assertTrue(""elapse time of ""+elapsed+"" ms is greater than run value of ""+(TIME_OUT*2)+"" ms"", elapsed < TIME_OUT*2);
    }

    
    public void testFailed() throws Exception {
        Process process = getProcess(-1); 
        watchdog.start(process);
        int retCode = process.waitFor();
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
        assertTrue(""return code is invalid: "" + retCode, retCode!=0);
    }

    public void testManualStop() throws Exception {
        final Process process = getProcess(TIME_OUT*2);
        watchdog.start(process);

        
        Thread thread = new Thread(){
                public void run(){
                    try {
                        process.waitFor();
                    } catch(InterruptedException e){
                        
                        fail(""process interrupted in thread"");
                    }
                }
        };
        thread.start();

        
        thread.join(TIME_OUT/2);

         
        watchdog.stop();

        
        thread.join();

        
        assertEquals(0, process.exitValue());
        assertTrue(""process should not have been killed"", !watchdog.killedProcess());
    }
}
"
L29746,Class,FailTest,org.apache.tools.ant.taskdefs.FailTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/FailTest.java,64,1,110,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,3,0,0,6,13,0.125,0.0909091,4,4,1,7,0.0909091,4,1,1,0,0,1,40,47,6,8,0,0,7,0,7,1,31,15,0,8,1,40,47,6,8,0,0,7,0,7,1,31,15,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildFileTest;


public class FailTest extends BuildFileTest { 
    
    public FailTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/fail.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""it is required to fail :-)"");
    }

    public void test2() { 
        expectSpecificBuildException(""test2"", 
            ""it is required to fail :-)"",
            ""test2"");
    }
    
    public void testText() { 
        expectSpecificBuildException(""testText"",
            ""it is required to fail :-)"",
            ""testText"");
    }
    
    public void testIf() {
        try {
            executeTarget(""testIf"");
        } catch (BuildException be) {
            fail(""foo has not been defined, testIf must not fail"");
        }
        project.setProperty(""foo"", """");
        expectBuildException(""testIf"", ""testIf must fail if foo has been set"");
    }

    public void testUnless() {
        expectBuildException(""testUnless"", 
                             ""testUnless must fail unless foo has been set"");
        project.setProperty(""foo"", """");
        try {
            executeTarget(""testUnless"");
        } catch (BuildException be) {
            fail(""foo has been defined, testUnless must not fail"");
        }
    }
}
"
L29756,Class,FilterTest,org.apache.tools.ant.taskdefs.FilterTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/FilterTest.java,67,1,151,2,0.0,0,0,0,0.0,0.0,0,0,2,2,2,16,1,0,0,5,18,0.0769231,0.0410959,3,3,1,12,0.0410959,3,1,1,0,0,1,70,85,6,9,0,1,13,0,12,1,37,31,0,13,1,70,85,6,9,0,1,13,0,12,1,37,31,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import org.apache.tools.ant.BuildFileTest;


public class FilterTest extends BuildFileTest { 
      
    public FilterTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/filter.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }
    
    public void test4() { 
        executeTarget(""test4"");
    }
    
    public void test5() {
        executeTarget(""test5"");
        assertEquals(""2000"",
                     getFilteredFile(""5"", ""filtered.tmp""));
    }
    

    public void test6() {
        executeTarget(""test6"");
        assertEquals(""2000"",
                     getFilteredFile(""6"", ""taskdefs.tmp/filter1.txt""));
    }

    public void test7() {
        executeTarget(""test7"");
        assertEquals(""<%@ include file=\""root/some/include.jsp\""%>"",
                     getFilteredFile(""7"", ""filtered.tmp""));
    }

    public void test8() {
        executeTarget(""test8"");
        assertEquals(""<%@ include file=\""root/some/include.jsp\""%>"",
                     getFilteredFile(""8"", ""taskdefs.tmp/filter2.txt""));
    }
    
    public void test9() {
        executeTarget(""test9"");
        assertEquals(""included"",
                    getFilteredFile(""9"", ""taskdefs.tmp/filter3.txt""));
    }
        
    private String getFilteredFile(String testNumber, String filteredFile) {
    
        String line = null;
        File f = new File(getProjectDir(), filteredFile);
        if (!f.exists()) {
            fail(""filter test""+testNumber+"" failed"");
        } else {
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException fnfe) {
                fail(""filter test""+testNumber+"" failed, filtered file: "" + f.toString() + "" not found"");
            }
            try {
                line = in.readLine();
                in.close();
            } catch (IOException ioe) {
                fail(""filter test""+testNumber+"" failed.  IOException while reading filtered file: "" + ioe);
            }
        }
        f.delete();
        return line;
    }
}
"
L29775,Class,FixCrLfTest,org.apache.tools.ant.taskdefs.FixCrLfTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/FixCrLfTest.java,68,1,215,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,23,2,0,0,4,21,0.0555556,0.115385,15,4,1,17,0.115385,15,1,1,0,0,1,115,148,6,8,0,0,17,0,17,1,41,55,0,18,1,115,148,6,8,0,0,17,0,17,1,41,55,0,18,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.*;

import junit.framework.AssertionFailedError;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.JavaEnvUtils;


public class FixCrLfTest extends BuildFileTest {

    public FixCrLfTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/fixcrlf/build.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void test1() throws IOException { 
        executeTarget(""test1"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk1.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java""));
    }
    
    public void test2() throws IOException { 
        executeTarget(""test2"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk2.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk2.java""));
    }
    
    public void test3() throws IOException { 
        executeTarget(""test3"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk3.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk3.java""));
    }
    
    public void test4() throws IOException { 
        executeTarget(""test4"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk4.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk4.java""));
    }
    
    public void test5() throws IOException { 
        executeTarget(""test5"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk5.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk5.java""));
    }
    
    public void test6() throws IOException { 
        executeTarget(""test6"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk6.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk6.java""));
    }
    
    public void test7() throws IOException { 
        executeTarget(""test7"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk7.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk7.java""));
    }
    
    public void test8() throws IOException {  
        executeTarget(""test8"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk8.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk8.java""));
    }
    
    public void test9() throws IOException { 
        executeTarget(""test9"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Junk9.java""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk9.java""));
    }
    
    public void testMacLines() throws IOException { 
        executeTarget(""testMacLines"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/Mac2Unix""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/Mac2Unix""));
    }

    public void testNoOverwrite() throws IOException {
        executeTarget(""test1"");
        File result = 
            new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java"");
        long modTime = result.lastModified();

        
        try {
            Thread.currentThread().sleep(5000);
        } catch (InterruptedException ie) {
            fail(ie.getMessage());
        } 

        
        configureProject(""src/etc/testcases/taskdefs/fixcrlf/build.xml"");

        executeTarget(""test1"");
        result = 
            new File(""src/etc/testcases/taskdefs/fixcrlf/result/Junk1.java"");
        assertEquals(modTime, result.lastModified());
    }

    public void testEncoding() throws IOException { 
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            
            return;
        }
        executeTarget(""testEncoding"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/input.lf.utf16""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/input.crlf.utf16""));
    }
    
    public void testLongLines() throws IOException { 
        executeTarget(""testLongLines"");
        assertEqualContent(new File(""src/etc/testcases/taskdefs/fixcrlf/expected/longlines.lf""),
                           new File(""src/etc/testcases/taskdefs/fixcrlf/result/longlines.crlf""));
    }
    
    public void assertEqualContent(File expect, File result) 
        throws AssertionFailedError, IOException {
        if (!result.exists()) {
            fail(""Expected file ""+result+"" doesn\'t exist"");
        }

        InputStream inExpect = null;
        InputStream inResult = null;
        try {
            inExpect = new BufferedInputStream(new FileInputStream(expect));
            inResult = new BufferedInputStream(new FileInputStream(result));

            int expectedByte = inExpect.read();
            while (expectedByte != -1) {
                assertEquals(expectedByte, inResult.read());
                expectedByte = inExpect.read();
            }
            assertEquals(""End of file"", -1, inResult.read());
        } finally {
            if (inResult != null) {
                inResult.close();
            }
            if (inExpect != null) {
                inExpect.close();
            }
        }
    }

}
"
L29809,Class,GUnzipTest,org.apache.tools.ant.taskdefs.GUnzipTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/GUnzipTest.java,65,1,101,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,3,0,0,7,14,0.125,0.147059,5,5,1,7,0.147059,5,1,1,0,0,1,29,37,6,8,0,0,7,0,7,1,31,11,0,8,1,29,37,6,8,0,0,7,0,7,1,31,11,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;
 
import java.io.File;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class GUnzipTest extends BuildFileTest { 
    
    public GUnzipTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/gunzip.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""attribute src invalid"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
    public void testTestGzipTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testGzipTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
}
"
L29798,Class,GetTest,org.apache.tools.ant.taskdefs.GetTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/GetTest.java,63,1,104,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,9,1,0,0,5,13,0.111111,0.0857143,3,3,1,8,0.0857143,3,1,1,0,0,1,32,42,6,9,0,1,8,0,8,1,32,12,0,9,1,32,42,6,9,0,1,8,0,8,1,32,12,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;


public class GetTest extends BuildFileTest { 
    
    public GetTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/get.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""src invalid"");
    }

    public void test5() { 
        expectBuildException(""test5"", ""dest invalid (or no http-server on local machine)"");
    }

    public void test6() { 
        executeTarget(""test6"");
        java.io.File f = new File(getProjectDir(), ""get.tmp"");
        if (!f.exists()) { 
            fail(""get failed"");
        } else {
            f.delete();
        }
        
    }
    
}
"
L29819,Class,GzipTest,org.apache.tools.ant.taskdefs.GzipTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/GzipTest.java,63,1,110,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,9,1,0,0,5,14,0.1,0.0731707,3,3,1,9,0.0731707,3,1,1,0,0,1,38,48,6,8,0,0,9,0,9,1,33,14,0,10,1,38,48,6,8,0,0,9,0,9,1,33,14,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;
 

public class GzipTest extends BuildFileTest { 
    
    public GzipTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/gzip.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""zipfile must not point to a directory"");
    }

    public void testGZip(){
        executeTarget(""realTest"");
        String log = getLog();
        assertTrue(""Expecting message starting with 'Building:' but got '""
            + log + ""'"", log.startsWith(""Building:""));
        assertTrue(""Expecting message ending with 'asf-logo.gif.gz' but got '""
            + log + ""'"", log.endsWith(""asf-logo.gif.gz""));
    }

    public void testDateCheck(){
        executeTarget(""testDateCheck"");
        String log = getLog();
        assertTrue(
            ""Expecting message ending with 'asf-logo.gif.gz is up to date.' but got '"" + log + ""'"",
            log.endsWith(""asf-logo.gif.gz is up to date.""));
    }

    public void tearDown(){
        executeTarget(""cleanup"");
    }

}
"
L29831,Class,InitializeClassTest,org.apache.tools.ant.taskdefs.InitializeClassTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/InitializeClassTest.java,71,1,101,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,4,3,0,0,6,10,0.2,0.181818,6,6,1,4,0.181818,6,1,1,0,0,1,27,31,6,8,0,0,4,0,4,1,28,17,0,5,1,27,31,6,8,0,0,4,0,4,1,28,17,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class InitializeClassTest extends BuildFileTest {

    public InitializeClassTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/initializeclass.xml"");
    }

    public void testAll() throws IOException {
        executeTarget(""forked"");
        PrintStream ps = System.out;
        File f1 = new File(""src/etc/testcases/taskdefs/forkedout"");
        File f2 = new File(""src/etc/testcases/taskdefs/unforkedout"");
        PrintStream newps = new PrintStream(new FileOutputStream(f2));
        System.setOut(newps);
        project.executeTarget(""unforked"");
        System.setOut(ps);
        newps.close();
        FileUtils fu = FileUtils.newFileUtils();
        assertTrue(fu.contentEquals(f1, f2));
    }

    public void tearDown() {
        File f1 = new File(""src/etc/testcases/taskdefs/forkedout"");
        File f2 = new File(""src/etc/testcases/taskdefs/unforkedout"");
        f1.delete();
        f2.delete();
    }
}
"
L29838,Class,InputTest,org.apache.tools.ant.taskdefs.InputTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/InputTest.java,65,1,118,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,10,4,0,0,10,18,0.125,0.0833333,4,4,1,7,0.0833333,4,1,1,0,0,1,44,54,7,9,1,1,8,0,7,1,32,15,0,8,1,44,54,7,9,1,1,8,0,7,1,32,15,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.input.PropertyFileInputHandler;
import org.apache.tools.ant.util.JavaEnvUtils;


public class InputTest extends BuildFileTest {

    private String targetPostfix = """";

    public InputTest(String name) {
        super(name);
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            targetPostfix = "".1"";
        }
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/input.xml"");
        System.getProperties()
            .put(PropertyFileInputHandler.FILE_NAME_KEY,
                 getProject().resolveFile(""input.properties"")
                 .getAbsolutePath());
        getProject().setInputHandler(new PropertyFileInputHandler());
    }

    public void test1() {
        executeTarget(""test1"" + targetPostfix);
    }

    public void test2() {
        executeTarget(""test2"" + targetPostfix);
    }

    public void test3() {
        expectSpecificBuildException(""test3"" + targetPostfix, ""invalid input"",
                                     ""Found invalid input test for \'""
                                     + getKey(""All data is""
                                              + "" going to be deleted from DB""
                                              + "" continue?"")
                                     + ""\'"");
    }

    public void test5() {
        executeTarget(""test5"" + targetPostfix);
    }

    public void test6() {
        executeTarget(""test6"" + targetPostfix);
        assertEquals(""scott"", project.getProperty(""db.user""));
    }

    private String getKey(String key) {
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
            key = key.replace(' ', '_');
        }
        return key;
    }

}
"
L29853,Class,JarTest,org.apache.tools.ant.taskdefs.JarTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/JarTest.java,64,1,105,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,1,0,0,5,13,0.111111,0.0833333,3,3,1,8,0.0833333,3,1,1,0,0,1,33,42,8,8,2,0,8,0,8,1,32,13,0,9,1,33,42,8,8,2,0,8,0,8,1,32,13,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Date;
import org.apache.tools.ant.BuildFileTest;


public class JarTest extends BuildFileTest {

    private static String tempJar = ""tmp.jar"";
    private Reader r1, r2;

    public JarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/jar.xml"");
    }

    public void tearDown() {
        if (r1 != null) {
            try {
                r1.close();
            } catch (IOException e) {
            }
        }
        if (r2 != null) {
            try {
                r2.close();
            } catch (IOException e) {
            }
        }
        
        executeTarget(""cleanup"");
    }

    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() {
        expectBuildException(""test2"", ""manifest file does not exist"");
    }

    public void test3() {
        expectBuildException(""test3"", ""Unrecognized whenempty attribute: format C: /y"");
    }

    public void test4() {
        executeTarget(""test4"");
        File jarFile = new File(getProjectDir(), tempJar);
        assertTrue(jarFile.exists());
    }

    public void testNoRecreateWithoutUpdate() {
        testNoRecreate(""test4"");
    }

    public void testNoRecreateWithUpdate() {
        testNoRecreate(""testNoRecreateWithUpdate"");
    }

    private void testNoRecreate(String secondTarget) {
        executeTarget(""test4"");
        File jarFile = new File(getProjectDir(), tempJar);
        long jarModifiedDate = jarFile.lastModified();
        try {
            Thread.currentThread().sleep(2500);
        } catch (InterruptedException e) {
        } 
        executeTarget(secondTarget);
        assertEquals(""jar has not been recreated in "" + secondTarget,
                     jarModifiedDate, jarFile.lastModified());
    }

    public void testRecreateWithoutUpdateAdditionalFiles() {
        testRecreate(""test4"", ""testRecreateWithoutUpdateAdditionalFiles"");
    }

    public void testRecreateWithUpdateAdditionalFiles() {
        testRecreate(""test4"", ""testRecreateWithUpdateAdditionalFiles"");
    }

    public void testRecreateWithoutUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateWithoutUpdateNewerFile"");
    }

    public void testRecreateWithUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateWithUpdateNewerFile"");
    }

    private void testRecreate(String firstTarget, String secondTarget) {
        executeTarget(firstTarget);
        try {
            Thread.currentThread().sleep(2500);
        } catch (InterruptedException e) {
        } 
        File jarFile = new File(getProjectDir(), tempJar);
        long jarModifiedDate = jarFile.lastModified();
        executeTarget(secondTarget);
        jarFile = new File(getProjectDir(), tempJar);
        assertTrue(""jar has been recreated in "" + secondTarget,
                   jarModifiedDate < jarFile.lastModified());
    }

    public void testManifestStaysIntact() 
        throws IOException, ManifestException {
        executeTarget(""testManifestStaysIntact"");

        r1 = new FileReader(getProject()
                            .resolveFile(""jartmp/manifest""));
        r2 = new FileReader(getProject()
                            .resolveFile(""jartmp/META-INF/MANIFEST.MF""));
        Manifest mf1 = new Manifest(r1);
        Manifest mf2 = new Manifest(r2);
        assertEquals(mf1, mf2);
    }

    public void testNoRecreateBasedirExcludesWithUpdate() {
        testNoRecreate(""testNoRecreateBasedirExcludesWithUpdate"");
    }

    public void testNoRecreateBasedirExcludesWithoutUpdate() {
        testNoRecreate(""testNoRecreateBasedirExcludesWithoutUpdate"");
    }

    public void testNoRecreateZipfilesetExcludesWithUpdate() {
        testNoRecreate(""testNoRecreateZipfilesetExcludesWithUpdate"");
    }

    public void testNoRecreateZipfilesetExcludesWithoutUpdate() {
        testNoRecreate(""testNoRecreateZipfilesetExcludesWithoutUpdate"");
    }

    public void testRecreateZipfilesetWithoutUpdateAdditionalFiles() {
        testRecreate(""test4"",
                     ""testRecreateZipfilesetWithoutUpdateAdditionalFiles"");
    }

    public void testRecreateZipfilesetWithUpdateAdditionalFiles() {
        testRecreate(""test4"",
                     ""testRecreateZipfilesetWithUpdateAdditionalFiles"");
    }

    public void testRecreateZipfilesetWithoutUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateZipfilesetWithoutUpdateNewerFile"");
    }

    public void testRecreateZipfilesetWithUpdateNewerFile() {
        testRecreate(""testRecreateNewerFileSetup"",
                     ""testRecreateZipfilesetWithUpdateNewerFile"");
    }

    public void testCreateWithEmptyFileset() {
        executeTarget(""testCreateWithEmptyFilesetSetUp"");
        executeTarget(""testCreateWithEmptyFileset"");
        executeTarget(""testCreateWithEmptyFileset"");
    }
}
"
L29894,Class,JavaTest,org.apache.tools.ant.taskdefs.JavaTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,66,1,217,2,0.0,0,0,0,0.0,0.0,0,0,6,1,1,18,1,0,0,6,21,0.1875,0.183908,16,13,3,13,0.265152,35,1,1,0,0,1,71,113,7,8,1,0,15,0,15,1,39,20,0,16,1,97,152,7,8,1,0,17,0,17,1,41,32,0,18,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;


public class JavaTest extends BuildFileTest {
    
    private boolean runFatalTests=false;
    
    public JavaTest(String name) { 
        super(name);
    }    
    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/java.xml"");
        
        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");   
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. Please set fork='true'. "");        
    }
      
    public void testJarAndClassName() { 
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }
                

    public void testClassnameAndJar() { 
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }
        


    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }
    
    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"", 
                            ""Exception raised inside called program"");
    }
    
    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"", 
                            ""Java Result:"");
    }
    
    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }
    
    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");        
    }   
        
    
    
    public static class EntryPoint {
        
    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }
    
    
    public static class ExceptingEntryPoint {
        
        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
}
"
L29916,Class,JavaTest$EntryPoint,org.apache.tools.ant.taskdefs.JavaTest$EntryPoint,L29894,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,173,5,201,6,0.0,0,0,0,0.0,0.0,0,0,1,2,2,6,0,0,0,0,1,1.0,0.34375,11,11,2,0,0.34375,11,0,0,0,0,0,21,29,0,0,0,0,1,0,1,0,1,11,0,1,0,21,29,0,0,0,0,1,0,1,0,1,11,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;


public class JavaTest extends BuildFileTest {
    
    private boolean runFatalTests=false;
    
    public JavaTest(String name) { 
        super(name);
    }    
    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/java.xml"");
        
        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");   
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. Please set fork='true'. "");        
    }
      
    public void testJarAndClassName() { 
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }
                

    public void testClassnameAndJar() { 
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }
        


    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }
    
    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"", 
                            ""Exception raised inside called program"");
    }
    
    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"", 
                            ""Java Result:"");
    }
    
    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }
    
    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");        
    }   
        
    
    
    public static class EntryPoint {
        
    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }
    
    
    public static class ExceptingEntryPoint {
        
        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
}
"
L29922,Class,JavaTest$ExceptingEntryPoint,org.apache.tools.ant.taskdefs.JavaTest$ExceptingEntryPoint,L29894,L103,src/testcases/org/apache/tools/ant/taskdefs/JavaTest.java,207,5,216,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,0,0,0,1,1.0,0.615385,8,8,2,0,0.615385,8,0,0,0,0,0,5,10,0,0,0,0,1,0,1,0,1,1,0,1,0,5,10,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.*;


public class JavaTest extends BuildFileTest {
    
    private boolean runFatalTests=false;
    
    public JavaTest(String name) { 
        super(name);
    }    
    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/java.xml"");
        
        
        
        
        String propname=""tests-classpath.value"";
        String runFatal=System.getProperty(""junit.run.fatal.tests"");
        if(runFatal!=null)
            runFatalTests=true;
    }

    public void tearDown() {
    }

    public void testNoJarNoClassname(){
        expectBuildExceptionContaining(""testNoJarNoClassname"",
            ""parameter validation"",
            ""Classname must not be null."");   
    }

    public void testJarNoFork() {
        expectBuildExceptionContaining(""testJarNoFork"",
            ""parameter validation"",
            ""Cannot execute a jar in non-forked mode. Please set fork='true'. "");        
    }
      
    public void testJarAndClassName() { 
        expectBuildException(""testJarAndClassName"",
            ""Should not be able to set both classname AND jar"");
    }
                

    public void testClassnameAndJar() { 
        expectBuildException(""testClassnameAndJar"",
            ""Should not be able to set both classname AND jar"");
    }

    public void testRun() {
        executeTarget(""testRun"");
    }
        


    
    public void testRunFail() {
        if(runFatalTests) {
            executeTarget(""testRunFail"");
        }
    }
    
    public void testRunFailFoe() {
        if(runFatalTests) {
            expectBuildExceptionContaining(""testRunFailFoe"",
                ""java failures being propagated"",
                ""Java returned:"");
        }
}

    public void testRunFailFoeFork() {
        expectBuildExceptionContaining(""testRunFailFoeFork"",
            ""java failures being propagated"",
            ""Java returned:"");
    }

    public void testExcepting() {
        expectLogContaining(""testExcepting"", 
                            ""Exception raised inside called program"");
    }
    
    public void testExceptingFork() {
        expectLogContaining(""testExceptingFork"", 
                            ""Java Result:"");
    }
    
    public void testExceptingFoe() {
        expectBuildExceptionContaining(""testExceptingFoe"",
            ""passes exception through"",
            ""Exception raised inside called program"");
    }
    
    public void testExceptingFoeFork() {
        expectBuildExceptionContaining(""testExceptingFoeFork"",
            ""exceptions turned into error codes"",
            ""Java returned:"");        
    }   
        
    
    
    public static class EntryPoint {
        
    
        public static void main(String[] argv) {
            int exitCode=0;
            if(argv.length>0) {
                try {
                    exitCode=Integer.parseInt(argv[0]);
                } catch(NumberFormatException nfe) {
                    exitCode=-1;
                }
            }
            if(argv.length>1) {
                System.out.println(argv[1]);
            }
            if(argv.length>2) {
                System.err.println(argv[2]);
            }
            if(exitCode!=0) {
                System.exit(exitCode);
            }
        }
    }
    
    
    public static class ExceptingEntryPoint {
        
        
        public static void main(String[] argv) {
            throw new NullPointerException(""Exception raised inside called program"");
        }
    }
}
"
L29868,Class,JavacTest,org.apache.tools.ant.taskdefs.JavacTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/JavacTest.java,74,1,250,2,0.206704,1,1,1,0.163842,0.186567,29,25,1,1,1,17,11,0,0,20,27,0.625,0.141026,22,19,5,3,0.141026,22,0,0,0,0,0,134,177,2,0,2,0,7,0,7,1,7,96,0,7,1,134,177,2,0,2,0,7,0,7,1,7,96,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.compilers.CompilerAdapter;
import org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory;
import org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter;
import org.apache.tools.ant.taskdefs.compilers.Javac12;
import org.apache.tools.ant.taskdefs.compilers.Javac13;
import org.apache.tools.ant.taskdefs.compilers.JavacExternal;
import org.apache.tools.ant.util.JavaEnvUtils;

import junit.framework.TestCase;


public class JavacTest extends TestCase {

    private Project project;
    private Javac javac;

    public JavacTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        javac = new Javac();
        javac.setProject(project);
    }

    
    public void testForkedExecutableName() {
        assertNull(""no fork means no executable"", javac.getJavacExecutable());

        project.setProperty(""build.compiler"", ""modern"");
        assertNull(""no fork means no executable"", javac.getJavacExecutable());

        javac.setFork(true);
        assertNotNull(""normal fork"", javac.getJavacExecutable());
        assertTrue(""name should contain \""javac\"""", 
                   javac.getJavacExecutable().indexOf(""javac"") > -1);

        project.setProperty(""build.compiler"", ""extJavac"");
        javac.setFork(false);
        assertNotNull(""fork via property"", javac.getJavacExecutable());
        assertTrue(""name should contain \""javac\"""", 
                   javac.getJavacExecutable().indexOf(""javac"") > -1);

        project.setProperty(""build.compiler"", ""whatever"");
        assertNull(""no fork and not extJavac means no executable"", 
                   javac.getJavacExecutable());

        String myJavac = ""Slartibartfast"";
        javac.setFork(true);
        javac.setExecutable(myJavac);
        assertEquals(myJavac, javac.getJavacExecutable());
    }

    
    public void testCompilerArg() {
        String[] args = javac.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""no args"", 0, args.length);

        Javac.ImplementationSpecificArgument arg = javac.createCompilerArg();
        String ford = ""Ford"";
        String prefect = ""Prefect"";
        String testArg = ford + "" "" + prefect;
        arg.setValue(testArg);
        args = javac.getCurrentCompilerArgs();
        assertEquals(""unconditional single arg"", 1, args.length);
        assertEquals(testArg, args[0]);

        arg.setCompiler(""jikes"");
        args = javac.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is jikes but build.compiler is null"", 
                     0, args.length);

        project.setProperty(""build.compiler"", ""jvc"");
        args = javac.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is jikes but build.compiler is jvc"", 
                     0, args.length);

        project.setProperty(""build.compiler"", ""jikes"");
        args = javac.getCurrentCompilerArgs();
        assertEquals(""both are jikes"", 1, args.length);
        assertEquals(testArg, args[0]);

        arg.setLine(testArg);
        args = javac.getCurrentCompilerArgs();
        assertEquals(""split at space"", 2, args.length);
        assertEquals(ford, args[0]);
        assertEquals(prefect, args[1]);
    }

    
    public void testCompilerArgForForkAndExtJavac() {
        Javac.ImplementationSpecificArgument arg = javac.createCompilerArg();
        String ford = ""Ford"";
        String prefect = ""Prefect"";
        String testArg = ford + "" "" + prefect;
        arg.setValue(testArg);
        arg.setCompiler(""extJavac"");
        javac.setFork(true);
        String[] args = javac.getCurrentCompilerArgs();
        assertEquals(""both are forked javac"", 1, args.length);
        assertEquals(testArg, args[0]);
    }

    
    public void testCompilerAttribute() {
        
        String compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertTrue(""default value"", 
                   ""javac1.1"".equals(compiler) 
                   || ""javac1.2"".equals(compiler) 
                   || ""javac1.3"".equals(compiler) 
                   || ""javac1.4"".equals(compiler) 
                   || ""classic"".equals(compiler));

        javac.setFork(true);
        assertNotNull(javac.getCompiler());
        assertEquals(""extJavac"", javac.getCompiler());
        assertEquals(compiler, javac.getCompilerVersion());

        
        javac = new Javac();
        javac.setProject(project);
        project.setNewProperty(""build.compiler"", ""jikes"");
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jikes"", compiler);

        javac.setFork(true);
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jikes"", compiler);

        
        javac.setFork(false);
        javac.setCompiler(""jvc"");
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jvc"", compiler);

        javac.setFork(true);
        compiler = javac.getCompiler();
        assertNotNull(compiler);
        assertEquals(""jvc"", compiler);
    }

    public void testCompilerAdapter() {
        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {
            javac.setCompiler(""javac1.1"");
        } else {
            javac.setCompiler(""javac1.4"");
        }

        javac.setDepend(true);
        CompilerAdapter adapter = 
            CompilerAdapterFactory.getCompiler(javac.getCompiler(), javac);

        if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2) 
            || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)) {
            assertTrue(adapter instanceof Javac12);
        } else {
            assertTrue(adapter instanceof Javac13);
        }

        javac.setFork(true);
        adapter = 
            CompilerAdapterFactory.getCompiler(javac.getCompiler(), javac);
        assertTrue(adapter instanceof JavacExternal);
    }

}
"
L29928,Class,LoadFileTest,org.apache.tools.ant.taskdefs.LoadFileTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/LoadFileTest.java,68,1,196,2,0.0,0,0,0,0.0,0.0,0,0,5,1,1,17,3,0,0,8,21,1.0,0.417391,48,48,14,0,0.417391,48,1,1,0,0,1,67,129,6,8,0,0,13,0,13,1,37,24,0,14,1,67,129,6,8,0,0,13,0,13,1,37,24,0,14,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;
import java.io.File;


public class LoadFileTest extends BuildFileTest {

    
    public LoadFileTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/loadfile.xml"");
    }


    
    public void tearDown() {
        executeTarget(""cleanup"");
    }


    
    public void testNoSourcefileDefined() {
        expectBuildException(""testNoSourcefileDefined"",
                ""source file not defined"");
    }


    
    public void testNoPropertyDefined() {
        expectBuildException(""testNoPropertyDefined"",
                ""output property not defined"");
    }


    
    public void testNoSourcefilefound() {
        expectBuildExceptionContaining(""testNoSourcefilefound"",
                ""File not found"",
                ""Unable to load file"");
    }

    
    public void testFailOnError()
            throws BuildException {
        expectPropertyUnset(""testFailOnError"",""testFailOnError"");
    }


    
    public void testLoadAFile()
            throws BuildException {
        executeTarget(""testLoadAFile"");
        if(project.getProperty(""testLoadAFile"").indexOf(""eh?"")<0) {
            fail(""property is not all in the file"");
        }
    }


    
    public void testLoadAFileEnc()
            throws BuildException {
        executeTarget(""testLoadAFileEnc"");
        if(project.getProperty(""testLoadAFileEnc"")==null) {
            fail(""file load failed"");
        }
    }

    
    public void testEvalProps()
            throws BuildException {
        executeTarget(""testEvalProps"");
        if(project.getProperty(""testEvalProps"").indexOf(""rain"")<0) {
            fail(""property eval broken"");
        }
    }

    
    public void testFilterChain()
            throws BuildException {
        executeTarget(""testFilterChain"");
        if(project.getProperty(""testFilterChain"").indexOf(""World!"")<0) {
            fail(""Filter Chain broken"");
        }
    }

    
    public final void testStripJavaComments()
            throws BuildException {
        executeTarget(""testStripJavaComments"");
        final String expected = project.getProperty(""expected"");
        final String generated = project.getProperty(""testStripJavaComments"");
        assertEquals(expected, generated);
    }

    
    public void testOneLine()
            throws BuildException {
            expectPropertySet(""testOneLine"",""testOneLine"",""1,2,3,4"");

    }
}
"
L29957,Class,LoadPropertiesTest,org.apache.tools.ant.taskdefs.LoadPropertiesTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/LoadPropertiesTest.java,63,1,88,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,2,0,0,4,8,0.6,0.36,9,9,3,2,0.36,9,1,1,0,0,1,16,26,6,8,0,0,4,0,4,1,28,6,0,5,1,16,26,6,8,0,0,4,0,4,1,28,6,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;


public class LoadPropertiesTest extends BuildFileTest {

    public LoadPropertiesTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/loadproperties.xml"");
    }

    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testPrefixedProperties() {
        executeTarget(""testPrefixedProperties"");
        String url = project.getProperty(""server1.http.url"");
        assertEquals(""http:
    }
}
"
L29966,Class,ManifestTest,org.apache.tools.ant.taskdefs.ManifestTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ManifestTest.java,71,1,331,2,0.319088,1,2,2,0.145594,0.206061,38,34,2,1,1,24,6,0,0,20,44,0.875,0.291846,68,68,21,3,0.291846,68,1,1,0,0,1,165,261,8,9,2,1,24,2,23,1,48,96,2,24,1,165,261,8,9,2,1,24,2,23,1,48,96,2,24,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;


public class ManifestTest extends BuildFileTest {

    public static final String EXPANDED_MANIFEST
        = ""src/etc/testcases/taskdefs/manifests/META-INF/MANIFEST.MF"";

    public static final String LONG_LINE
        = ""AReallyLongLineToTestLineBreakingInManifests-ACapabilityWhich"" + 
          ""IsSureToLeadToHundredsOfQuestionsAboutWhyAntMungesManifests"" +
          ""OfCourseTheAnswerIsThatIsWhatTheSpecRequiresAndIfAnythingHas"" +
          ""AProblemWithThatItIsNotABugInAnt"";
        
    public ManifestTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/manifest.xml"");
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void test1() throws ManifestException, IOException {
        executeTarget(""test1"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        String version = manifest.getManifestVersion();
        assertEquals(""Manifest was not created with correct version - "", ""1.0"", version);
    }
    
    
    public void test2() throws ManifestException, IOException {
        executeTarget(""test2"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        String version = manifest.getManifestVersion();
        assertEquals(""Manifest was not created with correct version - "", ""2.0"", version);
    }
    
    
    public void test3() {
        expectBuildExceptionContaining(""test3"", ""Manifest is invalid - no colon on header line"",
                                       ""Invalid Manifest"");
    }

    
    public void test4() {
        expectBuildExceptionContaining(""test4"", ""Manifest is invalid - section starts with continuation line"",
                                       ""Invalid Manifest"");
   }

    
    public void test5() {
        executeTarget(""test5"");
        String output = getLog();
        boolean hasWarning = output.indexOf(""Manifest warning: \""Name\"" attributes should not occur in the main section"") != -1;
        assertEquals(""Expected warning about Name in main section"", true, hasWarning);
    }
    
    
    public void test6() {
        expectBuildExceptionContaining(""test6"", ""Manifest is invalid - section starts with incorrect attribute"",
                                       ""Invalid Manifest"");
        String output = getLog();
        boolean hasWarning = output.indexOf(""Manifest sections should start with a \""Name\"" attribute"") != -1;
        assertEquals(""Expected warning about section not starting with Name: attribute"", true, hasWarning);
    }
     
    
    public void test7() {
        executeTarget(""test7"");

        boolean hasWarning = getLog().indexOf(""Manifest attributes should not start with \""From\"""") != -1;
        assertEquals(""Expected warning about From: attribute"", true, hasWarning);
    }

    
    public void test8() throws IOException, ManifestException {
        executeTarget(""test8"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Manifest.Section mainSection = manifest.getMainSection();
        String classpath = mainSection.getAttributeValue(""class-path"");
        assertEquals(""Class-Path attribute was not set correctly - "", ""fubar"", classpath);
        
        Manifest.Section testSection = manifest.getSection(""Test"");
        String testAttr = testSection.getAttributeValue(""TestAttr"");
        assertEquals(""TestAttr attribute was not set correctly - "", ""Test"", testAttr);
    }
     
    
    public void test9() {
        expectBuildExceptionContaining(""test9"", ""Construction is invalid - Name attribute should not be used"",
                                       ""Specify the section name using the \""name\"" attribute of the <section> element"");
    }
     
    
    public void test10() {
        expectBuildExceptionContaining(""test10"", ""Attribute has no name"",
                                       ""Attributes must have name and value"");
    }
     
    
    public void test11() {
        expectBuildExceptionContaining(""test11"", ""Attribute has no value"",
                                       ""Attributes must have name and value"");
    }
     
    
    public void test12() {
        expectBuildExceptionContaining(""test12"", ""Section with no name"",
                                       ""Sections must have a name"");
    }
     
    
    public void test13() {
        expectBuildExceptionContaining(""test13"", ""Duplicate Attribute"",
                                       ""The attribute \""Test\"" may not occur more than once in the same section"");
    }
     
    
    public void test14() throws IOException, ManifestException {
        executeTarget(""test14"");
        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Manifest.Section mainSection = manifest.getMainSection();
        String classpath = mainSection.getAttributeValue(""class-path"");
        assertEquals(""Class-Path attribute was not set correctly - "", 
            ""Test1 Test2 Test3 Test4"", classpath);
    }
     
    
    public void testLongLine() throws IOException, ManifestException {
        Project project = getProject();
        project.setUserProperty(""test.longline"", LONG_LINE);
        executeTarget(""testLongLine"");

        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Manifest.Section mainSection = manifest.getMainSection();
        String classpath = mainSection.getAttributeValue(""class-path"");
        assertEquals(""Class-Path attribute was not set correctly - "", 
            LONG_LINE, classpath);
    }
     
    
    public void testOrder1() throws IOException, ManifestException {
        executeTarget(""testOrder1"");

        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Enumeration e = manifest.getSectionNames();
        String section1 = (String)e.nextElement();
        String section2 = (String)e.nextElement();
        assertEquals(""First section name unexpected"", ""Test1"", section1);
        assertEquals(""Second section name unexpected"", ""Test2"", section2);
        
        Manifest.Section section = manifest.getSection(""Test1"");
        e = section.getAttributeKeys();
        String attr1Key = (String)e.nextElement();
        String attr2Key = (String)e.nextElement();
        String attr1 = section.getAttribute(attr1Key).getName();
        String attr2 = section.getAttribute(attr2Key).getName();
        assertEquals(""First attribute name unexpected"", ""TestAttr1"", attr1);
        assertEquals(""Second attribute name unexpected"", ""TestAttr2"", attr2);
    }
     
    
    public void testOrder2() throws IOException, ManifestException {
        executeTarget(""testOrder2"");

        Manifest manifest = getManifest(EXPANDED_MANIFEST);
        Enumeration e = manifest.getSectionNames();
        String section1 = (String)e.nextElement();
        String section2 = (String)e.nextElement();
        assertEquals(""First section name unexpected"", ""Test2"", section1);
        assertEquals(""Second section name unexpected"", ""Test1"", section2);

        Manifest.Section section = manifest.getSection(""Test1"");
        e = section.getAttributeKeys();
        String attr1Key = (String)e.nextElement();
        String attr2Key = (String)e.nextElement();
        String attr1 = section.getAttribute(attr1Key).getName();
        String attr2 = section.getAttribute(attr2Key).getName();
        assertEquals(""First attribute name unexpected"", ""TestAttr2"", attr1);
        assertEquals(""Second attribute name unexpected"", ""TestAttr1"", attr2);
    }
     
    
    public void testNoFile() {
        expectBuildException(""testNoFile"", ""file is required"");
    }
    
    
    public void testReplace() throws IOException, ManifestException {
        executeTarget(""testReplace"");
        Manifest mf = getManifest(""src/etc/testcases/taskdefs/mftest.mf"");
        assertNotNull(mf);
        assertEquals(Manifest.getDefaultManifest(), mf);
    }

    
    public void testUpdate() throws IOException, ManifestException {
        executeTarget(""testUpdate"");
        Manifest mf = getManifest(""src/etc/testcases/taskdefs/mftest.mf"");
        assertNotNull(mf);
        assertTrue(!Manifest.getDefaultManifest().equals(mf));
        String mfAsString = mf.toString();
        assertNotNull(mfAsString);
        assertTrue(mfAsString.startsWith(""Manifest-Version: 2.0""));
        assertTrue(mfAsString.indexOf(""Foo: Bar"") > -1);

        mf = getManifest(""src/etc/testcases/taskdefs/mftest2.mf"");
        assertNotNull(mf);
        mfAsString = mf.toString();
        assertNotNull(mfAsString);
        assertEquals(-1, mfAsString.indexOf(""Foo: Bar""));
        assertTrue(mfAsString.indexOf(""Foo: Baz"") > -1);
    }

    
    private Manifest getManifest(String filename) throws IOException, ManifestException {
        FileReader r = new FileReader(filename);
        try {
            return new Manifest(r);
        } finally {
            r.close();
        }
    }
}
"
L30025,Class,MkdirTest,org.apache.tools.ant.taskdefs.MkdirTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/MkdirTest.java,61,1,88,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,7,1,0,0,5,10,0.166667,0.115385,3,3,1,5,0.115385,3,1,1,0,0,1,23,28,6,8,0,0,5,0,5,1,29,9,0,6,1,23,28,6,8,0,0,5,0,5,1,29,9,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class MkdirTest extends BuildFileTest { 
    
    public MkdirTest(String name) { 
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/mkdir.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""directory already exists as a file"");
    }

    public void test3() { 
        executeTarget(""test3"");
        java.io.File f = new java.io.File(getProjectDir(), ""testdir.tmp"");
        if (!f.exists() || !f.isDirectory()) { 
            fail(""mkdir failed"");
        } else {
            f.delete();
        }
    }
}
"
L30033,Class,MoveTest,org.apache.tools.ant.taskdefs.MoveTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/MoveTest.java,68,1,99,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,2,0,0,6,11,0.166667,0.15625,5,5,1,5,0.15625,5,1,1,0,0,1,27,32,6,8,0,0,5,0,5,1,29,15,0,6,1,27,32,6,8,0,0,5,0,5,1,29,15,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.FileUtils;
import java.io.File;
import java.io.IOException;


public class MoveTest extends BuildFileTest {

    public MoveTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/move.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testFilterSet() throws IOException {
        executeTarget(""testFilterSet"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""move.filterset.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }

    public void testFilterChain() throws IOException {
        executeTarget(""testFilterChain"");
        FileUtils fileUtils = FileUtils.newFileUtils();
        File tmp  = new File(getProjectDir(), ""move.filterchain.tmp"");
        File check  = new File(getProjectDir(), ""expected/copy.filterset.filtered"");
        assertTrue(tmp.exists());
        assertTrue(fileUtils.contentEquals(tmp, check));
    }
}
"
L30041,Class,ParallelTest,org.apache.tools.ant.taskdefs.ParallelTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ParallelTest.java,67,1,132,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,5,4,0,0,10,15,1.0,0.328125,21,19,6,0,0.328125,21,1,1,0,0,1,43,66,10,8,4,0,5,4,5,1,29,22,4,6,1,43,66,10,8,4,0,5,4,5,1,29,22,4,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;
import java.io.PrintStream;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.DemuxOutputStream;
import org.apache.tools.ant.Project;


public class ParallelTest extends BuildFileTest {
    
    public final static String DIRECT_MESSAGE = ""direct"";
    
    public final static String DELAYED_MESSAGE = ""delayed"";
    
    public final static String FAILURE_MESSAGE = ""failure"";

    
    public final static String TEST_BUILD_FILE
         = ""src/etc/testcases/taskdefs/parallel.xml"";

    
    public ParallelTest(String name) {
        super(name);
    }

    
    public void setUp() {
        configureProject(TEST_BUILD_FILE);
    }

    
    public void testBasic() {
        
        Project project = getProject();
        project.setUserProperty(""test.direct"", DIRECT_MESSAGE);
        project.setUserProperty(""test.delayed"", DELAYED_MESSAGE);
        expectOutputAndError(""testBasic"", """", """");
        String log = getLog();
        assertEquals(""parallel tasks didn't output correct data"", log,
            DIRECT_MESSAGE + DELAYED_MESSAGE);

    }

    
    public void testFail() {
        
        Project project = getProject();
        project.setUserProperty(""test.failure"", FAILURE_MESSAGE);
        project.setUserProperty(""test.delayed"", DELAYED_MESSAGE);
        expectBuildExceptionContaining(""testFail"",
            ""fail task in one parallel branch"", FAILURE_MESSAGE);
    }

    
    public void testDemux() {
        Project project = getProject();
        project.addTaskDefinition(""demuxtest"", DemuxOutputTask.class);
        PrintStream out = System.out;
        PrintStream err = System.err;
        System.setOut(new PrintStream(new DemuxOutputStream(project, false)));
        System.setErr(new PrintStream(new DemuxOutputStream(project, true)));

        try {
            project.executeTarget(""testDemux"");
        } finally {
            System.setOut(out);
            System.setErr(err);
        }
    }
}

"
L30070,Class,PropertyTest,org.apache.tools.ant.taskdefs.PropertyTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/PropertyTest.java,63,1,115,2,0.540984,1,4,2,0.415094,0.511628,22,22,3,1,1,10,3,0,0,6,14,0.111111,0.0851064,4,3,1,8,0.0851064,4,1,1,0,0,1,43,53,6,8,0,0,8,0,8,1,32,17,0,9,1,43,53,6,8,0,0,8,0,8,1,32,17,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.*;
import org.apache.tools.ant.BuildFileTest;


public class PropertyTest extends BuildFileTest { 
    
    public PropertyTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/property.xml"");
    }

    public void test1() { 
        
        expectOutputAndError(""test1"", """", """");
    }

    public void test2() { 
        expectLog(""test2"", ""testprop1=aa, testprop3=xxyy, testprop4=aazz"");
    }
    
    public void test3() {
        try {
            executeTarget(""test3"");
        }
        catch (BuildException e) {
            assertEquals(""Circular definition not detected - "", true,
                     e.getMessage().indexOf(""was circularly defined"") != -1);
            return;                     
        }
        fail(""Did not throw exception on circular exception"");                     
    }

    public void test4() { 
        expectLog(""test4"", ""http.url is http:
    }
    
    public void testPrefixSuccess() {
        executeTarget(""prefix.success"");
        assertEquals(""80"", project.getProperty(""server1.http.port""));
    }

    public void testPrefixFailure() {
       try {
            executeTarget(""prefix.fail"");
        }
        catch (BuildException e) {
            assertEquals(""Prefix allowed on non-resource/file load - "", true,
                     e.getMessage().indexOf(""Prefix is only valid"") != -1);
            return;                     
        }
        fail(""Did not throw exception on invalid use of prefix"");
    }
    
}
"
L30081,Class,RenameTest,org.apache.tools.ant.taskdefs.RenameTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/RenameTest.java,61,1,92,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,1,0,0,4,10,0.285714,0.354839,11,11,2,5,0.354839,11,1,1,0,0,1,20,32,6,8,0,0,6,0,6,1,30,6,0,7,1,20,32,6,8,0,0,6,0,6,1,30,6,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;


public class RenameTest extends BuildFileTest { 
    
    public RenameTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/rename.xml"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument missing"");
    }
    public void test2() { 
        expectBuildException(""test2"", ""required argument missing"");
    }
    public void test3() { 
        expectBuildException(""test3"", ""required argument missing"");
    }

    public void test6() {
        executeTarget(""test6"");
    }
    
}
"
L30091,Class,ReplaceTest,org.apache.tools.ant.taskdefs.ReplaceTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ReplaceTest.java,62,1,104,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,10,1,0,0,4,14,0.0909091,0.0857143,3,3,1,10,0.0857143,3,1,1,0,0,1,32,43,6,8,0,0,10,0,10,1,34,10,0,11,1,32,43,6,8,0,0,10,0,10,1,34,10,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class ReplaceTest extends BuildFileTest { 
    
    public ReplaceTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/replace.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""empty token not allowed"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        expectBuildException(""test6"", ""required argument not specified"");
    }

    public void test7() { 
        expectBuildException(""test7"", ""empty token not allowed"");
    }

    public void test8() { 
        executeTarget(""test8"");
    }

}
"
L30104,Class,RmicTest,org.apache.tools.ant.taskdefs.RmicTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/RmicTest.java,68,1,141,2,0.569231,1,1,1,0.391892,0.462963,29,25,1,0,0,5,5,0,0,12,16,0.6,0.217391,15,13,3,2,0.217391,15,0,0,0,0,0,54,74,2,0,2,0,4,0,4,1,4,39,0,4,1,54,74,2,0,2,0,4,0,4,1,4,39,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;

import junit.framework.TestCase;


public class RmicTest extends TestCase {

    private Project project;
    private Rmic rmic;

    public RmicTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        rmic = new Rmic();
        rmic.setProject(project);
    }

    
    public void testCompilerArg() {
        String[] args = rmic.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""no args"", 0, args.length);

        Rmic.ImplementationSpecificArgument arg = rmic.createCompilerArg();
        String ford = ""Ford"";
        String prefect = ""Prefect"";
        String testArg = ford + "" "" + prefect;
        arg.setValue(testArg);
        args = rmic.getCurrentCompilerArgs();
        assertEquals(""unconditional single arg"", 1, args.length);
        assertEquals(testArg, args[0]);

        arg.setCompiler(""weblogic"");
        args = rmic.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is weblogic but build.rmic is null"", 
                     0, args.length);

        project.setProperty(""build.rmic"", ""sun"");
        args = rmic.getCurrentCompilerArgs();
        assertNotNull(args);
        assertEquals(""implementation is weblogic but build.rmic is sun"", 
                     0, args.length);

        project.setProperty(""build.rmic"", ""weblogic"");
        args = rmic.getCurrentCompilerArgs();
        assertEquals(""both are weblogic"", 1, args.length);
        assertEquals(testArg, args[0]);
    }

    
    public void testCompilerAttribute() {
        
        String compiler = rmic.getCompiler();
        assertNotNull(compiler);
        assertTrue(""default value"", 
                   ""sun"".equals(compiler) || ""kaffe"".equals(compiler));

        project.setNewProperty(""build.rmic"", ""weblogic"");
        compiler = rmic.getCompiler();
        assertNotNull(compiler);
        assertEquals(""weblogic"", compiler);

        
        rmic.setCompiler(""kaffe"");
        compiler = rmic.getCompiler();
        assertNotNull(compiler);
        assertEquals(""kaffe"", compiler);
    }

}
"
L30154,Class,SQLExecTest,org.apache.tools.ant.taskdefs.SQLExecTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/SQLExecTest.java,79,1,274,2,0.0,0,0,0,0.0,0.0,0,0,1,3,3,20,6,0,0,14,23,0.5,0.308176,49,45,2,2,0.270718,49,0,0,0,0,0,110,169,10,2,10,2,9,10,3,1,9,67,10,3,1,132,196,10,5,10,5,15,10,9,1,15,73,10,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.sql.Driver;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DriverPropertyInfo;
import java.util.Properties;
import java.io.File;
import java.net.URL;

import junit.framework.TestCase;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;


public class SQLExecTest extends TestCase {

    
    public final static int NULL = 0;
    public final static int ORACLE = 1;
    public final static int MYSQL = 2;

    
    public final static String DRIVER = ""driver"";
    public final static String USER = ""user"";
    public final static String PASSWORD = ""password"";
    public final static String URL = ""url"";
    public final static String PATH = ""path"";
    public final static String SQL = ""sql"";

    public SQLExecTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        
        SQLExec.getLoaderMap().clear();
    }

   
    public void testDriverCaching(){
       SQLExec sql = createTask(getProperties(NULL));
        assertTrue(!SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), SQLExec.getLoaderMap().get(NULL_DRIVER));
        ClassLoader loader1 = sql.getLoader();

        
        sql = createTask(getProperties(NULL));
        
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), sql.getLoaderMap().get(NULL_DRIVER));
        assertSame(loader1, sql.getLoader());
    }

    public void testNull() throws Exception {
        doMultipleCalls(1000, NULL, true, true);
    }

    

    


    
    protected void doMultipleCalls(int calls, int database, boolean caching, boolean catchexception){
        Properties props = getProperties(database);
        for (int i = 0; i < calls; i++){
            SQLExec sql = createTask(props);
            sql.setCaching(caching);
            try  {
                sql.execute();
            } catch (BuildException e){
                if (!catchexception){
                    throw e;
                }
            }
        }
    }

    
    protected SQLExec createTask(Properties props){
        SQLExec sql = new SQLExec();
        sql.setProject( new Project() );
        sql.setDriver( props.getProperty(DRIVER) );
        sql.setUserid( props.getProperty(USER) );
        sql.setPassword( props.getProperty(PASSWORD) );
        sql.setUrl( props.getProperty(URL) );
        sql.createClasspath().setLocation( new File(props.getProperty(PATH)) );
        sql.addText( props.getProperty(SQL) );
        return sql;
    }

    
    protected String findResourcePath(String resource){
        resource = resource.replace('.', '/') + "".class"";
        URL url = getClass().getClassLoader().getResource(resource);
        if (url == null) {
            return null;
        }
        String u = url.toString();
        if (u.startsWith(""jar:file:"")) {
            int pling = u.indexOf(""!"");
            return u.substring(""jar:file:"".length(), pling);
        } else if (u.startsWith(""file:"")) {
            int tail = u.indexOf(resource);
            return u.substring(""file:"".length(), tail);
        }
        return null;
    }

    
    protected Properties getProperties(int database){
        Properties props = null;
        switch (database){
            case ORACLE:
                props = getProperties(""oracle.jdbc.driver.OracleDriver"", ""test"", ""test"", ""jdbc:oracle:thin:@127.0.0.1:1521:orcl"");
                break;
            case MYSQL:
                props = getProperties(""org.gjt.mm.mysql.Driver"", ""test"", ""test"", ""jdbc:mysql:
                break;
            case NULL:
            default:
                props = getProperties(NULL_DRIVER, ""test"", ""test"", ""jdbc:database:
        }
        
        String path = findResourcePath(props.getProperty(DRIVER));
        props.put(PATH, path);
        props.put(SQL, ""create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;"");
        return props;
    }

    
    protected Properties getProperties(String driver, String user, String pwd, String url){
        Properties props = new Properties();
        props.put(DRIVER, driver);
        props.put(USER, user);
        props.put(PASSWORD, pwd);
        props.put(URL, url);
        return props;
    }





    public final static String NULL_DRIVER = NullDriver.class.getName();

    public static class NullDriver implements Driver {
        public Connection connect(String url, Properties info)
                throws SQLException {
            return null;
        }

        public boolean acceptsURL(String url) throws SQLException {
            return false;
        }

        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
                throws SQLException {
            return new DriverPropertyInfo[0];
        }

        public int getMajorVersion() {
            return 0;
        }

        public int getMinorVersion() {
            return 0;
        }

        public boolean jdbcCompliant() {
            return false;
        }
    }

}
"
L30226,Class,SQLExecTest$NullDriver,org.apache.tools.ant.taskdefs.SQLExecTest$NullDriver,L30154,L103,src/testcases/org/apache/tools/ant/taskdefs/SQLExecTest.java,246,5,272,6,0.0,0,0,0,0.0,0.0,0,0,3,0,0,6,0,0,0,0,6,0.0,0.0,0,0,0,7,0.0,0,0,0,0,0,0,22,27,0,3,0,3,6,0,6,0,6,6,0,6,0,22,27,0,3,0,3,6,0,6,0,6,6,0,6,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.sql.Driver;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DriverPropertyInfo;
import java.util.Properties;
import java.io.File;
import java.net.URL;

import junit.framework.TestCase;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;


public class SQLExecTest extends TestCase {

    
    public final static int NULL = 0;
    public final static int ORACLE = 1;
    public final static int MYSQL = 2;

    
    public final static String DRIVER = ""driver"";
    public final static String USER = ""user"";
    public final static String PASSWORD = ""password"";
    public final static String URL = ""url"";
    public final static String PATH = ""path"";
    public final static String SQL = ""sql"";

    public SQLExecTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        
        SQLExec.getLoaderMap().clear();
    }

   
    public void testDriverCaching(){
       SQLExec sql = createTask(getProperties(NULL));
        assertTrue(!SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(SQLExec.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), SQLExec.getLoaderMap().get(NULL_DRIVER));
        ClassLoader loader1 = sql.getLoader();

        
        sql = createTask(getProperties(NULL));
        
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        try {
            sql.execute();
        } catch (BuildException e){
            assertTrue(e.getException().getMessage().indexOf(""No suitable Driver"") != -1);
        }
        assertTrue(sql.getLoaderMap().containsKey(NULL_DRIVER));
        assertSame(sql.getLoader(), sql.getLoaderMap().get(NULL_DRIVER));
        assertSame(loader1, sql.getLoader());
    }

    public void testNull() throws Exception {
        doMultipleCalls(1000, NULL, true, true);
    }

    

    


    
    protected void doMultipleCalls(int calls, int database, boolean caching, boolean catchexception){
        Properties props = getProperties(database);
        for (int i = 0; i < calls; i++){
            SQLExec sql = createTask(props);
            sql.setCaching(caching);
            try  {
                sql.execute();
            } catch (BuildException e){
                if (!catchexception){
                    throw e;
                }
            }
        }
    }

    
    protected SQLExec createTask(Properties props){
        SQLExec sql = new SQLExec();
        sql.setProject( new Project() );
        sql.setDriver( props.getProperty(DRIVER) );
        sql.setUserid( props.getProperty(USER) );
        sql.setPassword( props.getProperty(PASSWORD) );
        sql.setUrl( props.getProperty(URL) );
        sql.createClasspath().setLocation( new File(props.getProperty(PATH)) );
        sql.addText( props.getProperty(SQL) );
        return sql;
    }

    
    protected String findResourcePath(String resource){
        resource = resource.replace('.', '/') + "".class"";
        URL url = getClass().getClassLoader().getResource(resource);
        if (url == null) {
            return null;
        }
        String u = url.toString();
        if (u.startsWith(""jar:file:"")) {
            int pling = u.indexOf(""!"");
            return u.substring(""jar:file:"".length(), pling);
        } else if (u.startsWith(""file:"")) {
            int tail = u.indexOf(resource);
            return u.substring(""file:"".length(), tail);
        }
        return null;
    }

    
    protected Properties getProperties(int database){
        Properties props = null;
        switch (database){
            case ORACLE:
                props = getProperties(""oracle.jdbc.driver.OracleDriver"", ""test"", ""test"", ""jdbc:oracle:thin:@127.0.0.1:1521:orcl"");
                break;
            case MYSQL:
                props = getProperties(""org.gjt.mm.mysql.Driver"", ""test"", ""test"", ""jdbc:mysql:
                break;
            case NULL:
            default:
                props = getProperties(NULL_DRIVER, ""test"", ""test"", ""jdbc:database:
        }
        
        String path = findResourcePath(props.getProperty(DRIVER));
        props.put(PATH, path);
        props.put(SQL, ""create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;"");
        return props;
    }

    
    protected Properties getProperties(String driver, String user, String pwd, String url){
        Properties props = new Properties();
        props.put(DRIVER, driver);
        props.put(USER, user);
        props.put(PASSWORD, pwd);
        props.put(URL, url);
        return props;
    }





    public final static String NULL_DRIVER = NullDriver.class.getName();

    public static class NullDriver implements Driver {
        public Connection connect(String url, Properties info)
                throws SQLException {
            return null;
        }

        public boolean acceptsURL(String url) throws SQLException {
            return false;
        }

        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
                throws SQLException {
            return new DriverPropertyInfo[0];
        }

        public int getMajorVersion() {
            return 0;
        }

        public int getMinorVersion() {
            return 0;
        }

        public boolean jdbcCompliant() {
            return false;
        }
    }

}
"
L30121,Class,SleepTest,org.apache.tools.ant.taskdefs.SleepTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/SleepTest.java,62,1,147,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,14,2,0,0,7,15,0.111111,0.0740741,4,4,1,8,0.0958904,7,1,1,0,0,1,50,66,9,8,3,0,8,0,8,1,32,33,0,9,1,66,86,11,8,5,0,12,0,12,1,36,37,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class SleepTest extends BuildFileTest {


    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/"";
    private final static boolean TRACE=false;
	private final static int ERROR_RANGE=1000;
	
    public SleepTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""sleep.xml"");
    }

    public void test1() {
       Timer timer=new Timer();
        executeTarget(""test1"");
        timer.stop();
        if(TRACE) System.out.println("" test1 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test2() {
        Timer timer=new Timer();
        executeTarget(""test2"");
        timer.stop();
        if(TRACE) System.out.println("" test2 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test3() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test3 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE));
    }

    public void test4() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test4 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE) && timer.time()<60000);
    }

    public void test5() {
        expectBuildException(""test5"",
            ""Negative sleep periods are not supported"");
    }

    public void test6() {
        Timer timer=new Timer();
        executeTarget(""test6"");
        timer.stop();
        if(TRACE) System.out.println("" test6 elapsed time=""+timer.time());
        assertTrue(timer.time()<2000);
    }


    
    private static class Timer {
        long start=0;
        long stop=0;

        public Timer() {
            start();
        }

        public void start() {
            start=System.currentTimeMillis();
        }

        public void stop() {
            stop=System.currentTimeMillis();
        }

        public long time() {
            return stop-start;
        }
    }

}

"
L30131,Class,SleepTest$Timer,org.apache.tools.ant.taskdefs.SleepTest$Timer,L30121,L103,src/testcases/org/apache/tools/ant/taskdefs/SleepTest.java,126,5,145,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,0,1,5,0,4,0.2,0.157895,3,3,1,4,0.157895,3,0,0,0,0,0,16,20,2,0,2,0,4,0,4,0,4,4,0,4,0,16,20,2,0,2,0,4,0,4,0,4,4,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;

public class SleepTest extends BuildFileTest {


    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/"";
    private final static boolean TRACE=false;
	private final static int ERROR_RANGE=1000;
	
    public SleepTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""sleep.xml"");
    }

    public void test1() {
       Timer timer=new Timer();
        executeTarget(""test1"");
        timer.stop();
        if(TRACE) System.out.println("" test1 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test2() {
        Timer timer=new Timer();
        executeTarget(""test2"");
        timer.stop();
        if(TRACE) System.out.println("" test2 elapsed time=""+timer.time());
        assertTrue(timer.time()>=0);
    }

    public void test3() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test3 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE));
    }

    public void test4() {
        Timer timer=new Timer();
        executeTarget(""test3"");
        timer.stop();
        if(TRACE) System.out.println("" test4 elapsed time=""+timer.time());
        assertTrue(timer.time()>=(2000-ERROR_RANGE) && timer.time()<60000);
    }

    public void test5() {
        expectBuildException(""test5"",
            ""Negative sleep periods are not supported"");
    }

    public void test6() {
        Timer timer=new Timer();
        executeTarget(""test6"");
        timer.stop();
        if(TRACE) System.out.println("" test6 elapsed time=""+timer.time());
        assertTrue(timer.time()<2000);
    }


    
    private static class Timer {
        long start=0;
        long stop=0;

        public Timer() {
            start();
        }

        public void start() {
            start=System.currentTimeMillis();
        }

        public void stop() {
            stop=System.currentTimeMillis();
        }

        public long time() {
            return stop-start;
        }
    }

}

"
L30312,Class,TStampTest,org.apache.tools.ant.taskdefs.TStampTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TStampTest.java,69,1,136,2,0.692308,1,2,2,0.455882,0.553191,31,26,1,0,0,5,6,0,0,12,17,0.6,0.229508,14,14,3,2,0.229508,14,0,0,0,0,0,47,68,3,0,3,0,5,0,4,1,5,32,0,4,1,47,68,3,0,3,0,5,0,4,1,5,32,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.util.Calendar;
import java.util.TimeZone;
import java.util.Date;
import java.text.SimpleDateFormat;

import junit.framework.TestCase;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Location;


public class TStampTest extends TestCase {

    protected Tstamp tstamp;
    protected Project project;
    protected Location location;

    public TStampTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        location = new Location(""test.xml"");
        project = new Project();
        tstamp = new Tstamp();
        tstamp.setLocation(location);
        tstamp.setProject(project);
    }

    public void testTimeZone() throws Exception {
        Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""today"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");
        Date date = Calendar.getInstance().getTime();
        format.execute(project, date, location);
        String today = project.getProperty(""today"");

        SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss z"");
        sdf.setTimeZone( TimeZone.getTimeZone(""GMT"") );
        String expected = sdf.format(date);

        assertEquals(expected, today);
    }

    
    public void testWriteOrder() throws Exception {
        Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""TODAY"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");
        Date date = Calendar.getInstance().getTime();
        format.execute(project, date, location);
        String today = project.getProperty(""TODAY"");

        SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss z"");
        sdf.setTimeZone( TimeZone.getTimeZone(""GMT"") );
        String expected = sdf.format(date);

        assertEquals(expected, today);

    }

    
    public void testPrefix() throws Exception {
        tstamp.setPrefix(""prefix"");
        tstamp.execute();
        String prop= project.getProperty(""prefix.DSTAMP"");
        assertNotNull(prop);
    }

    public void testFormatPrefix() throws Exception {
	Tstamp.CustomFormat format = tstamp.createFormat();
        format.setProperty(""format"");
        format.setPattern(""HH:mm:ss z"");
        format.setTimezone(""GMT"");

        tstamp.setPrefix(""prefix"");
        tstamp.execute();
        String prop= project.getProperty(""prefix.format"");
        assertNotNull(prop);
    }

}
"
L30245,Class,TarTest,org.apache.tools.ant.taskdefs.TarTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TarTest.java,61,1,153,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,22,1,0,0,4,18,0.0666667,0.038961,3,3,1,14,0.038961,3,1,1,0,0,1,74,93,6,8,0,0,14,0,14,1,38,32,0,15,1,74,93,6,8,0,0,14,0,14,1,38,32,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;


public class TarTest extends BuildFileTest {

    public TarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/tar.xml"");
    }

    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() {
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() {
        expectBuildException(""test4"", ""tar cannot include itself"");
    }

    public void test5() {
        executeTarget(""test5"");
        java.io.File f
            = new java.io.File(""src/etc/testcases/taskdefs/test5.tar"");

        if (!f.exists()) {
            fail(""Tarring a directory failed"");
        }
    }

    public void test6() {
        expectBuildException(""test6"", ""Invalid value specified for longfile attribute."");
    }

    public void test7() {
        executeTarget(""test7"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test7-prefix"");

        if (!(f1.exists() && f1.isDirectory())) {
            fail(""The prefix attribute is not working properly."");
        }

        java.io.File f2
            = new java.io.File(""src/etc/testcases/taskdefs/test7dir"");

        if (!(f2.exists() && f2.isDirectory())) {
            fail(""The prefix attribute is not working properly."");
        }
    }

    public void test8() {
        executeTarget(""test8"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test8.xml"");
        if (! f1.exists()) {
            fail(""The fullpath attribute or the preserveLeadingSlashes attribute does not work propertly"");
        }
    }

    public void test9() {
        expectBuildException(""test9"", ""Invalid value specified for compression attribute."");
    }

    public void test10() {
        executeTarget(""test10"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test10.xml"");
        if (! f1.exists()) {
            fail(""The fullpath attribute or the preserveLeadingSlashes attribute does not work propertly"");
        }
    }

    public void test11() {
        executeTarget(""test11"");
        java.io.File f1
            = new java.io.File(""src/etc/testcases/taskdefs/test11.xml"");
        if (! f1.exists()) {
            fail(""The fullpath attribute or the preserveLeadingSlashes attribute does not work propertly"");
        }
    }


    public void tearDown() {
        executeTarget(""cleanup"");
    }
}
"
L30266,Class,TaskdefTest,org.apache.tools.ant.taskdefs.TaskdefTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TaskdefTest.java,63,1,119,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,12,2,0,0,6,18,0.0769231,0.0625,3,3,1,12,0.0625,3,1,1,0,0,1,45,57,6,8,0,0,12,0,12,1,36,16,0,13,1,45,57,6,8,0,0,12,0,12,1,36,16,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;


public class TaskdefTest extends BuildFileTest { 
    
    public TaskdefTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/taskdef.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }

    public void test4() { 
        expectBuildException(""test4"", ""classname specified doesn't exist"");
    }

    public void test5() { 
        expectBuildException(""test5"", ""No public execute() in "" + Project.class);
    }

    public void test5a() { 
        executeTarget(""test5a"");
    }

    public void test6() {
        expectLog(""test6"", ""simpletask: worked"");
    }

    public void test7() {
        expectLog(""test7"", ""worked"");
    }

    public void testGlobal() {
        expectLog(""testGlobal"", ""worked"");
    }

    public void testOverride() {
        executeTarget(""testOverride"");
        String log = getLog();
        assertTrue(""override warning sent"", 
                   log.indexOf(""Trying to override old definition of task copy"") > -1);
        assertTrue(""task inside target worked"", 
                   log.indexOf(""In target"") > -1);
        assertTrue(""task inside target worked"", 
                   log.indexOf(""In TaskContainer"") > -1);
    }
}
"
L30262,Class,TaskdefsTest,org.apache.tools.ant.taskdefs.TaskdefsTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TaskdefsTest.java,66,1,71,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,0,0,1,2,0.5,0.5,5,5,1,1,0.5,5,1,1,0,0,1,5,6,6,8,0,0,1,0,1,0,25,1,0,2,0,5,6,6,8,0,0,1,0,1,0,25,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import junit.framework.*;
import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public abstract class TaskdefsTest extends BuildFileTest { 
    
    public TaskdefsTest(String name) {
        super(name);
    }
}
"
L30281,Class,TestProcess,org.apache.tools.ant.taskdefs.TestProcess,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TestProcess.java,62,1,123,2,0.0,0,0,0,0.0,0.0,0,0,2,3,3,10,1,1,1,0,4,0.2,0.1,5,5,1,4,0.0862069,5,0,0,0,0,0,45,54,2,1,2,1,4,0,4,0,4,21,0,4,0,53,62,2,1,2,1,5,0,5,0,5,22,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;


public class TestProcess
    implements Runnable
{
    private boolean run = true;
    private boolean done = false;

    public void shutdown()
    {
        if (!done)
        {
            System.out.println(""shutting down TestProcess"");
            run = false;
            
            synchronized(this)
            {
                while (!done)
                {
                    try { wait(); } catch (InterruptedException ie) {}
                }
            }
            
            System.out.println(""TestProcess shut down"");
        }
    }

    public void run()
    {
        for (int i = 0; i < 5 && run; i++)
        {
            System.out.println(Thread.currentThread().getName());
            
            try { Thread.sleep(2000); } catch (InterruptedException ie) {}
        }

        synchronized(this)
        {
            done = true;
            notifyAll();
        }
    }

    public Thread getShutdownHook()
    {
        return new TestProcessShutdownHook();
    }

    private class TestProcessShutdownHook
        extends Thread
    {
        public void run()
        {
            shutdown();
        }
    }

    public static void main(String[] args)
    {
        TestProcess tp = new TestProcess();
        new Thread(tp, ""TestProcess thread"").start();
        Runtime.getRuntime().addShutdownHook(tp.getShutdownHook());
    }
}
"
L30293,Class,TestProcess$TestProcessShutdownHook,org.apache.tools.ant.taskdefs.TestProcess$TestProcessShutdownHook,L30281,L103,src/testcases/org/apache/tools/ant/taskdefs/TestProcess.java,108,5,115,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,1,0,1,2,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,8,8,0,0,0,0,1,0,1,0,1,1,0,1,0,8,8,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;


public class TestProcess
    implements Runnable
{
    private boolean run = true;
    private boolean done = false;

    public void shutdown()
    {
        if (!done)
        {
            System.out.println(""shutting down TestProcess"");
            run = false;
            
            synchronized(this)
            {
                while (!done)
                {
                    try { wait(); } catch (InterruptedException ie) {}
                }
            }
            
            System.out.println(""TestProcess shut down"");
        }
    }

    public void run()
    {
        for (int i = 0; i < 5 && run; i++)
        {
            System.out.println(Thread.currentThread().getName());
            
            try { Thread.sleep(2000); } catch (InterruptedException ie) {}
        }

        synchronized(this)
        {
            done = true;
            notifyAll();
        }
    }

    public Thread getShutdownHook()
    {
        return new TestProcessShutdownHook();
    }

    private class TestProcessShutdownHook
        extends Thread
    {
        public void run()
        {
            shutdown();
        }
    }

    public static void main(String[] args)
    {
        TestProcess tp = new TestProcess();
        new Thread(tp, ""TestProcess thread"").start();
        Runtime.getRuntime().addShutdownHook(tp.getShutdownHook());
    }
}
"
L29695,Class,TimeProcess,org.apache.tools.ant.taskdefs.TimeProcess,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TimeProcess.java,63,1,71,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,2,0,2,0,0,1,0.5,0.4375,7,7,1,1,0.4375,7,0,0,0,0,0,9,9,0,0,0,0,1,0,1,0,1,4,0,1,0,9,9,0,0,0,0,1,0,1,0,1,4,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;


public class TimeProcess {
    public static void main(String[] args) throws Exception {
        int time = Integer.parseInt(args[0]);
        if (time < 1) {
            throw new IllegalArgumentException(""Invalid time: "" + time);
        }
        Thread.sleep(time);
    }
}
"
L30338,Class,TypedefTest,org.apache.tools.ant.taskdefs.TypedefTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/TypedefTest.java,64,1,108,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,2,0,0,5,13,0.111111,0.1,4,4,1,8,0.1,4,1,1,0,0,1,36,45,6,8,0,0,8,0,8,1,32,14,0,9,1,36,45,6,8,0,0,8,0,8,1,32,14,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;


public class TypedefTest extends BuildFileTest { 
    
    public TypedefTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/typedef.xml"");
    }
    
    public void testEmpty() { 
        expectBuildException(""empty"", ""required argument not specified"");
    }

    public void testNoName() { 
        expectBuildException(""noName"", ""required argument not specified"");
    }

    public void testNoClassname() { 
        expectBuildException(""noClassname"", ""required argument not specified"");
    }

    public void testClassNotFound() { 
        expectBuildException(""classNotFound"", 
                             ""classname specified doesn't exist"");
    }

    public void testGlobal() {
        expectLog(""testGlobal"", """");
        Object ref = project.getReferences().get(""global"");
        assertNotNull(""ref is not null"", ref);
        assertEquals(""org.example.types.TypedefTestType"",
                     ref.getClass().getName());
    }

    public void testLocal() {
        expectLog(""testLocal"", """");
        Object ref = project.getReferences().get(""local"");
        assertNotNull(""ref is not null"", ref);
        assertEquals(""org.example.types.TypedefTestType"",
                     ref.getClass().getName());
    }

}
"
L30349,Class,UntarTest,org.apache.tools.ant.taskdefs.UntarTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/UntarTest.java,64,1,124,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,10,3,0,0,7,17,0.0909091,0.0727273,4,4,1,10,0.0727273,4,1,1,0,0,1,51,61,6,8,0,0,10,0,10,1,34,23,0,11,1,51,61,6,8,0,0,10,0,10,1,34,23,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs;

import java.io.File;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class UntarTest extends BuildFileTest {

    public UntarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/untar.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testRealGzipTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realGzipTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testRealBzip2Test() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realBzip2Test"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testTestTarTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testTarTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testTestGzipTarTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testGzipTarTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testTestBzip2TarTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testBzip2TarTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }

    public void testSrcDirTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        expectBuildException(""srcDirTest"", ""Src cannot be a directory."");
    }
}
"
L30362,Class,UnzipTest,org.apache.tools.ant.taskdefs.UnzipTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/UnzipTest.java,63,1,104,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,3,0,0,7,15,0.111111,0.111111,4,4,1,8,0.111111,4,1,1,0,0,1,32,42,6,8,0,0,8,0,8,1,32,12,0,9,1,32,42,6,8,0,0,8,0,8,1,32,12,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;


public class UnzipTest extends BuildFileTest { 
    
    public UnzipTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/unzip.xml"");
    }
    
    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() { 
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() { 
        expectBuildException(""test3"", ""required argument not specified"");
    }


    public void testRealTest() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""realTest"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
    public void testTestZipTask() throws java.io.IOException {
        FileUtils fileUtils = FileUtils.newFileUtils();
        executeTarget(""testZipTask"");
        assertTrue(fileUtils.contentEquals(project.resolveFile(""../asf-logo.gif""),
                                           project.resolveFile(""asf-logo.gif"")));
    }
    
}
"
L30373,Class,WarTest,org.apache.tools.ant.taskdefs.WarTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/WarTest.java,64,1,86,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,3,7,0.4,0.333333,8,8,2,3,0.333333,8,1,1,0,0,1,16,23,7,8,1,0,4,1,4,1,28,4,1,5,1,16,23,7,8,1,0,4,1,4,1,28,4,1,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class WarTest extends BuildFileTest {
    public static final String TEST_BUILD_FILE
        = ""src/etc/testcases/taskdefs/war.xml"";
    
    public WarTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TEST_BUILD_FILE);
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testLibRefs() {
        executeTarget(""testlibrefs"");
    }
}
"
L30383,Class,XmlPropertyTest,org.apache.tools.ant.taskdefs.XmlPropertyTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/XmlPropertyTest.java,62,1,82,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,4,7,0.25,0.210526,4,3,1,3,0.210526,4,1,1,0,0,1,15,21,6,8,0,0,3,0,3,1,27,7,0,4,1,15,21,6,8,0,0,3,0,3,1,27,7,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;

import org.apache.tools.ant.BuildFileTest;


public class XmlPropertyTest extends BuildFileTest {

    public XmlPropertyTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/xmlproperty.xml"");
    }


    public void testProperties() {
        executeTarget(""test"");

        assertEquals(""true"", project.getProperty(""root-tag(myattr)""));
        assertEquals(""Text"", project.getProperty(""root-tag.inner-tag""));
        assertEquals(""val"", project.getProperty(""root-tag.inner-tag(someattr)""));
        assertEquals(""false"", project.getProperty(""root-tag.a2.a3.a4""));
    }

}
"
L30389,Class,ZipTest,org.apache.tools.ant.taskdefs.ZipTest,L4513,L103,src/testcases/org/apache/tools/ant/taskdefs/ZipTest.java,66,1,137,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,14,1,0,0,7,21,0.0666667,0.0545455,3,3,1,14,0.0545455,3,1,1,0,0,1,52,72,6,8,0,0,14,0,14,1,38,22,0,15,1,52,72,6,8,0,0,14,0,14,1,38,22,0,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs;
import org.apache.tools.ant.BuildFileTest;

import java.io.File;
import java.io.IOException;
import java.util.zip.ZipFile;
import java.util.Enumeration;


public class ZipTest extends BuildFileTest {

    public ZipTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/taskdefs/zip.xml"");
    }

    public void test1() {
        expectBuildException(""test1"", ""required argument not specified"");
    }

    public void test2() {
        expectBuildException(""test2"", ""required argument not specified"");
    }

    public void test3() {
        expectBuildException(""test3"", ""zip cannot include itself"");
    }





    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test5() {
        executeTarget(""test5"");
    }


    public void test6() {
        executeTarget(""test6"");
    }


    public void test7() {
        executeTarget(""test7"");
    }

    public void test8() {
        executeTarget(""test8"");
    }

    public void testZipgroupfileset() throws IOException {
        executeTarget(""testZipgroupfileset"");

        ZipFile zipFile = new ZipFile(new File(getProjectDir(), ""zipgroupfileset.zip""));

        assertTrue(zipFile.getEntry(""ant.xml"") != null);
        assertTrue(zipFile.getEntry(""optional/jspc.xml"") != null);
        assertTrue(zipFile.getEntry(""zip/zipgroupfileset3.zip"") != null);

        assertTrue(zipFile.getEntry(""test6.mf"") == null);
        assertTrue(zipFile.getEntry(""test7.mf"") == null);

        zipFile.close();
    }

    public void testUpdateNotNecessary() {
        executeTarget(""testUpdateNotNecessary"");
        assertEquals(-1, getLog().indexOf(""Updating""));
    }

    public void testUpdateIsNecessary() {
        expectLogContaining(""testUpdateIsNecessary"", ""Updating"");
    }
}
"
L6419,Class,ContainsTest,org.apache.tools.ant.taskdefs.condition.ContainsTest,L6106,L103,src/testcases/org/apache/tools/ant/taskdefs/condition/ContainsTest.java,65,1,81,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,4,6,0.333333,0.315789,6,6,1,2,0.315789,6,0,0,0,0,0,13,17,0,0,0,0,2,0,2,0,2,7,0,2,0,13,17,0,0,0,0,2,0,2,0,2,7,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.condition;

import junit.framework.TestCase;


public class ContainsTest extends TestCase {

    public ContainsTest(String name) {
        super(name);
    }

    public void testCaseSensitive() {
        Contains con = new Contains();
        con.setString(""abc"");
        con.setSubstring(""A"");
        assertTrue(!con.eval());

        con.setCasesensitive(false);
        assertTrue(con.eval());
    }

}
"
L6429,Class,EqualsTest,org.apache.tools.ant.taskdefs.condition.EqualsTest,L6106,L103,src/testcases/org/apache/tools/ant/taskdefs/condition/EqualsTest.java,65,1,94,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,1,0,0,5,8,0.25,0.206897,6,6,1,3,0.206897,6,0,0,0,0,0,23,30,0,0,0,0,3,0,3,0,3,15,0,3,0,23,30,0,0,0,0,3,0,3,0,3,15,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.condition;

import junit.framework.TestCase;


public class EqualsTest extends TestCase {

    public EqualsTest(String name) {
        super(name);
    }

    public void testTrim() {
        Equals eq = new Equals();
        eq.setArg1(""a"");
        eq.setArg2("" a"");
        assertTrue(!eq.eval());

        eq.setTrim(true);
        assertTrue(eq.eval());

        eq.setArg2(""a\t"");
        assertTrue(eq.eval());
    }

    public void testCaseSensitive() {
        Equals eq = new Equals();
        eq.setArg1(""a"");
        eq.setArg2(""A"");
        assertTrue(!eq.eval());

        eq.setCasesensitive(false);
        assertTrue(eq.eval());
    }

}
"
L29610,Class,B,org.apache.tools.ant.taskdefs.dir1.B,L29607,L103,src/testcases/org/apache/tools/ant/taskdefs/dir1/B.java,57,1,66,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,1,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,9,10,1,0,0,0,1,0,1,0,4,1,0,3,1,9,10,1,0,0,0,1,0,1,0,4,1,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.dir1;

public class B extends org.apache.tools.ant.taskdefs.dir2.A {
    static {
        System.out.println(""B CLASS INITIALIZATION"");
        setA(new B());
    }

    public String toString() {
        return ""I am a B."";
    }
}
"
L29611,Class,A,org.apache.tools.ant.taskdefs.dir2.A,L29624,L103,src/testcases/org/apache/tools/ant/taskdefs/dir2/A.java,57,1,76,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,0,1,0,0,3,0.0,0.0,0,0,0,3,0.0,0,0,0,1,1,0,16,20,1,0,1,0,3,0,2,1,3,4,0,2,1,16,20,1,0,1,0,3,0,2,1,3,4,0,2,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.dir2;

public class A {
    public static void main(String [] args) {
        System.out.println(""MAIN"");
        System.out.println(a);
    }

    static A a=new A();

    static {
        System.out.println(""A CLASS INITIALIZATION"");
    }

    protected static void setA(A oa) {
        a=oa;
    }

    public String toString() {
        return ""I am a A."";
    }
}
"
L26412,Class,ANTLRTest,org.apache.tools.ant.taskdefs.optional.ANTLRTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ANTLRTest.java,73,1,172,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,16,3,0,0,4,20,0.411765,0.412371,40,38,7,10,0.412371,40,1,1,0,0,1,57,100,7,8,1,0,16,0,16,1,40,22,0,17,1,57,100,7,8,1,0,16,0,16,1,40,22,0,17,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;

public class ANTLRTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/antlr/"";

    public ANTLRTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""antlr.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() {
        expectBuildException(""test1"", ""required argument, target, missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""Invalid output directory"");
    }

    public void test3() {
        executeTarget(""test3"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new CalcFileFilter());
        assertEquals(5, calcFiles.length);
    }

    public void test4() {
        executeTarget(""test4"");
    }

    public void test5() {
        
        
        expectBuildException(""test5"", ""ANTLR returned: 1"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void test7() {
        expectBuildException(""test7"", ""Unable to determine generated class"");
    }

    
    public void test8() {
        expectBuildException(""test8"", ""Invalid super grammar file"");
    }

    
    public void test9() {
        executeTarget(""test9"");
    }

    
    public void test10() {
        executeTarget(""test10"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new HTMLFilter());
        assertEquals(1, calcFiles.length);
    }

    
    public void test11() {
        executeTarget(""test11"");
    }

    
    public void test12() {
        executeTarget(""test12"");
    }

    
    public void test13() {
        executeTarget(""test13"");
    }
}

class CalcFileFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.startsWith(""Calc"");
    }
}

class HTMLFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.endsWith(""html"");
    }
}
"
L26382,Class,AbstractXSLTLiaisonTest,org.apache.tools.ant.taskdefs.optional.AbstractXSLTLiaisonTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/AbstractXSLTLiaisonTest.java,74,1,133,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,8,1,3,6,3,10,0.5,0.155172,9,9,2,2,0.155172,9,0,0,3,3,0,49,60,1,1,1,1,7,0,3,1,7,28,0,3,1,49,60,1,1,1,1,7,0,3,1,7,28,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;



import junit.framework.TestCase;
import org.apache.tools.ant.taskdefs.XSLTLiaison;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;


public abstract class AbstractXSLTLiaisonTest extends TestCase {

    protected XSLTLiaison liaison;

    protected  AbstractXSLTLiaisonTest(String name){
        super(name);
    }

    protected void setUp() throws Exception {
        liaison = createLiaison();
    }

    
    protected abstract XSLTLiaison createLiaison() throws Exception ;

    
    protected File getFile(String name) throws FileNotFoundException {
        URL url = getClass().getResource(name);
        if (url == null){
          throw new FileNotFoundException(""Unable to load '"" + name + ""' from classpath"");
        }
        return new File(url.getFile());
    }

    
    public void testTransform() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        liaison.setStylesheet(xsl);
        liaison.addParam(""param"", ""value"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xml"");
        File out = new File(""xsltliaison.tmp"");
        try {
            liaison.transform(in, out);
        } finally {
            out.delete();
        }
    }

    public void testEncoding() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xsltliaison-encoding-in.xsl"");
        liaison.setStylesheet(xsl);
        File in = getFile(""/taskdefs/optional/xsltliaison-encoding-in.xml"");
        File out = new File(""xsltliaison-encoding.tmp"");
        try {
            liaison.transform(in, out);
            Document doc = parseXML(out);
            assertEquals(""root"",doc.getDocumentElement().getNodeName());
            assertEquals(""message"",doc.getDocumentElement().getFirstChild().getNodeName());
            assertEquals(""\u00E9\u00E0\u00E8\u00EF\u00F9"",doc.getDocumentElement().getFirstChild().getFirstChild().getNodeValue());
        } finally {
            out.delete();
        }
    }

    public Document parseXML(File file) throws Exception {
        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
        return dbuilder.parse(file);
    }
}
"
L26425,Class,CalcFileFilter,org.apache.tools.ant.taskdefs.optional.CalcFileFilter,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ANTLRTest.java,174,1,178,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;

public class ANTLRTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/antlr/"";

    public ANTLRTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""antlr.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() {
        expectBuildException(""test1"", ""required argument, target, missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""Invalid output directory"");
    }

    public void test3() {
        executeTarget(""test3"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new CalcFileFilter());
        assertEquals(5, calcFiles.length);
    }

    public void test4() {
        executeTarget(""test4"");
    }

    public void test5() {
        
        
        expectBuildException(""test5"", ""ANTLR returned: 1"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void test7() {
        expectBuildException(""test7"", ""Unable to determine generated class"");
    }

    
    public void test8() {
        expectBuildException(""test8"", ""Invalid super grammar file"");
    }

    
    public void test9() {
        executeTarget(""test9"");
    }

    
    public void test10() {
        executeTarget(""test10"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new HTMLFilter());
        assertEquals(1, calcFiles.length);
    }

    
    public void test11() {
        executeTarget(""test11"");
    }

    
    public void test12() {
        executeTarget(""test12"");
    }

    
    public void test13() {
        executeTarget(""test13"");
    }
}

class CalcFileFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.startsWith(""Calc"");
    }
}

class HTMLFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.endsWith(""html"");
    }
}
"
L26457,Class,EchoPropertiesTest,org.apache.tools.ant.taskdefs.optional.EchoPropertiesTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/EchoPropertiesTest.java,69,1,202,2,0.0,0,0,0,0.0,0.0,0,0,2,3,3,18,2,0,0,8,23,0.0833333,0.243478,28,7,1,11,0.243478,28,1,1,0,0,1,87,134,11,8,5,0,15,0,11,1,39,37,0,12,1,87,134,11,8,5,0,15,0,11,1,39,37,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;

import java.io.*;
import java.util.Properties;


public class EchoPropertiesTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";
    private static final String GOOD_OUTFILE = ""test.properties"";
    private static final String PREFIX_OUTFILE = ""test-prefix.properties"";
    private static final String TEST_VALUE = ""isSet"";
    private static final String BAD_OUTFILE = ""."";

    public EchoPropertiesTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""echoproperties.xml"");
        project.setProperty( ""test.property"", TEST_VALUE );
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    
    public void testEchoToLog() {
        expectLogContaining(""testEchoToLog"", ""test.property=""+TEST_VALUE);
    }
    
    
    public void testEchoToBadFile() {
        expectBuildExceptionContaining( ""testEchoToBadFile"",
            ""outfile is not writeable"",
            ""Destfile ""+toAbsolute(BAD_OUTFILE)+"" could not be written to."" );
    }
    
    
    public void testEchoToBadFileFail() {
        expectBuildExceptionContaining( ""testEchoToBadFileFail"",
            ""outfile is not writeable"",
            ""Destfile ""+toAbsolute(BAD_OUTFILE)+"" could not be written to."" );
    }
    
    
    public void testEchoToBadFileNoFail() {
        expectLog( ""testEchoToBadFileNoFail"",
            ""Destfile ""+toAbsolute(BAD_OUTFILE)+"" could not be written to."" );
    }
    
    
    public void testEchoToGoodFile() throws Exception {
        executeTarget( ""testEchoToGoodFile"" );
        assertGoodFile();
    }
    
    
    public void testEchoToGoodFileFail() throws Exception {
        executeTarget( ""testEchoToGoodFileFail"" );
        assertGoodFile();
    }
    
    
    public void testEchoToGoodFileNoFail() throws Exception {
        executeTarget( ""testEchoToGoodFileNoFail"" );
        assertGoodFile();
    }


    public void testEchoPrefix() throws Exception {
        executeTarget( ""testEchoPrefix"" );
        Properties props=loadPropFile(PREFIX_OUTFILE);

        assertEquals(""prefix didn't include 'a.set' property"",""true"",props.getProperty(""a.set""));
        assertNull(""prefix failed to filter out property 'b.set'"",
                   props.getProperty(""b.set""));
    }

    protected Properties loadPropFile(String relativeFilename)
            throws IOException {
        File f = createRelativeFile( relativeFilename );
        Properties props=new Properties();
        InputStream in=null;
        try  {
            in=new BufferedInputStream(new FileInputStream(f));
            props.load(in);
        } finally {
            if(in!=null) {
                try { in.close(); } catch(IOException e) {}
            }
        }
        return props;
    }

    protected void assertGoodFile() throws Exception {
        File f = createRelativeFile( GOOD_OUTFILE );
        assertTrue(
            ""Did not create ""+f.getAbsolutePath(),
            f.exists() );
        Properties props=loadPropFile(GOOD_OUTFILE);
        props.list(System.out);
        assertEquals(""test property not found "",
                     TEST_VALUE, props.getProperty(""test.property""));

    }


    protected String toAbsolute( String filename ) {
        return createRelativeFile( filename ).getAbsolutePath();
    }


    protected File createRelativeFile( String filename ) {
        if (filename.equals( ""."" )) {
            return getProjectDir();
        }
        
        return new File( getProjectDir(), filename );
    }
}

"
L26440,Class,HTMLFilter,org.apache.tools.ant.taskdefs.optional.HTMLFilter,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ANTLRTest.java,180,1,184,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;

public class ANTLRTest extends BuildFileTest {

    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/antlr/"";

    public ANTLRTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TASKDEFS_DIR + ""antlr.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }
    
    public void test1() {
        expectBuildException(""test1"", ""required argument, target, missing"");
    }

    public void test2() {
        expectBuildException(""test2"", ""Invalid output directory"");
    }

    public void test3() {
        executeTarget(""test3"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new CalcFileFilter());
        assertEquals(5, calcFiles.length);
    }

    public void test4() {
        executeTarget(""test4"");
    }

    public void test5() {
        
        
        expectBuildException(""test5"", ""ANTLR returned: 1"");
    }

    public void test6() {
        executeTarget(""test6"");
    }

    public void test7() {
        expectBuildException(""test7"", ""Unable to determine generated class"");
    }

    
    public void test8() {
        expectBuildException(""test8"", ""Invalid super grammar file"");
    }

    
    public void test9() {
        executeTarget(""test9"");
    }

    
    public void test10() {
        executeTarget(""test10"");
        File outputDirectory = new File(TASKDEFS_DIR + ""antlr.tmp"");
        String[] calcFiles = outputDirectory.list(new HTMLFilter());
        assertEquals(1, calcFiles.length);
    }

    
    public void test11() {
        executeTarget(""test11"");
    }

    
    public void test12() {
        executeTarget(""test12"");
    }

    
    public void test13() {
        executeTarget(""test13"");
    }
}

class CalcFileFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.startsWith(""Calc"");
    }
}

class HTMLFilter implements FilenameFilter {
    public boolean accept(File dir, String name) {
        return name.endsWith(""html"");
    }
}
"
L26500,Class,JspcTest,org.apache.tools.ant.taskdefs.optional.JspcTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/JspcTest.java,68,1,201,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,12,1,0,0,4,16,1.0,0.556522,64,64,10,0,0.556522,64,1,1,0,0,1,51,134,9,9,3,1,12,0,9,1,36,17,0,10,1,51,134,9,9,3,1,12,0,9,1,36,17,0,10,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.taskdefs.optional.jsp.JspMangler;
import org.apache.tools.ant.taskdefs.optional.jsp.Jasper41Mangler;
import org.apache.tools.ant.taskdefs.optional.jsp.JspC;
import org.apache.tools.ant.taskdefs.optional.jsp.JspNameMangler;
import org.apache.tools.ant.taskdefs.optional.jsp.compilers.JspCompilerAdapterFactory;
import org.apache.tools.ant.taskdefs.optional.jsp.compilers.JspCompilerAdapter;


public class JspcTest extends BuildFileTest {
    
    private File baseDir;
    
    private File outDir;

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public JspcTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""jspc.xml"");
        baseDir = new File(TASKDEFS_DIR);
        outDir = new File(baseDir, ""jsp/java"");
    }


    
    public void tearDown() {
        executeTarget(""cleanup"");
    }


    
    public void testSimple() throws Exception {
        executeJspCompile(""testSimple"", ""simple_jsp.java"");
    }


    
    public void testUriroot() throws Exception {
        executeJspCompile(""testUriroot"", ""uriroot_jsp.java"");
    }


    
    public void testXml() throws Exception {
        executeJspCompile(""testXml"", ""xml_jsp.java"");
    }


    
    public void testKeyword() throws Exception {
        executeJspCompile(""testKeyword"", ""default_jsp.java"");
    }


    
    public void testInvalidClassname() throws Exception {
        executeJspCompile(""testInvalidClassname"", 
                ""_1nvalid_0002dclassname_jsp.java"");
    }

    
    
    public void testNoTld() throws Exception {



         expectBuildExceptionContaining(""testNoTld"",
                 ""not found"",
                 ""Java returned: 9"");
    }


    
    public void testNotAJspFile()  throws Exception {
        executeTarget(""testNotAJspFile"");
    }

    

    
    protected void executeJspCompile(String target, String javafile)
        throws Exception {
        executeTarget(target);
        assertJavaFileCreated(javafile);
    }


    
    protected void assertJavaFileCreated(String filename)
        throws Exception {
        File file = getOutputFile(filename);
        assertTrue(""file "" + filename + "" not found"", file.exists());
        assertTrue(""file "" + filename + "" is empty"", file.length() > 0);
    }

    
    protected File getOutputFile(String subpath) {
        return new File(outDir, subpath);
    }

    
    public void testJasperNameManglerSelection() {
        JspCompilerAdapter adapter=
                JspCompilerAdapterFactory.getCompiler(""jasper"", null,null);
        JspMangler mangler=adapter.createMangler();
        assertTrue(mangler instanceof JspNameMangler);
        adapter= JspCompilerAdapterFactory.getCompiler(""jasper41"", null, null);
        mangler = adapter.createMangler();
        assertTrue(mangler instanceof Jasper41Mangler);
    }

    public void testJasper41() {
        JspMangler mangler = new Jasper41Mangler();
        
        assertMapped(mangler, ""for.jsp"", ""for_jsp"");
        
        assertMapped(mangler, ""0.jsp"", ""_0_jsp"");
        
        assertMapped(mangler, ""_.jsp"", ""___jsp"");
        
        assertMapped(mangler, ""-.jsp"", ""__0002d_jsp"");
        
        char s = File.separatorChar;
        assertMapped(mangler, """" + s + s + ""somewhere"" + s + ""file"" + s + ""index.jsp"", ""index_jsp"");
    }

    
    protected void assertMapped(JspMangler mangler, String filename, String classname) {
        String mappedname = mangler.mapJspToJavaName(new File(filename));
        assertTrue(filename+"" should have mapped to ""+classname
                    +"" but instead mapped to ""+mappedname,
                    classname.equals(mappedname));
    }


}

"
L26543,Class,PropertyFileTest,org.apache.tools.ant.taskdefs.optional.PropertyFileTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/PropertyFileTest.java,73,1,240,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,9,2,0,0,4,13,0.666667,0.291667,42,41,4,2,0.291667,42,1,1,0,0,1,102,168,26,9,20,1,9,0,5,1,33,61,0,6,1,102,168,26,9,20,1,9,0,5,1,33,61,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;

import java.util.Properties;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.File;



public class PropertyFileTest extends BuildFileTest {

    public PropertyFileTest(String name) {
        super(name);
    }


    
    public void setUp() throws Exception {
        destroyTempFiles();
        initTestPropFile();
        initBuildPropFile();
        configureProject(projectFilePath);
    }


    
    public void tearDown() {
        destroyTempFiles();
    }


    
    public void testUpdatesExistingProperties() throws Exception {
        Properties beforeUpdate = getTestProperties();
        assertEquals(FNAME, beforeUpdate.getProperty(FNAME_KEY));
        assertEquals(LNAME, beforeUpdate.getProperty(LNAME_KEY));
        assertEquals(EMAIL, beforeUpdate.getProperty(EMAIL_KEY));
        assertEquals(null, beforeUpdate.getProperty(PHONE_KEY));
        assertEquals(null, beforeUpdate.getProperty(AGE_KEY));
        assertEquals(null, beforeUpdate.getProperty(DATE_KEY));
      
        
        executeTarget(""update-existing-properties"");
      
        Properties afterUpdate = getTestProperties();
        assertEquals(NEW_FNAME, afterUpdate.getProperty(FNAME_KEY));
        assertEquals(NEW_LNAME, afterUpdate.getProperty(LNAME_KEY));
        assertEquals(NEW_EMAIL, afterUpdate.getProperty(EMAIL_KEY));
        assertEquals(NEW_PHONE, afterUpdate.getProperty(PHONE_KEY));
        assertEquals(NEW_AGE, afterUpdate.getProperty(AGE_KEY));
        assertEquals(NEW_DATE, afterUpdate.getProperty(DATE_KEY));
    }

    public void testExerciseDefaultAndIncrement() throws Exception {
        executeTarget(""exercise"");
        assertEquals(""3"",project.getProperty(""int.with.default""));
        assertEquals(""1"",project.getProperty(""int.without.default""));
        assertEquals(""-->"",project.getProperty(""string.with.default""));
        assertEquals(""."",project.getProperty(""string.without.default""));
        assertEquals(""2002/01/21 12:18"", project.getProperty(""ethans.birth""));
        assertEquals(""2003/01/21"", project.getProperty(""first.birthday""));
        assertEquals(""0124"", project.getProperty(""olderThanAWeek""));
        assertEquals(""37"", project.getProperty(""existing.prop""));
        assertEquals(""6"",project.getProperty(""int.without.value""));
    }



    private Properties getTestProperties() throws Exception {
        Properties testProps = new Properties();
        FileInputStream propsFile = new FileInputStream(testPropsFilePath);
        testProps.load(propsFile);
        propsFile.close();
        return testProps;
    }


    private void initTestPropFile() throws Exception {
        Properties testProps = new Properties();
        testProps.put(FNAME_KEY, FNAME);
        testProps.put(LNAME_KEY, LNAME);
        testProps.put(EMAIL_KEY, EMAIL);
        testProps.put(""existing.prop"", ""37"");
      
        FileOutputStream fos = new FileOutputStream(testPropsFilePath);
        testProps.save(fos, ""defaults"");
        fos.close();
    }


    private void initBuildPropFile() throws Exception {
        Properties buildProps = new Properties();
        buildProps.put(testPropertyFileKey, testPropertyFile);
        buildProps.put(FNAME_KEY, NEW_FNAME);
        buildProps.put(LNAME_KEY, NEW_LNAME);
        buildProps.put(EMAIL_KEY, NEW_EMAIL);
        buildProps.put(PHONE_KEY, NEW_PHONE);
        buildProps.put(AGE_KEY, NEW_AGE);
        buildProps.put(DATE_KEY, NEW_DATE);
      
        FileOutputStream fos = new FileOutputStream(buildPropsFilePath);
        buildProps.save(fos, null);
        fos.close();
    }


    private void destroyTempFiles() {
        File tempFile = new File(testPropsFilePath);
        tempFile.delete();
        tempFile = null;

        tempFile = new File(buildPropsFilePath);
        tempFile.delete();
        tempFile = null;
    }
   


    private static final String 
        projectFilePath     = ""src/etc/testcases/taskdefs/optional/propertyfile.xml"",
      
        testPropertyFile    = ""propertyfile.test.properties"",
        testPropertyFileKey = ""test.propertyfile"",
        testPropsFilePath   = ""src/etc/testcases/taskdefs/optional/"" + testPropertyFile,
      
        buildPropsFilePath  = ""src/etc/testcases/taskdefs/optional/propertyfile.build.properties"",
      
        FNAME     = ""Bruce"",
        NEW_FNAME = ""Clark"",
        FNAME_KEY = ""firstname"",
      
        LNAME     = ""Banner"",
        NEW_LNAME = ""Kent"",
        LNAME_KEY = ""lastname"",
      
        EMAIL     = ""incredible@hulk.com"",
        NEW_EMAIL = ""kc@superman.com"",
        EMAIL_KEY = ""email"",
   
        NEW_PHONE = ""(520) 555-1212"",
        PHONE_KEY = ""phone"",
      
        NEW_AGE = ""30"",
        AGE_KEY = ""age"",
      
        NEW_DATE = ""2001/01/01 12:45"",
        DATE_KEY = ""date"";
}

"
L26603,Class,PvcsTest,org.apache.tools.ant.taskdefs.optional.PvcsTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/PvcsTest.java,63,1,96,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,1,0,0,4,12,0.111111,0.103448,3,3,1,8,0.103448,3,1,1,0,0,1,26,34,6,8,0,0,8,0,8,1,32,8,0,9,1,26,34,6,8,0,0,8,0,8,1,32,8,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import org.apache.tools.ant.BuildFileTest;


public class PvcsTest extends BuildFileTest { 
    
    public PvcsTest(String name) { 
        super(name);
    }    
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/optional/pvcs.xml"");
    }
    
    public void test1() { 
        expectBuildException(""test1"", ""Required argument repository not specified"");
    }

    public void test2() {
        executeTarget(""test2"");
    }

    public void test3() { 
        executeTarget(""test3"");
    }

    public void test4() { 
        executeTarget(""test4"");
    }

    public void test5() { 
        executeTarget(""test5"");
    }

    public void test6() { 
        expectBuildException(""test6"", ""Failed executing: /never/heard/of/a/directory/structure/like/this/pcli lvf -z -aw -pr
    }
}
"
L26614,Class,ReplaceRegExpTest,org.apache.tools.ant.taskdefs.optional.ReplaceRegExpTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/ReplaceRegExpTest.java,68,1,114,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,6,1,0,0,3,7,0.2,0.155556,7,6,1,4,0.155556,7,1,1,0,0,1,38,47,6,8,0,0,4,0,4,1,28,22,0,5,1,38,47,6,8,0,0,4,0,4,1,28,22,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.util.FileUtils;

import java.util.Properties;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;


public class ReplaceRegExpTest extends BuildFileTest {

    public ReplaceRegExpTest(String name) {
        super(name);
    }
    
    public void setUp() { 
        configureProject(""src/etc/testcases/taskdefs/optional/replaceregexp.xml"");
    }
    
    public void tearDown() { 
        executeTarget(""cleanup"");
    }
    
    public void testReplace() throws IOException {
        Properties original = new Properties();
        FileInputStream propsFile = null;
        try {
            propsFile = new FileInputStream(""src/etc/testcases/taskdefs/optional/replaceregexp.properties"");
            original.load(propsFile);
        } finally {
            if (propsFile != null) {
                propsFile.close();
                propsFile = null;
            }
        }

        assertEquals(""Def"", original.get(""OldAbc""));

        executeTarget(""testReplace"");

        Properties after = new Properties();
        try {
            propsFile = new FileInputStream(""src/etc/testcases/taskdefs/optional/test.properties"");
            after.load(propsFile);
        } finally {
            if (propsFile != null) {
                propsFile.close();
                propsFile = null;
            }
        }

        assertNull(after.get(""OldAbc""));
        assertEquals(""AbcDef"", after.get(""NewProp""));
    }

    public void testDontAddNewline1() throws IOException {
        executeTarget(""testDontAddNewline1"");
        assertTrue(""Files match"",
                   FileUtils.newFileUtils()
                   .contentEquals(new File(""src/etc/testcases/taskdefs/optional/test.properties""),
                                  new File(""src/etc/testcases/taskdefs/optional/replaceregexp2.result.properties"")));
    }

    public void testDontAddNewline2() throws IOException {
        executeTarget(""testDontAddNewline2"");
        assertTrue(""Files match"",
                   FileUtils.newFileUtils()
                   .contentEquals(new File(""src/etc/testcases/taskdefs/optional/test.properties""),
                                  new File(""src/etc/testcases/taskdefs/optional/replaceregexp2.result.properties"")));
    }

}
"
L26621,Class,TraXLiaisonTest,org.apache.tools.ant.taskdefs.optional.TraXLiaisonTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/TraXLiaisonTest.java,71,1,138,2,0.204348,1,1,1,0.176471,0.20339,12,12,4,2,2,11,5,0,0,9,16,0.125,0.5,59,58,1,7,0.5,59,1,2,0,0,2,59,68,1,1,0,0,7,0,7,0,13,35,0,9,1,59,68,1,1,0,0,7,0,7,0,13,35,0,9,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.taskdefs.XSLTLiaison;
import org.apache.tools.ant.taskdefs.XSLTLogger;
import org.apache.tools.ant.BuildException;

import java.io.File;

import junit.framework.AssertionFailedError;




public class TraXLiaisonTest extends AbstractXSLTLiaisonTest 
    implements XSLTLogger {

    public TraXLiaisonTest(String name){
        super(name);
    }

    public void tearDown() {
        File f = new File(""xalan2-redirect-out.tmp"");
        if (f.exists()) {
            f.delete();
        }
    }

    public XSLTLiaison createLiaison() throws Exception {
        TraXLiaison l = new TraXLiaison();
        l.setLogger(this);
        return l;
    }

    public void testXalan2Redirect() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xalan-redirect-in.xsl"");
        liaison.setStylesheet(xsl);
        File out = new File(""xalan2-redirect-out-dummy.tmp"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        try {
            liaison.addParam(""xalan-version"", ""2"");
            liaison.transform(in, out);
        } finally {
            out.delete();
        }
    }

    public void testMultipleTransform() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        liaison.setStylesheet(xsl);
        liaison.addParam(""param"", ""value"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xml"");
        
        for (int i = 0; i < 50; i++){
            File out = new File(""xsltliaison"" + i + "".tmp"");
            try {
                liaison.transform(in, out);
            } catch (Exception e){
                throw new BuildException(""failed in transform "" + i, e);
            } finally {
                out.delete();
            }
        }
    }

    public void testSystemId(){
        File file = null;
        if ( File.separatorChar == '\\' ){
            file = new File(""d:\\jdk"");
        } else {
            file = new File(""/user/local/bin"");
        }
        String systemid = ((TraXLiaison)liaison).getSystemId(file);
        assertTrue(""SystemIDs should start by file:
        assertTrue(""SystemIDs should not start with file:
    }

    public void log(String message) {
        throw new AssertionFailedError(""Liaison sent message: ""+message);
    }

}
"
L26640,Class,WsdlToDotnetTest,org.apache.tools.ant.taskdefs.optional.WsdlToDotnetTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/WsdlToDotnetTest.java,67,1,175,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,12,1,0,0,4,16,1.0,0.47,47,47,13,0,0.47,47,1,1,0,0,1,53,109,7,8,1,0,12,0,12,1,36,12,0,13,1,53,109,7,8,1,0,12,0,12,1,36,12,0,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;


public class WsdlToDotnetTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public WsdlToDotnetTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""WsdlToDotnet.xml"");
    }


    
    public void tearDown() {
        executeTarget(""teardown"");
    }


    
    
    public void testNoParams() throws Exception {
        expectBuildExceptionContaining(""testNoParams"",
                ""expected failure"",
                ""destination file must be specified"");
    }

    
    public void testNoSrc() throws Exception {
        expectBuildExceptionContaining(""testNoSrc"",
                ""expected failure"",
                ""you must specify either a source file or a URL"");
    }

    
    public void testDestIsDir() throws Exception {
        expectBuildExceptionContaining(""testDestIsDir"",
                ""expected failure"",
                ""is a directory"");
    }
    
    
    public void testBothSrc() throws Exception {
        expectBuildExceptionContaining(""testBothSrc"",
                ""expected failure"",
                ""both a source file and a URL"");
    } 
     
    public void testSrcIsDir() throws Exception {
        expectBuildExceptionContaining(""testSrcIsDir"",
                ""expected failure"",
                ""is a directory"");
    } 
    
    
    public void testSrcIsMissing() throws Exception {
        expectBuildExceptionContaining(""testSrcIsMissing"",
                ""expected failure"",
                ""does not exist"");
    }
     
    
    public void testLocalWsdl() throws Exception {
        executeTarget(""testLocalWsdl"");
    } 
    
    public void testLocalWsdlServer() throws Exception {
        executeTarget(""testLocalWsdlServer"");
    } 
     
    public void testInvalidExtraOps() throws Exception {
        expectBuildExceptionContaining(""testInvalidExtraOps"",
                ""expected failure"",
                ""WSDL returned: 1"");
    }   
}

"
L26670,Class,XalanLiaisonTest,org.apache.tools.ant.taskdefs.optional.XalanLiaisonTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XalanLiaisonTest.java,66,1,94,2,0.573171,1,1,1,0.413793,0.461538,12,12,3,1,1,5,3,0,0,6,10,0.25,0.133333,4,4,1,3,0.133333,4,1,1,0,0,1,26,29,1,1,0,0,4,0,3,0,10,13,0,6,1,26,29,1,1,0,0,4,0,3,0,10,13,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;



import org.apache.tools.ant.taskdefs.XSLTLiaison;

import java.io.File;


public class XalanLiaisonTest extends AbstractXSLTLiaisonTest {
    public XalanLiaisonTest(String name){
        super(name);
    }

    public void tearDown() {
        File f = new File(""xalan1-redirect-out.tmp"");
        if (f.exists()) {
            f.delete();
        }
    }

    protected XSLTLiaison createLiaison() throws Exception {
        return new XalanLiaison();
    }

    public void testXalan1Redirect() throws Exception {
        File xsl = getFile(""/taskdefs/optional/xalan-redirect-in.xsl"");
        liaison.setStylesheet(xsl);
        File out = new File(""xalan1-redirect-out-dummy.tmp"");
        File in = getFile(""/taskdefs/optional/xsltliaison-in.xsl"");
        try {
            liaison.addParam(""xalan-version"", ""1"");
            liaison.transform(in, out);
        } finally {
            out.delete();
        }
    }
}

"
L26680,Class,XmlValidateTest,org.apache.tools.ant.taskdefs.optional.XmlValidateTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XmlValidateTest.java,67,1,128,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,1,0,0,3,10,1.0,0.581818,32,32,8,0,0.581818,32,1,1,0,0,1,23,62,7,8,1,0,7,0,7,1,31,6,0,8,1,23,62,7,8,1,0,7,0,7,1,31,6,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;


public class XmlValidateTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public XmlValidateTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""xmlvalidate.xml"");
    }


    
    public void tearDown() {
    }


    
    public void testValidate() throws Exception {
         executeTarget(""testValidate"");
    }
    

    
    public void testDeepValidate() throws Exception {
         executeTarget(""testDeepValidate"");
    }

    
    public void testXmlCatalog() {
        executeTarget(""xmlcatalog"");
    }

    
    public void testXmlCatalogNested() {
        executeTarget(""xmlcatalognested"");
    }

    
    public void testIso2022Jp() {
        executeTarget(""testIso2022Jp"");
    }

    
    public void testUtf8() {
        expectBuildException(""testUtf8"", ""invalid characters in file"");
    }

}
"
L26700,Class,XslpLiaisonTest,org.apache.tools.ant.taskdefs.optional.XslpLiaisonTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XslpLiaisonTest.java,64,1,72,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,3,0,0,2,4,0.5,0.878788,58,58,1,1,0.878788,58,1,1,0,0,1,8,9,1,1,0,0,2,0,1,0,8,2,0,4,1,8,9,1,1,0,0,2,0,1,0,8,2,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"package org.apache.tools.ant.taskdefs.optional;

import org.apache.tools.ant.taskdefs.XSLTLiaison;




public class XslpLiaisonTest extends AbstractXSLTLiaisonTest {
    public XslpLiaisonTest(String name){
        super(name);
    }

    protected XSLTLiaison createLiaison() throws Exception {
        return new XslpLiaison();
    }
}
"
L26709,Class,XsltTest,org.apache.tools.ant.taskdefs.optional.XsltTest,L11182,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/XsltTest.java,67,1,121,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,6,1,0,0,4,10,0.857143,0.530612,26,26,6,1,0.530612,26,1,1,0,0,1,23,55,7,8,1,0,6,0,6,1,30,6,0,7,1,23,55,7,8,1,0,6,0,6,1,30,6,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional;

import java.io.*;
import java.util.Properties;

import org.apache.tools.ant.BuildFileTest;


public class XsltTest extends BuildFileTest {

    
    private final static String TASKDEFS_DIR = ""src/etc/testcases/taskdefs/optional/"";


    
    public XsltTest(String name) {
        super(name);
    }


    
    public void setUp() {
        configureProject(TASKDEFS_DIR + ""xslt.xml"");
    }


    
    public void tearDown() {
        executeTarget(""teardown"");
    }


    
    
    public void testCatchNoDtd() throws Exception {
        expectBuildExceptionContaining(""testCatchNoDtd"",
                ""expected failure"",
                ""Fatal error during transformation"");
    }

    
    public void testCatalog() throws Exception {
         executeTarget(""testCatalog"");
    }
    
    public void testOutputProperty() throws Exception {
      executeTarget(""testOutputProperty"");
    }
}

"
L12726,Class,DependTest,org.apache.tools.ant.taskdefs.optional.depend.DependTest,L12006,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/depend/DependTest.java,74,1,206,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,14,5,0,0,9,22,0.769231,0.327869,40,40,10,3,0.327869,40,1,1,0,0,1,82,133,8,9,2,1,13,2,12,1,37,39,2,13,1,82,133,8,9,2,1,13,2,12,1,37,39,2,13,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.taskdefs.optional.depend;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.DirectoryScanner;


public class DependTest extends BuildFileTest {
    public static final String RESULT_FILESET = ""result"";
    
    public static final String TEST_BUILD_FILE
        = ""src/etc/testcases/taskdefs/optional/depend/depend.xml"";
    
    public DependTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(TEST_BUILD_FILE);
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testDirect() {
        Project project = getProject();
        executeTarget(""testdirect"");
        Hashtable files = getResultFiles();
        assertEquals(""Depend did not leave correct number of files"", 2, 
            files.size());
        assertTrue(""Result did not contain A.class"", 
            files.containsKey(""A.class""));
        assertTrue(""Result did not contain D.class"", 
            files.containsKey(""D.class""));
    }

    
    public void testClosure() {
        Project project = getProject();
        executeTarget(""testclosure"");
        Hashtable files = getResultFiles();
        assertEquals(""Depend did not leave correct number of files"", 1, 
            files.size());
        assertTrue(""Result did not contain D.class"", 
            files.containsKey(""D.class""));
    }

    
    public void testInner() {
        Project project = getProject();
        executeTarget(""testinner"");
        assertEquals(""Depend did not leave correct number of files"", 0, 
            getResultFiles().size());
    }

    
    public void testInnerInner() {
        Project project = getProject();
        executeTarget(""testinnerinner"");
        assertEquals(""Depend did not leave correct number of files"", 0, 
            getResultFiles().size());
    }
    
    
    public void testNoSource() {
        expectBuildExceptionContaining(""testnosource"", 
            ""No source specified"", ""srcdir attribute must be set"");
    }
        
    
    public void testEmptySource() {
        expectBuildExceptionContaining(""testemptysource"", 
            ""No source specified"", ""srcdir attribute must be non-empty"");
    }

    
    private Hashtable getResultFiles() {
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        return files;
    }
    
    
    
    public void testInnerClosure() {
        Project project = getProject();
        executeTarget(""testinnerclosure"");
        assertEquals(""Depend did not leave correct number of files"", 2, 
            getResultFiles().size());
    }

    
    public void testCache() {
        executeTarget(""testcache"");
    }

    
    public void testNonPublic() {
        executeTarget(""testnonpublic"");
        String log = getLog();
        assertTrue(""Expected warning about APrivate"", 
            log.indexOf(""The class APrivate in file"") != -1);
        assertTrue(""but has not been deleted because its source file "" 
            + ""could not be determined"", 
            log.indexOf(""The class APrivate in file"") != -1);
    }

}
"
L20894,Class,JUnitClassLoaderTest,org.apache.tools.ant.taskdefs.optional.junit.JUnitClassLoaderTest,L19511,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitClassLoaderTest.java,64,1,75,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,0,0,0,2,0.333333,0.375,6,6,1,2,0.375,6,0,0,0,0,0,10,12,0,0,0,0,2,0,2,0,2,4,0,2,0,10,12,0,0,0,0,2,0,2,0,2,4,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import junit.framework.TestCase;


public class JUnitClassLoaderTest extends TestCase {

    public JUnitClassLoaderTest(String s) {
        super(s);
    }

    public void testContextClassLoader(){
        ClassLoader context = Thread.currentThread().getContextClassLoader();
        ClassLoader caller = getClass().getClassLoader();
        assertSame(context, caller);
    }
}
"
L20901,Class,JUnitTestRunnerTest,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest,L19511,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,66,1,189,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,8,9,0,0,6,14,0.875,0.277778,15,13,7,1,0.172414,20,0,0,0,0,0,39,64,0,0,0,0,8,0,7,0,8,21,0,7,0,96,124,20,4,2,2,28,0,24,3,55,37,3,43,3,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20927,Class,JUnitTestRunnerTest$InvalidSuiteTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$InvalidSuiteTestCase,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,180,5,185,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,1,1,0,0,1,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20938,Class,JUnitTestRunnerTest$InvalidTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$InvalidTestCase,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,161,5,166,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,0,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,6,6,0,0,0,0,1,0,1,0,1,2,0,1,0,6,6,0,0,0,0,1,0,1,0,1,2,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20913,Class,JUnitTestRunnerTest$NoSuiteTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$NoSuiteTestCase,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,168,5,171,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,3,2,0,2,0.0,0.0,0,0,0,3,0.0,0,0,0,2,2,0,4,4,0,0,0,0,2,0,2,0,2,1,0,2,0,4,4,0,0,0,0,2,0,2,0,2,1,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20933,Class,JUnitTestRunnerTest$NoTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$NoTestCase,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,158,5,159,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20946,Class,JUnitTestRunnerTest$ResultFormatter,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$ResultFormatter,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,134,5,156,6,0.0,0,0,0,0.0,0.0,0,0,7,1,1,12,3,2,5,0,11,0.0909091,0.0416667,1,1,1,10,0.0416667,1,1,1,0,0,1,23,23,1,1,1,1,11,0,10,3,11,6,0,10,3,23,23,1,1,1,1,11,0,10,3,11,6,0,10,3,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20922,Class,JUnitTestRunnerTest$SuiteTestCase,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$SuiteTestCase,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,173,5,178,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,1,0,1,3,0.0,0.0,0,0,0,3,0.0,0,1,1,0,0,1,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,6,6,0,0,0,0,2,0,2,0,4,2,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L20908,Class,JUnitTestRunnerTest$TestRunner,org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunnerTest$TestRunner,L20901,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunnerTest.java,119,5,131,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,1,6,2,4,1.0,0.285714,4,1,1,0,0.285714,4,1,1,0,0,1,10,13,19,3,1,1,2,0,0,0,25,3,3,15,0,10,13,19,3,1,1,2,0,0,0,25,3,3,15,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.junit;

import java.io.*;
import junit.framework.*;
import org.apache.tools.ant.BuildException;


public class JUnitTestRunnerTest extends TestCase {

    
    public JUnitTestRunnerTest(String name){
        super(name);
    }

    
    public void testNoSuite(){
        TestRunner runner = createRunner(NoSuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testSuite(){
        TestRunner runner = createRunner(SuiteTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.SUCCESS, runner.getRetCode());
    }

    
    public void testInvalidSuite(){
        TestRunner runner = createRunner(InvalidSuiteTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.ERRORS, runner.getRetCode());
        assertTrue(error, error.indexOf(""thrown on purpose"") != -1);
    }

    
    
    public void testNoTestCase(){
        TestRunner runner = createRunner(NoTestCase.class);
        runner.run();
        assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
    }

    
    public void testInvalidTestCase(){
        TestRunner runner = createRunner(InvalidTestCase.class);
        runner.run();
        String error = runner.getFormatter().getError();
        assertEquals(error, JUnitTestRunner.FAILURES, runner.getRetCode());
        
        
    }
    
    protected TestRunner createRunner(Class clazz){
        return new TestRunner(new JUnitTest(clazz.getName()), true, true, true);
    }

    
    private final static class TestRunner extends JUnitTestRunner {
        private ResultFormatter formatter = new ResultFormatter();
        TestRunner(JUnitTest test, boolean haltonerror, boolean filtertrace, boolean haltonfailure){
            super(test, haltonerror, filtertrace,  haltonfailure, TestRunner.class.getClassLoader());
            
            
            
            addFormatter(formatter);
        }
        ResultFormatter getFormatter(){
            return formatter;
        }
    }

    
    private final static class ResultFormatter implements JUnitResultFormatter {
        private Throwable error;
        public void setSystemOutput(String output){}
        public void setSystemError(String output){}
        public void startTestSuite(JUnitTest suite) throws BuildException{}
        public void endTestSuite(JUnitTest suite) throws BuildException{}
        public void setOutput(java.io.OutputStream out){}
        public void startTest(Test t) {}
        public void endTest(Test test) {}
        public void addFailure(Test test, Throwable t) { }
        public void addFailure(Test test, AssertionFailedError t) { }
        public void addError(Test test, Throwable t) {
            error = t;
        }
        String getError(){
            if (error == null){
                return """";
            }
            StringWriter sw = new StringWriter();
            error.printStackTrace(new PrintWriter(sw));
            return sw.toString();
        }
    }

    public static class NoTestCase {
    }

    public static class InvalidTestCase extends TestCase {
        public InvalidTestCase(String name){
            super(name);
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    
    public static class NoSuiteTestCase extends TestCase {
        public NoSuiteTestCase(String name){ super(name); }
        public void testA(){}
    }

    public static class SuiteTestCase extends NoSuiteTestCase {
        public SuiteTestCase(String name){ super(name); }
        public static Test suite(){
            return new TestSuite(SuiteTestCase.class);
        }
    }

    public static class InvalidSuiteTestCase extends NoSuiteTestCase {
        public InvalidSuiteTestCase(String name){ super(name); }
        public static Test suite(){
            throw new NullPointerException(""thrown on purpose"");
        }
    }
    public static void main(String[] args){
        junit.textui.TestRunner.run(JUnitTestRunnerTest.class);
    }
}

"
L21584,Class,MAuditParserTest,org.apache.tools.ant.taskdefs.optional.metamata.MAuditParserTest,L20998,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/metamata/MAuditParserTest.java,67,1,107,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,5,3,0,0,3,8,0.2,0.179487,7,5,1,4,0.179487,7,0,0,0,0,0,32,41,1,0,1,0,5,0,4,1,5,17,0,4,1,32,41,1,0,1,0,5,0,4,1,5,17,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.metamata;

import java.io.File;

import junit.framework.TestCase;

import org.apache.tools.ant.util.StringUtils;


public class MAuditParserTest extends TestCase {

    private MAuditParser parser;

    public MAuditParserTest(String s) {
        super(s);
    }

    protected void setUp() {
        parser = new MAuditParser();
    }

    public void testViolation() {
        String line = ""file:\\WebGain\\QA\\examples\\auditexamples\\Vector.java:55: Array declarators (\""[]\"") should be placed with their component types and not after field/method declarations (5.27)."";
        
        
        line = StringUtils.replace(line, ""\\"", File.separator);
        MAuditParser.Violation violation = parser.parseLine(line);
        assertEquals(""\\WebGain\\QA\\examples\\auditexamples\\Vector.java"",
                StringUtils.replace(violation.file, File.separator, ""\\""));
        assertEquals(""55"", violation.line);
        assertEquals(""Array declarators (\""[]\"") should be placed with their component types and not after field/method declarations (5.27)."", violation.error);
    }

    public void testNonViolation(){
        String line = ""Audit completed with 36 violations."";
        Object violation = parser.parseLine(line);
        assertNull(violation);
    }

    public void testFilePathInViolation(){
        String line = ""file:\\WebGain\\QA\\examples\\auditexamples\\Hashtable.java:302: Loop variable defined at file:\\WebGain\\QA\\examples\\auditexamples\\Hashtable.java:300 is being modified (5.16)."";
        line = StringUtils.replace(line, ""\\"", File.separator);
        MAuditParser.Violation violation = parser.parseLine(line);
        assertEquals(""\\WebGain\\QA\\examples\\auditexamples\\Hashtable.java"",
                StringUtils.replace(violation.file, File.separator, ""\\""));
        assertEquals(""302"", violation.line);
        assertEquals(""Loop variable defined at Hashtable.java:300 is being modified (5.16)."", violation.error);
    }

}
"
L22631,Class,P4ChangeTest,org.apache.tools.ant.taskdefs.optional.perforce.P4ChangeTest,L22297,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/perforce/P4ChangeTest.java,63,1,89,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,1,5,0.25,0.16,4,4,1,3,0.16,4,0,0,0,0,0,21,27,1,0,1,0,4,0,3,1,4,10,0,3,1,21,27,1,0,1,0,4,0,3,1,4,10,0,3,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.perforce;

import junit.framework.TestCase;
import org.apache.oro.text.perl.Perl5Util;


public class P4ChangeTest extends TestCase {

    protected P4Change p4change;

    public P4ChangeTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        p4change = new P4Change();
    }

    public void testBackslash(){
        String input = ""comment with a / inside"";
        String output = p4change.backslash(input);
        assertEquals(""comment with a \\/ inside"", output);
    }

    public void testSubstitute(){
        Perl5Util util = new Perl5Util();
        String tosubstitute = ""xx<here>xx"";
        String input = p4change.backslash(""/a/b/c/"");
        String output = util.substitute(""s/<here>/"" + input + ""/"", tosubstitute);
        assertEquals(""xx/a/b/c/xx"", output);
    }

}
"
L24388,Class,ClassFileTest,org.apache.tools.ant.taskdefs.optional.sitraka.ClassFileTest,L23429,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/ClassFileTest.java,68,1,98,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,5,3,0,0,6,9,0.333333,0.147059,5,5,1,2,0.147059,5,0,0,0,0,0,29,31,0,0,0,0,3,0,2,0,3,21,0,2,0,29,31,0,0,0,0,3,0,2,0,3,21,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.io.IOException;
import java.io.InputStream;

import junit.framework.TestCase;
import org.apache.tools.ant.util.JavaEnvUtils;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassFile;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.MethodInfo;


public class ClassFileTest extends TestCase {
    public ClassFileTest(String s) {
        super(s);
    }

    public void testVector() throws IOException {
        String classname = ClassTest.class.getName().replace('.', '/') + "".class"";
        InputStream is = getClass().getClassLoader().getResourceAsStream(classname);
		assertNotNull(""Unable to find resource "" + classname + ""in caller classloader"");
        ClassFile clazzfile = new ClassFile(is);
        assertEquals(""ClassTest"", clazzfile.getName());
        assertEquals(""ClassFileTest.java"", clazzfile.getSourceFile());
        MethodInfo[] methods = clazzfile.getMethods();
        assertEquals(3, methods.length);
        assertHasMethod(""void <init>()"", 2, methods);
        assertHasMethod(""void testTwoLines()"", 2, methods);
        assertHasMethod(""void testOneLine()"", 
                        
                        3 + 
                        (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)
                         || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)
                         || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)
                         ? 0 : 1),
                        methods);
    }

    protected void assertHasMethod(String methodsig, int line, MethodInfo[] methods) {
        boolean found = false;
        for (int i = 0; i < methods.length; i++) {
            MethodInfo method = methods[i];
            if (methodsig.equals(method.getFullSignature())) {
                assertEquals(methodsig, line, method.getNumberOfLines());
                return;
            }
        }
        fail(""Could not find method "" + methodsig);
    }
}

class ClassTest {

    
            public ClassTest() {
    }

    
            public void testTwoLines() {
        System.out.println(""This is 1 line"");
    }

    
            public void testOneLine() {
        try {
            throw new Exception();
        } catch (Exception e) {
        }
    }
}
"
L24409,Class,ClassPathLoaderTest,org.apache.tools.ant.taskdefs.optional.sitraka.ClassPathLoaderTest,L23429,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/ClassPathLoaderTest.java,67,1,80,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,2,4,0.333333,0.352941,6,5,1,2,0.352941,6,0,0,0,0,0,11,14,0,0,0,0,2,0,2,0,2,5,0,2,0,11,14,0,0,0,0,2,0,2,0,2,5,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.util.Hashtable;
import java.io.File;

import junit.framework.TestCase;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassPathLoader;


public class ClassPathLoaderTest extends TestCase {
    public ClassPathLoaderTest(String s) {
        super(s);
    }

    public void testgetClasses() throws Exception {
        
        String path = System.getProperty(""java.home"") + File.separator + ""lib/rt.jar"";
        ClassPathLoader cl = new ClassPathLoader(path);
		Hashtable map = cl.getClasses();
        assertTrue(map.size() > 0);
    }

}
"
L24393,Class,ClassTest,org.apache.tools.ant.taskdefs.optional.sitraka.ClassTest,L23429,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/ClassFileTest.java,100,1,118,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,4,0,1,0,0,3,0.75,0.1875,3,3,3,1,0.1875,3,0,0,0,0,0,13,19,0,0,0,0,3,0,3,0,3,3,0,3,0,13,19,0,0,0,0,3,0,3,0,3,3,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.io.IOException;
import java.io.InputStream;

import junit.framework.TestCase;
import org.apache.tools.ant.util.JavaEnvUtils;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.ClassFile;
import org.apache.tools.ant.taskdefs.optional.sitraka.bytecode.MethodInfo;


public class ClassFileTest extends TestCase {
    public ClassFileTest(String s) {
        super(s);
    }

    public void testVector() throws IOException {
        String classname = ClassTest.class.getName().replace('.', '/') + "".class"";
        InputStream is = getClass().getClassLoader().getResourceAsStream(classname);
		assertNotNull(""Unable to find resource "" + classname + ""in caller classloader"");
        ClassFile clazzfile = new ClassFile(is);
        assertEquals(""ClassTest"", clazzfile.getName());
        assertEquals(""ClassFileTest.java"", clazzfile.getSourceFile());
        MethodInfo[] methods = clazzfile.getMethods();
        assertEquals(3, methods.length);
        assertHasMethod(""void <init>()"", 2, methods);
        assertHasMethod(""void testTwoLines()"", 2, methods);
        assertHasMethod(""void testOneLine()"", 
                        
                        3 + 
                        (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)
                         || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_2)
                         || JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_3)
                         ? 0 : 1),
                        methods);
    }

    protected void assertHasMethod(String methodsig, int line, MethodInfo[] methods) {
        boolean found = false;
        for (int i = 0; i < methods.length; i++) {
            MethodInfo method = methods[i];
            if (methodsig.equals(method.getFullSignature())) {
                assertEquals(methodsig, line, method.getNumberOfLines());
                return;
            }
        }
        fail(""Could not find method "" + methodsig);
    }
}

class ClassTest {

    
            public ClassTest() {
    }

    
            public void testTwoLines() {
        System.out.println(""This is 1 line"");
    }

    
            public void testOneLine() {
        try {
            throw new Exception();
        } catch (Exception e) {
        }
    }
}
"
L24416,Class,XMLReportTest,org.apache.tools.ant.taskdefs.optional.sitraka.XMLReportTest,L23429,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sitraka/XMLReportTest.java,75,1,134,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,5,4,0,0,7,11,0.333333,0.285714,16,8,1,2,0.285714,16,0,0,0,0,0,40,60,0,1,0,1,4,0,2,0,4,29,0,2,0,40,60,0,1,0,1,4,0,2,0,4,29,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sitraka;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.net.URL;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import junit.framework.TestCase;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


public class XMLReportTest extends TestCase {
    public XMLReportTest(String s) {
        super(s);
    }

    protected File getFile(String name) throws FileNotFoundException {
        URL url = getClass().getResource(name);
        if (url == null) {
            throw new FileNotFoundException(""Unable to load '"" + name + ""' from classpath"");
        }
        return new File(url.getFile());
    }

    public void testCreateDocument() throws Exception {
        
        File reportFile = getFile(""/taskdefs/optional/sitraka/covreport-test.xml"");
        XMLReport report = new XMLReport(reportFile);
        ReportFilters filters = new ReportFilters();
        ReportFilters.Include incl = new ReportFilters.Include();
        incl.setClass(""java.util.Vector"");
        incl.setMethod(""set*"");
        filters.addInclude(incl);
        report.setReportFilters(filters);
        Document doc = report.createDocument(new String[]{ System.getProperty(""java.home"") + ""/lib/rt.jar""});

        Node snapshot = doc.getDocumentElement();
        assertEquals(""snapshot"", snapshot.getNodeName());

        
        NodeList packages = doc.getElementsByTagName(""package"");
        assertEquals(1, packages.getLength());
        assertEquals(""java.util"", packages.item(0).getAttributes().getNamedItem(""name"").getNodeValue());

        
        NodeList classes = doc.getElementsByTagName(""class"");
        assertEquals(1, classes.getLength());
        assertEquals(""Vector"", classes.item(0).getAttributes().getNamedItem(""name"").getNodeValue());

        
        
        
        
        NodeList methods = doc.getElementsByTagName(""method"");
        assertEquals(3, methods.getLength());

        
    }

    
    protected void dump(Document doc, OutputStream out) throws Exception {
        TransformerFactory tfactory = TransformerFactory.newInstance();
        Transformer transformer = tfactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, ""no"");
        transformer.setOutputProperty(OutputKeys.METHOD, ""xml"");
        transformer.transform(new DOMSource(doc), new StreamResult(out));
    }
}
"
L24678,Class,SOSTest,org.apache.tools.ant.taskdefs.optional.sos.SOSTest,L24435,L103,src/testcases/org/apache/tools/ant/taskdefs/optional/sos/SOSTest.java,70,1,701,2,0.828014,13,263,59,0.761076,0.815416,481,402,1,2,2,74,11,0,0,26,40,0.923077,0.133568,76,37,12,1,0.133568,76,0,0,0,0,0,493,632,18,0,18,0,14,0,12,1,14,313,0,12,1,493,632,18,0,18,0,14,0,12,1,14,313,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.taskdefs.optional.sos;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.types.Commandline;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.taskdefs.optional.sos.*;
import java.io.File;


public class SOSTest extends TestCase {

    private SOSGet sosGet;
    private SOSCheckin sosCheckin;
    private SOSCheckout sosCheckout;
    private SOSLabel sosLabel;
    private Project project;
    private Commandline commandline;
    private FileUtils fileUtils;

    private static final String VSS_SERVER_PATH = ""\\\\server\\vss\\srcsafe.ini"";
    private static final String VSS_PROJECT_PATH = ""/SourceRoot/Project"";
    private static final String SOS_SERVER_PATH = ""192.168.0.1:8888"";
    private static final String SOS_USERNAME = ""ant"";
    private static final String SOS_PASSWORD = ""rocks"";
    private static final String LOCAL_PATH = ""testdir"";
    private static final String SRC_FILE = ""Class1.java"";
    private static final String SRC_LABEL = ""label1"";
    private static final String SRC_COMMENT = ""I fixed a bug"";
    private static final String SOS_HOME = ""/home/user/.sos"";
    private static final String VERSION = ""007"";

    public SOSTest(String s) {
        super(s);
    }

    protected void setUp() throws Exception {
        sosGet = new SOSGet();
        sosCheckin = new SOSCheckin();
        sosCheckout = new SOSCheckout();
        sosLabel = new SOSLabel();
        project = new Project();
        project.setBasedir(""."");
        fileUtils = FileUtils.newFileUtils();
    }

    protected void tearDown() throws Exception {
        File file = new File(project.getBaseDir(), LOCAL_PATH);
        if (file.exists()) {
            file.delete();
        }
	}

    
    public void testGetFileFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""GetFile"", ""-file"",
            SRC_FILE, ""-revision"", ""007"", ""-server"", SOS_SERVER_PATH, ""-name"",
            SOS_USERNAME, ""-password"", SOS_PASSWORD, ""-database"", VSS_SERVER_PATH,
            ""-project"", ""$""+VSS_PROJECT_PATH, ""-verbose"", ""-nocompress"",
            ""-nocache"", ""-workdir"", project.getBaseDir().getAbsolutePath()
			+ File.separator + LOCAL_PATH };

        Path path = new Path(project, LOCAL_PATH);

        
        sosGet.setProject(project);
        sosGet.setVssServerPath(VSS_SERVER_PATH);
        sosGet.setSosServerPath(SOS_SERVER_PATH);
        sosGet.setProjectPath(VSS_PROJECT_PATH);
        sosGet.setFile(SRC_FILE);
        sosGet.setUsername(SOS_USERNAME);
        sosGet.setPassword(SOS_PASSWORD);
        sosGet.setVersion(VERSION);
        sosGet.setLocalPath(path);
        sosGet.setNoCache(true);
        sosGet.setNoCompress(true);
        sosGet.setVerbose(true);
        sosGet.setRecursive(true);

        commandline = sosGet.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();
        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""GetFile arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
               fail(""GetFile missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""GetFile extra args"");
        }
    }

    
    public void testGetProjectFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""GetProject"", ""-recursive"",
            ""-label"", SRC_LABEL, ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
            ""-password"", """", ""-database"", VSS_SERVER_PATH , ""-project"",
            ""$""+VSS_PROJECT_PATH, """", """", ""-soshome"", SOS_HOME, ""-workdir"",
            project.getBaseDir().getAbsolutePath() };
        
        sosGet.setProject(project);
        sosGet.setVssServerPath(VSS_SERVER_PATH);
        sosGet.setSosServerPath(SOS_SERVER_PATH);
        sosGet.setProjectPath(VSS_PROJECT_PATH);
        sosGet.setLabel(SRC_LABEL);
        sosGet.setUsername(SOS_USERNAME);
        sosGet.setSosHome(SOS_HOME);
        sosGet.setNoCache(true);
        sosGet.setNoCompress(false);
        sosGet.setVerbose(false);
        sosGet.setRecursive(true);

        commandline = sosGet.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();

        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""GetProject arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""GetProject missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""GetProject extra args"");
        }
    }

    
    public void testGetExceptions() {
        boolean buildEx = false;

        
        sosGet.setProject(project);
        
        try {
            commandline = sosGet.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""sosserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""GetException SosServerPath"", buildEx);
        buildEx = false;

        
        sosGet.setSosServerPath(SOS_SERVER_PATH);
        try {
            commandline = sosGet.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""username attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""GetException Username"", buildEx);
        buildEx = false;

        
        sosGet.setUsername(SOS_USERNAME);
        try {
            commandline = sosGet.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""vssserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""GetException VssServerPath"", buildEx);
        buildEx = false;

        
        sosGet.setVssServerPath(VSS_SERVER_PATH);
        try {
            commandline = sosGet.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""projectpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""GetException ProjectPath"", buildEx);

        
        sosGet.setProjectPath(VSS_PROJECT_PATH);
        try {
            commandline = sosGet.buildCmdLine();
            buildEx = true;
        } catch (BuildException be) {
            buildEx = false;
        }
        assertTrue(""GetException All required options set"", buildEx);
    }

    
    public void testCheckinFileFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""CheckInFile"", ""-file"",
            SRC_FILE, ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
            ""-password"", SOS_PASSWORD, ""-database"", VSS_SERVER_PATH, ""-project"",
            ""$""+VSS_PROJECT_PATH, ""-verbose"", ""-nocompress"", ""-nocache"",
            ""-workdir"", project.getBaseDir().getAbsolutePath() + File.separator
			+ LOCAL_PATH, ""-log"", SRC_COMMENT };

        Path path = new Path(project, LOCAL_PATH);

        
        sosCheckin.setProject(project);
        sosCheckin.setVssServerPath(VSS_SERVER_PATH);
        sosCheckin.setSosServerPath(SOS_SERVER_PATH);
        sosCheckin.setProjectPath(VSS_PROJECT_PATH);
        sosCheckin.setFile(SRC_FILE);
        sosCheckin.setComment(SRC_COMMENT);
        sosCheckin.setUsername(SOS_USERNAME);
        sosCheckin.setPassword(SOS_PASSWORD);
        sosCheckin.setLocalPath(path);
        sosCheckin.setNoCache(true);
        sosCheckin.setNoCompress(true);
        sosCheckin.setVerbose(true);
        sosCheckin.setRecursive(true);

        commandline = sosCheckin.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();

        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""CheckInFile arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""CheckInFile missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""CheckInFile extra args"");
        }
    }

    
    public void testCheckinProjectFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""CheckInProject"",
            ""-recursive"", ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
            ""-password"", """", ""-database"", VSS_SERVER_PATH , ""-project"",
            ""$""+VSS_PROJECT_PATH, """", """", ""-soshome"", SOS_HOME, ""-workdir"",
            project.getBaseDir().getAbsolutePath(), ""-log"", SRC_COMMENT,  };

        
        sosCheckin.setProject(project);
        sosCheckin.setVssServerPath(VSS_SERVER_PATH);
        sosCheckin.setSosServerPath(SOS_SERVER_PATH);
        sosCheckin.setProjectPath(VSS_PROJECT_PATH);
        sosCheckin.setComment(SRC_COMMENT);
        sosCheckin.setUsername(SOS_USERNAME);
        sosCheckin.setSosHome(SOS_HOME);
        sosCheckin.setNoCache(true);
        sosCheckin.setNoCompress(false);
        sosCheckin.setVerbose(false);
        sosCheckin.setRecursive(true);

        commandline = sosCheckin.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();

        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""CheckInProject arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""CheckInProject missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""CheckInProject extra args"");
        }
    }

    
    public void testCheckinExceptions() {
        boolean buildEx = false;

        
        sosCheckin.setProject(project);
        
        try {
            commandline = sosCheckin.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""sosserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckinException SosServerPath"", buildEx);
        buildEx = false;

        
        sosCheckin.setSosServerPath(SOS_SERVER_PATH);
        try {
            commandline = sosCheckin.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""username attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckinException Username"", buildEx);
        buildEx = false;

        
        sosCheckin.setUsername(SOS_USERNAME);
        try {
            commandline = sosCheckin.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""vssserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckinException VssServerPath"", buildEx);
        buildEx = false;

        
        sosCheckin.setVssServerPath(VSS_SERVER_PATH);
        try {
            commandline = sosCheckin.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""projectpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckinException ProjectPath"", buildEx);

        
        sosCheckin.setProjectPath(VSS_PROJECT_PATH);
        try {
            commandline = sosCheckin.buildCmdLine();
            buildEx = true;
        } catch (BuildException be) {
            buildEx = false;
        }
        assertTrue(""CheckinException All required options set"", buildEx);
    }

    
    public void testCheckoutFileFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""CheckOutFile"", ""-file"",
            SRC_FILE, ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
            ""-password"", SOS_PASSWORD, ""-database"", VSS_SERVER_PATH, ""-project"",
            ""$""+VSS_PROJECT_PATH, ""-verbose"", ""-nocompress"", ""-nocache"",
            ""-workdir"", project.getBaseDir().getAbsolutePath()
			+ File.separator + LOCAL_PATH };

        Path path = new Path(project, LOCAL_PATH);

        
        sosCheckout.setProject(project);
        sosCheckout.setVssServerPath(VSS_SERVER_PATH);
        sosCheckout.setSosServerPath(SOS_SERVER_PATH);
        sosCheckout.setProjectPath(VSS_PROJECT_PATH);
        sosCheckout.setFile(SRC_FILE);
        sosCheckout.setUsername(SOS_USERNAME);
        sosCheckout.setPassword(SOS_PASSWORD);
        sosCheckout.setLocalPath(path);
        sosCheckout.setNoCache(true);
        sosCheckout.setNoCompress(true);
        sosCheckout.setVerbose(true);
        sosCheckout.setRecursive(true);

        commandline = sosCheckout.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();

        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""CheckOutFile arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""CheckOutFile missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""CheckOutFile extra args"");
        }
    }

    
    public void testCheckoutProjectFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""CheckOutProject"",
            ""-recursive"", ""-server"", SOS_SERVER_PATH, ""-name"", SOS_USERNAME,
            ""-password"", """", ""-database"", VSS_SERVER_PATH , ""-project"",
            ""$""+VSS_PROJECT_PATH, """", """", ""-soshome"", SOS_HOME, ""-workdir"",
            project.getBaseDir().getAbsolutePath() };

        
        sosCheckout.setProject(project);
        sosCheckout.setVssServerPath(VSS_SERVER_PATH);
        sosCheckout.setSosServerPath(SOS_SERVER_PATH);
        sosCheckout.setProjectPath(VSS_PROJECT_PATH);
        sosCheckout.setUsername(SOS_USERNAME);
        sosCheckout.setSosHome(SOS_HOME);
        sosCheckout.setNoCache(true);
        sosCheckout.setNoCompress(false);
        sosCheckout.setVerbose(false);
        sosCheckout.setRecursive(true);

        commandline = sosCheckout.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();

        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""CheckOutProject arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""CheckOutProject missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""CheckOutProject extra args"");
        }
    }

    
    public void testCheckoutExceptions() {
        boolean buildEx = false;

        
        sosCheckout.setProject(project);
        
        try {
            commandline = sosCheckout.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""sosserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckoutException SosServerPath"", buildEx);
        buildEx = false;

        
        sosCheckout.setSosServerPath(SOS_SERVER_PATH);
        try {
            commandline = sosCheckout.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""username attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckoutException Username"", buildEx);
        buildEx = false;

        
        sosCheckout.setUsername(SOS_USERNAME);
        try {
            commandline = sosCheckout.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""vssserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckoutException VssServerPath"", buildEx);
        buildEx = false;

        
        sosCheckout.setVssServerPath(VSS_SERVER_PATH);
        try {
            commandline = sosCheckout.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""projectpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""CheckoutException ProjectPath"", buildEx);

        
        sosCheckout.setProjectPath(VSS_PROJECT_PATH);
        try {
            commandline = sosCheckout.buildCmdLine();
            buildEx = true;
        } catch (BuildException be) {
            buildEx = false;
        }
        assertTrue(""CheckoutException All required options set"", buildEx);
    }

    
    public void testLabelFlags() {
        String[] sTestCmdLine = { ""soscmd"", ""-command"", ""AddLabel"", ""-server"",
            SOS_SERVER_PATH, ""-name"", SOS_USERNAME, ""-password"", """", ""-database"",
            VSS_SERVER_PATH , ""-project"", ""$""+VSS_PROJECT_PATH, ""-label"",
            SRC_LABEL, ""-verbose"", ""-log"", SRC_COMMENT };

        
        sosLabel.setVssServerPath(VSS_SERVER_PATH);
        sosLabel.setSosServerPath(SOS_SERVER_PATH);
        sosLabel.setProjectPath(VSS_PROJECT_PATH);
        sosLabel.setUsername(SOS_USERNAME);
        sosLabel.setSosHome(SOS_HOME);
        sosLabel.setComment(SRC_COMMENT);
        sosLabel.setLabel(SRC_LABEL);
        sosLabel.setNoCache(true);
        sosLabel.setNoCompress(false);
        sosLabel.setVerbose(true);

        commandline = sosLabel.buildCmdLine();
        String[] sGeneratedCmdLine = commandline.getCommandline();

        int i = 0;
        while (i < sTestCmdLine.length) {
            try {
                assertEquals(""AddLabel arg # "" + String.valueOf(i),
                                sTestCmdLine[i],
                                sGeneratedCmdLine[i]);
                i++;
            } catch (ArrayIndexOutOfBoundsException aioob) {
                fail(""AddLabel missing arg"");
            }

        }
        if (sGeneratedCmdLine.length > sTestCmdLine.length) {
            
            fail(""AddLabel extra args"");
        }
    }

    
    public void testLabelExceptions() {
        boolean buildEx = false;

        
        sosLabel.setProject(project);
        
        try {
            commandline = sosLabel.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""sosserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""LabelException SosServerPath"", buildEx);
        buildEx = false;

        
        sosLabel.setSosServerPath(SOS_SERVER_PATH);
        try {
            commandline = sosLabel.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""username attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""LabelException Username"", buildEx);
        buildEx = false;

        
        sosLabel.setUsername(SOS_USERNAME);
        try {
            commandline = sosLabel.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""vssserverpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""LabelException VssServerPath"", buildEx);
        buildEx = false;

        
        sosLabel.setVssServerPath(VSS_SERVER_PATH);
        try {
            commandline = sosLabel.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""projectpath attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""LabelException ProjectPath"", buildEx);

        
        sosLabel.setProjectPath(VSS_PROJECT_PATH);
        try {
            commandline = sosLabel.buildCmdLine();
        } catch (BuildException be) {
            if (be.getMessage().compareTo(""label attribute must be set!"") == 0) {
                buildEx = true;
            }
        }
        assertTrue(""LabelException Label"", buildEx);

        
        sosLabel.setLabel(SRC_LABEL);
        try {
            commandline = sosLabel.buildCmdLine();
            buildEx = true;
        } catch (BuildException be) {
            buildEx = false;
        }
        assertTrue(""LabelException All required options set"", buildEx);
    }

}
"
L32423,Class,AbstractFileSetTest,org.apache.tools.ant.types.AbstractFileSetTest,L30406,L103,src/testcases/org/apache/tools/ant/types/AbstractFileSetTest.java,73,1,283,2,0.571611,4,21,8,0.57346,0.602041,121,118,1,1,1,23,4,2,3,20,26,0.2,0.0485437,10,7,1,4,0.0485437,10,0,0,2,2,0,196,211,1,2,1,2,6,0,4,1,6,103,0,4,1,196,211,1,2,1,2,6,0,4,1,6,103,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public abstract class AbstractFileSetTest extends TestCase {

    private Project project;

    public AbstractFileSetTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    protected abstract AbstractFileSet getInstance();

    protected final Project getProject() {
        return project;
    }

    public final void testEmptyElementIfIsReference() {
        AbstractFileSet f = getInstance();
        f.setIncludes(""***.java"");
            fail(""Can set includes in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setIncludesfile(new File(""/a""));
            fail(""Can set includesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setExcludes(""**/*.java"");
            fail(""Can set excludes in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setExcludesfile(new File(""/a""));
            fail(""Can set excludesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.setDir(project.resolveFile("".""));
            fail(""Can set dir in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute ""
                         + ""when using refid"", be.getMessage());
        }
        try {
            f.createInclude();
            fail(""Can add nested include in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createExclude();
            fail(""Can add nested exclude in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createIncludesFile();
            fail(""Can add nested includesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createExcludesFile();
            fail(""Can add nested excludesfile in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
        try {
            f.createPatternSet();
            fail(""Can add nested patternset in ""
                 + f.getDataTypeName()
                 + "" that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using ""
                         + ""refid"", be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        AbstractFileSet f = getInstance();
        project.addReference(""dummy"", f);
        f.setRefid(new Reference(""dummy""));
        try {
            f.getDir(project);
            fail(""Can make "" + f.getDataTypeName() 
                 + "" a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f.getDirectoryScanner(project);
            fail(""Can make "" + f.getDataTypeName() 
                 + "" a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        AbstractFileSet f1 = getInstance();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        AbstractFileSet f2 = getInstance();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        AbstractFileSet f3 = getInstance();
        project.addReference(""dummy3"", f3);
        f3.setRefid(new Reference(""dummy1""));
        try {
            f1.getDir(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f1.getDirectoryScanner(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        f1 = getInstance();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        f2 = getInstance();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        f3 = getInstance();
        project.addReference(""dummy3"", f3);
        f3.setDir(project.resolveFile("".""));
        File dir = f1.getDir(project);
        assertEquals(""Dir is basedir"", dir, project.getBaseDir());
    }
}
"
L32437,Class,CommandlineJavaTest,org.apache.tools.ant.types.CommandlineJavaTest,L30406,L103,src/testcases/org/apache/tools/ant/types/CommandlineJavaTest.java,69,1,160,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,6,6,0,0,20,25,0.166667,0.157303,14,5,1,5,0.157303,14,0,0,0,0,0,75,92,1,0,1,0,5,0,5,1,5,55,0,5,1,75,92,1,0,1,0,5,0,5,1,5,55,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public class CommandlineJavaTest extends TestCase {

    public CommandlineJavaTest(String name) {
        super(name);
    }

    private Project project;

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
        project.setProperty(""build.sysclasspath"", ""ignore"");
    }

    public void testGetCommandline() {
        CommandlineJava c = new CommandlineJava();
        c.createArgument().setValue(""org.apache.tools.ant.CommandlineJavaTest"");
        c.setClassname(""junit.textui.TestRunner"");
        c.createVmArgument().setValue(""-Djava.compiler=NONE"");
        String[] s = c.getCommandline();
        assertEquals(""no classpath"", 4, s.length);
        
        assertEquals(""no classpath"", ""-Djava.compiler=NONE"", s[1]);
        assertEquals(""no classpath"", ""junit.textui.TestRunner"", s[2]);
        assertEquals(""no classpath"",
                     ""org.apache.tools.ant.CommandlineJavaTest"", s[3]);
        try {
            CommandlineJava c2 = (CommandlineJava) c.clone();
        } catch (NullPointerException ex) {
            fail(""cloning should work without classpath specified"");
        }

        c.createClasspath(project).setLocation(project.resolveFile(""lib/optional/junit.jar""));
        c.createClasspath(project).setLocation(project.resolveFile(""bootstrap/lib/ant.jar""));
        s = c.getCommandline();
        assertEquals(""with classpath"", 6, s.length);
        
        assertEquals(""with classpath"", ""-Djava.compiler=NONE"", s[1]);
        assertEquals(""with classpath"", ""-classpath"", s[2]);
        assertTrue(""junit.jar contained"",
               s[3].indexOf(""junit.jar""+java.io.File.pathSeparator) >= 0);
        assertTrue(""ant.jar contained"", s[3].endsWith(""ant.jar""));
        assertEquals(""with classpath"", ""junit.textui.TestRunner"", s[4]);
        assertEquals(""with classpath"",
                     ""org.apache.tools.ant.CommandlineJavaTest"", s[5]);
    }

    public void testJarOption() throws Exception {
        CommandlineJava c = new CommandlineJava();
        c.createArgument().setValue(""arg1"");
        c.setJar(""myfile.jar"");
        c.createVmArgument().setValue(""-classic"");
        c.createVmArgument().setValue(""-Dx=y"");
        String[] s = c.getCommandline();
        assertEquals(""-classic"", s[1]);
        assertEquals(""-Dx=y"", s[2]);
        assertEquals(""-jar"", s[3]);
        assertEquals(""myfile.jar"", s[4]);
        assertEquals(""arg1"", s[5]);
    }

    public void testSysproperties() {
        String currentClasspath = System.getProperty(""java.class.path"");
        assertNotNull(currentClasspath);
        assertNull(System.getProperty(""key""));
        CommandlineJava c = new CommandlineJava();
        Environment.Variable v = new Environment.Variable();
        v.setKey(""key"");
        v.setValue(""value"");
        c.addSysproperty(v);
        try {
            c.setSystemProperties();
            String newClasspath = System.getProperty(""java.class.path"");
            assertNotNull(newClasspath);
            assertEquals(currentClasspath, newClasspath);
            assertNotNull(System.getProperty(""key""));
            assertEquals(""value"", System.getProperty(""key""));
            assertTrue(System.getProperties().containsKey(""java.class.path""));
        } finally {
            c.restoreSystemProperties();
        }
        assertNull(System.getProperty(""key""));
    }

}
"
L32449,Class,CommandlineTest,org.apache.tools.ant.types.CommandlineTest,L30406,L103,src/testcases/org/apache/tools/ant/types/CommandlineTest.java,69,1,158,2,0.336449,1,2,2,0.266667,0.289855,24,20,3,1,1,7,3,0,0,7,11,0.2,0.115385,9,5,1,4,0.115385,9,0,0,0,0,0,69,90,0,0,0,0,4,0,4,0,4,54,0,4,0,69,90,0,0,0,0,4,0,4,0,4,54,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public class CommandlineTest extends TestCase {

    public CommandlineTest(String name) {
        super(name);
    }

    public void testTokenizer() {
        String[] s = Commandline.translateCommandline(""1 2 3"");
        assertEquals(""Simple case"", 3, s.length);
        for (int i=0; i<3; i++) {
            assertEquals(""""+(i+1), s[i]);
        }
        
        s = Commandline.translateCommandline("""");
        assertEquals(""empty string"", 0, s.length);

        s = Commandline.translateCommandline(null);
        assertEquals(""null"", 0, s.length);

        s = Commandline.translateCommandline(""1 \'2\' 3"");
        assertEquals(""Simple case with single quotes"", 3, s.length);
        assertEquals(""Single quotes have been stripped"", ""2"", s[1]);

        s = Commandline.translateCommandline(""1 \""2\"" 3"");
        assertEquals(""Simple case with double quotes"", 3, s.length);
        assertEquals(""Double quotes have been stripped"", ""2"", s[1]);

        s = Commandline.translateCommandline(""1 \""2 3\"" 4"");
        assertEquals(""Case with double quotes and whitespace"", 3, s.length);
        assertEquals(""Double quotes stripped, space included"", ""2 3"", s[1]);
        
        s = Commandline.translateCommandline(""1 \""2\'3\"" 4"");
        assertEquals(""Case with double quotes around single quote"", 3, s.length);
        assertEquals(""Double quotes stripped, single quote included"", ""2\'3"",
                     s[1]);

        s = Commandline.translateCommandline(""1 \'2 3\' 4"");
        assertEquals(""Case with single quotes and whitespace"", 3, s.length);
        assertEquals(""Single quotes stripped, space included"", ""2 3"", s[1]);
        
        s = Commandline.translateCommandline(""1 \'2\""3\' 4"");
        assertEquals(""Case with single quotes around double quote"", 3, s.length);
        assertEquals(""Single quotes stripped, double quote included"", ""2\""3"",
                     s[1]);

        
        
        
        s = Commandline.translateCommandline(""1 2\\ 3 4"");
        assertEquals(""case with quoted whitespace"", 4, s.length);
        assertEquals(""backslash included"", ""2\\"", s[1]);

        
        
        s = Commandline.translateCommandline(""\""\"" a"");
        assertEquals(""Doublequoted null arg prepend"", 2, s.length);
        assertEquals(""Doublequoted null arg prepend"", """", s[0]);
        assertEquals(""Doublequoted null arg prepend"", ""a"", s[1]);
        s = Commandline.translateCommandline(""a \""\"""");
        assertEquals(""Doublequoted null arg append"", 2, s.length);
        assertEquals(""Doublequoted null arg append"", ""a"", s[0]);
        assertEquals(""Doublequoted null arg append"", """", s[1]);
        s = Commandline.translateCommandline(""\""\"""");
        assertEquals(""Doublequoted null arg"", 1, s.length);
        assertEquals(""Doublequoted null arg"", """", s[0]);

        s = Commandline.translateCommandline(""\'\' a"");
        assertEquals(""Singlequoted null arg prepend"", 2, s.length);
        assertEquals(""Singlequoted null arg prepend"", """", s[0]);
        assertEquals(""Singlequoted null arg prepend"", ""a"", s[1]);
        s = Commandline.translateCommandline(""a \'\'"");
        assertEquals(""Singlequoted null arg append"", 2, s.length);
        assertEquals(""Singlequoted null arg append"", ""a"", s[0]);
        assertEquals(""Singlequoted null arg append"", """", s[1]);
        s = Commandline.translateCommandline(""\'\'"");
        assertEquals(""Singlequoted null arg"", 1, s.length);
        assertEquals(""Singlequoted null arg"", """", s[0]);

        
        
        try {
            s = Commandline.translateCommandline(""a \'b c"");
            fail(""unbalanced single quotes undetected"");
        } catch (BuildException be) {
            assertEquals(""unbalanced quotes in a \'b c"", be.getMessage());
        }

        try {
            s = Commandline.translateCommandline(""a \""b c"");
            fail(""unbalanced double quotes undetected"");
        } catch (BuildException be) {
            assertEquals(""unbalanced quotes in a \""b c"", be.getMessage());
        }
    }

    public void testToString() {
        assertEquals("""", Commandline.toString(new String[0]));
        assertEquals("""", Commandline.toString(null));
        assertEquals(""1 2 3"", Commandline.toString(new String[] {""1"", ""2"", ""3""}));
        assertEquals(""1 \""2 3\"""", Commandline.toString(new String[] {""1"", ""2 3""}));
        assertEquals(""1 \""2\'3\"""", Commandline.toString(new String[] {""1"", ""2\'3""}));
        assertEquals(""1 \'2\""3\'"", Commandline.toString(new String[] {""1"", ""2\""3""}));
    }

    public void testAwkCommand(){
        Commandline c = new Commandline();
        c.setExecutable(""awk"");
        c.createArgument().setValue(""'NR == 2 { print $NF }'"");
        String[] s = c.getCommandline();
        assertNotNull(s);
        assertEquals(2, s.length);
        assertEquals(""awk"", s[0]);
        assertEquals(""'NR == 2 { print $NF }'"", s[1]);
    }
}
"
L32456,Class,DescriptionTest,org.apache.tools.ant.types.DescriptionTest,L30406,L103,src/testcases/org/apache/tools/ant/types/DescriptionTest.java,71,1,102,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,2,0,0,3,10,0.125,0.166667,5,5,1,7,0.166667,5,1,1,0,0,1,25,32,6,8,0,0,7,0,7,1,31,9,0,8,1,25,32,6,8,0,0,7,0,7,1,31,9,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.*;


public class DescriptionTest extends BuildFileTest {

    public DescriptionTest(String name) {
        super(name);
    }

    public void setUp() { 
    }

    public void tearDown() {
    }

    public void test1() { 
        configureProject(""src/etc/testcases/types/description1.xml"");
        assertEquals(""Single description failed"", ""Test Project Description"", project.getDescription());
    }

    public void test2() { 
        configureProject(""src/etc/testcases/types/description2.xml"");
        assertEquals(""Multi line description failed"", ""Multi Line\nProject Description"", project.getDescription());
    }
    
    public void test3() { 
        configureProject(""src/etc/testcases/types/description3.xml"");
        assertEquals(""Multi instance description failed"", ""Multi Instance Project Description"", project.getDescription());
    }
    
    public void test4() { 
        configureProject(""src/etc/testcases/types/description4.xml"");
        assertEquals(""Multi instance nested description failed"", ""Multi Instance Nested Project Description"", project.getDescription());
    }
}
"
L32466,Class,DirSetTest,org.apache.tools.ant.types.DirSetTest,L30406,L103,src/testcases/org/apache/tools/ant/types/DirSetTest.java,64,1,100,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,5,8,0,0,9,12,0.333333,0.135135,5,5,1,2,0.135135,5,1,1,0,0,1,32,37,1,2,0,1,3,0,2,0,8,20,0,6,1,32,37,1,2,0,1,3,0,2,0,8,20,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;


public class DirSetTest extends AbstractFileSetTest {

    public DirSetTest(String name) {
        super(name);
    }

    protected AbstractFileSet getInstance() {
        return new DirSet();
    }

    public void testFileSetIsNoDirSet() {
        DirSet ds = (DirSet) getInstance();
        ds.setProject(getProject());
        FileSet fs = new FileSet();
        fs.setProject(getProject());
        getProject().addReference(""dummy"", fs);
        ds.setRefid(new Reference(""dummy""));
        try {
            ds.getDir(getProject());
            fail(""DirSet created from FileSet reference"");
        } catch (BuildException e) {
            assertEquals(""dummy doesn\'t denote a DirSet"", e.getMessage());
        }

        ds = (DirSet) getInstance();
        ds.setProject(getProject());
        getProject().addReference(""dummy2"", ds);
        fs.setRefid(new Reference(""dummy2""));
        try {
            fs.getDir(getProject());
            fail(""FileSet created from DirSet reference"");
        } catch (BuildException e) {
            assertEquals(""dummy2 doesn\'t denote a FileSet"", e.getMessage());
        }
    }

}
"
L32477,Class,EnumeratedAttributeTest,org.apache.tools.ant.types.EnumeratedAttributeTest,L30406,L103,src/testcases/org/apache/tools/ant/types/EnumeratedAttributeTest.java,68,1,124,2,0.0,0,0,0,0.0,0.0,0,0,1,2,2,9,4,1,0,2,5,0.25,0.108696,5,5,1,3,0.0892857,5,0,0,0,0,0,41,47,1,0,1,0,3,0,3,0,3,23,0,3,0,51,57,3,6,1,2,5,0,5,0,19,25,0,17,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;



public class EnumeratedAttributeTest extends TestCase {

    private static String[] expected = {""a"", ""b"", ""c""};

    public EnumeratedAttributeTest(String name) {
        super(name);
    }
    
    public void testContains() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            assertTrue(expected[i]+"" is in TestNormal"",
                   t1.containsValue(expected[i]));
            assertTrue(expected[i].toUpperCase()+"" is in TestNormal"",
                   !t1.containsValue(expected[i].toUpperCase()));
        }
        assertTrue(""TestNormal doesn\'t have \""d\"" attribute"",
               !t1.containsValue(""d""));
        assertTrue(""TestNull doesn\'t have \""d\"" attribute and doesn\'t die"",
               !(new TestNull()).containsValue(""d""));
    }

    public void testExceptions() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            try {
                t1.setValue(expected[i]);
            } catch (BuildException be) {
                fail(""unexpected exception for value ""+expected[i]);
            }
        }
        try {
            t1.setValue(""d"");
            fail(""expected exception for value \""d\"""");
        } catch (BuildException be) {
        }
        try {
            (new TestNull()).setValue(""d"");
            fail(""expected exception for value \""d\"" in TestNull"");
        } catch (BuildException be) {
        } catch (Throwable other) {
            fail(""unexpected death of TestNull: ""+other.getMessage());
        }
    }

    public static class TestNormal extends EnumeratedAttribute {
        public String[] getValues() {
            return expected;
        }
    }

    public static class TestNull extends EnumeratedAttribute {
        public String[] getValues() {
            return null;
        }
    }
}
"
L32483,Class,EnumeratedAttributeTest$TestNormal,org.apache.tools.ant.types.EnumeratedAttributeTest$TestNormal,L32477,L103,src/testcases/org/apache/tools/ant/types/EnumeratedAttributeTest.java,113,5,117,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,2,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;



public class EnumeratedAttributeTest extends TestCase {

    private static String[] expected = {""a"", ""b"", ""c""};

    public EnumeratedAttributeTest(String name) {
        super(name);
    }
    
    public void testContains() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            assertTrue(expected[i]+"" is in TestNormal"",
                   t1.containsValue(expected[i]));
            assertTrue(expected[i].toUpperCase()+"" is in TestNormal"",
                   !t1.containsValue(expected[i].toUpperCase()));
        }
        assertTrue(""TestNormal doesn\'t have \""d\"" attribute"",
               !t1.containsValue(""d""));
        assertTrue(""TestNull doesn\'t have \""d\"" attribute and doesn\'t die"",
               !(new TestNull()).containsValue(""d""));
    }

    public void testExceptions() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            try {
                t1.setValue(expected[i]);
            } catch (BuildException be) {
                fail(""unexpected exception for value ""+expected[i]);
            }
        }
        try {
            t1.setValue(""d"");
            fail(""expected exception for value \""d\"""");
        } catch (BuildException be) {
        }
        try {
            (new TestNull()).setValue(""d"");
            fail(""expected exception for value \""d\"" in TestNull"");
        } catch (BuildException be) {
        } catch (Throwable other) {
            fail(""unexpected death of TestNull: ""+other.getMessage());
        }
    }

    public static class TestNormal extends EnumeratedAttribute {
        public String[] getValues() {
            return expected;
        }
    }

    public static class TestNull extends EnumeratedAttribute {
        public String[] getValues() {
            return null;
        }
    }
}
"
L32490,Class,EnumeratedAttributeTest$TestNull,org.apache.tools.ant.types.EnumeratedAttributeTest$TestNull,L32477,L103,src/testcases/org/apache/tools/ant/types/EnumeratedAttributeTest.java,119,5,123,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,1,0,0,1,0.0,0.0,0,0,0,2,0.0,0,1,1,0,0,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,5,5,2,3,0,1,1,0,1,0,8,1,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;



public class EnumeratedAttributeTest extends TestCase {

    private static String[] expected = {""a"", ""b"", ""c""};

    public EnumeratedAttributeTest(String name) {
        super(name);
    }
    
    public void testContains() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            assertTrue(expected[i]+"" is in TestNormal"",
                   t1.containsValue(expected[i]));
            assertTrue(expected[i].toUpperCase()+"" is in TestNormal"",
                   !t1.containsValue(expected[i].toUpperCase()));
        }
        assertTrue(""TestNormal doesn\'t have \""d\"" attribute"",
               !t1.containsValue(""d""));
        assertTrue(""TestNull doesn\'t have \""d\"" attribute and doesn\'t die"",
               !(new TestNull()).containsValue(""d""));
    }

    public void testExceptions() {
        EnumeratedAttribute t1 = new TestNormal();
        for (int i=0; i<expected.length; i++) {
            try {
                t1.setValue(expected[i]);
            } catch (BuildException be) {
                fail(""unexpected exception for value ""+expected[i]);
            }
        }
        try {
            t1.setValue(""d"");
            fail(""expected exception for value \""d\"""");
        } catch (BuildException be) {
        }
        try {
            (new TestNull()).setValue(""d"");
            fail(""expected exception for value \""d\"" in TestNull"");
        } catch (BuildException be) {
        } catch (Throwable other) {
            fail(""unexpected death of TestNull: ""+other.getMessage());
        }
    }

    public static class TestNormal extends EnumeratedAttribute {
        public String[] getValues() {
            return expected;
        }
    }

    public static class TestNull extends EnumeratedAttribute {
        public String[] getValues() {
            return null;
        }
    }
}
"
L32498,Class,FileListTest,org.apache.tools.ant.types.FileListTest,L30406,L103,src/testcases/org/apache/tools/ant/types/FileListTest.java,74,1,184,2,0.694313,4,20,6,0.63964,0.656566,71,65,1,1,1,12,4,0,0,12,16,0.2,0.1,11,8,1,4,0.1,11,0,0,0,0,0,99,111,1,0,1,0,4,0,4,1,4,64,0,4,1,99,111,1,0,1,0,4,0,4,1,4,64,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class FileListTest extends TestCase {

    private Project project;

    public FileListTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        FileList f = new FileList();
        f.setDir(project.resolveFile("".""));
        try {
            f.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to FileList with directory attribute set."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        f = new FileList();
        f.setFiles(""foo.xml,c/d/bar.xml"");
        try {
            f.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to FileList with file attribute set."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        f = new FileList();
        f.setRefid(new Reference(""dummyref""));
        try {
            f.setFiles(""a/b/foo.java"");
            fail(""Can set files in FileList that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            f.setDir(project.resolveFile("".""));
            fail(""Can set dir in FileList that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        FileList f = new FileList();
        project.addReference(""dummy"", f);
        f.setRefid(new Reference(""dummy""));
        try {
            f.getDir(project);
            fail(""Can make FileList a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f.getFiles(project);
            fail(""Can make FileList a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        FileList f1 = new FileList();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        FileList f2 = new FileList();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        FileList f3 = new FileList();
        project.addReference(""dummy3"", f3);
        f3.setRefid(new Reference(""dummy1""));
        try {
            f1.getDir(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }
        try {
            f1.getFiles(project);
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        f1 = new FileList();
        project.addReference(""dummy1"", f1);
        f1.setRefid(new Reference(""dummy2""));
        f2 = new FileList();
        project.addReference(""dummy2"", f2);
        f2.setRefid(new Reference(""dummy3""));
        f3 = new FileList();
        project.addReference(""dummy3"", f3);
        f3.setDir(project.resolveFile("".""));
        File dir = f1.getDir(project);
        assertEquals(""Dir is basedir"", dir, project.getBaseDir());
    }
}
"
L32511,Class,FileSetTest,org.apache.tools.ant.types.FileSetTest,L30406,L103,src/testcases/org/apache/tools/ant/types/FileSetTest.java,73,1,83,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,0,0,2,4,0.5,0.466667,7,7,1,1,0.466667,7,1,1,0,0,1,8,11,1,2,0,1,2,0,1,0,7,2,0,5,1,8,11,1,2,0,1,2,0,1,0,7,2,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class FileSetTest extends AbstractFileSetTest {

    public FileSetTest(String name) {
        super(name);
    }

    protected AbstractFileSet getInstance() {
        return new FileSet();
    }

}
"
L32516,Class,FilterSetTest,org.apache.tools.ant.types.FilterSetTest,L30406,L103,src/testcases/org/apache/tools/ant/types/FilterSetTest.java,71,1,146,2,0.0,0,0,0,0.0,0.0,0,0,1,4,4,14,1,0,0,3,10,0.142857,0.0869565,6,5,1,6,0.0869565,6,1,1,0,0,1,63,76,7,8,1,0,7,0,6,1,31,36,0,7,1,63,76,7,8,1,0,7,0,6,1,31,36,0,7,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.*;
import java.util.Hashtable;


public class FilterSetTest extends BuildFileTest {

    static private final int BUF_SIZE = 32768;
    
    public FilterSetTest(String name) {
        super(name);
    }

    public void setUp() { 
        configureProject(""src/etc/testcases/types/filterset.xml"");
    }

    public void tearDown() {
        executeTarget(""cleanup"");
    }

    public void test1() { 
        executeTarget(""test1"");
        assertTrue(""Filterset 1 failed"", compareFiles(""src/etc/testcases/types/gold/filterset1.txt"",
                                                      ""src/etc/testcases/types/dest1.txt""));
    }

    public void test2() { 
        executeTarget(""test2"");
        assertTrue(""Filterset 2 failed"", compareFiles(""src/etc/testcases/types/gold/filterset2.txt"",
                                                      ""src/etc/testcases/types/dest2.txt""));
    }

    public void test3() { 
        executeTarget(""test3"");
        assertTrue(""Filterset 3 failed"", compareFiles(""src/etc/testcases/types/gold/filterset3.txt"",
                                                      ""src/etc/testcases/types/dest3.txt""));
    }

    public void testNestedFilterSets() {
        executeTarget(""test-nested-filtersets"");

        FilterSet fs = (FilterSet) getProject().getReference(""1"");
        Hashtable filters = fs.getFilterHash();
        assertEquals(1, filters.size());
        assertEquals(""value1"", filters.get(""token1""));

        fs = (FilterSet) getProject().getReference(""2"");
        filters = fs.getFilterHash();
        assertEquals(2, filters.size());
        assertEquals(""1111"", filters.get(""aaaa""));
        assertEquals(""2222"", filters.get(""bbbb""));

        fs = (FilterSet) getProject().getReference(""3"");
        filters = fs.getFilterHash();
        assertEquals(1, filters.size());
        assertEquals(""value4"", filters.get(""token4""));

        fs = (FilterSet) getProject().getReference(""5"");
        filters = fs.getFilterHash();
        assertEquals(1, filters.size());
        assertEquals(""value1"", filters.get(""token1""));
    }

    private boolean compareFiles(String name1, String name2) {
        File file1 = new File(name1);
        File file2 = new File(name2);
        
        try {
            if (!file1.exists() || !file2.exists()) {
                System.out.println(""One or both files do not exist:"" + name1 + "", "" + name2);
                return false;
            }
            
            if (file1.length() != file2.length()) {
                System.out.println(""File size mismatch:"" + name1 + ""("" + file1.length() + ""), "" + 
                                   name2  + ""("" + file2.length() + "")"");
                return false;
            }
            
            
            byte[] buffer1 = new byte[BUF_SIZE];
            byte[] buffer2 = new byte[BUF_SIZE];
            
            FileInputStream fis1 = new FileInputStream(file1);
            FileInputStream fis2 = new FileInputStream(file2);
            int index = 0;
            int read = 0;
            while ((read = fis1.read(buffer1)) != -1) {
                fis2.read(buffer2);
                for (int i = 0; i < read; ++i, ++index) {
                    if (buffer1[i] != buffer2[i]) {
                        System.out.println(""Bytes mismatch:"" + name1 + "", "" + name2 + 
                                           "" at byte "" + index);
                        return false;
                    }
                }
            }
            return true;
        }
        catch (IOException e) {
            System.out.println(""IOException comparing files: "" + name1 + "", "" + name2);
            return false;
        }
    }
}
"
L32531,Class,FlexIntegerTest,org.apache.tools.ant.types.FlexIntegerTest,L30406,L103,src/testcases/org/apache/tools/ant/types/FlexIntegerTest.java,61,1,109,2,0.0,0,0,0,0.0,0.0,0,0,2,1,1,10,4,0,0,7,15,0.111111,0.128205,5,5,1,8,0.128205,5,1,1,0,0,1,34,49,9,8,3,0,8,0,8,4,32,12,0,9,4,34,49,9,8,3,0,8,0,8,4,32,12,0,9,4,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildException;

public class FlexIntegerTest extends BuildFileTest {

    public FlexIntegerTest(String name) {
        super(name);
    }

    public void setUp() {
        configureProject(""src/etc/testcases/types/flexinteger.xml"");
    }

    public void testFlexInteger() {
        executeTarget(""test"");
        assertEquals(project.getProperty(""flexint.value1""), ""10"");
        assertEquals(project.getProperty(""flexint.value2""), ""8"");
    }

    
    
    private Project taskProject;
    String propName;
    private FlexInteger value;

    
    public FlexIntegerTest() {
        super(""FlexIntegerTest"");
    }

    public void setPropName(String propName) {
        this.propName = propName;
    }

    public void setValue(FlexInteger value) {
        this.value = value;
    }

    public void setProject(Project project) {
        taskProject = project;
    }

    public void execute() {
        if (propName == null || value == null) {
            throw new BuildException(""name and value required"");
        }

        taskProject.setNewProperty(propName, value.toString());
    }
}
"
L32556,Class,MapperTest,org.apache.tools.ant.types.MapperTest,L30406,L103,src/testcases/org/apache/tools/ant/types/MapperTest.java,73,1,206,2,0.31134,4,10,5,0.291045,0.282051,39,33,2,1,1,11,9,0,0,17,22,0.166667,0.0720721,8,5,1,5,0.064,8,0,0,0,0,0,103,117,1,0,1,0,5,0,5,1,5,70,0,5,1,117,134,7,8,1,0,9,0,8,2,33,74,0,9,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class MapperTest extends TestCase {

    private Project project;

    public MapperTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        Mapper m = new Mapper(project);
        m.setFrom(""*.java"");
        try {
            m.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Mapper with from attribute set"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setFrom(""*.java"");
            fail(""Can set from in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setTo(""*.java"");
            fail(""Can set to in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            Mapper.MapperType mt = new Mapper.MapperType();
            mt.setValue(""glob"");
            m.setType(mt);
            fail(""Can set type in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        Mapper m = new Mapper(project);
        project.addReference(""dummy"", m);
        m.setRefid(new Reference(""dummy""));
        try {
            m.getImplementation();
            fail(""Can make Mapper a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        Mapper m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        Mapper m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        Mapper m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        m3.setRefid(new Reference(""dummy1""));
        try {
            m1.getImplementation();
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        Mapper.MapperType mt = new Mapper.MapperType();
        mt.setValue(""glob"");
        m3.setType(mt);
        m3.setFrom(""*.java"");
        m3.setTo(""*.class"");
        FileNameMapper fmm = m1.getImplementation();
        assertTrue(""should be glob"", fmm instanceof GlobPatternMapper);
        String[] result = fmm.mapFileName(""a.java"");
        assertEquals(""a.java should match"", 1, result.length);
        assertEquals(""a.class"", result[0]);
    }

    public void testCopyTaskWithTwoFilesets() {
        TaskdefForCopyTest t = new TaskdefForCopyTest(""test1"");
        try {
            t.setUp();
            t.test1();
        } finally {
            t.tearDown();
        }
    }

    private class TaskdefForCopyTest extends BuildFileTest {
        TaskdefForCopyTest(String name) {
            super(name);
        }

        public void setUp() { 
            configureProject(""src/etc/testcases/types/mapper.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void test1() { 
            executeTarget(""test1"");
        }
    }
}
"
L32567,Class,MapperTest$TaskdefForCopyTest,org.apache.tools.ant.types.MapperTest$TaskdefForCopyTest,L32556,L103,src/testcases/org/apache/tools/ant/types/MapperTest.java,189,5,205,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,1,1,3,7,0.0,0.0,0,0,0,4,0.0,0,1,1,0,0,1,14,17,6,8,0,0,4,0,3,1,28,4,0,4,1,14,17,6,8,0,0,4,0,3,1,28,4,0,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class MapperTest extends TestCase {

    private Project project;

    public MapperTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        Mapper m = new Mapper(project);
        m.setFrom(""*.java"");
        try {
            m.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Mapper with from attribute set"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setFrom(""*.java"");
            fail(""Can set from in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        m = new Mapper(project);
        m.setRefid(new Reference(""dummyref""));
        try {
            m.setTo(""*.java"");
            fail(""Can set to in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            Mapper.MapperType mt = new Mapper.MapperType();
            mt.setValue(""glob"");
            m.setType(mt);
            fail(""Can set type in Mapper that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        Mapper m = new Mapper(project);
        project.addReference(""dummy"", m);
        m.setRefid(new Reference(""dummy""));
        try {
            m.getImplementation();
            fail(""Can make Mapper a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        Mapper m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        Mapper m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        Mapper m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        m3.setRefid(new Reference(""dummy1""));
        try {
            m1.getImplementation();
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        
        m1 = new Mapper(project);
        project.addReference(""dummy1"", m1);
        m1.setRefid(new Reference(""dummy2""));
        m2 = new Mapper(project);
        project.addReference(""dummy2"", m2);
        m2.setRefid(new Reference(""dummy3""));
        m3 = new Mapper(project);
        project.addReference(""dummy3"", m3);
        Mapper.MapperType mt = new Mapper.MapperType();
        mt.setValue(""glob"");
        m3.setType(mt);
        m3.setFrom(""*.java"");
        m3.setTo(""*.class"");
        FileNameMapper fmm = m1.getImplementation();
        assertTrue(""should be glob"", fmm instanceof GlobPatternMapper);
        String[] result = fmm.mapFileName(""a.java"");
        assertEquals(""a.java should match"", 1, result.length);
        assertEquals(""a.class"", result[0]);
    }

    public void testCopyTaskWithTwoFilesets() {
        TaskdefForCopyTest t = new TaskdefForCopyTest(""test1"");
        try {
            t.setUp();
            t.test1();
        } finally {
            t.tearDown();
        }
    }

    private class TaskdefForCopyTest extends BuildFileTest {
        TaskdefForCopyTest(String name) {
            super(name);
        }

        public void setUp() { 
            configureProject(""src/etc/testcases/types/mapper.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void test1() { 
            executeTarget(""test1"");
        }
    }
}
"
L32579,Class,PathTest,org.apache.tools.ant.types.PathTest,L30406,L103,src/testcases/org/apache/tools/ant/types/PathTest.java,74,1,562,2,0.575563,10,41,16,0.541922,0.562077,265,249,1,2,1,54,10,0,0,26,41,0.125,0.0348584,16,7,2,14,0.0348584,16,0,0,0,0,0,443,489,3,0,3,0,15,2,15,1,15,317,2,15,1,443,489,3,0,3,0,15,2,15,1,15,317,2,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.condition.Os;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;
import java.util.Locale;



public class PathTest extends TestCase {

    public static boolean isUnixStyle = File.pathSeparatorChar == ':';
    public static boolean isNetWare = Os.isFamily(""netware"");

    private Project project;

    public PathTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    
    public void testConstructorUnixStyle() {
        Path p = new Path(project, ""/a:/b"");
        String[] l = p.list();
        assertEquals(""two items, Unix style"", 2, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
            assertEquals(""/b"", l[1]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
            assertEquals(""\\b"", l[1]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
            assertEquals("":\\b"", l[1].substring(1));
        }        
    }

    public void testConstructorWindowsStyle() {
        Path p = new Path(project, ""\\a;\\b"");
        String[] l = p.list();
        assertEquals(""two items, DOS style"", 2, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
            assertEquals(""/b"", l[1]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
            assertEquals(""\\b"", l[1]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
            assertEquals("":\\b"", l[1].substring(1));
        }        

        p = new Path(project, ""c:\\test"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        }

        p = new Path(project, ""c:\\test;d:\\programs"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
            assertTrue(""d resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/d""));
            assertEquals(""/programs"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        }

        p = new Path(project, ""c:/test"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 1, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
        }

        p = new Path(project, ""c:/test;d:/programs"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""c resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/c""));
            assertEquals(""/test"", l[1]);
            assertTrue(""d resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/d""));
            assertEquals(""/programs"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""drives on DOS"", 2, l.length);
            assertEquals(""c:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""d:\\programs"", l[1].toLowerCase(Locale.US));
        }
    }

    public void testConstructorNetWareStyle() {
        
        Path p = new Path(project, ""sys:\\test"");
        String[] l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""volumes on NetWare"", 1, l.length);
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
        }

        
        p = new Path(project, ""sys:\\test;dev:\\temp"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/dev""));
            assertEquals(""/temp"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""dev:\\temp"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""\\dev""));
            assertTrue(""temp resolved relative to project\'s basedir"", 
                   l[3].endsWith(""\\temp""));
        }

        
        p = new Path(project, ""sys:/test"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 1, l.length);
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 2, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
        }

        
        p = new Path(project, ""sys:/test;dev:/temp"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/sys""));
            assertEquals(""/test"", l[1]);
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""/dev""));
            assertEquals(""/temp"", l[3]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""sys:\\test"", l[0].toLowerCase(Locale.US));
            assertEquals(""dev:\\temp"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 4, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\sys""));
            assertTrue(""test resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\test""));
            assertTrue(""dev resolved relative to project\'s basedir"", 
                   l[2].endsWith(""\\dev""));
            assertTrue(""temp resolved relative to project\'s basedir"", 
                   l[3].endsWith(""\\temp""));
         }

        
        
        
        p = new Path(project, 
                     ""SYS:\\JAVA/lib/rt.jar:SYS:\\JAVA/lib/classes.zip"");
        l = p.list();
        if (isUnixStyle) {
            assertEquals(""no drives on Unix"", 3, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""/SYS""));
            assertEquals(""/JAVA/lib/rt.jar"", l[1]);
            assertEquals(""/JAVA/lib/classes.zip"", l[2]);
        } else if (isNetWare) {
            assertEquals(""volumes on NetWare"", 2, l.length);
            assertEquals(""sys:\\java\\lib\\rt.jar"", l[0].toLowerCase(Locale.US));
            assertEquals(""sys:\\java\\lib\\classes.zip"", l[1].toLowerCase(Locale.US));
        } else {
            assertEquals(""no multiple character-length volumes on Windows"", 3, l.length);
            assertTrue(""sys resolved relative to project\'s basedir"", 
                   l[0].endsWith(""\\SYS""));
            assertTrue(""java/lib/rt.jar resolved relative to project\'s basedir"", 
                   l[1].endsWith(""\\JAVA\\lib\\rt.jar""));
            assertTrue(""java/lib/classes.zip resolved relative to project\'s basedir"", 
                   l[2].endsWith(""\\JAVA\\lib\\classes.zip""));
        }
    }

    public void testConstructorMixedStyle() {
        Path p = new Path(project, ""\\a;\\b:/c"");
        String[] l = p.list();
        assertEquals(""three items, mixed style"", 3, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
            assertEquals(""/b"", l[1]);
            assertEquals(""/c"", l[2]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
            assertEquals(""\\b"", l[1]);
            assertEquals(""\\c"", l[2]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
            assertEquals("":\\b"", l[1].substring(1));
            assertEquals("":\\c"", l[2].substring(1));
        }        
    }

    public void testSetLocation() {
        Path p = new Path(project);
        p.setLocation(new File(File.separatorChar+""a""));
        String[] l = p.list();
        if (isUnixStyle) {
            assertEquals(1, l.length);
            assertEquals(""/a"", l[0]);
        } else if (isNetWare) {
            assertEquals(1, l.length);
            assertEquals(""\\a"", l[0]);
        } else {
            assertEquals(1, l.length);
            assertEquals("":\\a"", l[0].substring(1));
        }
    }

    public void testAppending() {
        Path p = new Path(project, ""/a:/b"");
        String[] l = p.list();
        assertEquals(""2 after construction"", 2, l.length);
        p.setLocation(new File(""/c""));
        l = p.list();
        assertEquals(""3 after setLocation"", 3, l.length);
        p.setPath(""\\d;\\e"");
        l = p.list();
        assertEquals(""5 after setPath"", 5, l.length);
        p.append(new Path(project, ""\\f""));
        l = p.list();
        assertEquals(""6 after append"", 6, l.length);
        p.createPath().setLocation(new File(""/g""));
        l = p.list();
        assertEquals(""7 after append"", 7, l.length);
    }

    public void testEmpyPath() {
        Path p = new Path(project, """");
        String[] l = p.list();
        assertEquals(""0 after construction"", 0, l.length);
        p.setPath("""");
        l = p.list();
        assertEquals(""0 after setPath"", 0, l.length);
        p.append(new Path(project));
        l = p.list();
        assertEquals(""0 after append"", 0, l.length);
        p.createPath();
        l = p.list();
        assertEquals(""0 after append"", 0, l.length);
    }

    public void testUnique() {
        Path p = new Path(project, ""/a:/a"");
        String[] l = p.list();
        assertEquals(""1 after construction"", 1, l.length);
        p.setLocation(new File(File.separatorChar+""a""));
        l = p.list();
        assertEquals(""1 after setLocation"", 1, l.length);
        p.setPath(""\\a;/a"");
        l = p.list();
        assertEquals(""1 after setPath"", 1, l.length);
        p.append(new Path(project, ""/a;\\a:\\a""));
        l = p.list();
        assertEquals(""1 after append"", 1, l.length);
        p.createPath().setPath(""\\a:/a"");
        l = p.list();
        assertEquals(""1 after append"", 1, l.length);
    }

    public void testEmptyElementIfIsReference() {
        Path p = new Path(project, ""/a:/a"");
        try {
            p.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Path with elements from constructor"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        p = new Path(project);
        p.setLocation(new File(""/a""));
        try {
            p.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to Path with elements from setLocation"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        p = new Path(project);
        p.setRefid(new Reference(""dummyref""));
        try {
            p.setLocation(new File(""/a""));
            fail(""Can set location in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        try {
            p.setPath(""/a;\\a"");
            fail(""Can set path in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        try {
            p.createPath();
            fail(""Can create nested Path in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.createPathElement();
            fail(""Can create nested PathElement in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.addFileset(new FileSet());
            fail(""Can add nested FileSet in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.addFilelist(new FileList());
            fail(""Can add nested FileList in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }

        try {
            p.addDirset(new DirSet());
            fail(""Can add nested Dirset in Path that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {
        Path p = new Path(project);
        project.addReference(""dummy"", p);
        p.setRefid(new Reference(""dummy""));
        try {
            p.list();
            fail(""Can make Path a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        Path p1 = new Path(project);
        project.addReference(""dummy1"", p1);
        Path p2 = p1.createPath();
        project.addReference(""dummy2"", p2);
        Path p3 = p2.createPath();
        project.addReference(""dummy3"", p3);
        p3.setRefid(new Reference(""dummy1""));
        try {
            p1.list();
            fail(""Can make circular reference."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        }

        
        p1 = new Path(project);
        project.addReference(""dummy1"", p1);
        p2 = p1.createPath();
        project.addReference(""dummy2"", p2);
        p3 = p2.createPath();
        project.addReference(""dummy3"", p3);
        p3.setLocation(new File(""/a""));
        String[] l = p1.list();
        assertEquals(""One element buried deep inside a nested path structure"",
                     1, l.length);
        if (isUnixStyle) {
            assertEquals(""/a"", l[0]);
        } else if (isNetWare) {
            assertEquals(""\\a"", l[0]);
        } else {
            assertEquals("":\\a"", l[0].substring(1));
        }
    }

    public void testFileList() {
        Path p = new Path(project);
        FileList f = new FileList();
        f.setProject(project);
        f.setDir(project.resolveFile("".""));
        f.setFiles(""build.xml"");
        p.addFilelist(f);
        String[] l = p.list();
        assertEquals(1, l.length);
        assertEquals(project.resolveFile(""build.xml"").getAbsolutePath(), l[0]);
    }

    public void testFileSet() {
        Path p = new Path(project);
        FileSet f = new FileSet();
        f.setProject(project);
        f.setDir(project.resolveFile("".""));
        f.setIncludes(""build.xml"");
        p.addFileset(f);
        String[] l = p.list();
        assertEquals(1, l.length);
        assertEquals(project.resolveFile(""build.xml"").getAbsolutePath(), l[0]);
    }

    public void testDirSet() {
        Path p = new Path(project);
        DirSet d = new DirSet();
        d.setProject(project);
        d.setDir(project.resolveFile("".""));
        d.setIncludes(""build"");
        p.addDirset(d);
        String[] l = p.list();
        assertEquals(1, l.length);
        assertEquals(project.resolveFile(""build"").getAbsolutePath(), l[0]);
    }

}
"
L32604,Class,PatternSetTest,org.apache.tools.ant.types.PatternSetTest,L30406,L103,src/testcases/org/apache/tools/ant/types/PatternSetTest.java,73,1,241,2,0.703175,6,29,9,0.674556,0.710526,114,108,2,1,1,18,5,0,0,18,23,0.166667,0.0617284,10,7,1,5,0.0617284,10,0,0,0,0,0,152,169,1,0,1,0,5,0,5,1,5,98,0,5,1,152,169,1,0,1,0,5,0,5,1,5,98,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;



public class PatternSetTest extends TestCase {

    private Project project;

    public PatternSetTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");
    }

    public void testEmptyElementIfIsReference() {
        PatternSet p = new PatternSet();
        p.setIncludes(""***.java"");
            fail(""Can set includes in PatternSet that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }

        p = new PatternSet();
        p.setRefid(new Reference(""dummyref""));
        try {
            p.setIncludesfile(new File(""/a""));
            fail(""Can set includesfile in PatternSet that is a reference."");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one attribute when using refid"",
                         be.getMessage());
        }
        try {
            p.setExcludes(""***.java"");

        PatternSet nested = new PatternSet();
        nested.setExcludes(""***.java"", includes[0]);
        assertEquals(""Excludes"",""**/*.class"", excludes[0]);
    }
}
"
L32615,Class,XMLCatalogBuildFileTest,org.apache.tools.ant.types.XMLCatalogBuildFileTest,L30406,L103,src/testcases/org/apache/tools/ant/types/XMLCatalogBuildFileTest.java,72,1,139,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,7,1,0,0,3,10,0.625,0.57971,40,40,5,3,0.57971,40,1,1,0,0,1,29,68,6,8,0,0,7,0,7,1,31,9,0,8,1,29,68,6,8,0,0,7,0,7,1,31,9,0,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class XMLCatalogBuildFileTest extends BuildFileTest {

    public XMLCatalogBuildFileTest(String name) {
        super(name);
    }

    public void setUp() { 
    }

    public void tearDown() {
    }

    
    
    
    
    
    
    
    public void testEntityNoCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testentitynocatalog"", ""val1"", 
                          ""A stitch in time saves nine"");
    }

    
    
    
    
    
    
    
    
    public void testEntityWithCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testentitywithcatalog"", ""val2"", 
                          ""No news is good news"");
    }

    
    
    
    
    
    
    
    
    public void testDocumentNoCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testdocumentnocatalog"", ""val3"", 
                          ""A stitch in time saves nine"");
    }

    
    
    
    
    
    
    
    
    
    public void testDocumentWithCatalog() { 
        configureProject(""src/etc/testcases/types/xmlcatalog.xml"");
        expectPropertySet(""testdocumentwithcatalog"", ""val4"", 
                          ""No news is good news"");
    }
}
"
L32657,Class,XMLCatalogTest,org.apache.tools.ant.types.XMLCatalogTest,L30406,L103,src/testcases/org/apache/tools/ant/types/XMLCatalogTest.java,82,1,430,2,0.385502,4,23,9,0.338109,0.371841,118,103,1,1,1,34,8,0,0,21,35,0.0769231,0.0641892,19,8,1,12,0.0641892,19,0,0,0,0,0,277,349,3,0,3,0,14,0,12,1,14,182,0,12,1,277,349,3,0,3,0,14,0,12,1,14,182,0,12,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DefaultLogger;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.FileUtils;

import junit.framework.TestCase;

import java.io.File;

import java.net.MalformedURLException;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;


public class XMLCatalogTest extends TestCase {

    private Project project;
    private XMLCatalog catalog;
    private FileUtils fileUtils = FileUtils.newFileUtils();

    private XMLCatalog newCatalog() {
        XMLCatalog cat = new XMLCatalog();
        cat.setProject(project);
        return cat;
    }

    private String toURLString(File file) throws MalformedURLException {
        return fileUtils.getFileURL(file).toString();
    }

    public XMLCatalogTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.setBasedir(""."");

        
        
        
        
        
        
        
        
        
        catalog = newCatalog();
    }

   public void tearDown() {
      project = null;
      catalog = null;
   }
   
   public void testEmptyCatalog() {
       try {
           InputSource result = catalog.resolveEntity(""PUBLIC ID ONE"", 
                                                      ""i/dont/exist.dtd"");
           assertNull(""Empty catalog should return null entity"", result);
       } catch (Exception e) {
           fail(""resolveEntity() failed!"" + e.toString());
       }

       try {
           Source result = catalog.resolve(""i/dont/exist.dtd"", null);
           assertEquals(""Empty catalog should resolve to input uri"", 
                        ""i/dont/exist.dtd"", result.getSystemId());
       } catch (Exception e) {
           fail(""resolve() failed!"" + e.toString());
       }
   }

    public void testNonExistentEntry() {

        DTDLocation dtd = new DTDLocation();
        dtd.setPublicId(""PUBLIC ID ONE"");
        dtd.setLocation(""i/dont/exist.dtd"");

        try {
            InputSource result = catalog.resolveEntity(""PUBLIC ID ONE"", 
                                                       ""i/dont/exist.dtd"");
            assertNull(""Nonexistent Catalog entry should not be returned"", result);
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(""i/dont/exist.dtd"", null);
            assertEquals(""Catalog with non-existent entry should"" +
                         "" give up and resolve to input uri"", 
                         ""i/dont/exist.dtd"", result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }

    public void testEmptyElementIfIsReference() {
        try {
            catalog.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to nonexistent XMLCatalog"");
        } catch (BuildException be) {
            assertEquals(""Reference dummyref not found."",
                         be.getMessage());
        }

        DTDLocation dtd = new DTDLocation();
        dtd.setPublicId(""PUBLIC ID ONE"");
        dtd.setLocation(""i/dont/exist.dtd"");
        catalog.addDTD(dtd);
        project.addReference(""catalog"", catalog);
        
        try {
            catalog.setRefid(new Reference(""dummyref""));
            fail(""Can add reference to nonexistent XMLCatalog"");
        } catch (BuildException be) {
            assertEquals(""You must not specify more than one "" 
                         + ""attribute when using refid"", be.getMessage());
        }
        
        XMLCatalog catalog2 = newCatalog();
        catalog2.setRefid(new Reference(""catalog""));

        try {
            catalog2.addConfiguredXMLCatalog(catalog);
            fail(""Can add nested XMLCatalog to XMLCatalog that is a reference"");
        } catch (BuildException be) {
            assertEquals(""You must not specify nested elements when using refid"",
                         be.getMessage());
        }
    }

    public void testCircularReferenceCheck() {

        
        project.addReference(""catalog"", catalog);
        catalog.setRefid(new Reference(""catalog""));

        try {
            InputSource result = catalog.resolveEntity(""PUBLIC ID ONE"", 
                                                       ""i/dont/exist.dtd"");
            fail(""Can make XMLCatalog a Reference to itself."");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        
        XMLCatalog catalog1 = newCatalog();
        project.addReference(""catalog1"", catalog1);
        XMLCatalog catalog2 = newCatalog();
        project.addReference(""catalog2"", catalog2);
        XMLCatalog catalog3 = newCatalog();
        project.addReference(""catalog3"", catalog3);

        catalog3.setRefid(new Reference(""catalog1""));
        catalog2.setRefid(new Reference(""catalog3""));
        catalog1.setRefid(new Reference(""catalog2""));

        try {
            InputSource result = catalog1.resolveEntity(""PUBLIC ID ONE"", 
                                                        ""i/dont/exist.dtd"");
            fail(""Can make circular reference"");
        } catch (BuildException be) {
            assertEquals(""This data type contains a circular reference."",
                         be.getMessage());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }
    }

    public void testSimpleEntry() {

        DTDLocation dtd = new DTDLocation();
        dtd.setPublicId(""-
        String sysid = ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";
        dtd.setLocation(sysid);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(sysid);
        
        try {
            InputSource result = catalog.resolveEntity(""-
                                                       ""nap:chemical+brothers"");
            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }
    }

    public void testEntryReference() {

        String publicId = ""-
        String sysid = ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";

        
        DTDLocation dtd = new DTDLocation();
        dtd.setPublicId(publicId);
        dtd.setLocation(sysid);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(sysid);

        String uri = ""http:
        String uriLoc = ""src/etc/testcases/taskdefs/optional/xml/about.xml"";

        DTDLocation entity = new DTDLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(uriLoc);

        project.addReference(""catalog"", catalog);

        XMLCatalog catalog1 = newCatalog();
        project.addReference(""catalog1"", catalog1);
        XMLCatalog catalog2 = newCatalog();
        project.addReference(""catalog2"", catalog1);

        catalog1.setRefid(new Reference(""catalog""));
        catalog2.setRefid(new Reference(""catalog1""));

        try {
            InputSource result = catalog2.resolveEntity(publicId,
                                                        ""nap:chemical+brothers"");

            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(uri, null);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }

    public void testNestedCatalog() {

        String publicId = ""-
        String dtdLoc = ""src/etc/testcases/taskdefs/optional/xml/doc.dtd"";

        DTDLocation dtd = new DTDLocation();
        dtd.setPublicId(publicId);
        dtd.setLocation(dtdLoc);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(dtdLoc);

        String uri = ""http:
        String uriLoc = ""src/etc/testcases/taskdefs/optional/xml/about.xml"";

        DTDLocation entity = new DTDLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(uriLoc);

        XMLCatalog catalog1 = newCatalog();
        catalog1.addConfiguredXMLCatalog(catalog);

        try {
            InputSource result = catalog1.resolveEntity(publicId,
                                                        ""nap:chemical+brothers"");
            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(uri, null);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }

    }

    public void testResolverBase() {

        String uri = ""http:
        String uriLoc = ""etc/testcases/taskdefs/optional/xml/about.xml"";
        String base = null;
        try {
            base = toURLString(project.getBaseDir()) + ""src/"";
        } catch (MalformedURLException ex) {
            fail (ex.toString());
        }

        DTDLocation entity = new DTDLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(""src/"" + uriLoc);

        try {
            Source result = catalog.resolve(uri, base);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }

    public void testClasspath() {


        String publicId = ""-
        String dtdLoc = ""testcases/taskdefs/optional/xml/doc.dtd"";
        String path1 = project.getBaseDir().toString() + ""/src/etc"";

        DTDLocation dtd = new DTDLocation();
        dtd.setPublicId(publicId);
        dtd.setLocation(dtdLoc);
        catalog.addDTD(dtd);
        File dtdFile = project.resolveFile(""src/etc/"" + dtdLoc);

        String uri = ""http:
        String uriLoc = ""etc/testcases/taskdefs/optional/xml/about.xml"";
        String path2 = project.getBaseDir().toString() + ""/src"";

        DTDLocation entity = new DTDLocation();
        entity.setPublicId(uri);
        entity.setLocation(uriLoc);
        catalog.addEntity(entity);
        File xmlFile = project.resolveFile(""src/"" + uriLoc);

        Path aPath = new Path(project, path1);
        aPath.append(new Path(project, path2));
        catalog.setClasspath(aPath);

        try {
            InputSource result = catalog.resolveEntity(publicId,
                                                       ""nap:chemical+brothers"");
            assertNotNull(result);
            assertEquals(toURLString(dtdFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolveEntity() failed!"" + e.toString());
        }

        try {
            Source result = catalog.resolve(uri, null);
            assertNotNull(result);
            assertEquals(toURLString(xmlFile),
                         result.getSystemId());
        } catch (Exception e) {
            fail(""resolve() failed!"" + e.toString());
        }
    }
}
"
L31174,Class,ClassFileSetTest,org.apache.tools.ant.types.optional.depend.ClassFileSetTest,L31063,L103,src/testcases/org/apache/tools/ant/types/optional/depend/ClassFileSetTest.java,74,1,161,2,0.812102,2,10,5,0.488636,0.632353,43,43,1,1,1,10,5,0,0,7,14,0.625,0.209302,18,17,5,3,0.209302,18,1,1,0,0,1,68,88,7,8,1,0,7,1,7,1,31,44,1,8,1,68,88,7,8,1,0,7,1,7,1,31,44,1,8,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.optional.depend;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.DirectoryScanner;


public class ClassFileSetTest extends BuildFileTest {
    public static final String RESULT_FILESET = ""result"";
    
    public ClassFileSetTest(String name) {
        super(name);
    }

    public void setUp() {
        
        configureProject(""src/etc/testcases/taskdefs/optional/depend/depend.xml"");
    }

    public void tearDown() {
        executeTarget(""clean"");
    }

    
    public void testBasicSet() {
        Project project = getProject();
        executeTarget(""testbasicset"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of "" 
            + ""class files"", 4, files.size());
        assertTrue(""Result did not contain A.class"", 
            files.containsKey(""A.class""));
        assertTrue(""Result did not contain B.class"", 
            files.containsKey(""B.class""));
        assertTrue(""Result did not contain C.class"", 
            files.containsKey(""C.class""));
        assertTrue(""Result did not contain D.class"", 
            files.containsKey(""D.class""));
    }
    
    
    public void testSmallSet() {
        Project project = getProject();
        executeTarget(""testsmallset"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of "" 
            + ""class files"", 2, files.size());
        assertTrue(""Result did not contain B.class"", 
            files.containsKey(""B.class""));
        assertTrue(""Result did not contain C.class"", 
            files.containsKey(""C.class""));
    }

    
    public void testComboSet() {
        Project project = getProject();
        executeTarget(""testcomboset"");
        FileSet resultFileSet = (FileSet)project.getReference(RESULT_FILESET);
        DirectoryScanner scanner = resultFileSet.getDirectoryScanner(project);
        String[] scannedFiles = scanner.getIncludedFiles();
        Hashtable files = new Hashtable();
        for (int i = 0; i < scannedFiles.length; ++i) {
            files.put(scannedFiles[i], scannedFiles[i]);
        }
        assertEquals(""Classfileset did not pick up expected number of "" 
            + ""class files"", 1, files.size());
        assertTrue(""Result did not contain C.class"", 
            files.containsKey(""C.class""));
    }
    
    
    public void testByReference() {
        executeTarget(""testbyreference"");
    }
}
"
L32062,Class,BaseSelectorTest,org.apache.tools.ant.types.selectors.BaseSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/BaseSelectorTest.java,73,1,255,2,0.0,0,0,0,0.0,0.0,0,0,2,2,2,19,5,7,14,12,24,0.666667,0.395833,57,57,6,3,0.347561,57,0,0,7,7,0,87,157,11,2,11,2,12,0,8,1,12,40,0,8,1,107,183,17,10,11,2,18,0,13,2,42,46,0,14,2,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public abstract class BaseSelectorTest extends TestCase {

    private Project project;
    private TaskdefForMakingBed tbed = null;
    protected String basedirname = ""src/etc/testcases/types"";
    protected String beddirname = basedirname + ""/selectortest"";
    protected String mirrordirname = basedirname + ""/selectortest2"";
    protected File basedir = new File(basedirname);
    protected File beddir = new File(beddirname);
    protected File mirrordir = new File(mirrordirname);
    protected String[] filenames = {""."",""asf-logo.gif.md5"",""asf-logo.gif.bz2"",
            ""asf-logo.gif.gz"",""copy.filterset.filtered"",""zip/asf-logo.gif.zip"",
            ""tar/asf-logo.gif.tar"",""tar/asf-logo-huge.tar"",
            ""tar/gz/asf-logo.gif.tar.gz"",""tar/bz2/asf-logo.gif.tar.bz2"",
            ""tar/bz2/asf-logo-huge.tar.bz2"",""tar/bz2""};
    protected File[] files = new File[filenames.length];
    protected File[] mirrorfiles = new File[filenames.length];

    public BaseSelectorTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        project.setBaseDir(basedir);
        for (int x = 0; x < files.length; x++) {
            files[x] = new File(beddir,filenames[x]);
            mirrorfiles[x] = new File(mirrordir,filenames[x]);
        }
    }

    
    public abstract BaseSelector getInstance();


    public Project getProject() {
        return project;
    }

    
    public void testRespondsToError() {
        BaseSelector s = getInstance();
        if (s == null) {
            return;
        }
        s.setError(""test error"");
        try {
            s.isSelected(beddir,filenames[0],files[0]);
            fail(""Cannot cause BuildException when setError() is called"");
        } catch (BuildException be) {
            assertEquals(""test error"",
                         be.getMessage());
        }
    }


    
    public String selectionString(FileSelector selector) {
        return selectionString(beddir,files,selector);
    }

    
    public String mirrorSelectionString(FileSelector selector) {
        return selectionString(mirrordir,mirrorfiles,selector);
    }

    
    public String selectionString(File basedir, File[] files, FileSelector selector) {
        StringBuffer buf = new StringBuffer();
        for (int x = 0; x < files.length; x++) {
            if (selector.isSelected(basedir,filenames[x],files[x])) {
                buf.append('T');
            }
            else {
                buf.append('F');
            }
        }
        return buf.toString();
    }

    
    protected void makeBed() {
        tbed = new TaskdefForMakingBed(""setupfiles"");
        tbed.setUp();
        tbed.makeTestbed();
    }

    
    protected void cleanupBed() {
        if (tbed != null) {
            tbed.tearDown();
            tbed = null;
        }
    }


    
    protected void makeMirror() {
        tbed = new TaskdefForMakingBed(""mirrorfiles"");
        tbed.setUp();
        tbed.makeMirror();
    }

    
    protected void cleanupMirror() {
        if (tbed != null) {
            tbed.deleteMirror();
            tbed = null;
        }
    }

    private class TaskdefForMakingBed extends BuildFileTest {

        TaskdefForMakingBed(String name) {
            super(name);
        }

        public void setUp() {
            configureProject(""src/etc/testcases/types/selectors.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void makeTestbed() {
            executeTarget(""setupfiles"");
        }

        public void makeMirror() {
            executeTarget(""mirrorfiles"");
        }

        public void deleteMirror() {
            executeTarget(""cleanup.mirrorfiles"");
        }
    }



}
"
L32066,Class,BaseSelectorTest$TaskdefForMakingBed,org.apache.tools.ant.types.selectors.BaseSelectorTest$TaskdefForMakingBed,L32062,L103,src/testcases/org/apache/tools/ant/types/selectors/BaseSelectorTest.java,226,5,251,6,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,1,1,4,3,9,0.0,0.0,0,0,0,6,0.0,0,1,1,0,0,1,20,26,6,8,0,0,6,0,5,1,30,6,0,6,1,20,26,6,8,0,0,6,0,5,1,30,6,0,6,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;

import java.io.File;


public abstract class BaseSelectorTest extends TestCase {

    private Project project;
    private TaskdefForMakingBed tbed = null;
    protected String basedirname = ""src/etc/testcases/types"";
    protected String beddirname = basedirname + ""/selectortest"";
    protected String mirrordirname = basedirname + ""/selectortest2"";
    protected File basedir = new File(basedirname);
    protected File beddir = new File(beddirname);
    protected File mirrordir = new File(mirrordirname);
    protected String[] filenames = {""."",""asf-logo.gif.md5"",""asf-logo.gif.bz2"",
            ""asf-logo.gif.gz"",""copy.filterset.filtered"",""zip/asf-logo.gif.zip"",
            ""tar/asf-logo.gif.tar"",""tar/asf-logo-huge.tar"",
            ""tar/gz/asf-logo.gif.tar.gz"",""tar/bz2/asf-logo.gif.tar.bz2"",
            ""tar/bz2/asf-logo-huge.tar.bz2"",""tar/bz2""};
    protected File[] files = new File[filenames.length];
    protected File[] mirrorfiles = new File[filenames.length];

    public BaseSelectorTest(String name) {
        super(name);
    }

    public void setUp() {
        project = new Project();
        project.init();
        project.setBaseDir(basedir);
        for (int x = 0; x < files.length; x++) {
            files[x] = new File(beddir,filenames[x]);
            mirrorfiles[x] = new File(mirrordir,filenames[x]);
        }
    }

    
    public abstract BaseSelector getInstance();


    public Project getProject() {
        return project;
    }

    
    public void testRespondsToError() {
        BaseSelector s = getInstance();
        if (s == null) {
            return;
        }
        s.setError(""test error"");
        try {
            s.isSelected(beddir,filenames[0],files[0]);
            fail(""Cannot cause BuildException when setError() is called"");
        } catch (BuildException be) {
            assertEquals(""test error"",
                         be.getMessage());
        }
    }


    
    public String selectionString(FileSelector selector) {
        return selectionString(beddir,files,selector);
    }

    
    public String mirrorSelectionString(FileSelector selector) {
        return selectionString(mirrordir,mirrorfiles,selector);
    }

    
    public String selectionString(File basedir, File[] files, FileSelector selector) {
        StringBuffer buf = new StringBuffer();
        for (int x = 0; x < files.length; x++) {
            if (selector.isSelected(basedir,filenames[x],files[x])) {
                buf.append('T');
            }
            else {
                buf.append('F');
            }
        }
        return buf.toString();
    }

    
    protected void makeBed() {
        tbed = new TaskdefForMakingBed(""setupfiles"");
        tbed.setUp();
        tbed.makeTestbed();
    }

    
    protected void cleanupBed() {
        if (tbed != null) {
            tbed.tearDown();
            tbed = null;
        }
    }


    
    protected void makeMirror() {
        tbed = new TaskdefForMakingBed(""mirrorfiles"");
        tbed.setUp();
        tbed.makeMirror();
    }

    
    protected void cleanupMirror() {
        if (tbed != null) {
            tbed.deleteMirror();
            tbed = null;
        }
    }

    private class TaskdefForMakingBed extends BuildFileTest {

        TaskdefForMakingBed(String name) {
            super(name);
        }

        public void setUp() {
            configureProject(""src/etc/testcases/types/selectors.xml"");
        }

        public void tearDown() {
            executeTarget(""cleanup"");
        }

        public void makeTestbed() {
            executeTarget(""setupfiles"");
        }

        public void makeMirror() {
            executeTarget(""mirrorfiles"");
        }

        public void deleteMirror() {
            executeTarget(""cleanup.mirrorfiles"");
        }
    }



}
"
L32132,Class,ContainsSelectorTest,org.apache.tools.ant.types.selectors.ContainsSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/ContainsSelectorTest.java,71,1,153,2,0.880658,5,8,5,0.554217,0.689655,46,40,1,1,1,6,6,0,0,11,15,0.8,0.205479,15,15,4,1,0.205479,15,1,1,0,0,1,58,83,12,2,1,1,4,0,4,0,15,40,0,11,1,58,83,12,2,1,1,4,0,4,0,15,40,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class ContainsSelectorTest extends BaseSelectorTest {

    private Project project;

    public ContainsSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new ContainsSelector();
    }

    
    public void testValidate() {
        ContainsSelector s = (ContainsSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""ContainsSelector did not check for required field 'text'"");
        } catch (BuildException be1) {
            assertEquals(""The text attribute is required"", be1.getMessage());
        }

        s = (ContainsSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = {param};
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""ContainsSelector did not check for valid parameter element"");
        } catch (BuildException be2) {
            assertEquals(""Invalid parameter garbage in"", be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        ContainsSelector s;
        String results;

        try {
            makeBed();

            s = (ContainsSelector)getInstance();
            s.setText(""no such string in test files"");
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""Apache Ant"");
            results = selectionString(s);
            assertEquals(""TFFFTFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""apache ant"");
            s.setCasesensitive(true);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (ContainsSelector)getInstance();
            s.setText(""apache ant"");
            s.setCasesensitive(false);
            results = selectionString(s);
            assertEquals(""TFFFTFFFFFFT"", results);

        }
        finally {
            cleanupBed();
        }

    }

}
"
L32156,Class,DateSelectorTest,org.apache.tools.ant.types.selectors.DateSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/DateSelectorTest.java,75,1,282,2,0.301337,6,19,7,0.245192,0.280702,51,48,1,2,2,11,9,0,0,20,24,0.8,0.0806452,15,15,4,1,0.0806452,15,1,1,0,0,1,171,208,12,2,1,1,4,0,4,0,15,129,0,11,1,171,208,12,2,1,1,4,0,4,0,15,129,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.text.SimpleDateFormat;
import java.text.ParsePosition;
import java.util.Date;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class DateSelectorTest extends BaseSelectorTest {

    private Project project;

    public DateSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new DateSelector();
    }

    
    public void testValidate() {
        DateSelector s = (DateSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""You must provide a datetime or the number of ""
                    + ""milliseconds."", be1.getMessage());
        }

        s = (DateSelector)getInstance();
        s.setDatetime(""01/01/1969 01:01 AM"");
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for Datetime being in the ""
                    + ""allowable range"");
        } catch (BuildException be2) {
            assertEquals(""Date of 01/01/1969 01:01 AM results in negative ""
                    + ""milliseconds value relative to epoch (January 1, ""
                    + ""1970, 00:00:00 GMT)."", be2.getMessage());
        }

        s = (DateSelector)getInstance();
        s.setDatetime(""this is not a date"");
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for Datetime being in a ""
                    + ""valid format"");
        } catch (BuildException be3) {
            assertEquals(""Date of this is not a date""
                        + "" Cannot be parsed correctly. It should be in""
                        + "" MM/DD/YYYY HH:MM AM_PM format."", be3.getMessage());
        }

        s = (DateSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = new Parameter[1];
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for valid parameter element"");
        } catch (BuildException be4) {
            assertEquals(""Invalid parameter garbage in"", be4.getMessage());
        }

        s = (DateSelector)getInstance();
        param = new Parameter();
        param.setName(""millis"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for valid millis parameter"");
        } catch (BuildException be5) {
            assertEquals(""Invalid millisecond setting garbage out"",
                    be5.getMessage());
        }

        s = (DateSelector)getInstance();
        param = new Parameter();
        param.setName(""granularity"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DateSelector did not check for valid granularity parameter"");
        } catch (BuildException be6) {
            assertEquals(""Invalid granularity setting garbage out"",
                    be6.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        DateSelector s;
        String results;

        DateSelector.TimeComparisons before = new
                DateSelector.TimeComparisons();
        before.setValue(""before"");
        DateSelector.TimeComparisons equal = new
                DateSelector.TimeComparisons();
        equal.setValue(""equal"");
        DateSelector.TimeComparisons after = new
                DateSelector.TimeComparisons();
        after.setValue(""after"");

        try {
            makeBed();

            s = (DateSelector)getInstance();
            s.setDatetime(""10/10/1999 1:45 PM"");
            s.setWhen(before);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (DateSelector)getInstance();
            s.setDatetime(""10/10/1999 1:45 PM"");
            s.setWhen(before);
            s.setCheckdirs(true);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (DateSelector)getInstance();
            s.setDatetime(""10/10/1999 1:45 PM"");
            s.setWhen(after);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
                s = (DateSelector)getInstance();
                s.setDatetime(""11/21/2001 4:54 AM"");
                s.setWhen(before);
                results = selectionString(s);
                assertEquals(""TFTFFFFFFFFT"", results);

                s = (DateSelector)getInstance();
                s.setDatetime(""11/21/2001 4:55 AM"");
                SimpleDateFormat formatter = new SimpleDateFormat();
                Date d = formatter.parse(""11/21/2001 4:55 AM"",new ParsePosition(0));

                long milliseconds = s.getMillis();
                s.setWhen(equal);
                results = selectionString(s);
                assertEquals(""TTFFTFFFTTTT"", results);

                s = (DateSelector)getInstance();
                s.setMillis(milliseconds);
                s.setWhen(equal);
                results = selectionString(s);
                assertEquals(""TTFFTFFFTTTT"", results);

                s = (DateSelector)getInstance();
                s.setDatetime(""11/21/2001 4:56 AM"");
                s.setWhen(after);
                results = selectionString(s);
                assertEquals(""TFFTFTTTFFFT"", results);

                s = (DateSelector)getInstance();
                Parameter param1 = new Parameter();
                Parameter param2 = new Parameter();
                param1.setName(""datetime"");
                param1.setValue(""11/21/2001 4:56 AM"");
                param2.setName(""when"");
                param2.setValue(""after"");
                Parameter[] params = {param1,param2};
                s.setParameters(params);
                results = selectionString(s);
                assertEquals(""TFFTFTTTFFFT"", results);
            }
            try {
                makeMirror();

                s = (DateSelector)getInstance();
                long testtime = mirrorfiles[5].lastModified();
                s.setMillis(testtime);
                s.setWhen(after);
                s.setGranularity(2);
                results = mirrorSelectionString(s);
                assertEquals(""TFFFFTTTTTTT"", results);

                s = (DateSelector)getInstance();
                testtime = mirrorfiles[6].lastModified();
                s.setMillis(testtime);
                s.setWhen(before);
                s.setGranularity(2);
                results = mirrorSelectionString(s);
                assertEquals(""TTTTTTTFFFFT"", results);
            }
            finally {
                cleanupMirror();
            }

        }
        finally {
            cleanupBed();
        }

    }

}
"
L32184,Class,DependSelectorTest,org.apache.tools.ant.types.selectors.DependSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/DependSelectorTest.java,76,1,218,2,0.257463,2,4,2,0.237762,0.267857,34,30,1,2,2,7,9,0,0,19,23,0.8,0.125,16,15,4,1,0.125,16,1,1,0,0,1,112,143,12,2,1,1,4,0,4,0,15,88,0,11,1,112,143,12,2,1,1,4,0,4,0,15,88,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Mapper;
import org.apache.tools.ant.util.FileNameMapper;
import org.apache.tools.ant.util.IdentityMapper;
import org.apache.tools.ant.util.GlobPatternMapper;
import org.apache.tools.ant.util.JavaEnvUtils;

import java.io.File;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class DependSelectorTest extends BaseSelectorTest {

    private Project project;

    public DependSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new DependSelector();
    }

    
    public void testValidate() {
        DependSelector s = (DependSelector)getInstance();
        try {
            s.createMapper();
            s.createMapper();
            fail(""DependSelector allowed more than one nested mapper."");
        } catch (BuildException be1) {
            assertEquals(""Cannot define more than one mapper"",
                    be1.getMessage());
        }

        s = (DependSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DependSelector did not check for required fields"");
        } catch (BuildException be2) {
            assertEquals(""The targetdir attribute is required."",
                    be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        DependSelector s;
        String results;
        File subdir;
        Mapper m;
        Mapper.MapperType identity = new Mapper.MapperType();
        identity.setValue(""identity"");
        Mapper.MapperType glob = new Mapper.MapperType();
        glob.setValue(""glob"");
        Mapper.MapperType merge = new Mapper.MapperType();
        merge.setValue(""merge"");

        try {
            makeBed();

            s = (DependSelector)getInstance();
            s.setTargetdir(beddir);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (DependSelector)getInstance();
            s.setTargetdir(beddir);
            m = s.createMapper();
            m.setType(identity);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            if (!JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
                s = (DependSelector)getInstance();
                s.setTargetdir(beddir);
                m = s.createMapper();
                m.setType(merge);
                m.setTo(""asf-logo.gif.gz"");
                results = selectionString(s);
                assertEquals(""TFFFFTTTFFF"", results.substring(0,11));

                s = (DependSelector)getInstance();
                s.setTargetdir(beddir);
                m = s.createMapper();
                m.setType(merge);
                m.setTo(""asf-logo.gif.bz2"");
                results = selectionString(s);
                assertEquals(""TTFTTTTTTTTT"", results);

                
                s = (DependSelector)getInstance();
                subdir = new File(""selectortest/tar/bz2"");
                s.setTargetdir(subdir);
                m = s.createMapper();
                m.setType(glob);
                m.setFrom(""*.bz2"");
                m.setTo(""*.tar.bz2"");
                results = selectionString(s);
                assertEquals(""FFTFFFFFFTTF"", results);
            }

            s = (DependSelector)getInstance();
            subdir = new File(beddir,""tar/bz2"");
            s.setTargetdir(subdir);
            m = s.createMapper();
            m.setType(glob);
            m.setFrom(""*.bz2"");
            m.setTo(""*.tar.bz2"");
            results = selectionString(s);
            assertEquals(""FFFFFFFFFTTF"", results);

            try {
                makeMirror();

                s = (DependSelector)getInstance();
                File testdir = getProject().resolveFile(""selectortest2"");
                s.setTargetdir(testdir);
                results = selectionString(s);
                assertEquals(""FFFTTFFFFFFF"", results);

                s = (DependSelector)getInstance();
                testdir = getProject().resolveFile(""selectortest2/tar/bz2"");
                s.setTargetdir(testdir);
                m = s.createMapper();
                m.setType(glob);
                m.setFrom(""*.bz2"");
                m.setTo(""*.tar.bz2"");
                results = mirrorSelectionString(s);
                assertEquals(""FFFFFFFFFTTF"", results);
                results = selectionString(s);
                assertEquals(""FFFFFFFFFTTF"", results);
            }
            finally {
                cleanupMirror();
            }

        }
        finally {
            cleanupBed();
        }

    }

}
"
L32201,Class,DepthSelectorTest,org.apache.tools.ant.types.selectors.DepthSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/DepthSelectorTest.java,71,1,200,2,0.553377,7,21,8,0.4,0.485149,52,49,1,1,1,9,6,0,0,11,15,0.8,0.12931,15,15,4,1,0.12931,15,1,1,0,0,1,101,130,12,2,1,1,4,0,4,0,15,72,0,11,1,101,130,12,2,1,1,4,0,4,0,15,72,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class DepthSelectorTest extends BaseSelectorTest {

    private Project project;

    public DepthSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new DepthSelector();
    }

    
    public void testValidate() {
        DepthSelector s = (DepthSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""You must set at least one of the min or the "" +
                    ""max levels."", be1.getMessage());
        }

        s = (DepthSelector)getInstance();
        s.setMin(5);
        s.setMax(2);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector did not check for maximum being higher ""
                    + ""than minimum"");
        } catch (BuildException be2) {
            assertEquals(""The maximum depth is lower than the minimum."",
                    be2.getMessage());
        }

        s = (DepthSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = new Parameter[1];
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector did not check for valid parameter element"");
        } catch (BuildException be3) {
            assertEquals(""Invalid parameter garbage in"", be3.getMessage());
        }

        s = (DepthSelector)getInstance();
        param = new Parameter();
        param.setName(""min"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector accepted bad minimum as parameter"");
        } catch (BuildException be4) {
            assertEquals(""Invalid minimum value garbage out"",
                    be4.getMessage());
        }

        s = (DepthSelector)getInstance();
        param = new Parameter();
        param.setName(""max"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""DepthSelector accepted bad maximum as parameter"");
        } catch (BuildException be5) {
            assertEquals(""Invalid maximum value garbage out"",
                    be5.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        DepthSelector s;
        String results;

        try {
            makeBed();

            s = (DepthSelector)getInstance();
            s.setMin(20);
            s.setMax(25);
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (DepthSelector)getInstance();
            s.setMin(0);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (DepthSelector)getInstance();
            s.setMin(1);
            results = selectionString(s);
            assertEquals(""FFFFFTTTTTTT"", results);

            s = (DepthSelector)getInstance();
            s.setMax(0);
            results = selectionString(s);
            assertEquals(""TTTTTFFFFFFF"", results);

            s = (DepthSelector)getInstance();
            s.setMin(1);
            s.setMax(1);
            results = selectionString(s);
            assertEquals(""FFFFFTTTFFFT"", results);

        }
        finally {
            cleanupBed();
        }

    }

}
"
L32216,Class,FilenameSelectorTest,org.apache.tools.ant.types.selectors.FilenameSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/FilenameSelectorTest.java,71,1,167,2,0.763251,5,8,5,0.474227,0.615385,46,40,1,1,1,6,6,0,0,12,16,0.8,0.244186,21,15,4,1,0.244186,21,1,1,0,0,1,65,97,12,2,1,1,4,0,4,0,15,47,0,11,1,65,97,12,2,1,1,4,0,4,0,15,47,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class FilenameSelectorTest extends BaseSelectorTest {

    private Project project;

    public FilenameSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new FilenameSelector();
    }

    
    public void testValidate() {
        FilenameSelector s = (FilenameSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""FilenameSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""The name attribute is required"", be1.getMessage());
        }

        s = (FilenameSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = {param};
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""FilenameSelector did not check for valid parameter element"");
        } catch (BuildException be2) {
            assertEquals(""Invalid parameter garbage in"", be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        FilenameSelector s;
        String results;

        try {
            makeBed();

            s = (FilenameSelector)getInstance();
            s.setName(""no match possible"");
            results = selectionString(s);
            assertEquals(""FFFFFFFFFFFF"", results);

            s = (FilenameSelector)getInstance();
            s.setName(""*.gz"");
            results = selectionString(s);
            
            
            
            
            
            

            s = (FilenameSelector)getInstance();
            s.setName(""***.GZ"");
            s.setCasesensitive(false);
            results = selectionString(s);
            assertEquals(""FFFTFFFFTFFF"", results);

            s = (FilenameSelector)getInstance();
            Parameter param1 = new Parameter();
            param1.setName(""name"");
            param1.setValue(""**/*.bz2"");
            Parameter[] params = {param1};
            s.setParameters(params);
            results = selectionString(s);
            assertEquals(""FFTFFFFFFTTF"", results);

        }
        finally {
            cleanupBed();
        }

    }

}
"
L32231,Class,PresentSelectorTest,org.apache.tools.ant.types.selectors.PresentSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/PresentSelectorTest.java,76,1,202,2,0.455172,3,5,3,0.346457,0.412371,44,40,1,2,2,7,9,0,0,19,23,0.8,0.133929,15,15,4,1,0.133929,15,1,1,0,0,1,97,127,12,2,1,1,4,0,4,0,15,72,0,11,1,97,127,12,2,1,1,4,0,4,0,15,72,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Mapper;
import org.apache.tools.ant.util.FileNameMapper;
import org.apache.tools.ant.util.IdentityMapper;
import org.apache.tools.ant.util.GlobPatternMapper;

import java.io.File;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class PresentSelectorTest extends BaseSelectorTest {

    private Project project;

    public PresentSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new PresentSelector();
    }

    
    public void testValidate() {
        PresentSelector s = (PresentSelector)getInstance();
        try {
            s.createMapper();
            s.createMapper();
            fail(""PresentSelector allowed more than one nested mapper."");
        } catch (BuildException be1) {
            assertEquals(""Cannot define more than one mapper"",
                    be1.getMessage());
        }

        s = (PresentSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""PresentSelector did not check for required fields"");
        } catch (BuildException be2) {
            assertEquals(""The targetdir attribute is required."",
                    be2.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        PresentSelector s;
        String results;
        Mapper m;
        Mapper.MapperType identity = new Mapper.MapperType();
        identity.setValue(""identity"");
        Mapper.MapperType glob = new Mapper.MapperType();
        glob.setValue(""glob"");
        Mapper.MapperType merge = new Mapper.MapperType();
        merge.setValue(""merge"");
        Mapper.MapperType flatten = new Mapper.MapperType();
        flatten.setValue(""flatten"");

        try {
            makeBed();

            s = (PresentSelector)getInstance();
            s.setTargetdir(beddir);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (PresentSelector)getInstance();
            s.setTargetdir(beddir);
            m = s.createMapper();
            m.setType(identity);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (PresentSelector)getInstance();
            File subdir = new File(""src/etc/testcases/taskdefs/expected"");
            s.setTargetdir(subdir);
            m = s.createMapper();
            m.setType(flatten);
            results = selectionString(s);
	    if (JavaEnvUtils.isJavaVersion(JavaEnvUtils.JAVA_1_1)) {
                assertEquals(""TTTTTFFFFFFF"", results);
            } else {
                assertEquals(""TTTTTTTTTTTF"", results);
            }

            s = (PresentSelector)getInstance();
            s.setTargetdir(beddir);
            m = s.createMapper();
            m.setType(merge);
            m.setTo(""asf-logo.gif.gz"");
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (PresentSelector)getInstance();
            subdir = new File(beddir, ""tar/bz2"");
            s.setTargetdir(subdir);
            m = s.createMapper();
            m.setType(glob);
            m.setFrom(""*.bz2"");
            m.setTo(""*.tar.bz2"");
            results = selectionString(s);
            assertEquals(""FFTFFFFFFFFF"", results);

            try {
                makeMirror();

                s = (PresentSelector)getInstance();
                subdir = getProject().resolveFile(""selectortest2"");
                s.setTargetdir(subdir);
                results = mirrorSelectionString(s);
                assertEquals(""TTTFFTTTTTTT"", results);
                results = selectionString(s);
                assertEquals(""TTTFFTTTTTTT"", results);


            }
            finally {
                cleanupMirror();
            }

        }
        finally {
            cleanupBed();
        }

    }

}
"
L32247,Class,SizeSelectorTest,org.apache.tools.ant.types.selectors.SizeSelectorTest,L31402,L103,src/testcases/org/apache/tools/ant/types/selectors/SizeSelectorTest.java,71,1,243,2,0.522727,8,17,9,0.427746,0.468085,74,66,1,1,1,9,9,0,0,13,17,0.8,0.0961538,15,15,4,1,0.0961538,15,1,1,0,0,1,141,173,12,2,1,1,4,0,4,0,15,112,0,11,1,141,173,12,2,1,1,4,0,4,0,15,112,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.types.selectors;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.*;
import org.apache.tools.ant.BuildFileTest;
import org.apache.tools.ant.types.Parameter;

import junit.framework.TestCase;
import junit.framework.AssertionFailedError;


public class SizeSelectorTest extends BaseSelectorTest {

    private Project project;

    public SizeSelectorTest(String name) {
        super(name);
    }

    
    public BaseSelector getInstance() {
        return new SizeSelector();
    }

    
    public void testValidate() {
        SizeSelector s = (SizeSelector)getInstance();
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector did not check for required fields"");
        } catch (BuildException be1) {
            assertEquals(""The value attribute is required, and must ""
                    + ""be positive"", be1.getMessage());
        }

        s = (SizeSelector)getInstance();
        s.setValue(-10);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector did not check for value being in the ""
                    + ""allowable range"");
        } catch (BuildException be2) {
            assertEquals(""The value attribute is required, and must ""
                    + ""be positive"", be2.getMessage());
        }

        s = (SizeSelector)getInstance();
        Parameter param = new Parameter();
        param.setName(""garbage in"");
        param.setValue(""garbage out"");
        Parameter[] params = {param};
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector did not check for valid parameter element"");
        } catch (BuildException be3) {
            assertEquals(""Invalid parameter garbage in"", be3.getMessage());
        }

        s = (SizeSelector)getInstance();
        param = new Parameter();
        param.setName(""value"");
        param.setValue(""garbage out"");
        params[0] = param;
        s.setParameters(params);
        try {
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector accepted bad value as parameter"");
        } catch (BuildException be4) {
            assertEquals(""Invalid size setting garbage out"",
                    be4.getMessage());
        }

        s = (SizeSelector)getInstance();
        Parameter param1 = new Parameter();
        Parameter param2 = new Parameter();
        param1.setName(""value"");
        param1.setValue(""5"");
        param2.setName(""units"");
        param2.setValue(""garbage out"");
        params = new Parameter[2];
        params[0] = param1;
        params[1] = param2;
        try {
            s.setParameters(params);
            s.isSelected(basedir,filenames[0],files[0]);
            fail(""SizeSelector accepted bad units as parameter"");
        } catch (BuildException be5) {
            assertEquals(""garbage out is not a legal value for this attribute"",
                    be5.getMessage());
        }

    }

    
    public void testSelectionBehaviour() {
        SizeSelector s;
        String results;

        SizeSelector.ByteUnits kilo = new SizeSelector.ByteUnits();
        kilo.setValue(""K"");
        SizeSelector.ByteUnits kibi = new SizeSelector.ByteUnits();
        kibi.setValue(""Ki"");
        SizeSelector.ByteUnits tibi = new SizeSelector.ByteUnits();
        tibi.setValue(""Ti"");
        SizeSelector.SizeComparisons less = new SizeSelector.SizeComparisons();
        less.setValue(""less"");
        SizeSelector.SizeComparisons equal = new SizeSelector.SizeComparisons();
        equal.setValue(""equal"");
        SizeSelector.SizeComparisons more = new SizeSelector.SizeComparisons();
        more.setValue(""more"");


        try {
            makeBed();

            s = (SizeSelector)getInstance();
            s.setValue(10);
            s.setWhen(less);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(10);
            s.setWhen(more);
            results = selectionString(s);
            assertEquals(""TTTTTTTTTTTT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(32);
            s.setWhen(equal);
            results = selectionString(s);
            assertEquals(""TTFFTFFFFFFT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(7);
            s.setWhen(more);
            s.setUnits(kilo);
            results = selectionString(s);
            assertEquals(""TFTFFTTTTTTT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(7);
            s.setWhen(more);
            s.setUnits(kibi);
            results = selectionString(s);
            assertEquals(""TFTFFFTTFTTT"", results);

            s = (SizeSelector)getInstance();
            s.setValue(99999);
            s.setWhen(more);
            s.setUnits(tibi);
            results = selectionString(s);
            assertEquals(""TFFFFFFFFFFT"", results);

            s = (SizeSelector)getInstance();
            Parameter param1 = new Parameter();
            Parameter param2 = new Parameter();
            Parameter param3 = new Parameter();
            param1.setName(""value"");
            param1.setValue(""20"");
            param2.setName(""units"");
            param2.setValue(""Ki"");
            param3.setName(""when"");
            param3.setValue(""more"");
            Parameter[] params = {param1,param2,param3};
            s.setParameters(params);
            results = selectionString(s);
            assertEquals(""TFFFFFFTFFTT"", results);
        }
        finally {
            cleanupBed();
        }

    }

}
"
L33900,Class,CollectionUtilsTest,org.apache.tools.ant.util.CollectionUtilsTest,L32746,L103,src/testcases/org/apache/tools/ant/util/CollectionUtilsTest.java,70,1,139,2,0.0,0,0,0,0.0,0.0,0,0,2,0,0,3,1,0,0,2,5,0.25,0.0821918,6,6,1,3,0.0821918,6,0,0,0,0,0,67,70,0,0,0,0,3,0,3,0,3,59,0,3,0,67,70,0,0,0,0,3,0,3,0,3,59,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import java.util.Hashtable;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;

import junit.framework.TestCase;


public class CollectionUtilsTest extends TestCase {

    public CollectionUtilsTest(String name) {
        super(name);
    }

    public void testVectorEquals() {
        assertTrue(!CollectionUtils.equals(null, new Vector()));
        assertTrue(!CollectionUtils.equals(new Vector(), null));
        assertTrue(CollectionUtils.equals(new Vector(), new Vector()));
        Vector v1 = new Vector();
        Stack s2 = new Stack();
        v1.addElement(""foo"");
        s2.push(""foo"");
        assertTrue(CollectionUtils.equals(v1, s2));
        assertTrue(CollectionUtils.equals(s2, v1));
        v1.addElement(""bar"");
        assertTrue(!CollectionUtils.equals(v1, s2));
        assertTrue(!CollectionUtils.equals(s2, v1));
        s2.push(""bar"");
        assertTrue(CollectionUtils.equals(v1, s2));
        assertTrue(CollectionUtils.equals(s2, v1));
        s2.push(""baz"");
        assertTrue(!CollectionUtils.equals(v1, s2));
        assertTrue(!CollectionUtils.equals(s2, v1));
        v1.addElement(""baz"");
        assertTrue(CollectionUtils.equals(v1, s2));
        assertTrue(CollectionUtils.equals(s2, v1));
        v1.addElement(""zyzzy"");
        s2.push(""zyzzy2"");
        assertTrue(!CollectionUtils.equals(v1, s2));
        assertTrue(!CollectionUtils.equals(s2, v1));
    }

    public void testDictionaryEquals() {
        assertTrue(!CollectionUtils.equals(null, new Hashtable()));
        assertTrue(!CollectionUtils.equals(new Hashtable(), null));
        assertTrue(CollectionUtils.equals(new Hashtable(), new Properties()));
        Hashtable h1 = new Hashtable();
        Properties p2 = new Properties();
        h1.put(""foo"", """");
        p2.put(""foo"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        h1.put(""bar"", """");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
        p2.put(""bar"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        p2.put(""baz"", """");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
        h1.put(""baz"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        h1.put(""zyzzy"", """");
        p2.put(""zyzzy2"", """");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
        p2.put(""zyzzy"", """");
        h1.put(""zyzzy2"", """");
        assertTrue(CollectionUtils.equals(h1, p2));
        assertTrue(CollectionUtils.equals(p2, h1));
        h1.put(""dada"", ""1"");
        p2.put(""dada"", ""2"");
        assertTrue(!CollectionUtils.equals(h1, p2));
        assertTrue(!CollectionUtils.equals(p2, h1));
    }
}
"
L33926,Class,DOMElementWriterTest,org.apache.tools.ant.util.DOMElementWriterTest,L32746,L103,src/testcases/org/apache/tools/ant/util/DOMElementWriterTest.java,66,1,122,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,4,1,0,0,4,8,0.2,0.0877193,5,5,1,4,0.0877193,5,0,0,0,0,0,52,57,1,0,1,0,4,0,4,0,4,41,0,4,0,52,57,1,0,1,0,4,0,4,0,4,41,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class DOMElementWriterTest extends TestCase {

    private DOMElementWriter w = new DOMElementWriter();

    public DOMElementWriterTest(String name) {
        super(name);
    }

    public void testIsReference() {
        assertTrue(""&#20;"", w.isReference(""&#20;""));
        assertTrue(""&#x20;"", w.isReference(""&#x20;""));
        assertTrue(""&#xA0;"", w.isReference(""&#xA0;""));
        assertTrue(""&#A0;"", !w.isReference(""&#A0;""));
        assertTrue(""20;"", !w.isReference(""20;""));
        assertTrue(""&#20"", !w.isReference(""&#20""));
        assertTrue(""&quot;"", w.isReference(""&quot;""));
        assertTrue(""&apos;"", w.isReference(""&apos;""));
        assertTrue(""&gt;"", w.isReference(""&gt;""));
        assertTrue(""&lt;"", w.isReference(""&lt;""));
        assertTrue(""&amp;"", w.isReference(""&amp;""));
    }

    public void testEncode() {
        assertEquals(""&#20;"", w.encode(""&#20;""));
        assertEquals(""&#x20;"", w.encode(""&#x20;""));
        assertEquals(""&#xA0;"", w.encode(""&#xA0;""));
        assertEquals(""&amp;#A0;"", w.encode(""&#A0;""));
        assertEquals(""20;"", w.encode(""20;""));
        assertEquals(""&amp;#20"", w.encode(""&#20""));
        assertEquals(""&quot;"", w.encode(""&quot;""));
        assertEquals(""&apos;"", w.encode(""&apos;""));
        assertEquals(""&gt;"", w.encode(""&gt;""));
        assertEquals(""&lt;"", w.encode(""&lt;""));
        assertEquals(""&amp;"", w.encode(""&amp;""));
        assertEquals(""&quot;"", w.encode(""\""""));
        assertEquals(""&lt;"", w.encode(""<""));
        assertEquals(""&amp;"", w.encode(""&""));
        assertEquals("""", w.encode(""\u0017""));
        assertEquals(""&#20;\""20;&"", w.encodedata(""&#20;\""20;&""));
        assertEquals("""", w.encodedata(""\u0017""));
    }

    public void testIsLegalCharacter() {
        assertTrue(""0x00"", !w.isLegalCharacter('\u0000'));
        assertTrue(""0x09"", w.isLegalCharacter('\t'));
        assertTrue(""0x0A"", w.isLegalCharacter('\n'));
        assertTrue(""0x0C"", w.isLegalCharacter('\r'));
        assertTrue(""0x1F"", !w.isLegalCharacter('\u001F'));
        assertTrue(""0x20"", w.isLegalCharacter('\u0020'));
        assertTrue(""0xD7FF"", w.isLegalCharacter('\uD7FF'));
        assertTrue(""0xD800"", !w.isLegalCharacter('\uD800'));
        assertTrue(""0xDFFF"", !w.isLegalCharacter('\uDFFF'));
        assertTrue(""0xE000"", w.isLegalCharacter('\uE000'));
        assertTrue(""0xFFFD"", w.isLegalCharacter('\uFFFD'));
        assertTrue(""0xFFFE"", !w.isLegalCharacter('\uFFFE'));
    }

    public void testCDATAEndEncoding() {
        assertEquals(""]>"", w.encodedata(""]>""));
        assertEquals(""]]"", w.encodedata(""]]""));
        assertEquals(""&#x5d;&#x5d;&gt;"", w.encodedata(""]]>""));
        assertEquals(""&#x5d;&#x5d;&gt;A"", w.encodedata(""]]>A""));
        assertEquals(""A&#x5d;&#x5d;&gt;"", w.encodedata(""A]]>""));
        assertEquals(""A&#x5d;&#x5d;&gt;A"", w.encodedata(""A]]>A""));
        assertEquals(""A&#x5d;&#x5d;&gt;B&#x5d;&#x5d;&gt;C"",
                     w.encodedata(""A]]>B]]>C""));
    }
}
"
L33906,Class,DateUtilsTest,org.apache.tools.ant.util.DateUtilsTest,L32746,L103,src/testcases/org/apache/tools/ant/util/DateUtilsTest.java,68,1,130,2,0.0,0,0,0,0.0,0.0,0,0,6,0,0,7,1,0,0,4,11,0.125,0.15873,10,6,1,7,0.15873,10,0,0,0,0,0,53,63,0,0,0,0,7,0,7,0,7,33,0,7,0,53,63,0,0,0,0,7,0,7,0,7,33,0,7,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;

import junit.framework.TestCase;


public class DateUtilsTest extends TestCase {
    public DateUtilsTest(String s) {
        super(s);
    }

    public void testElapsedTime(){
        String text = DateUtils.formatElapsedTime(50*1000);
        assertEquals(""50 seconds"", text);
        text = DateUtils.formatElapsedTime(65*1000);
        assertEquals(""1 minute 5 seconds"", text);
        text = DateUtils.formatElapsedTime(120*1000);
        assertEquals(""2 minutes 0 seconds"", text);
        text = DateUtils.formatElapsedTime(121*1000);
        assertEquals(""2 minutes 1 second"", text);
    }

    public void testDateTimeISO(){
        TimeZone timeZone = TimeZone.getTimeZone(""GMT+1"");
        Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002,1,23,10,11,12);
        String text = DateUtils.format(cal.getTime(),
                DateUtils.ISO8601_DATETIME_PATTERN);
        assertEquals(""2002-02-23T09:11:12"", text);
    }

    public void testDateISO(){
        TimeZone timeZone = TimeZone.getTimeZone(""GMT"");
        Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002,1,23);
        String text = DateUtils.format(cal.getTime(),
                DateUtils.ISO8601_DATE_PATTERN);
        assertEquals(""2002-02-23"", text);
    }

    public void testTimeISODate(){
        
        TimeZone timeZone = TimeZone.getTimeZone(""GMT+1"");
        Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002,1,23, 21, 11, 12);
        String text = DateUtils.format(cal.getTime(),
                DateUtils.ISO8601_TIME_PATTERN);
        assertEquals(""20:11:12"", text);
    }

    public void testTimeISO(){
        
        long ms = (20*3600 + 11*60 + 12)*1000;
        String text = DateUtils.format(ms,
                DateUtils.ISO8601_TIME_PATTERN);
        assertEquals(""20:11:12"", text);
    }

    public void testPhaseOfMoon() {
        TimeZone timeZone = TimeZone.getTimeZone(""GMT"");
        Calendar cal = Calendar.getInstance(timeZone);
        
        cal.set(2002, 2, 27);
        assertEquals(4, DateUtils.getPhaseOfMoon(cal));
        
        cal.set(2002, 2, 12);
        assertEquals(0, DateUtils.getPhaseOfMoon(cal));
    }
}
"
L33935,Class,FileUtilsTest,org.apache.tools.ant.util.FileUtilsTest,L32746,L103,src/testcases/org/apache/tools/ant/util/FileUtilsTest.java,70,1,418,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,23,3,0,0,9,21,0.5,0.243827,79,24,6,6,0.243827,79,0,0,0,0,0,245,349,3,0,3,0,12,0,11,1,12,130,0,11,1,245,349,3,0,3,0,12,0,11,1,12,130,0,11,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import java.io.*;

import junit.framework.TestCase;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.condition.Os;


public class FileUtilsTest extends TestCase {

    private FileUtils fu;
    private File removeThis;
    private String root;

    public FileUtilsTest(String name) {
        super(name);
    }

    public void setUp() {
        fu = FileUtils.newFileUtils();
        
        root = new File(File.separator).getAbsolutePath().toUpperCase();
    }

    public void tearDown() {
        if (removeThis != null && removeThis.exists()) {
            removeThis.delete();
        }
    }

    public void testSetLastModified() throws IOException {
        removeThis = new File(""dummy"");
        FileOutputStream fos = new FileOutputStream(removeThis);
        fos.write(new byte[0]);
        fos.close();
        long modTime = removeThis.lastModified();
        assertTrue(modTime != 0);

        
        try {
            Thread.currentThread().sleep(5000);
        } catch (InterruptedException ie) {
            fail(ie.getMessage());
        }

        fu.setFileLastModified(removeThis, -1);
        long secondModTime = removeThis.lastModified();
        try {
            Class.forName(""java.lang.ThreadLocal"");
            assertTrue(secondModTime > modTime);
        } catch (ClassNotFoundException e) {
            
            assertEquals(modTime, secondModTime);
        }
        

        fu.setFileLastModified(removeThis, 123456);
        long thirdModTime = removeThis.lastModified();
        try {
            Class.forName(""java.lang.ThreadLocal"");
            
            assertTrue(thirdModTime != secondModTime);
        } catch (ClassNotFoundException e) {
            
            assertEquals(modTime, thirdModTime);
        }
    }

    public void testResolveFile() {
        
        assertEquals(File.separator, 
                     fu.resolveFile(null, ""/"").getPath());
        assertEquals(File.separator, 
                     fu.resolveFile(null, ""\\"").getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec + ""\\"", 
                     fu.resolveFile(null, driveSpec + ""/"").getPath());
        assertEquals(driveSpec + ""\\"", 
                     fu.resolveFile(null, driveSpec + ""\\"").getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     fu.resolveFile(null, driveSpecLower + ""/"").getPath());
        assertEquals(driveSpec + ""\\"", 
                     fu.resolveFile(null, driveSpecLower + ""\\"").getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     fu.resolveFile(null, driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     fu.resolveFile(null, driveSpec + ""\\\\\\\\\\\\"").getPath());

        if (Os.isFamily(""netware"")) {
            
            driveSpec = ""SYS:"";
            assertEquals(driveSpec, 
                         fu.resolveFile(null, driveSpec + ""/"").getPath());
            assertEquals(driveSpec, 
                         fu.resolveFile(null, driveSpec + ""\\"").getPath());
            driveSpecLower = ""sys:"";
            assertEquals(driveSpec, 
                         fu.resolveFile(null, driveSpecLower + ""/"").getPath());
            assertEquals(driveSpec, 
                         fu.resolveFile(null, driveSpecLower + ""\\"").getPath());
            
            assertEquals(driveSpec, 
                         fu.resolveFile(null, driveSpec + ""
            assertEquals(driveSpec, 
                         fu.resolveFile(null, driveSpec + ""\\\\\\\\\\\\"").getPath());
        }

        
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""./4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), "".\\4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""./.\\4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""../3/4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""..\\3\\4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""../../5/.././2/./3/6/../4"").getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.resolveFile(new File(localize(""/1/2/3"")), ""..\\../5/..\\./2/./3/6\\../4"").getPath());

        try {
            fu.resolveFile(new File(localize(""/1"")), ""../../b"");
            fail(""successfully crawled beyond the filesystem root"");
        } catch (BuildException e) {
            
        }

    }

    public void testNormalize() {
        
        assertEquals(File.separator, 
                     fu.normalize(""/"").getPath());
        assertEquals(File.separator, 
                     fu.normalize(""\\"").getPath());

        
        String driveSpec = ""C:"";
        assertEquals(driveSpec, 
                     fu.normalize(driveSpec).getPath());
        assertEquals(driveSpec + ""\\"", 
                     fu.normalize(driveSpec + ""/"").getPath());
        assertEquals(driveSpec + ""\\"", 
                     fu.normalize(driveSpec + ""\\"").getPath());
        String driveSpecLower = ""c:"";
        assertEquals(driveSpec + ""\\"", 
                     fu.normalize(driveSpecLower + ""/"").getPath());
        assertEquals(driveSpec + ""\\"", 
                     fu.normalize(driveSpecLower + ""\\"").getPath());
        
        assertEquals(driveSpec + ""\\"", 
                     fu.normalize(driveSpec + ""
        assertEquals(driveSpec + ""\\"", 
                     fu.normalize(driveSpec + ""\\\\\\\\\\\\"").getPath());

        if (Os.isFamily(""netware"")) {
            
            driveSpec = ""SYS:"";
            assertEquals(driveSpec, 
                         fu.normalize(driveSpec).getPath());
            assertEquals(driveSpec, 
                         fu.normalize(driveSpec + ""/"").getPath());
            assertEquals(driveSpec, 
                         fu.normalize(driveSpec + ""\\"").getPath());
            driveSpecLower = ""sys:"";
            assertEquals(driveSpec, 
                         fu.normalize(driveSpecLower).getPath());
            assertEquals(driveSpec, 
                         fu.normalize(driveSpecLower + ""/"").getPath());
            assertEquals(driveSpec, 
                         fu.normalize(driveSpecLower + ""\\"").getPath());
            assertEquals(driveSpec + ""\\junk"", 
                         fu.normalize(driveSpecLower + ""\\junk"").getPath());
            
            assertEquals(driveSpec, 
                         fu.normalize(driveSpec + ""
            assertEquals(driveSpec, 
                         fu.normalize(driveSpec + ""\\\\\\\\\\\\"").getPath());
        }

        
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/./4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/.\\4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/./.\\4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/../3/4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/..\\3\\4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/../../5/.././2/./3/6/../4"")).getPath());
        assertEquals(localize(""/1/2/3/4""),
                     fu.normalize(localize(""/1/2/3/..\\../5/..\\./2/./3/6\\../4"")).getPath());

        try {
            fu.normalize(""foo"");
            fail(""foo is not an absolute path"");
        } catch (BuildException e) {
            
        }
        
        try {
            fu.normalize(localize(""/1/../../b""));
            fail(""successfully crawled beyond the filesystem root"");
        } catch (BuildException e) {
            
        }
    }

    
    public void testNullArgs() {
        try {
            fu.normalize(null);
            fail(""successfully normalized a null-file"");
        } catch (NullPointerException npe) {
            
        }
        
        File f = fu.resolveFile(null, ""a"");
        assertEquals(f, new File(""a""));
    }

    
    public void testCreateTempFile() {
        File parent = new File((new File(""/tmp"")).getAbsolutePath());
        File tmp1 = fu.createTempFile(""pre"", "".suf"", parent);
        assertTrue(""new file"", !tmp1.exists());

        String name = tmp1.getName();
        assertTrue(""starts with pre"", name.startsWith(""pre""));
        assertTrue(""ends with .suf"", name.endsWith("".suf""));
        assertEquals(""is inside parent dir"", 
                     parent.getAbsolutePath(),
                     tmp1.getParent());

        File tmp2 = fu.createTempFile(""pre"", "".suf"", parent);
        assertTrue(""files are different"", 
                   !tmp1.getAbsolutePath().equals(tmp2.getAbsolutePath()));

        
        File tmp3 = fu.createTempFile(""pre"", "".suf"", null);
        assertEquals((new File(tmp3.getName())).getAbsolutePath(),
                     tmp3.getAbsolutePath());
    }

    
    public void testContentEquals() throws IOException {
        assertTrue(""Non existing files"", fu.contentEquals(new File(""foo""), 
                                                          new File(""bar"")));
        assertTrue(""One exists, the other one doesn\'t"", 
                   !fu.contentEquals(new File(""foo""), new File(""build.xml"")));
        assertTrue(""Don\'t compare directories"",
                   !fu.contentEquals(new File(""src""), new File(""src"")));
        assertTrue(""File equals itself"",
                   fu.contentEquals(new File(""build.xml""), 
                                    new File(""build.xml"")));
        assertTrue(""Files are different"",
                   !fu.contentEquals(new File(""build.xml""), 
                                     new File(""docs.xml"")));
    }

    
    public void testCreateNewFile() throws IOException {
        removeThis = new File(""dummy"");
        assertTrue(!removeThis.exists());
        fu.createNewFile(removeThis);
        assertTrue(removeThis.exists());
    }

    
    public void testRemoveLeadingPath() {
        assertEquals(""bar"", fu.removeLeadingPath(new File(""/foo""), 
                                                 new File(""/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""/foo/""), 
                                                 new File(""/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""\\foo""), 
                                                 new File(""\\foo\\bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""\\foo\\""), 
                                                 new File(""\\foo\\bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:/foo""), 
                                                 new File(""c:/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:/foo/""), 
                                                 new File(""c:/foo/bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:\\foo""), 
                                                 new File(""c:\\foo\\bar"")));
        assertEquals(""bar"", fu.removeLeadingPath(new File(""c:\\foo\\""), 
                                                 new File(""c:\\foo\\bar"")));
        assertEquals(fu.normalize(""/bar"").getAbsolutePath(), 
                     fu.removeLeadingPath(new File(""/foo""), new File(""/bar"")));
        assertEquals(fu.normalize(""/foobar"").getAbsolutePath(), 
                     fu.removeLeadingPath(new File(""/foo""), new File(""/foobar"")));
    }

    
    private String localize(String path) {
        path = root + path.substring(1);
        return path.replace('\\', File.separatorChar).replace('/', File.separatorChar);
    }
}
"
L33964,Class,GlobPatternMapperTest,org.apache.tools.ant.util.GlobPatternMapperTest,L32746,L103,src/testcases/org/apache/tools/ant/util/GlobPatternMapperTest.java,66,1,137,2,0.466667,1,2,2,0.416667,0.440678,30,26,4,0,0,5,1,0,0,3,8,0.166667,0.132353,9,5,1,5,0.132353,9,0,0,0,0,0,59,72,0,0,0,0,5,0,5,0,5,47,0,5,0,59,72,0,0,0,0,5,0,5,0,5,47,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class GlobPatternMapperTest extends TestCase {

    public GlobPatternMapperTest(String name) {
        super(name);
    }

    public void testNoPatternAtAll() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""foobar"");
        m.setTo(""baz"");
        assertNull(""Shouldn\'t match foobar"", m.mapFileName(""plonk""));
        String[] result = m.mapFileName(""foobar"");
        assertNotNull(""Should match foobar"", result);
        assertEquals(""only one result for foobar"", 1, result.length);
        assertEquals(""baz"", result[0]);
    }

    public void testPostfixOnly() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""*foo"");
        m.setTo(""*plonk"");
        assertNull(""Shouldn\'t match *foo"", m.mapFileName(""bar.baz""));
        String[] result = m.mapFileName(""bar.foo"");
        assertNotNull(""Should match *.foo"", result);
        assertEquals(""only one result for bar.foo"", 1, result.length);
        assertEquals(""bar.plonk"", result[0]);

        
        m.setTo(""foo*"");
        result = m.mapFileName(""bar.foo"");
        assertEquals(""foobar."", result[0]);
    }

    public void testPrefixOnly() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""foo*"");
        m.setTo(""plonk*"");
        assertNull(""Shouldn\'t match foo*"", m.mapFileName(""bar.baz""));
        String[] result = m.mapFileName(""foo.bar"");
        assertNotNull(""Should match foo*"", result);
        assertEquals(""only one result for foo.bar"", 1, result.length);
        assertEquals(""plonk.bar"", result[0]);

        
        m.setTo(""*foo"");
        result = m.mapFileName(""foo.bar"");
        assertEquals("".barfoo"", result[0]);
    }

    public void testPreAndPostfix() {
        GlobPatternMapper m = new GlobPatternMapper();
        m.setFrom(""foo*bar"");
        m.setTo(""plonk*pling"");
        assertNull(""Shouldn\'t match foo*bar"", m.mapFileName(""bar.baz""));
        String[] result = m.mapFileName(""foo.bar"");
        assertNotNull(""Should match foo*bar"", result);
        assertEquals(""only one result for foo.bar"", 1, result.length);
        assertEquals(""plonk.pling"", result[0]);

        
        result = m.mapFileName(""foo.baz.bar"");
        assertNotNull(""Should match foo*bar"", result);
        assertEquals(""only one result for foo.baz.bar"", 1, result.length);
        assertEquals(""plonk.baz.pling"", result[0]);

        
        result = m.mapFileName(""foobar"");
        assertNotNull(""Should match foo*bar"", result);
        assertEquals(""only one result for foobar"", 1, result.length);
        assertEquals(""plonkpling"", result[0]);
    }
}
"
L33973,Class,JavaEnvUtilsTest,org.apache.tools.ant.util.JavaEnvUtilsTest,L32746,L103,src/testcases/org/apache/tools/ant/util/JavaEnvUtilsTest.java,68,1,175,2,0.0,0,0,0,0.0,0.0,0,0,3,3,3,18,3,0,0,7,11,0.2,0.0824742,8,5,1,4,0.0824742,8,0,0,0,0,0,89,108,0,0,0,0,4,0,4,0,4,47,0,4,0,89,108,0,0,0,0,4,0,4,0,4,47,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.io.File;

import junit.framework.AssertionFailedError;
import junit.framework.TestCase;

import org.apache.tools.ant.taskdefs.condition.Os;


public class JavaEnvUtilsTest extends TestCase {
    public JavaEnvUtilsTest(String s) {
        super(s);
    }

    public void testGetExecutableNetware() {
        if (Os.isName(""netware"")) {
            assertEquals(""java"", JavaEnvUtils.getJreExecutable(""java""));
            assertEquals(""javac"", JavaEnvUtils.getJdkExecutable(""javac""));
            assertEquals(""foo"", JavaEnvUtils.getJreExecutable(""foo""));
            assertEquals(""foo"", JavaEnvUtils.getJdkExecutable(""foo""));
        }
    }

    public void testGetExecutableWindows() {
        if (Os.isFamily(""windows"")) {
            FileUtils fileUtils = FileUtils.newFileUtils();
            String javaHome =
                fileUtils.normalize(System.getProperty(""java.home""))
                .getAbsolutePath();

            String j = JavaEnvUtils.getJreExecutable(""java"");
            assertTrue(j.endsWith("".exe""));
            assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());
            try {
                assertTrue(j+"" is normalized and in the JRE dir"",
                           j.startsWith(javaHome));
            } catch (AssertionFailedError e) {
                
                assertEquals(""java.exe"", j);
            }

            j = JavaEnvUtils.getJdkExecutable(""javac"");
            assertTrue(j.endsWith("".exe""));
            try {
                assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());
                String javaHomeParent =
                    fileUtils.normalize(javaHome+""/.."").getAbsolutePath();
                assertTrue(j+"" is normalized and in the JDK dir"",
                           j.startsWith(javaHomeParent));

                if (JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_0 ||
                    JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_1) {
                    assertTrue(j+"" is normalized and in the JRE dir"",
                               j.startsWith(javaHome));
                } else {
                    assertTrue(j+"" is normalized and not in the JRE dir"",
                               !j.startsWith(javaHome));
                }

            } catch (AssertionFailedError e) {
                
                assertEquals(""javac.exe"", j);
            }

            assertEquals(""foo.exe"", JavaEnvUtils.getJreExecutable(""foo""));
            assertEquals(""foo.exe"", JavaEnvUtils.getJdkExecutable(""foo""));
        }
    }

    public void testGetExecutableMostPlatforms() {
        if (!Os.isName(""netware"") && !Os.isFamily(""windows"")) {
            FileUtils fileUtils = FileUtils.newFileUtils();
            String javaHome =
                fileUtils.normalize(System.getProperty(""java.home""))
                .getAbsolutePath();

            
            String extension = Os.isFamily(""dos"") ? "".exe"" : """";

            String j = JavaEnvUtils.getJreExecutable(""java"");
            if (!extension.equals("""")) {
                assertTrue(j.endsWith(extension));
            }
            assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());
            assertTrue(j+"" is normalized and in the JRE dir"",
                       j.startsWith(javaHome));

            j = JavaEnvUtils.getJdkExecutable(""javac"");
            if (!extension.equals("""")) {
                assertTrue(j.endsWith(extension));
            }
            assertTrue(j+"" is absolute"", (new File(j)).isAbsolute());

            String javaHomeParent =
                fileUtils.normalize(javaHome+""/.."").getAbsolutePath();
            assertTrue(j+"" is normalized and in the JDK dir"",
                       j.startsWith(javaHomeParent));

            if (JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_0 ||
                JavaEnvUtils.getJavaVersion() == JavaEnvUtils.JAVA_1_1 ||
                Os.isFamily(""mac"")) {
                assertTrue(j+"" is normalized and in the JRE dir"",
                           j.startsWith(javaHome));
            } else {
                assertTrue(j+"" is normalized and not in the JRE dir"",
                           !j.startsWith(javaHome));
            }

            assertEquals(""foo""+extension,
                         JavaEnvUtils.getJreExecutable(""foo""));
            assertEquals(""foo""+extension,
                         JavaEnvUtils.getJdkExecutable(""foo""));
        }

    }

}
"
L33980,Class,PackageNameMapperTest,org.apache.tools.ant.util.PackageNameMapperTest,L32746,L103,src/testcases/org/apache/tools/ant/util/PackageNameMapperTest.java,59,1,76,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,2,0,0,3,6,0.0,0.0,0,0,0,3,0.0,0,0,0,0,0,0,15,18,0,0,0,0,3,0,2,0,3,8,0,2,0,15,18,0,0,0,0,3,0,2,0,3,8,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
 package org.apache.tools.ant.util;

import java.io.File;
import junit.framework.TestCase;

public class PackageNameMapperTest extends TestCase {
    public PackageNameMapperTest(String name) { super(name); }
    
    public void testMapping() {
        PackageNameMapper mapper = new PackageNameMapper();
        mapper.setFrom(""*.java"");
        mapper.setTo(""TEST-*.xml"");
        String file = fixupPath(""org/apache/tools/ant/util/PackageNameMapperTest.java"");
        String result = mapper.mapFileName(file)[0];
        
        assertEquals(""TEST-org.apache.tools.ant.util.PackageNameMapperTest.xml"",
          result);
    }
    
    private String fixupPath(String file) {
        return file.replace('/', File.separatorChar);
    }
}
"
L33990,Class,StringUtilsTest,org.apache.tools.ant.util.StringUtilsTest,L32746,L103,src/testcases/org/apache/tools/ant/util/StringUtilsTest.java,64,1,96,2,0.0,0,0,0,0.0,0.0,0,0,3,0,0,4,1,0,0,3,7,0.2,0.121212,4,4,1,4,0.121212,4,0,0,0,0,0,29,33,0,0,0,0,4,0,4,0,4,19,0,4,0,29,33,0,0,0,0,4,0,4,0,4,19,0,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.apache.tools.ant.util;

import java.util.Vector;

import junit.framework.TestCase;


public class StringUtilsTest extends TestCase {
    public StringUtilsTest(String s) {
        super(s);
    }

    public void testSplit(){
        final String data = ""a,b,,"";
        Vector res = StringUtils.split(data, ',');
        assertEquals(4, res.size());
        assertEquals(""a"", res.elementAt(0));
        assertEquals(""b"", res.elementAt(1));
        assertEquals("""", res.elementAt(2));
        assertEquals("""", res.elementAt(3));
    }

    public void testSplitLines(){
        final String data = ""a\r\nb\nc\nd\ne"";
        Vector res = StringUtils.lineSplit(data);
        assertEquals(5, res.size());
        assertEquals(""a\r"", res.elementAt(0));
        assertEquals(""b"", res.elementAt(1));
        assertEquals(""c"", res.elementAt(2));
        assertEquals(""d"", res.elementAt(3));
        assertEquals(""e"", res.elementAt(4));
    }

    public void testReplace() {
        final String data = ""abcabcabca"";
        String res = StringUtils.replace(data, ""a"", """");
        assertEquals(""bcbcbc"", res);
    }

}
"
L33088,Class,FacadeTaskHelperTest,org.apache.tools.ant.util.facade.FacadeTaskHelperTest,L33045,L103,src/testcases/org/apache/tools/ant/util/facade/FacadeTaskHelperTest.java,63,1,87,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,1,0,0,5,7,0.333333,0.173913,4,4,1,2,0.173913,4,0,0,0,0,0,19,25,0,0,0,0,2,0,2,0,2,13,0,2,0,19,25,0,0,0,0,2,0,2,0,2,13,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.facade;

import junit.framework.TestCase;


public class FacadeTaskHelperTest extends TestCase {

    public FacadeTaskHelperTest(String name) {
        super(name);
    }

    public void testPrecedenceRules() {
        FacadeTaskHelper fth = new FacadeTaskHelper(""foo"");
        assertEquals(""foo"", fth.getImplementation());

        fth.setMagicValue(""bar"");
        assertEquals(""bar"", fth.getImplementation());

        fth = new FacadeTaskHelper(""foo"", ""bar"");
        assertEquals(""bar"", fth.getImplementation());

        fth = new FacadeTaskHelper(""foo"", null);
        assertEquals(""foo"", fth.getImplementation());

        fth = new FacadeTaskHelper(""foo"");
        fth.setMagicValue(""bar"");
        fth.setImplementation(""baz"");
        assertEquals(""baz"", fth.getImplementation());
    }

    public void testHasBeenSet() {
        FacadeTaskHelper fth = new FacadeTaskHelper(""foo"");
        assertTrue(""nothing set"", !fth.hasBeenSet());
        fth.setMagicValue(null);
        assertTrue(""magic has not been set"", !fth.hasBeenSet());
        fth.setMagicValue(""foo"");
        assertTrue(""magic has been set"", fth.hasBeenSet());
        fth.setMagicValue(null);
        assertTrue(!fth.hasBeenSet());
        fth.setImplementation(""baz"");
        assertTrue(""set explicitly"", fth.hasBeenSet());
    }
}
"
L33093,Class,ImplementationSpecificArgumentTest,org.apache.tools.ant.util.facade.ImplementationSpecificArgumentTest,L33045,L103,src/testcases/org/apache/tools/ant/util/facade/ImplementationSpecificArgumentTest.java,63,1,96,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,2,0,0,5,7,0.333333,0.121212,4,4,1,2,0.121212,4,0,0,0,0,0,29,34,0,0,0,0,2,0,2,0,2,22,0,2,0,29,34,0,0,0,0,2,0,2,0,2,22,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.facade;

import junit.framework.TestCase;


public class ImplementationSpecificArgumentTest extends TestCase {

    public ImplementationSpecificArgumentTest(String name) {
        super(name);
    }

    public void testDependsOnImplementation() {
        ImplementationSpecificArgument ia = 
            new ImplementationSpecificArgument();
        ia.setLine(""A B"");
        String[] parts = ia.getParts();
        assertNotNull(parts);
        assertEquals(2, parts.length);
        assertEquals(""A"", parts[0]);
        assertEquals(""B"", parts[1]);

        parts = ia.getParts(null);
        assertNotNull(parts);
        assertEquals(2, parts.length);
        assertEquals(""A"", parts[0]);
        assertEquals(""B"", parts[1]);

        ia.setImplementation(""foo"");
        parts = ia.getParts(null);
        assertNotNull(parts);
        assertEquals(0, parts.length);

        parts = ia.getParts(""foo"");
        assertNotNull(parts);
        assertEquals(2, parts.length);
        assertEquals(""A"", parts[0]);
        assertEquals(""B"", parts[1]);
    }
}
"
L33683,Class,JakartaOroMatcherTest,org.apache.tools.ant.util.regexp.JakartaOroMatcherTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaOroMatcherTest.java,62,1,72,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,0,0,2,4,0.333333,0.384615,5,5,1,2,0.384615,5,1,1,0,0,1,8,11,2,2,0,1,2,0,2,0,20,2,1,15,1,8,11,2,2,0,1,2,0,2,0,20,2,1,15,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;


public class JakartaOroMatcherTest extends RegexpMatcherTest {

    public RegexpMatcher getImplementation() {
        return new JakartaOroMatcher();
    }

    public JakartaOroMatcherTest(String name) {
        super(name);
    }

}
"
L33693,Class,JakartaOroRegexpTest,org.apache.tools.ant.util.regexp.JakartaOroRegexpTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaOroRegexpTest.java,62,1,72,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,3,0,0,2,4,0.333333,0.384615,5,5,1,2,0.384615,5,2,2,0,0,1,8,11,4,3,0,1,2,0,2,0,25,2,1,20,1,8,11,4,3,0,1,2,0,2,0,25,2,1,20,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;


public class JakartaOroRegexpTest extends RegexpTest {

    public Regexp getRegexpImplementation() {
        return new JakartaOroRegexp();
    }

    public JakartaOroRegexpTest(String name) {
        super(name);
    }

}
"
L33706,Class,JakartaRegexpMatcherTest,org.apache.tools.ant.util.regexp.JakartaRegexpMatcherTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaRegexpMatcherTest.java,68,1,102,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,7,3,0,0,3,8,0.4,0.323529,11,11,2,3,0.323529,11,1,1,0,0,1,23,35,2,2,0,1,5,0,4,0,23,8,1,17,1,23,35,2,2,0,1,5,0,4,0,23,8,1,17,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.taskdefs.condition.Os;


public class JakartaRegexpMatcherTest extends RegexpMatcherTest {

    public RegexpMatcher getImplementation() {
        return new JakartaRegexpMatcher();
    }

    public JakartaRegexpMatcherTest(String name) {
        super(name);
    }

    public void testWindowsLineSeparator2() throws IOException {
        try {
            super.testWindowsLineSeparator2();
            fail(""Should trigger when this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e) {
        }
    }

    
    public void testUnixLineSeparator() throws IOException {
        try {
            super.testUnixLineSeparator();
            fail(""Should trigger once this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e) {
        }
    }


    
    protected void doEndTest2(String text) {}
}
"
L33721,Class,JakartaRegexpRegexpTest,org.apache.tools.ant.util.regexp.JakartaRegexpRegexpTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/JakartaRegexpRegexpTest.java,68,1,101,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,7,4,0,0,4,9,0.4,0.323529,11,11,2,3,0.323529,11,2,2,0,0,1,23,34,4,3,0,1,5,0,4,0,28,8,1,22,1,23,34,4,3,0,1,5,0,4,0,28,8,1,22,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;

import org.apache.tools.ant.taskdefs.condition.Os;


public class JakartaRegexpRegexpTest extends RegexpTest {

    public Regexp getRegexpImplementation() {
        return new JakartaRegexpRegexp();
    }

    public JakartaRegexpRegexpTest(String name) {
        super(name);
    }

    public void testWindowsLineSeparator2() throws IOException {
        try {
            super.testWindowsLineSeparator2();
            fail(""Should trigger when this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e){
        }
    }

    
    public void testUnixLineSeparator() throws IOException {
        try {
            super.testUnixLineSeparator();
            fail(""Should trigger once this bug is fixed. {@since 1.2}"");
        } catch (AssertionFailedError e){
        }
    }

    
    protected void doEndTest2(String text) {}
}
"
L33735,Class,Jdk14RegexpMatcherTest,org.apache.tools.ant.util.regexp.Jdk14RegexpMatcherTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/Jdk14RegexpMatcherTest.java,66,1,107,2,0.0,0,0,0,0.0,0.0,0,0,4,1,1,10,3,0,0,6,12,0.142857,0.121951,5,5,1,6,0.121951,5,1,1,0,0,1,36,42,2,2,0,1,6,0,6,0,24,14,1,19,1,36,42,2,2,0,1,6,0,6,0,24,14,1,19,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;


public class Jdk14RegexpMatcherTest extends RegexpMatcherTest {

    public RegexpMatcher getImplementation() {
        return new Jdk14RegexpMatcher();
    }

    public Jdk14RegexpMatcherTest(String name) {
        super(name);
    }

    public void testParagraphCharacter() throws IOException {
        try {
            super.testParagraphCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testLineSeparatorCharacter() throws IOException {
        try {
            super.testLineSeparatorCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testStandaloneCR() throws IOException {
        try {
            super.testStandaloneCR();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testWindowsLineSeparator() throws IOException {
        try {
            super.testWindowsLineSeparator();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }
}
"
L33752,Class,Jdk14RegexpRegexpTest,org.apache.tools.ant.util.regexp.Jdk14RegexpRegexpTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/Jdk14RegexpRegexpTest.java,66,1,108,2,0.0,0,0,0,0.0,0.0,0,0,4,1,1,10,4,0,0,6,12,0.142857,0.121951,5,5,1,6,0.121951,5,2,2,0,0,1,36,43,4,3,0,1,6,0,6,0,29,14,1,24,1,36,43,4,3,0,1,6,0,6,0,29,14,1,24,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.IOException;

import junit.framework.AssertionFailedError;


public class Jdk14RegexpRegexpTest extends RegexpTest {

    public Regexp getRegexpImplementation() {
        return new Jdk14RegexpRegexp();
    }

    public Jdk14RegexpRegexpTest(String name) {
        super(name);
    }

    public void testParagraphCharacter() throws IOException {
        try {
            super.testParagraphCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testLineSeparatorCharacter() throws IOException {
        try {
            super.testLineSeparatorCharacter();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testStandaloneCR() throws IOException {
        try {
            super.testStandaloneCR();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

    public void testWindowsLineSeparator() throws IOException {
        try {
            super.testWindowsLineSeparator();
            fail(""Should trigger once fixed. {@since JDK 1.4RC1}"");
        } catch (AssertionFailedError e){
        }
    }

}
"
L33685,Class,RegexpMatcherTest,org.apache.tools.ant.util.regexp.RegexpMatcherTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/RegexpMatcherTest.java,69,1,233,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,19,1,6,19,4,23,0.133333,0.0492958,7,7,2,13,0.0492958,7,0,0,4,7,0,135,165,2,2,2,2,19,1,14,1,19,84,1,14,1,135,165,2,2,2,2,19,1,14,1,19,84,1,14,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;

import java.io.*;
import java.util.Vector;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public abstract class RegexpMatcherTest extends TestCase {

    public final static String UNIX_LINE = ""\n"";

    private RegexpMatcher reg;

    public abstract RegexpMatcher getImplementation();

    protected final RegexpMatcher getReg() {return reg;}

    public RegexpMatcherTest(String name) {
        super(name);
    }

    public void setUp() {
        reg = getImplementation();
    }

    public void testMatches() {
        reg.setPattern(""aaaa"");
        assertTrue(""aaaa should match itself"", reg.matches(""aaaa""));
        assertTrue(""aaaa should match xaaaa"", reg.matches(""xaaaa""));
        assertTrue(""aaaa shouldn\'t match xaaa"", !reg.matches(""xaaa""));
        reg.setPattern(""^aaaa"");
        assertTrue(""^aaaa shouldn\'t match xaaaa"", !reg.matches(""xaaaa""));
        assertTrue(""^aaaa should match aaaax"", reg.matches(""aaaax""));
        reg.setPattern(""aaaa$"");
        assertTrue(""aaaa$ shouldn\'t match aaaax"", !reg.matches(""aaaax""));
        assertTrue(""aaaa$ should match xaaaa"", reg.matches(""xaaaa""));
        reg.setPattern(""[0-9]+"");
        assertTrue(""[0-9]+ should match 123"", reg.matches(""123""));
        assertTrue(""[0-9]+ should match 1"", reg.matches(""1""));
        assertTrue(""[0-9]+ shouldn\'t match \'\'"", !reg.matches(""""));
        assertTrue(""[0-9]+ shouldn\'t match a"", !reg.matches(""a""));
        reg.setPattern(""[0-9]*"");
        assertTrue(""[0-9]* should match 123"", reg.matches(""123""));
        assertTrue(""[0-9]* should match 1"", reg.matches(""1""));
        assertTrue(""[0-9]* should match \'\'"", reg.matches(""""));
        assertTrue(""[0-9]* should match a"", reg.matches(""a""));
        reg.setPattern(""([0-9]+)=\\1"");
        assertTrue(""([0-9]+)=\\1 should match 1=1"", reg.matches(""1=1""));
        assertTrue(""([0-9]+)=\\1 shouldn\'t match 1=2"", !reg.matches(""1=2""));
    }

    public void testGroups() {
        reg.setPattern(""aaaa"");
        Vector v = reg.getGroups(""xaaaa"");
        assertEquals(""No parens -> no extra groups"", 1, v.size());
        assertEquals(""Trivial match with no parens"", ""aaaa"", 
                     (String) v.elementAt(0));

        reg.setPattern(""(aaaa)"");
        v = reg.getGroups(""xaaaa"");
        assertEquals(""Trivial match with single paren"", 2, v.size());
        assertEquals(""Trivial match with single paren, full match"", ""aaaa"", 
                     (String) v.elementAt(0));
        assertEquals(""Trivial match with single paren, matched paren"", ""aaaa"", 
                     (String) v.elementAt(0));

        reg.setPattern(""(a+)b(b+)"");
        v = reg.getGroups(""xaabb"");
        assertEquals(3, v.size());
        assertEquals(""aabb"", (String) v.elementAt(0));
        assertEquals(""aa"", (String) v.elementAt(1));
        assertEquals(""b"", (String) v.elementAt(2));
    }

    public void testCaseInsensitiveMatch() {
        reg.setPattern(""aaaa"");
        assertTrue(""aaaa doesn't match AAaa"", !reg.matches(""AAaa""));
        assertTrue(""aaaa matches AAaa ignoring case"", 
                   reg.matches(""AAaa"", RegexpMatcher.MATCH_CASE_INSENSITIVE));
    }





    public void testParagraphCharacter() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""paragraph character"", !reg.matches(""end of text\u2029""));
    }

    public void testLineSeparatorCharacter() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""line-separator character"", !reg.matches(""end of text\u2028""));
    }

    public void testNextLineCharacter() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""next-line character"", !reg.matches(""end of text\u0085""));
    }

    public void testStandaloneCR() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""standalone CR"", !reg.matches(""end of text\r""));
    }

    public void testWindowsLineSeparator() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""Windows line separator"", !reg.matches(""end of text\r\n""));
    }

    public void testWindowsLineSeparator2() throws IOException {
        reg.setPattern(""end of text\r$"");
        assertTrue(""Windows line separator"", reg.matches(""end of text\r\n""));
    }

    public void testUnixLineSeparator() throws IOException {
        reg.setPattern(""end of text$"");
        assertTrue(""Unix line separator"", reg.matches(""end of text\n""));
    }


    public void testMultiVersusSingleLine() throws IOException {
        StringBuffer buf = new StringBuffer();
        buf.append(""Line1"").append(UNIX_LINE);
        buf.append(""starttest Line2"").append(UNIX_LINE);
        buf.append(""Line3 endtest"").append(UNIX_LINE);
        buf.append(""Line4"").append(UNIX_LINE);
        String text = buf.toString();
        
        doStartTest1(text);
        doStartTest2(text);
        doEndTest1(text);
        doEndTest2(text);
    }

    protected void doStartTest1(String text) {
        reg.setPattern(""^starttest"");
        assertTrue(""^starttest in default mode"", !reg.matches(text));
        assertTrue(""^starttest in single line mode"", 
               !reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""^starttest in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

    protected void doStartTest2(String text) {
        reg.setPattern(""^Line1"");
        assertTrue(""^Line1 in default mode"", reg.matches(text));
        assertTrue(""^Line1 in single line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""^Line1 in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

    protected void doEndTest1(String text) {
        reg.setPattern(""endtest$"");
        assertTrue(""endtest$ in default mode"", !reg.matches(text));
        assertTrue(""endtest$ in single line mode"", 
               !reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""endtest$ in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

    protected void doEndTest2(String text) {
        reg.setPattern(""Line4$"");
        assertTrue(""Line4$ in default mode"", reg.matches(text));
        assertTrue(""Line4$ in single line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_SINGLELINE));
        assertTrue(""Line4$ in multi line mode"", 
               reg.matches(text, RegexpMatcher.MATCH_MULTILINE));
    }

}
"
L33695,Class,RegexpTest,org.apache.tools.ant.util.regexp.RegexpTest,L33424,L103,src/testcases/org/apache/tools/ant/util/regexp/RegexpTest.java,62,1,100,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,6,3,3,3,5,11,0.142857,0.135135,5,5,1,6,0.135135,5,1,1,3,3,1,32,39,4,3,2,2,6,0,6,0,24,14,1,19,1,32,39,4,3,2,2,6,0,6,0,24,14,1,19,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.ant.util.regexp;


public abstract class RegexpTest extends RegexpMatcherTest {

    private static final String test = ""abcdefg-abcdefg"";
    private static final String pattern = ""ab([^d]*)d([^f]*)f"";

    public RegexpTest(String name) {
        super(name);
    }

    public final RegexpMatcher getImplementation() {
        return getRegexpImplementation();
    }

    public abstract Regexp getRegexpImplementation();

    public void testSubstitution() {
        Regexp reg = (Regexp) getReg();
        reg.setPattern(pattern);
        assertTrue(reg.matches(test));
        assertEquals(""abedcfg-abcdefg"", reg.substitute(test, ""ab\\2d\\1f"", 
                                                       Regexp.MATCH_DEFAULT));
    }

    public void testReplaceFirstSubstitution() {
        Regexp reg = (Regexp) getReg();
        reg.setPattern(pattern);
        assertTrue(reg.matches(test));
        assertEquals(""abedcfg-abcdefg"", reg.substitute(test, ""ab\\2d\\1f"", 
                                                       Regexp.REPLACE_FIRST));
    }

    public void testReplaceAllSubstitution() {
        Regexp reg = (Regexp) getReg();
        reg.setPattern(pattern);
        assertTrue(reg.matches(test));
        assertEquals(""abedcfg-abedcfg"", reg.substitute(test, ""ab\\2d\\1f"", 
                                                       Regexp.REPLACE_ALL));
    }
}
"
L36087,Class,AsiExtraFieldTest,org.apache.tools.zip.AsiExtraFieldTest,L35564,L103,src/testcases/org/apache/tools/zip/AsiExtraFieldTest.java,64,1,178,2,0.0,0,0,0,0.0,0.0,0,0,3,1,1,7,3,0,0,16,20,0.8,0.296296,40,14,4,1,0.296296,40,1,1,0,0,1,95,115,7,0,0,0,4,0,4,0,4,61,7,4,0,95,115,7,0,0,0,4,0,4,0,4,61,7,4,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class AsiExtraFieldTest extends TestCase implements UnixStat {
    public AsiExtraFieldTest(String name) {
        super(name);
    }

    
    public void testModes() {
        AsiExtraField a = new AsiExtraField();
        a.setMode(0123);
        assertEquals(""plain file"", 0100123, a.getMode());
        a.setDirectory(true);
        assertEquals(""directory"", 040123, a.getMode());
        a.setLinkedFile(""test"");
        assertEquals(""symbolic link"", 0120123, a.getMode());
    }

    
    public void testContent() {
        AsiExtraField a = new AsiExtraField();
        a.setMode(0123);
        a.setUserId(5);
        a.setGroupId(6);
        byte[] b = a.getLocalFileDataData();
        
        
        byte[] expect = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, 
                         0123, (byte)0x80,                   
                         0, 0, 0, 0,                         
                         5, 0, 6, 0};                        
        assertEquals(""no link"", expect.length, b.length);
        for (int i=0; i<expect.length; i++) {
            assertEquals(""no link, byte ""+i, expect[i], b[i]);
        }

        a.setLinkedFile(""test"");
        expect = new byte[] {0x75, (byte)0x8E, 0x41, (byte)0xFD, 
                             0123, (byte)0xA0,                   
                             4, 0, 0, 0,                         
                             5, 0, 6, 0,                         
                             (byte)'t', (byte)'e', (byte)'s', (byte)'t'};
        b = a.getLocalFileDataData();
        assertEquals(""no link"", expect.length, b.length);
        for (int i=0; i<expect.length; i++) {
            assertEquals(""no link, byte ""+i, expect[i], b[i]);
        }

    }

    
    public void testReparse() throws Exception {
        
        byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, 
                       0123, (byte)0x80,                   
                       0, 0, 0, 0,                         
                       5, 0, 6, 0};                        
        AsiExtraField a = new AsiExtraField();
        a.parseFromLocalFileData(data, 0, data.length);
        assertEquals(""length plain file"", data.length, 
                     a.getLocalFileDataLength().getValue());
        assertTrue(""plain file, no link"", !a.isLink());
        assertTrue(""plain file, no dir"", !a.isDirectory());
        assertEquals(""mode plain file"", FILE_FLAG | 0123, a.getMode());
        assertEquals(""uid plain file"", 5, a.getUserId());
        assertEquals(""gid plain file"", 6, a.getGroupId());

        data = new byte[] {0x75, (byte)0x8E, 0x41, (byte)0xFD, 
                           0123, (byte)0xA0,                   
                           4, 0, 0, 0,                         
                           5, 0, 6, 0,                         
                           (byte)'t', (byte)'e', (byte)'s', (byte)'t'};
        a = new AsiExtraField();
        a.parseFromLocalFileData(data, 0, data.length);
        assertEquals(""length link"", data.length, 
                     a.getLocalFileDataLength().getValue());
        assertTrue(""link, is link"", a.isLink());
        assertTrue(""link, no dir"", !a.isDirectory());
        assertEquals(""mode link"", LINK_FLAG | 0123, a.getMode());
        assertEquals(""uid link"", 5, a.getUserId());
        assertEquals(""gid link"", 6, a.getGroupId());
        assertEquals(""test"", a.getLinkedFile());

        data = new byte[] {(byte)0x8E, 0x01, (byte)0xBF, (byte)0x0E, 
                           0123, (byte)0x40,                         
                           0, 0, 0, 0,                               
                           5, 0, 6, 0};                          
        a = new AsiExtraField();
        a.parseFromLocalFileData(data, 0, data.length);
        assertEquals(""length dir"", data.length, 
                     a.getLocalFileDataLength().getValue());
        assertTrue(""dir, no link"", !a.isLink());
        assertTrue(""dir, is dir"", a.isDirectory());
        assertEquals(""mode dir"", DIR_FLAG | 0123, a.getMode());
        assertEquals(""uid dir"", 5, a.getUserId());
        assertEquals(""gid dir"", 6, a.getGroupId());

        data = new byte[] {0, 0, 0, 0,                           
                           0123, (byte)0x40,                     
                           0, 0, 0, 0,                           
                           5, 0, 6, 0};                          
        a = new AsiExtraField();
        try {
            a.parseFromLocalFileData(data, 0, data.length);
            fail(""should raise bad CRC exception"");
        } catch (Exception e) {
            assertEquals(""bad CRC checksum 0 instead of ebf018e"", 
                         e.getMessage());
        }
    }
}
"
L36102,Class,ExtraFieldUtilsTest,org.apache.tools.zip.ExtraFieldUtilsTest,L35564,L103,src/testcases/org/apache/tools/zip/ExtraFieldUtilsTest.java,64,1,151,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,7,6,0,0,22,26,0.6,0.134146,11,11,3,2,0.134146,11,1,1,0,0,1,71,88,11,0,4,0,4,0,4,1,4,46,7,4,1,71,88,11,0,4,0,4,0,4,1,4,46,7,4,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ExtraFieldUtilsTest extends TestCase implements UnixStat {
    public ExtraFieldUtilsTest(String name) {
        super(name);
    }

    private AsiExtraField a;
    private UnrecognizedExtraField dummy;
    private byte[] data;
    private byte[] aLocal;

    public void setUp() {
        a = new AsiExtraField();
        a.setMode(0755);
        a.setDirectory(true);
        dummy = new UnrecognizedExtraField();
        dummy.setHeaderId(new ZipShort(1));
        dummy.setLocalFileDataData(new byte[0]);
        dummy.setCentralDirectoryData(new byte[] {0});

        aLocal = a.getLocalFileDataData();
        byte[] dummyLocal = dummy.getLocalFileDataData();
        data = new byte[4 + aLocal.length + 4 + dummyLocal.length];
        System.arraycopy(a.getHeaderId().getBytes(), 0, data, 0, 2);
        System.arraycopy(a.getLocalFileDataLength().getBytes(), 0, data, 2, 2);
        System.arraycopy(aLocal, 0, data, 4, aLocal.length);
        System.arraycopy(dummy.getHeaderId().getBytes(), 0, data, 
                         4+aLocal.length, 2);
        System.arraycopy(dummy.getLocalFileDataLength().getBytes(), 0, data, 
                         4+aLocal.length+2, 2);
        System.arraycopy(dummyLocal, 0, data, 
                         4+aLocal.length+4, dummyLocal.length);

    }

    
    public void testParse() throws Exception {
        ZipExtraField[] ze = ExtraFieldUtils.parse(data);
        assertEquals(""number of fields"", 2, ze.length);
        assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);
        assertEquals(""mode field 1"", 040755,
                     ((AsiExtraField) ze[0]).getMode());
        assertTrue(""type field 2"", ze[1] instanceof UnrecognizedExtraField);
        assertEquals(""data length field 2"", 0, 
                     ze[1].getLocalFileDataLength().getValue());

        byte[] data2 = new byte[data.length-1];
        System.arraycopy(data, 0, data2, 0, data2.length);
        try {
            ExtraFieldUtils.parse(data2);
            fail(""data should be invalid"");
        } catch (Exception e) {
            assertEquals(""message"", 
                         ""data starting at ""+(4+aLocal.length)+"" is in unknown format"",
                         e.getMessage());
        }
    }

    
    public void testMerge() {
        byte[] local = 
            ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, dummy});
        assertEquals(""local length"", data.length, local.length);
        for (int i=0; i<local.length; i++) {
            assertEquals(""local byte ""+i, data[i], local[i]);
        }
        
        byte[] dummyCentral = dummy.getCentralDirectoryData();
        byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length];
        System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2);
        System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0, 
                         data2, 4+aLocal.length+2, 2);
        System.arraycopy(dummyCentral, 0, data2, 
                         4+aLocal.length+4, dummyCentral.length);


        byte[] central = 
            ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] {a, dummy});
        assertEquals(""central length"", data2.length, central.length);
        for (int i=0; i<central.length; i++) {
            assertEquals(""central byte ""+i, data2[i], central[i]);
        }
        
    }
}
"
L36124,Class,ZipEntryTest,org.apache.tools.zip.ZipEntryTest,L35564,L103,src/testcases/org/apache/tools/zip/ZipEntryTest.java,64,1,124,2,0.0,0,0,0,0.0,0.0,0,0,1,1,1,3,5,0,0,11,13,0.666667,0.172414,10,10,2,1,0.172414,10,0,0,0,0,0,48,61,0,0,0,0,2,0,2,0,2,40,0,2,0,48,61,0,0,0,0,2,0,2,0,2,40,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ZipEntryTest extends TestCase {

    public ZipEntryTest(String name) {
        super(name);
    }

    
    public void testExtraFields() {
        AsiExtraField a = new AsiExtraField();
        a.setDirectory(true);
        a.setMode(0755);
        UnrecognizedExtraField u = new UnrecognizedExtraField();
        u.setHeaderId(new ZipShort(1));
        u.setLocalFileDataData(new byte[0]);

        ZipEntry ze = new ZipEntry(""test/"");
        ze.setExtraFields(new ZipExtraField[] {a, u});
        byte[] data1 = ze.getExtra();
        ZipExtraField[] result = ze.getExtraFields();
        assertEquals(""first pass"", 2, result.length);
        assertSame(a, result[0]);
        assertSame(u, result[1]);

        UnrecognizedExtraField u2 = new UnrecognizedExtraField();
        u2.setHeaderId(new ZipShort(1));
        u2.setLocalFileDataData(new byte[] {1});

        ze.addExtraField(u2);
        byte[] data2 = ze.getExtra();
        result = ze.getExtraFields();
        assertEquals(""second pass"", 2, result.length);
        assertSame(a, result[0]);
        assertSame(u2, result[1]);
        assertEquals(""length second pass"", data1.length+1, data2.length);

        UnrecognizedExtraField u3 = new UnrecognizedExtraField();
        u3.setHeaderId(new ZipShort(2));
        u3.setLocalFileDataData(new byte[] {1});
        ze.addExtraField(u3);
        result = ze.getExtraFields();
        assertEquals(""third pass"", 3, result.length);

        ze.removeExtraField(new ZipShort(1));
        byte[] data3 = ze.getExtra();
        result = ze.getExtraFields();
        assertEquals(""fourth pass"", 2, result.length);
        assertSame(a, result[0]);
        assertSame(u3, result[1]);
        assertEquals(""length fourth pass"", data2.length, data3.length);

        try {
            ze.removeExtraField(new ZipShort(1));
            fail(""should be no such element"");
        } catch (java.util.NoSuchElementException nse) {
        }
    }
}
"
L36132,Class,ZipLongTest,org.apache.tools.zip.ZipLongTest,L35564,L103,src/testcases/org/apache/tools/zip/ZipLongTest.java,64,1,119,2,0.394872,1,1,1,0.267857,0.323529,15,11,4,0,0,5,1,0,0,5,10,0.833333,0.333333,17,17,5,1,0.333333,17,0,0,0,0,0,34,56,0,0,0,0,5,0,5,0,5,22,0,5,0,34,56,0,0,0,0,5,0,5,0,5,22,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ZipLongTest extends TestCase {

    public ZipLongTest(String name) {
        super(name);
    }

    
    public void testToBytes() {
        ZipLong zl = new ZipLong(0x12345678);
        byte[] result = zl.getBytes();
        assertEquals(""length getBytes"", 4, result.length);
        assertEquals(""first byte getBytes"", 0x78, result[0]);
        assertEquals(""second byte getBytes"", 0x56, result[1]);
        assertEquals(""third byte getBytes"", 0x34, result[2]);
        assertEquals(""fourth byte getBytes"", 0x12, result[3]);
    }

    
    public void testFromBytes() {
        byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12};
        ZipLong zl = new ZipLong(val);
        assertEquals(""value from bytes"", 0x12345678, zl.getValue());
    }

    
    public void testEquals() {
        ZipLong zl = new ZipLong(0x12345678);
        ZipLong zl2 = new ZipLong(0x12345678);
        ZipLong zl3 = new ZipLong(0x87654321);

        assertTrue(""reflexive"", zl.equals(zl));

        assertTrue(""works"", zl.equals(zl2));
        assertTrue(""works, part two"", !zl.equals(zl3));

        assertTrue(""symmetric"", zl2.equals(zl));

        assertTrue(""null handling"", !zl.equals(null));
        assertTrue(""non ZipLong handling"", !zl.equals(new Integer(0x1234)));
    }

    
    public void testSign() {
        ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});
        assertEquals(0x00000000FFFFFFFFl, zl.getValue());
    }

}
"
L36145,Class,ZipShortTest,org.apache.tools.zip.ZipShortTest,L35564,L103,src/testcases/org/apache/tools/zip/ZipShortTest.java,64,1,117,2,0.450292,1,1,1,0.277778,0.34375,15,11,4,0,0,5,1,0,0,5,10,0.833333,0.346939,17,17,5,1,0.346939,17,0,0,0,0,0,32,54,0,0,0,0,5,0,5,0,5,20,0,5,0,32,54,0,0,0,0,5,0,5,0,5,20,0,5,0,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.apache.tools.zip;

import junit.framework.TestCase;


public class ZipShortTest extends TestCase {

    public ZipShortTest(String name) {
        super(name);
    }

    
    public void testToBytes() {
        ZipShort zs = new ZipShort(0x1234);
        byte[] result = zs.getBytes();
        assertEquals(""length getBytes"", 2, result.length);
        assertEquals(""first byte getBytes"", 0x34, result[0]);
        assertEquals(""second byte getBytes"", 0x12, result[1]);
    }

    
    public void testFromBytes() {
        byte[] val = new byte[] {0x34, 0x12};
        ZipShort zs = new ZipShort(val);
        assertEquals(""value from bytes"", 0x1234, zs.getValue());
    }

    
    public void testEquals() {
        ZipShort zs = new ZipShort(0x1234);
        ZipShort zs2 = new ZipShort(0x1234);
        ZipShort zs3 = new ZipShort(0x5678);

        assertTrue(""reflexive"", zs.equals(zs));

        assertTrue(""works"", zs.equals(zs2));
        assertTrue(""works, part two"", !zs.equals(zs3));

        assertTrue(""symmetric"", zs2.equals(zs));

        assertTrue(""null handling"", !zs.equals(null));
        assertTrue(""non ZipShort handling"", !zs.equals(new Integer(0x1234)));
    }

    
    public void testSign() {
        ZipShort zs = new ZipShort(new byte[] {(byte)0xFF, (byte)0xFF});
        assertEquals(0x0000FFFF, zs.getValue());
    }

}
"
L36164,Class,Output,org.example.junit.Output,L36159,L103,src/testcases/org/example/junit/Output.java,65,1,74,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,0,0,0,2,0.333333,0.466667,7,7,1,2,0.466667,7,0,0,0,0,0,8,10,0,0,0,0,2,0,2,0,2,2,0,2,0,8,10,0,0,0,0,2,0,2,0,2,2,0,2,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.example.junit;

import junit.framework.TestCase;


public class Output extends TestCase {

    public Output(String s) {
        super(s);
    }

    public void testOutput() {
        System.out.println(""foo"");
    }
}
"
L36169,Class,ThreadedOutput,org.example.junit.ThreadedOutput,L36159,L103,src/testcases/org/example/junit/ThreadedOutput.java,65,1,80,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,2,0,0,0,0,2,0.333333,0.388889,7,7,1,2,0.333333,7,0,0,0,0,0,11,13,0,0,0,0,2,0,2,0,2,4,0,2,0,14,16,0,0,0,0,3,0,3,0,3,5,0,3,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.example.junit;

import junit.framework.TestCase;


public class ThreadedOutput extends TestCase {

    public ThreadedOutput(String s) {
        super(s);
    }

    public void testOutput() throws InterruptedException {
        Thread t = new Thread(new Runnable() {
                public void run() {
                    System.out.println(""foo"");
                }
            });
        t.start();
        t.join();
    }
}
"
L36176,Class,ThreadedOutput$1,org.example.junit.ThreadedOutput$1,L36173,L103,src/testcases/org/example/junit/ThreadedOutput.java,72,46,76,14,0.0,0,0,0,0.0,0.0,0,0,1,0,0,1,0,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,5,5,0,0,0,0,1,0,1,0,1,1,0,1,0,,,,,,,,,,,,,,,,,,,,,,,,,"
package org.example.junit;

import junit.framework.TestCase;


public class ThreadedOutput extends TestCase {

    public ThreadedOutput(String s) {
        super(s);
    }

    public void testOutput() throws InterruptedException {
        Thread t = new Thread(new Runnable() {
                public void run() {
                    System.out.println(""foo"");
                }
            });
        t.start();
        t.join();
    }
}
"
L36182,Class,TaskdefTestContainerTask,org.example.tasks.TaskdefTestContainerTask,L36178,L103,src/testcases/org/example/tasks/TaskdefTestContainerTask.java,59,1,61,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,1,1,0,0,0,1,0.0,0.0,0,0,0,2,0.0,0,3,4,0,0,1,3,3,10,7,0,0,1,0,1,0,32,0,0,26,7,3,3,10,7,0,0,1,0,1,0,32,0,0,26,7,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.tasks;

import org.apache.tools.ant.taskdefs.Sequential;

public class TaskdefTestContainerTask extends Sequential {
    public TaskdefTestContainerTask() {}
}
"
L36187,Class,TaskdefTestSimpleTask,org.example.tasks.TaskdefTestSimpleTask,L36178,L103,src/testcases/org/example/tasks/TaskdefTestSimpleTask.java,60,1,80,2,0.0,0,0,0,0.0,0.0,0,0,1,0,0,3,3,0,0,3,6,0.0,0.0,0,0,0,4,0.0,0,2,2,0,0,1,11,16,10,7,1,0,3,0,3,0,31,3,0,25,7,16,21,11,7,2,0,5,0,4,1,33,4,0,26,8,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.tasks;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;

public class TaskdefTestSimpleTask extends Task {

    public class Echo {
        Echo() {}
        private String message = null;
        public void setMessage(String s) {message = s;}
    }
    
    public TaskdefTestSimpleTask() {}
    
    private Echo echo;
    public Echo createEcho() {
        echo = new Echo();
        return echo;
    }
    
    public void execute() {
        log(""simpletask: ""+echo.message, Project.MSG_INFO);
    }

}

"
L36188,Class,TaskdefTestSimpleTask$Echo,org.example.tasks.TaskdefTestSimpleTask$Echo,L36187,L103,src/testcases/org/example/tasks/TaskdefTestSimpleTask.java,62,5,66,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,2,0,1,1,0,2,0.0,0.0,0,0,0,2,0.0,0,0,0,0,0,0,5,5,1,0,1,0,2,0,1,1,2,1,0,1,1,5,5,1,0,1,0,2,0,1,1,2,1,0,1,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.tasks;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;

public class TaskdefTestSimpleTask extends Task {

    public class Echo {
        Echo() {}
        private String message = null;
        public void setMessage(String s) {message = s;}
    }
    
    public TaskdefTestSimpleTask() {}
    
    private Echo echo;
    public Echo createEcho() {
        echo = new Echo();
        return echo;
    }
    
    public void execute() {
        log(""simpletask: ""+echo.message, Project.MSG_INFO);
    }

}

"
L36205,Class,TypedefTestType,org.example.types.TypedefTestType,L36202,L103,src/testcases/org/example/types/TypedefTestType.java,59,1,60,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,1,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,1,1,0,0,1,2,2,1,1,0,0,0,0,0,0,5,0,0,5,1,2,2,1,1,0,0,0,0,0,0,5,0,0,5,1,,,,,,,,,,,,,,,,,,,,,,,,,"

package org.example.types;

import org.apache.tools.ant.ProjectComponent;

public class TypedefTestType extends ProjectComponent {
}

"
L328,Class,Outer,test.Outer,L324,L103,src/etc/testcases/taskdefs/optional/depend/src4/test/Outer.java,3,1,6,2,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"package test;

public class Outer {
    static class Inner {
    }
}

"
L330,Class,Outer$Inner,test.Outer$Inner,L328,L103,src/etc/testcases/taskdefs/optional/depend/src4/test/Outer.java,4,5,5,6,0.0,0,0,0,0.0,0.0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0,0,0,0,1,0.0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,"package test;

public class Outer {
    static class Inner {
    }
}

"
