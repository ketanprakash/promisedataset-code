name,version,name.1,wmc,dit,noc,cbo,rfc,lcom,ca,ce,npm,lcom3,loc,dam,moa,mfa,cam,ic,cbm,amc,max_cc,avg_cc,bug,code
synapse,1.1,org.apache.synapse.registry.AbstractRegistry,7,1,1,10,38,13,1,9,5,0.75,230,1.0,0,0.0,0.375,0,0,31.57142857,20,3.4286,0,"

package org.apache.synapse.registry;

import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.XMLToObjectMapper;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.base.SequenceMediator;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;


public abstract class AbstractRegistry implements Registry {

    private static final Log log = LogFactory.getLog(AbstractRegistry.class);

    
    protected Map properties = new HashMap();

    
    public Object getResource(Entry entry) {

        OMNode omNode = null;
        RegistryEntry re = null;

        
        

        
        if (entry.isCached() && !entry.isExpired()) {
            return entry.getValue();

        
        } else if (!entry.isCached()) {
            omNode = lookup(entry.getKey());
            if (omNode == null) {
                return null;
            } else {
                re = getRegistryEntry(entry.getKey());
            }

        
        
        } else if (entry.isExpired()) {
            if (log.isDebugEnabled()) {
                log.debug(""Cached object has expired for key : "" + entry.getKey());
            }
            re = getRegistryEntry(entry.getKey());

            if (re.getVersion() != Long.MIN_VALUE &&
                re.getVersion() == entry.getVersion()) {
                if (log.isDebugEnabled()) {
                    log.debug(""Expired version number is same as current version in registry"");
                }

                
                
                if (re.getCachableDuration() > 0) {
                    entry.setExpiryTime(
                            System.currentTimeMillis() + re.getCachableDuration());
                } else {
                    entry.setExpiryTime(-1);
                }
                if (log.isDebugEnabled()) {
                    log.debug(""Renew cache lease for another "" + re.getCachableDuration() / 1000 + ""s"");
                }

                
                return entry.getValue();

            } else {
                omNode = lookup(entry.getKey());
            }
        }

        
        

        
        
        if (entry.getMapper() != null) {
            entry.setValue(entry.getMapper().getObjectFromOMNode(omNode));

            if (entry.getValue() instanceof SequenceMediator) {
                SequenceMediator seq = (SequenceMediator) entry.getValue();
                seq.setDynamic(true);
                seq.setRegistryKey(entry.getKey());
            } else if (entry.getValue() instanceof Endpoint) {
                Endpoint ep = (Endpoint) entry.getValue();
            }

        } else {
            
            
            
            if (re != null && re.getType() != null) {

                XMLToObjectMapper mapper = getMapper(re.getType());
                if (mapper != null) {
                    entry.setMapper(mapper);
                    entry.setValue(mapper.getObjectFromOMNode(omNode));

                } else {
                    entry.setValue(omNode);
                }
            }
        }

        
        if (re != null) {
            if (re.getCachableDuration() > 0) {
                entry.setExpiryTime(System.currentTimeMillis() + re.getCachableDuration());
            } else {
                entry.setExpiryTime(-1);
            }
            entry.setVersion(re.getVersion());
        }

        return entry.getValue();
    }

    private XMLToObjectMapper getMapper(URI type) {
        return null;
    }

    public String getProviderClass() {
        return this.getClass().getName();
    }

    public Map getConfigProperties() {
        return properties;
    }

    public void addConfigProperty(String name, String value) {
        properties.put(name, value);
    }
}
"
synapse,1.1,org.apache.synapse.core.SynapseEnvironment,9,1,0,25,9,36,22,4,9,2.0,9,0.0,0,0.0,0.296296296,0,0,0.0,1,1.0,1,"

package org.apache.synapse.core;

import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.statistics.StatisticsCollector;

import java.util.concurrent.ExecutorService;


public interface SynapseEnvironment {

    
    public boolean injectMessage(MessageContext smc);

    
    public void injectAsync(MessageContext smc, SequenceMediator seq);

    
    public void send(EndpointDefinition endpoint, MessageContext smc);

    
    public MessageContext createMessageContext();

    
    public StatisticsCollector getStatisticsCollector();

    
    public void setStatisticsCollector(StatisticsCollector statisticsCollector);

    
     public ExecutorService getExecutorService();

    
    public boolean isInitialized();

    
    public void setInitialized(boolean state);
}
"
synapse,1.1,org.apache.synapse.config.xml.XSLTMediatorSerializer,3,2,0,11,31,3,0,11,3,2.0,142,0.0,0,0.75,0.555555556,0,0,46.33333333,10,3.6667,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.transform.XSLTMediator;
import org.apache.synapse.mediators.MediatorProperty;
import org.apache.synapse.config.xml.AbstractMediatorSerializer;

import java.util.Iterator;
import java.util.List;


public class XSLTMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof XSLTMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        XSLTMediator mediator = (XSLTMediator) m;
        OMElement xslt = fac.createOMElement(""xslt"", synNS);

        if (mediator.getXsltKey() != null) {
            xslt.addAttribute(fac.createOMAttribute(
                ""key"", nullNS, mediator.getXsltKey()));
        } else {
            handleException(""Invalid XSLT mediator. XSLT registry key is required"");
        }
        saveTracingState(xslt,mediator);

        if (mediator.getSource() != null &&
            !XSLTMediator.DEFAULT_XPATH.toString().equals(mediator.getSource().toString())) {
            xslt.addAttribute(fac.createOMAttribute(
                ""source"", nullNS, mediator.getSource().toString()));
            serializeNamespaces(xslt, mediator.getSource());
        }
        if (mediator.getTargetPropertyName() != null) {
            xslt.addAttribute(fac.createOMAttribute(
                ""target"", nullNS, mediator.getTargetPropertyName()));
        }
        serializeProperties(xslt, mediator.getProperties());
        List features = mediator.getFeatures();
        if (!features.isEmpty()) {
            for (Iterator iter = features.iterator(); iter.hasNext();) {
                MediatorProperty mp = (MediatorProperty) iter.next();
                OMElement prop = fac.createOMElement(""feature"", synNS, xslt);
                if (mp.getName() != null) {
                    prop.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
                } else {
                    handleException(""The Feature name is missing"");
                }
                if (mp.getValue() != null) {
                    prop.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue()));
                }  else {
                    handleException(""The Feature value is missing"");
                }
            }
        }
        if (parent != null) {
            parent.addChild(xslt);
        }
        return xslt;
    }

    public String getMediatorClassName() {
        return XSLTMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.metrics.GlobalRequestCountHandler,2,2,0,7,9,1,0,7,2,2.0,20,0.0,0,0.875,0.75,0,0,9.0,1,0.5,0,"

package org.apache.synapse.metrics;

import org.apache.axis2.AxisFault;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.handlers.AbstractHandler;



public class GlobalRequestCountHandler extends AbstractHandler {

    public InvocationResponse invoke(MessageContext msgContext) throws AxisFault {
        msgContext
                .setProperty(MetricsConstants.REQUEST_RECEIVED_TIME, new Long(System.currentTimeMillis()));
        
        ((Counter) msgContext.getParameter(MetricsConstants.GLOBAL_REQUEST_COUNTER).getValue())
                .increment();
        return InvocationResponse.CONTINUE;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.builtin.PropertyMediator,12,2,0,10,37,14,2,8,12,0.831168831,390,0.714285714,0,0.541666667,0.3,0,0,30.91666667,30,3.3333,0,"

package org.apache.synapse.mediators.builtin;

import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.XMLConfigConstants;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;



public class PropertyMediator extends AbstractMediator {

    
    private String name = null;
    
    private String value = null;
    
    private AXIOMXPath expression = null;
    
    private String scope = null;
    
    public static final int ACTION_SET = 0;
    public static final int ACTION_REMOVE = 1;
    
    private int action = ACTION_SET;

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Property mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        if (action == ACTION_SET) {

            String resultValue = (value != null ? value :
                Axis2MessageContext.getStringValue(expression, synCtx));

            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Setting property : "" + name + "" at scope : "" +
                    (scope == null ? ""default"" : scope) + "" to : "" + resultValue + "" (i.e. "" +
                    (value != null ? ""constant : "" + value :
                          ""result of expression : "" + expression) + "")"");
            }

            if (scope == null || XMLConfigConstants.SCOPE_DEFAULT.equals(scope)) {
                
                synCtx.setProperty(name, resultValue);

            } else if (XMLConfigConstants.SCOPE_AXIS2.equals(scope)
                    && synCtx instanceof Axis2MessageContext) {
                
                Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;
                org.apache.axis2.context.MessageContext axis2MessageCtx =
                        axis2smc.getAxis2MessageContext();
                axis2MessageCtx.setProperty(name, resultValue);

            } else if (XMLConfigConstants.SCOPE_CLIENT.equals(scope)
                    && synCtx instanceof Axis2MessageContext) {
                
                Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;
                org.apache.axis2.context.MessageContext axis2MessageCtx =
                        axis2smc.getAxis2MessageContext();
                axis2MessageCtx.getOptions().setProperty(name, resultValue);

            } else if (XMLConfigConstants.SCOPE_TRANSPORT.equals(scope)
                    && synCtx instanceof Axis2MessageContext) {
                
                Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;
                org.apache.axis2.context.MessageContext axis2MessageCtx =
                        axis2smc.getAxis2MessageContext();
                Object headers = axis2MessageCtx.getProperty(
                        org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);

                if (headers != null && headers instanceof Map) {
                    Map headersMap = (HashMap) headers;
                    headersMap.put(name, resultValue);
                }
                if (headers == null) {
                    Map headersMap = new HashMap();
                    headersMap.put(name, resultValue);
                    axis2MessageCtx.setProperty(
                            org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS,
                            headersMap);
                }
            }

        } else {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Removing property : "" + name +
                    "" (scope:"" + (scope == null ? ""default"" : scope) + "")"");
            }

            if (scope == null || XMLConfigConstants.SCOPE_DEFAULT.equals(scope)) {
                
                Set pros = synCtx.getPropertyKeySet();
                if (pros != null) {
                    pros.remove(name);
                }

            } else if ((XMLConfigConstants.SCOPE_AXIS2.equals(scope) ||
                XMLConfigConstants.SCOPE_CLIENT.equals(scope))
                && synCtx instanceof Axis2MessageContext) {
                
                
                Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;
                org.apache.axis2.context.MessageContext axis2MessageCtx =
                        axis2smc.getAxis2MessageContext();
                axis2MessageCtx.removeProperty(name);

            } else if (XMLConfigConstants.SCOPE_TRANSPORT.equals(scope)
                    && synCtx instanceof Axis2MessageContext) {
                
                Axis2MessageContext axis2smc = (Axis2MessageContext) synCtx;
                org.apache.axis2.context.MessageContext axis2MessageCtx =
                        axis2smc.getAxis2MessageContext();
                Object headers = axis2MessageCtx.getProperty(
                        org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);
                if (headers != null && headers instanceof Map) {
                    Map headersMap = (HashMap) headers;
                    headersMap.remove(name);
                } else {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""No transport headers found for the message"");
                    }
                }
            }
        }
        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Property mediator"");
        }
        return true;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public AXIOMXPath getExpression() {
        return expression;
    }

    public void setExpression(AXIOMXPath expression) {
        this.expression = expression;
    }

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    public int getAction() {
        return action;
    }

    public void setAction(int action) {
        this.action = action;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.FailoverEndpointSerializer,2,1,0,12,14,0,1,12,2,0.0,77,1.0,0,0.0,0.75,0,0,37.0,4,2.0,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.FailoverEndpoint;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;

import java.util.List;


public class FailoverEndpointSerializer implements EndpointSerializer {

    private OMFactory fac = null;

    public OMElement serializeEndpoint(Endpoint endpoint) {

        if (!(endpoint instanceof FailoverEndpoint)) {
            throw new SynapseException(""Invalid endpoint type."");
        }

        FailoverEndpoint failoverEndpoint = (FailoverEndpoint) endpoint;

        fac = OMAbstractFactory.getOMFactory();
        OMElement endpointElement = fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        OMElement failoverElement = fac.createOMElement(""failover"", SynapseConstants.SYNAPSE_OMNAMESPACE);
        endpointElement.addChild(failoverElement);

        String name = failoverEndpoint.getName();
        if (name != null) {
            endpointElement.addAttribute(""name"", name, null);
        }

        List endpoints = failoverEndpoint.getEndpoints();
        for (int i = 0; i < endpoints.size(); i++) {
            Endpoint childEndpoint = (Endpoint) endpoints.get(i);
            EndpointSerializer serializer = EndpointAbstractSerializer.
                    getEndpointSerializer(childEndpoint);
            OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
            failoverElement.addChild(aeElement);
        }

        return endpointElement;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.WSDLEndpointFactory,8,1,0,14,65,20,1,13,3,0.571428571,552,1.0,1,0.0,0.244897959,0,0,67.75,26,5.875,2,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.OMNode;
import org.apache.axis2.description.WSDL2Constants;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfigUtils;
import org.apache.synapse.config.xml.endpoints.utils.WSDL11EndpointBuilder;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.WSDLEndpoint;
import org.apache.synapse.endpoints.utils.EndpointDefinition;

import javax.xml.namespace.QName;
import java.net.URL;
import java.io.File;


public class WSDLEndpointFactory implements EndpointFactory {

    private static Log log = LogFactory.getLog(WSDLEndpointFactory.class);

    private static WSDLEndpointFactory instance = new WSDLEndpointFactory();

    private WSDLEndpointFactory() {}

    public static WSDLEndpointFactory getInstance() {
        return instance;
    }

    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return createEndpoint((OMElement) om, false);
        } else {
            handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
        }
        return null;
    }

    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {

        WSDLEndpoint wsdlEndpoint = new WSDLEndpoint();

        if (!anonymousEndpoint) {
            OMAttribute name = epConfig.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""name""));

            if (name != null) {
                wsdlEndpoint.setName(name.getAttributeValue());
            }
        }

        OMElement wsdlElement = epConfig.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""wsdl""));

        if (wsdlElement != null) {

            
            OMElement suspendElement = wsdlElement.getFirstChildWithName(new QName(
                    SynapseConstants.SYNAPSE_NAMESPACE,
                    org.apache.synapse.config.xml.XMLConfigConstants.SUSPEND_DURATION_ON_FAILURE));

            if (suspendElement != null) {
                String suspend = suspendElement.getText();

                try {
                    if (suspend != null) {
                        long suspendDuration = Long.parseLong(suspend.trim());
                        wsdlEndpoint.setSuspendOnFailDuration(suspendDuration * 1000);
                    }

                } catch (NumberFormatException e) {
                    handleException(""suspendDurationOnFailure should be valid number."");
                }
            }

            EndpointDefinition endpoint = null;

            
            
            String serviceName = wsdlElement.getAttributeValue
                    (new QName(org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE,""service""));

            String portName = wsdlElement.getAttributeValue
                    (new QName(org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE,""port""));

            
            String wsdlURI = wsdlElement.getAttributeValue
                    (new QName(org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE,""uri""));

            
            
            wsdlEndpoint.setServiceName(serviceName);
            wsdlEndpoint.setPortName(portName);

            if (wsdlURI != null) {

                wsdlEndpoint.setWsdlURI(wsdlURI.trim());
                try {
                    OMElement wsdlOM = SynapseConfigUtils.getOMElementFromURL(
                        new URL(wsdlURI).toString());
                    if (wsdlOM != null) {
                        OMNamespace ns = wsdlOM.getNamespace();
                        if (ns != null) {
                            String nsUri = wsdlOM.getNamespace().getNamespaceURI();
                            if (org.apache.axis2.namespace.Constants.NS_URI_WSDL11.equals(nsUri)) {
                                endpoint = new WSDL11EndpointBuilder().
                                    createEndpointDefinitionFromWSDL(wsdlURI.trim(),wsdlOM, serviceName, portName);

                            } else if (WSDL2Constants.WSDL_NAMESPACE.equals(nsUri)) {
                                
                                

                                handleException(""WSDL 2.0 Endpoints are currently not supported"");
                            }
                        }
                    }
                } catch (Exception e) {
                    handleException(""Couldn't create endpoint from the given WSDL URI : ""
                        + e.getMessage(), e);
                }
            }

            
            OMElement definitionElement = wsdlElement.getFirstChildWithName
                    (new QName(org.apache.axis2.namespace.Constants.NS_URI_WSDL11, ""definitions""));
            if (endpoint == null && definitionElement != null) {
                wsdlEndpoint.setWsdlDoc(definitionElement);
                String resolveRoot = System.getProperty(SynapseConstants.RESOLVE_ROOT);
                String baseUri = ""file:./"";
                if (resolveRoot != null) {
                    baseUri = resolveRoot.trim();
                }
                if(!baseUri.endsWith(File.separator)){
                    baseUri = baseUri + File.separator;
                }
                endpoint = new WSDL11EndpointBuilder().
                    createEndpointDefinitionFromWSDL(baseUri, definitionElement, serviceName, portName);
            }

            
            OMElement descriptionElement = wsdlElement.getFirstChildWithName
                    (new QName(org.apache.axis2.namespace.Constants.NS_URI_WSDL11, ""description""));
            if (endpoint == null && descriptionElement != null) {
                wsdlEndpoint.setWsdlDoc(descriptionElement);
                handleException(""WSDL 2.0 Endpoints are currently not supported."");
            }
            if (endpoint != null) {
                
                extractQOSInformation(endpoint, wsdlElement);
                OMAttribute statistics = epConfig.getAttribute(
                        new QName(org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE,
                                org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ATTRIB_NAME));
                if (statistics != null) {
                    String statisticsValue = statistics.getAttributeValue();
                    if (statisticsValue != null) {
                        if (org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ENABLE.equals(
                                statisticsValue)) {
                            endpoint.setStatisticsState(org.apache.synapse.SynapseConstants.STATISTICS_ON);
                        } else if (org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_DISABLE.equals(
                                statisticsValue)) {
                            endpoint.setStatisticsState(org.apache.synapse.SynapseConstants.STATISTICS_OFF);
                        }
                    }
                }
                wsdlEndpoint.setEndpoint(endpoint);
            } else {
                handleException(""WSDL is not specified for WSDL endpoint."");
            }
        }

        return wsdlEndpoint;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }

    private void extractQOSInformation(EndpointDefinition endpointDefinition, OMElement wsdlElement) {

        OMAttribute format = wsdlElement.getAttribute(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""format""));
        OMAttribute optimize = wsdlElement.getAttribute(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""optimize""));

        if (format != null)
        {
            String forceValue = format.getAttributeValue().trim().toLowerCase();
            if (SynapseConstants.FORMAT_POX.equals(forceValue)) {
                endpointDefinition.setForcePOX(true);
                endpointDefinition.setFormat(SynapseConstants.FORMAT_POX);

            } else if (SynapseConstants.FORMAT_GET.equals(forceValue)) {
            	endpointDefinition.setForceGET(true);
            	endpointDefinition.setFormat(SynapseConstants.FORMAT_GET);

            } else if (SynapseConstants.FORMAT_SOAP11.equals(forceValue)) {
                endpointDefinition.setForceSOAP11(true);
                endpointDefinition.setFormat(SynapseConstants.FORMAT_SOAP11);
                
            } else if (SynapseConstants.FORMAT_SOAP12.equals(forceValue)) {
                endpointDefinition.setForceSOAP12(true);
                endpointDefinition.setFormat(SynapseConstants.FORMAT_SOAP12);
                
            } else {
                handleException(""force value -""""+forceValue+"""" not yet implemented"");
            }
        }

        if (optimize != null && optimize.getAttributeValue().length() > 0) {
            String method = optimize.getAttributeValue().trim();
            if (""mtom"".equalsIgnoreCase(method)) {
                endpointDefinition.setUseMTOM(true);
            } else if (""swa"".equalsIgnoreCase(method)) {
                endpointDefinition.setUseSwa(true);
            }
        }

        OMElement wsAddr = wsdlElement.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableAddressing""));
        if (wsAddr != null) {
            endpointDefinition.setAddressingOn(true);
            String useSepList = wsAddr.getAttributeValue(new QName(
                    ""separateListener""));
            if (useSepList != null) {
                if (useSepList.trim().toLowerCase().startsWith(""tr"")
                        || useSepList.trim().startsWith(""1"")) {
                    endpointDefinition.setUseSeparateListener(true);
                }
            }
        }

        OMElement wsSec = wsdlElement.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableSec""));
        if (wsSec != null) {
            endpointDefinition.setSecurityOn(true);
            OMAttribute policy = wsSec.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""policy""));
            if (policy != null) {
                endpointDefinition.setWsSecPolicyKey(policy.getAttributeValue());
            }
        }
        OMElement wsRm = wsdlElement.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableRM""));
        if (wsRm != null) {
            endpointDefinition.setReliableMessagingOn(true);
            OMAttribute policy = wsRm.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""policy""));
            if (policy != null) {
                endpointDefinition.setWsRMPolicyKey(policy.getAttributeValue());
            }
        }

        
        OMElement timeout = wsdlElement.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""timeout""));
        if (timeout != null) {
            OMElement duration = timeout.getFirstChildWithName(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""duration""));
            if (duration != null) {
                String d = duration.getText();
                if (d != null) {
                    long timeoutSeconds = new Long(d.trim()).longValue();
                    endpointDefinition.setTimeoutDuration(timeoutSeconds * 1000);
                }
            }

            OMElement action = timeout.getFirstChildWithName(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""action""));
            if (action != null) {
                String a = action.getText();
                if (a != null) {
                    if ((a.trim()).equalsIgnoreCase(""discard"")) {
                        endpointDefinition.setTimeoutAction(SynapseConstants.DISCARD);

                        
                        if (endpointDefinition.getTimeoutDuration() == 0) {
                            endpointDefinition.setTimeoutDuration(30000);
                        }
                    } else if ((a.trim()).equalsIgnoreCase(""fault"")) {
                        endpointDefinition.setTimeoutAction(SynapseConstants.DISCARD_AND_FAULT);

                        
                        if (endpointDefinition.getTimeoutDuration() == 0) {
                            endpointDefinition.setTimeoutDuration(30000);
                        }
                    }
                }
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.OutMediatorSerializer,3,3,0,7,15,3,0,7,3,2.0,46,0.0,0,0.777777778,0.555555556,0,0,14.33333333,3,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.filters.OutMediator;

public class OutMediatorSerializer extends AbstractListMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof OutMediator)) {
            handleException(""Unsupported mediator passed out for serialization : "" + m.getType());
        }

        OutMediator mediator = (OutMediator) m;
        OMElement out = fac.createOMElement(""out"", synNS);
        saveTracingState(out,mediator);
        serializeChildren(out, mediator.getList());

        if (parent != null) {
            parent.addChild(out);
        }
        return out;
    }

    public String getMediatorClassName() {
        return OutMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.mediators.db.DBLookupMediator,2,3,0,5,28,1,3,3,1,2.0,156,0.0,0,0.962962963,0.666666667,2,5,77.0,5,2.5,0,"

package org.apache.synapse.mediators.db;

import org.apache.synapse.MessageContext;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.util.Iterator;


public class DBLookupMediator extends AbstractDBMediator {

    protected void processStatement(Statement stmnt, MessageContext msgCtx) {

        boolean traceOn = isTraceOn(msgCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        
        
        Connection con = null;
        try {
            PreparedStatement ps = getPreparedStatement(stmnt, msgCtx);
            con = ps.getConnection();
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn,
                        ""Processing the first row returned : "" + stmnt.getRawStatement());
                }

                Iterator propNameIter = stmnt.getResultsMap().keySet().iterator();
                while (propNameIter.hasNext()) {

                    String propName = (String) propNameIter.next();
                    String columnStr = (String) stmnt.getResultsMap().get(propName);

                    Object obj = null;
                    try {
                        int colNum = Integer.parseInt(columnStr);
                        obj = rs.getObject(colNum);
                    } catch (NumberFormatException ignore) {
                        obj = rs.getObject(columnStr);
                    }

                    if (obj != null) {
                        if (traceOrDebugOn) {
                            traceOrDebug(traceOn, ""Column : "" + columnStr +
                                "" returned value : "" + obj +
                                "" Setting this as the message property : "" + propName);
                        }
                        msgCtx.setProperty(propName, obj.toString());
                    } else {
                        if (traceOrDebugOn) {
                            traceOrDebugWarn(traceOn, ""Column : "" + columnStr +
                                "" returned null Skip setting message property : "" + propName);
                        }
                    }
                }
            } else {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Statement : ""
                        + stmnt.getRawStatement() + "" returned 0 rows"");
                }
            }
            
        } catch (SQLException e) {
            handleException(""Error executing statement : "" + stmnt.getRawStatement() +
                "" against DataSource : "" + getDSName(), e, msgCtx);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ignore) {}
            }
        }
    }

}
"
synapse,1.1,org.apache.synapse.statistics.Statistics,7,1,0,1,8,0,1,0,7,0.722222222,104,1.0,0,0.0,0.428571429,0,0,13.0,5,1.4286,0,"
package org.apache.synapse.statistics;



public class Statistics {

    
    private long maxProcessingTime = 0;
    
    private long minProcessingTime = -1;
    
    private double avgProcessingTime = 0;
    
    private double totalProcessingTime;
    
    private int count = 0;
    
    private int faultCount = 0;

    
    public void update(long inTime, long outTime, boolean isFault) {

        if (outTime < 0 || inTime < 0) {
            return;
        }

        count++;
        if (isFault) {
            faultCount++;
        }

        long responseTime = outTime - inTime;
        if (maxProcessingTime < responseTime) {
            maxProcessingTime = responseTime;
        }
        if (minProcessingTime > responseTime) {
            minProcessingTime = responseTime;
        }
        if (minProcessingTime == -1) {
            minProcessingTime = responseTime;
        }
        totalProcessingTime = totalProcessingTime + responseTime;
        avgProcessingTime = totalProcessingTime / count;
    }

    
    public long getMaxProcessingTime() {
        return maxProcessingTime;
    }

    
    public double getAvgProcessingTime() {
        return avgProcessingTime;
    }

    
    public long getMinProcessingTime() {
        return minProcessingTime;
    }

    
    public int getFaultCount() {
        return faultCount;
    }

    
    public int getCount() {
        return count;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.AbstractListMediator,10,2,7,14,35,0,7,7,10,0.0,173,1.0,0,0.590909091,0.283333333,0,0,16.2,3,1.5,0,"

package org.apache.synapse.mediators;

import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.Mediator;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.SynapseEnvironment;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public abstract class AbstractListMediator extends AbstractMediator
    implements ListMediator, ManagedLifecycle {

    
    protected List mediators = new ArrayList();

    public boolean mediate(MessageContext synCtx) {

        int parentsEffectiveTraceState = synCtx.getTracingState();
        
        
        setEffectiveTraceState(synCtx);
        int myEffectiveTraceState = synCtx.getTracingState();

        try {
            if (isTraceOrDebugOn(isTraceOn(synCtx))) {
                traceOrDebug(isTraceOn(synCtx), ""Sequence <"" + getType() + ""> :: mediate()"");
            }

            for (Iterator it = mediators.iterator(); it.hasNext();) {
                Mediator m = (Mediator) it.next();

                
                synCtx.setTracingState(myEffectiveTraceState);
                if (!m.mediate(synCtx)) {
                    return false;
                }
            }
        } finally {
            synCtx.setTracingState(parentsEffectiveTraceState);
        }
        return true;
    }

    public List getList() {
        return mediators;
    }

    public boolean addChild(Mediator m) {
        return mediators.add(m);
    }

    public boolean addAll(List c) {
        return mediators.addAll(c);
    }

    public Mediator getChild(int pos) {
        return (Mediator) mediators.get(pos);
    }

    public boolean removeChild(Mediator m) {
        return mediators.remove(m);
    }

    public Mediator removeChild(int pos) {
        return (Mediator) mediators.remove(pos);
    }

    
    public void init(SynapseEnvironment se) {
        if (log.isDebugEnabled()) {
            log.debug(""Initializing child mediators"");
        }

        for (Iterator it = mediators.iterator(); it.hasNext();) {
            Mediator m = (Mediator) it.next();

            if (m instanceof ManagedLifecycle) {
            	((ManagedLifecycle) m).init(se);
            }
        } 
    }

    
    public void destroy() {
        if (log.isDebugEnabled()) {
            log.debug(""Destroying child mediators"");
        }

        for (Iterator it = mediators.iterator(); it.hasNext();) {
            Mediator m = (Mediator) it.next();

            if (m instanceof ManagedLifecycle) {
            	((ManagedLifecycle) m).destroy();
            }
        } 
    }
}
"
synapse,1.1,org.apache.synapse.mediators.eip.EIPUtils,5,1,0,11,18,10,2,9,4,1.0,126,1.0,0,0.0,0.583333333,0,0,24.0,1,0.6,0,"

package org.apache.synapse.mediators.eip;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jaxen.JaxenException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class EIPUtils {

    private static final Log log = LogFactory.getLog(EIPUtils.class);

    
    public static List getMatchingElements(SOAPEnvelope envelope, AXIOMXPath expression)
        throws JaxenException {

        Object o = expression.evaluate(envelope);
        if (o instanceof OMNode) {
            List list = new ArrayList();
            list.add(o);
            return list;
        } else if (o instanceof List) {
            return (List) o;
        } else {
            return new ArrayList();
        }
    }

    
    public static List getDetachedMatchingElements(SOAPEnvelope envelope, AXIOMXPath expression)
        throws JaxenException {

        List elementList = new ArrayList();
        Object o = expression.evaluate(envelope);
        if (o instanceof OMNode) {
            elementList.add(((OMNode) o).detach());
        } else if (o instanceof List) {
            for (Iterator itr = ((List) o).iterator(); itr.hasNext();) {
                Object elem = itr.next();
                if (elem instanceof OMNode) {
                    elementList.add(((OMNode) elem).detach());
                }
            }
        }
        return elementList;
    }

    
    public static void enrichEnvelope(SOAPEnvelope envelope, SOAPEnvelope enricher,
        AXIOMXPath expression) throws JaxenException {

        OMElement enrichingElement;
        List elementList = getMatchingElements(envelope, expression);

        if (elementList != null && !elementList.isEmpty()) {

            
            Object o = elementList.get(0);

            if (o instanceof OMElement &&
                ((OMElement) o).getParent() != null &&
                ((OMElement) o).getParent() instanceof OMElement) {
                enrichingElement = (OMElement) ((OMElement) o).getParent();
            } else {
                enrichingElement = envelope.getBody();
            }

            List list = getMatchingElements(enricher, expression);
            if (list != null) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    o = itr.next();
                    if (o != null && o instanceof OMElement) {
                        enrichingElement.addChild((OMElement) o);
                    }
                }
            }
        }
    }    
}
"
synapse,1.1,org.apache.synapse.ManagedLifecycle,2,1,0,9,2,1,8,1,2,2.0,2,0.0,0,0.0,0.75,0,0,0.0,1,1.0,0,"

package org.apache.synapse;

import org.apache.synapse.core.SynapseEnvironment;


public interface ManagedLifecycle {

    
    public void init(SynapseEnvironment se);

    
    public void destroy();
}
"
synapse,1.1,org.apache.synapse.statistics.StatisticsStack,4,1,0,7,4,6,6,1,4,2.0,4,0.0,0,0.0,0.7,0,0,0.0,1,1.0,0,"
package org.apache.synapse.statistics;



public interface StatisticsStack {

    
    public void put(String key,long initTime, boolean isInFlow, boolean isStatisticsEnable,
                    boolean isFault);

    
    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault);

    
    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault, String name);

    
    public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector,
                                               boolean isFault);

}
"
synapse,1.1,org.apache.synapse.config.SynapseConfigurationBuilder,6,1,0,10,35,3,1,9,3,0.4,145,1.0,0,0.0,0.25,0,0,23.0,3,1.0,0,"

package org.apache.synapse.config;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.XMLConfigurationBuilder;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.mediators.builtin.DropMediator;
import org.apache.synapse.mediators.builtin.LogMediator;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;


public class SynapseConfigurationBuilder {

    private static Log log = LogFactory.getLog(SynapseConfigurationBuilder.class);

    
    public static SynapseConfiguration getDefaultConfiguration() {
        
        SynapseConfiguration config = new SynapseConfiguration();
        SequenceMediator mainmediator = new SequenceMediator();
        mainmediator.addChild(new LogMediator());
        mainmediator.addChild(new DropMediator());
        config.addSequence(SynapseConstants.MAIN_SEQUENCE_KEY, mainmediator);
        SequenceMediator faultmediator = new SequenceMediator();
        LogMediator fault = new LogMediator();
        fault.setLogLevel(LogMediator.FULL);
        faultmediator.addChild(fault);
        config.addSequence(SynapseConstants.FAULT_SEQUENCE_KEY, faultmediator);
        return config;
    }

    
    public static SynapseConfiguration getConfiguration(String configFile) {

        
        try {
            SynapseConfiguration synCfg
                = XMLConfigurationBuilder.getConfiguration(new FileInputStream(configFile));
            log.info(""Loaded Synapse configuration from : "" + configFile);
            synCfg.setPathToConfigFile(new File(configFile).getAbsolutePath());
            loadSynapseProperties(synCfg);
            return synCfg;

        } catch (FileNotFoundException fnf) {
            handleException(""Cannot load Synapse configuration from : "" + configFile, fnf);
        } catch (Exception e) {
            handleException(""Could not initialize Synapse : "" + e.getMessage(), e);
        }
        return null;
    }

    private static void loadSynapseProperties(SynapseConfiguration synCfg) {
        String props = System.getProperty(SynapseConstants.SYNAPSE_PROPERTIES);
        if (props == null) {
            props = SynapseConstants.DEFAULT_PROP_PATH;
        }
        try {
            synCfg.getProperties().load(Thread.currentThread().getContextClassLoader().getResourceAsStream(props));
        } catch (Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(""Unable to load synapse properties : Using the default tunning parameters for Synapse"");
            }
        }
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.utils.WSDL20EndpointBuilder,1,1,0,0,2,0,0,0,1,2.0,4,0.0,0,0.0,1.0,0,0,3.0,0,0.0,0,"

package org.apache.synapse.config.xml.endpoints.utils;

import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMElement;
import org.apache.woden.WSDLFactory;
import org.apache.woden.WSDLReader;
import org.apache.woden.WSDLException;
import org.apache.woden.types.NCName;
import org.apache.woden.wsdl20.xml.DescriptionElement;
import org.apache.woden.wsdl20.Description;
import org.apache.woden.wsdl20.Service;
import org.apache.woden.wsdl20.Endpoint;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;


public class WSDL20EndpointBuilder {


}
"
synapse,1.1,org.apache.synapse.config.Entry,26,1,0,16,31,245,12,4,24,0.943333333,193,0.666666667,1,0.0,0.194285714,0,0,5.961538462,4,1.3462,0,"

package org.apache.synapse.config;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;

import java.net.URL;


public class Entry {

    private static final Log log = LogFactory.getLog(Entry.class);

    
    private String key;
    
    private int type;
    
    private URL src;
    
    private Object value;
    
    private XMLToObjectMapper mapper;
    
    private long version;
    
    private long expiryTime;

    public Entry() {}
    
    public Entry(String key) {
        this.key = key;
    }

    public int getType() {
        return type;
    }

    public boolean isRemote() {
        return type == REMOTE_ENTRY;
    }

    public boolean isURLSource() {
        return type == URL_SRC;
    }

    public boolean isInlineXML() {
        return type == INLINE_XML;
    }

    public boolean isInlineText() {
        return type == INLINE_TEXT;
    }

    public void setType(int type) {
        if (type <= 4 && type >= 0) {
            this.type = type;
        } else {
            handleException(""Invalid entry type for the static entry"");
        }
    }

    public URL getSrc() {
        return src;
    }

    public void setSrc(URL src) {
        this.src = src;
    }

    public String getKey() {
        return this.key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    
    public Object getValue() {
        return value;
    }

    public void setValue(Object value) {
        this.value = value;
    }

    
    public XMLToObjectMapper getMapper() {
        return mapper;
    }

    
    public void setMapper(XMLToObjectMapper mapper) {
        this.mapper = mapper;
    }

    public long getVersion() {
        return version;
    }

    public void setVersion(long version) {
        this.version = version;
    }

    public long getExpiryTime() {
        return expiryTime;
    }

    public void setExpiryTime(long expiryTime) {
        this.expiryTime = expiryTime;
    }

    public boolean isExpired() {
        if (getType() == REMOTE_ENTRY && getExpiryTime() > 0) {
            return System.currentTimeMillis() > expiryTime;
        } else {
            return false;
        }
    }

    public boolean isCached() {
        return value != null;
    }

    public void clearCache() {
        if (this.isDynamic()) {
            value = null;
            expiryTime = System.currentTimeMillis();
        }
    }

    public boolean isDynamic() {
        return type == REMOTE_ENTRY;
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    public static final int INLINE_TEXT = 0;
    public static final int INLINE_XML = 1;
    public static final int URL_SRC = 2;
    public static final int REMOTE_ENTRY = 3;
}
"
synapse,1.1,org.apache.synapse.config.xml.SequenceMediatorSerializer,4,3,0,11,24,4,3,8,4,2.0,188,0.0,0,0.7,0.5,0,0,46.0,10,4.25,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.base.SequenceMediator;


public class SequenceMediatorSerializer extends AbstractListMediatorSerializer {

    public OMElement serializeAnonymousSequence(OMElement parent, SequenceMediator mediator) {
        OMElement sequence = fac.createOMElement(""sequence"", synNS);
        int isEnableStatistics = mediator.getStatisticsState();
        String statisticsValue = null;
        if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_ON) {
            statisticsValue = XMLConfigConstants.STATISTICS_ENABLE;
        } else if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_OFF) {
            statisticsValue = XMLConfigConstants.STATISTICS_DISABLE;
        }
        if (statisticsValue != null) {
            sequence.addAttribute(fac.createOMAttribute(
                    XMLConfigConstants.STATISTICS_ATTRIB_NAME, nullNS, statisticsValue));
        }
        if (mediator.getErrorHandler() != null) {
            sequence.addAttribute(fac.createOMAttribute(
                    ""onError"", nullNS, mediator.getErrorHandler()));
        }
        saveTracingState(sequence, mediator);
        serializeChildren(sequence, mediator.getList());
        if (parent != null) {
            parent.addChild(sequence);
        }
        return sequence;
    }

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof SequenceMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        SequenceMediator mediator = (SequenceMediator) m;
        OMElement sequence = fac.createOMElement(""sequence"", synNS);

        
        
        if (mediator.isDynamic()) {
            sequence.addAttribute(fac.createOMAttribute(
                    ""name"", nullNS, mediator.getName()));
            sequence.addAttribute(fac.createOMAttribute(
                    ""key"", nullNS, mediator.getRegistryKey()));

        } else {

            int isEnableStatistics = mediator.getStatisticsState();
            String statisticsValue = null;
            if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_ON) {
                statisticsValue = XMLConfigConstants.STATISTICS_ENABLE;
            } else if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_OFF) {
                statisticsValue = XMLConfigConstants.STATISTICS_DISABLE;
            }
            if (statisticsValue != null) {
                sequence.addAttribute(fac.createOMAttribute(
                        XMLConfigConstants.STATISTICS_ATTRIB_NAME, nullNS, statisticsValue));
            }

            if (mediator.getKey() != null) {
                sequence.addAttribute(fac.createOMAttribute(
                        ""key"", nullNS, mediator.getKey()));
            } else if (mediator.getName() != null) {
                sequence.addAttribute(fac.createOMAttribute(
                        ""name"", nullNS, mediator.getName()));

                if (mediator.getErrorHandler() != null) {
                    sequence.addAttribute(fac.createOMAttribute(
                            ""onError"", nullNS, mediator.getErrorHandler()));
                }
                saveTracingState(sequence, mediator);
                serializeChildren(sequence, mediator.getList());
            }
        }

        if (parent != null) {
            parent.addChild(sequence);
        }
        return sequence;
    }

    public String getMediatorClassName() {
        return SequenceMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.util.SimpleMap,22,1,0,2,22,231,2,0,22,2.0,22,0.0,0,0.0,0.204545455,0,0,0.0,1,1.0,0,"package org.apache.synapse.util;

import java.util.Map;


public interface SimpleMap extends Map {
	
	public Object get(String name);
	public void put(String name, Object value);
	public boolean getBoolean(String name);
	public void putBoolean(String name, boolean b);
	public String getString(String value);
	public void putString(String name, String value);
	public char getChar(String name);
	public void putChar(String name, char c);
	public int getInt(String name);
	public void putInt(String name, int i);
	public short getShort(String name);
	public void putShort(String name, short s);
	public float getFloat(String name);
	public void putFloat(String name, float fl);
	public double getDouble(String name);
	public void putDouble(String name, double d);
	public long getLong(String name);
	public void putLong(String name, long l);
	public byte getByte(String name);
	public void putByte(String name, byte b);
	public byte[] getBytes(String name);
	public void putBytes(String name, byte[] bytes);
	

}
"
synapse,1.1,org.apache.synapse.config.xml.MediatorPropertyFactory,3,1,0,11,27,1,2,9,2,0.5,166,1.0,0,0.0,0.5,0,0,54.0,11,3.6667,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.MediatorProperty;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class MediatorPropertyFactory {

    private static final Log log = LogFactory.getLog(MediatorPropertyFactory.class);

    public static List getMediatorProperties(OMElement elem) {

        List propertyList = new ArrayList();

        Iterator iter = elem.getChildrenWithName(new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""property""));
        while (iter.hasNext()) {

            OMElement propEle = (OMElement) iter.next();
            OMAttribute attName  = propEle.getAttribute(MediatorProperty.ATT_NAME_Q);
            OMAttribute attValue = propEle.getAttribute(MediatorProperty.ATT_VALUE_Q);
            OMAttribute attExpr  = propEle.getAttribute(MediatorProperty.ATT_EXPR_Q);

            MediatorProperty prop = new MediatorProperty();

            if (attName == null || attName.getAttributeValue() == null ||
                attName.getAttributeValue().trim().length() == 0) {
                String msg = ""Entry name is a required attribute for a Log property"";
                log.error(msg);
                throw new SynapseException(msg);
            } else {
                prop.setName(attName.getAttributeValue());
            }

            
            if (attValue != null) {
                if (attValue.getAttributeValue() == null || attValue.getAttributeValue().trim().length() == 0) {
                    String msg = ""Entry attribute value (if specified) is required for a Log property"";
                    log.error(msg);
                    throw new SynapseException(msg);
                } else {
                    prop.setValue(attValue.getAttributeValue());
                }

            } else if (attExpr != null) {

                if (attExpr.getAttributeValue() == null || attExpr.getAttributeValue().trim().length() == 0) {
                    String msg = ""Entry attribute expression (if specified) is required for a mediator property"";
                    log.error(msg);
                    throw new SynapseException(msg);

                } else {
                    try {
                        AXIOMXPath xp = new AXIOMXPath(attExpr.getAttributeValue());
                        OMElementUtils.addNameSpaces(xp, propEle, log);
                        prop.setExpression(xp);

                    } catch (JaxenException e) {
                        String msg = ""Invalid XPapth expression : "" + attExpr.getAttributeValue();
                        log.error(msg);
                        throw new SynapseException(msg, e);
                    }
                }

            } else {
                String msg = ""Entry attribute value OR expression must be specified for a mediator property"";
                log.error(msg);
                throw new SynapseException(msg);
            }

            propertyList.add(prop);
        }

        return propertyList;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher,5,1,0,8,17,0,2,6,5,0.25,124,1.0,0,0.0,0.6,0,0,23.6,5,3.0,0,"

package org.apache.synapse.endpoints.dispatch;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.MessageContext;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.om.OMElement;

import javax.xml.namespace.QName;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;


public class SimpleClientSessionDispatcher implements Dispatcher {

    
    private final Map sessionMap = Collections.synchronizedMap(new HashMap());

    public Endpoint getEndpoint(MessageContext synCtx) {

        SOAPHeader header = synCtx.getEnvelope().getHeader();

        if (header != null) {
            OMElement sgcIDElm = header.getFirstChildWithName(
                new QName(""http:

            if (sgcIDElm != null) {
                String sgcID = sgcIDElm.getText();

                if (sgcID != null) {
                    Object o = sessionMap.get(sgcID);

                    if (o != null) {
                        return (Endpoint) o;
                    }
                }
            }
        }

        return null;
    }

    public void updateSession(MessageContext synCtx, Endpoint endpoint) {

        SOAPHeader header = synCtx.getEnvelope().getHeader();

        if (header != null) {
            OMElement csIDElm = header.getFirstChildWithName(
                new QName(""http:

            if (csIDElm != null) {
                String csID = csIDElm.getText();

                if (csID != null) {
                    
                    synchronized (sessionMap) {
                        if (!sessionMap.containsKey(csID)) {
                            sessionMap.put(csID, endpoint);
                        }
                    }
                }
            }
        }
    }

    public void unbind(MessageContext synCtx) {

        SOAPHeader header = synCtx.getEnvelope().getHeader();

        if (header != null) {
            OMElement csIDElm = header.getFirstChildWithName(
                new QName(""http:

            if (csIDElm != null) {
                String csID = csIDElm.getText();

                if (csID != null) {
                    sessionMap.remove(csID);
                }
            }
        }
    }

    public boolean isServerInitiatedSession() {
        return false;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.filters.SwitchMediator,8,2,0,9,32,0,2,7,8,0.571428571,219,1.0,1,0.65,0.375,0,0,26.0,15,2.625,0,"

package org.apache.synapse.mediators.filters;

import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.MessageContext;
import org.apache.synapse.config.xml.SwitchCase;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class SwitchMediator extends AbstractMediator {

    
    private AXIOMXPath source = null;
    
    private List cases = new ArrayList();
    
    private SwitchCase defaultCase = null;

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Switch mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        int parentsEffectiveTraceState = synCtx.getTracingState();
        
        
        setEffectiveTraceState(synCtx);
        int myEffectiveTraceState = synCtx.getTracingState();

        String sourceText = Axis2MessageContext.getStringValue(source, synCtx);
        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""XPath : "" + source + "" evaluates to : "" + sourceText);
        }

        try {
            if ((sourceText == null || cases.isEmpty()) && defaultCase != null) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Source XPath evaluated to : null or no switch "" +
                        ""cases found. Executing the default case"");
                }

                return defaultCase.mediate(synCtx);

            } else {
                for (Iterator iter = cases.iterator(); iter.hasNext();) {
                    SwitchCase swCase = (SwitchCase) iter.next();

                    if (swCase != null) {
                        if (swCase.matches(sourceText)) {
                            if (traceOrDebugOn) {
                                traceOrDebug(traceOn, ""Matching case found : "" + swCase.getRegex());
                            }
                            return swCase.mediate(synCtx);
                        }
                    }
                }

                if (defaultCase != null) {
                    
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""None of the switch cases matched - executing default"");
                    }
                    return defaultCase.mediate(synCtx);
                } else {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""None of the switch cases matched - no default case"");
                    }
                }
            }

        } finally {
            synCtx.setTracingState(parentsEffectiveTraceState);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Switch mediator"");
        }
        return true;
    }

    
    public void addCase(SwitchCase m) {
        cases.add(m);
    }

    
    public List getCases() {
        return cases;
    }

    
    public AXIOMXPath getSource() {
        return source;
    }

    
    public void setSource(AXIOMXPath source) {
        this.source = source;
    }

    
    public SwitchCase getDefaultCase() {
        return defaultCase;
    }

    
    public void setDefaultCase(SwitchCase defaultCase) {
        this.defaultCase = defaultCase;
    }
}
"
synapse,1.1,org.apache.synapse.metrics.Counter,3,1,0,2,4,0,2,0,3,0.0,20,1.0,0,0.0,1.0,0,0,5.333333333,1,0.6667,0,"

package org.apache.synapse.metrics;


public class Counter {

    private long count = 0;

    public synchronized void increment(){
        count++;
    }

    public long getCount() {
        return count;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.FailoverEndpointFactory,8,1,0,10,29,20,1,10,3,0.714285714,125,1.0,1,0.0,0.244897959,0,0,14.375,3,1.25,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.FailoverEndpoint;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;
import java.util.ArrayList;
import java.util.Iterator;


public class FailoverEndpointFactory implements EndpointFactory {

    private static Log log = LogFactory.getLog(FailoverEndpointFactory.class);

    private static FailoverEndpointFactory instance = new FailoverEndpointFactory();

    private FailoverEndpointFactory() {}

    public static FailoverEndpointFactory getInstance() {
        return instance;
    }

    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {

        OMElement failoverElement = epConfig.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""failover""));
        if (failoverElement != null) {

            FailoverEndpoint failoverEndpoint = new FailoverEndpoint();

            
            String name = epConfig.getAttributeValue(new QName(""name""));
            if (name != null) {
                failoverEndpoint.setName(name);
            }

            
            ArrayList endpoints = getEndpoints(failoverElement, failoverEndpoint);
            failoverEndpoint.setEndpoints(endpoints);

            return failoverEndpoint;
        }

        return null;
    }

    public Object getObjectFromOMNode(OMNode om) {
         if (om instanceof OMElement) {
            return createEndpoint((OMElement) om, false);
        } else {
            handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
        }
        return null;
    }

    private ArrayList getEndpoints(OMElement failoverElement, Endpoint parent) {

        ArrayList endpoints = new ArrayList();
        Iterator iter = failoverElement.getChildrenWithName
                (org.apache.synapse.config.xml.XMLConfigConstants.ENDPOINT_ELT);
        while (iter.hasNext()) {

            OMElement endptElem = (OMElement) iter.next();

            EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
            Endpoint endpoint = epFac.createEndpoint(endptElem, true);
            endpoint.setParentEndpoint(parent);
            endpoints.add(endpoint);
        }

        return endpoints;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.mediators.eip.aggregator.Aggregate,16,1,0,4,29,58,1,3,15,0.858333333,199,1.0,0,0.0,0.277777778,0,0,10.9375,9,1.5625,2,"

package org.apache.synapse.mediators.eip.aggregator;

import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.eip.EIPConstants;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;
import java.util.ArrayList;
import java.util.TimerTask;


public class Aggregate extends TimerTask {

    private static final Log log = LogFactory.getLog(Aggregate.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    private long timeoutMillis = 0;
    
    private long expiryTimeMillis = 0;
    
    private int minCount = -1;
    
    private int maxCount = -1;
    private String correlation = null;
    
    private AggregateMediator aggregateMediator = null;
    private List<MessageContext> messages = new ArrayList<MessageContext>();

    
    public Aggregate(String corelation, long timeoutMillis, int min, int max, AggregateMediator mediator) {
        this.correlation = corelation;
        if (timeoutMillis > 0) {
            expiryTimeMillis = System.currentTimeMillis() + timeoutMillis;
        }
        if (min > 0) {
            minCount = min;
        }
        if (max > 0) {
            maxCount = max;
        }
        this.aggregateMediator = mediator;
    }

    
    public boolean addMessage(MessageContext synCtx) {
        if (maxCount <= 0 || (maxCount > 0 && messages.size() < maxCount)) {
            messages.add(synCtx);
            return true;
        } else {
            return false;
        }
    }

    
    public boolean isComplete(boolean traceOn, boolean traceOrDebugOn, Log trace, Log log) {

        
        if (!messages.isEmpty()) {

            
            MessageContext mc = messages.get(0);
            Object prop = mc.getProperty(EIPConstants.MESSAGE_SEQUENCE);
            
            if (prop != null && prop instanceof String) {
                String[] msgSequence = prop.toString().split(EIPConstants.MESSAGE_SEQUENCE_DELEMITER);
                int total = Integer.parseInt(msgSequence[1]);

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, trace, log, messages.size() +
                        "" messages of "" + total + "" collected in current aggregation"");
                }

                if (messages.size() >= total) {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, trace, log, ""Aggregation complete"");
                    }
                    return true;
                }
            }
        } else {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, trace, log, ""No messages collected in current aggregation"");
            }
        }

        
        if (minCount > 0 && messages.size() >= minCount) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, trace, log,
                    ""Aggregation complete - the minimum : "" + minCount + "" messages has been reached"");
            }
            return true;
        }

        if (maxCount > 0 && messages.size() >= maxCount) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, trace, log,
                    ""Aggregation complete - the maximum : "" + maxCount + "" messages has been reached"");
            }

            return true;
        }

        
        if (System.currentTimeMillis() >= expiryTimeMillis) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, trace, log,
                    ""Aggregation complete - the aggregation has timed out"");
            }

            return true;
        }
        
        return false;
    }

    private void traceOrDebug(boolean traceOn, Log trace, Log log, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }

    public long getTimeoutMillis() {
        return timeoutMillis;
    }

    public void setTimeoutMillis(long timeoutMillis) {
        this.timeoutMillis = timeoutMillis;
    }

    public int getMinCount() {
        return minCount;
    }

    public void setMinCount(int minCount) {
        this.minCount = minCount;
    }

    public int getMaxCount() {
        return maxCount;
    }

    public void setMaxCount(int maxCount) {
        this.maxCount = maxCount;
    }

    public String getCorrelation() {
        return correlation;
    }

    public void setCorrelation(String correlation) {
        this.correlation = correlation;
    }

    public List<MessageContext> getMessages() {
        return messages;
    }

    public void setMessages(List<MessageContext> messages) {
        this.messages = messages;
    }

    public long getExpiryTimeMillis() {
        return expiryTimeMillis;
    }

    public void setExpiryTimeMillis(long expiryTimeMillis) {
        this.expiryTimeMillis = expiryTimeMillis;
    }

    public void run() {
        if (log.isDebugEnabled()) {
            log.debug(""Time : "" + System.currentTimeMillis() + "" and this aggregator expired at : "" +
                expiryTimeMillis);
        }
        aggregateMediator.completeAggregate(this);
    }
}
"
synapse,1.1,org.apache.synapse.SynapseServer,6,1,0,4,18,13,1,4,3,0.8,57,1.0,0,0.0,0.2,0,0,8.333333333,1,0.6667,0,"

package org.apache.synapse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.File;


public class SynapseServer {

    private static final Log log = LogFactory.getLog(SynapseServer.class);

    public static void printUsage() {
        System.out.println(""Usage: SynapseServer <repository>"");
        System.out.println("" Opts: -? this message"");
        System.exit(1);
    }

    public static void main(String[] args) throws Exception {

        
        if (args.length != 1 || !new File(args[0]).exists()) {
            printUsage();
        }

        ServerManager serverManager = ServerManager.getInstance();
        serverManager.setAxis2Repolocation(args[0]);
        serverManager.start();
        addShutdownHook();

    }

    private static void addShutdownHook() {
        Thread shutdownHook = new Thread() {
            public void run() {
                log.info(""Shutting down Apache Synapse ..."");
                try {
                    ServerManager.getInstance().stop();
                    log.info(""Shutdown complete"");
                    log.info(""Halting JVM"");
                } catch (Exception e) {
                    log.warn(""Error occurred while shutting down Apache Synapse : "" + e);
                }
            }
        };
        Runtime.getRuntime().addShutdownHook(shutdownHook);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.EntryFactory,5,1,0,11,28,8,1,10,3,0.25,122,1.0,0,0.0,0.3125,0,0,23.2,6,1.8,0,"

package org.apache.synapse.config.xml;

import org.apache.synapse.config.XMLToObjectMapper;
import org.apache.synapse.config.Entry;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMText;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;
import java.net.URL;
import java.net.MalformedURLException;

public class EntryFactory implements XMLToObjectMapper {

    private static Log log = LogFactory.getLog(EntryFactory.class);

    public static Entry createEntry(OMElement elem) {

        OMAttribute key = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""key""));
        if (key == null) {
            handleException(""The 'key' attribute is required for a local registry entry"");
            return null;

        } else {

            Entry entry = new Entry(key.getAttributeValue());
            String src  = elem.getAttributeValue(new QName(XMLConfigConstants.NULL_NAMESPACE, ""src""));

            
            
            
            if (src != null) {
                try {
                    entry.setSrc(new URL(src.trim()));
                    entry.setType(Entry.URL_SRC);
                    entry.setValue(
                        org.apache.synapse.config.SynapseConfigUtils.getObject(entry.getSrc()));
                } catch (MalformedURLException e) {
                    handleException(""The entry with key : "" + key + "" refers to an invalid URL"");
                }

            } else {
                OMNode    nodeValue = elem.getFirstOMChild();
                OMElement elemValue = elem.getFirstElement();

                if (elemValue != null) {
                    entry.setType(Entry.INLINE_XML);
                    entry.setValue(elemValue);
                } else if (nodeValue != null && nodeValue instanceof OMText) {
                    entry.setType(Entry.INLINE_TEXT);
                    entry.setValue(((OMText) nodeValue).getText().trim());
                }
            }
            return entry;
        }
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return createEntry((OMElement) om);
        } else {
            handleException(""Invalid XML configuration for an Entry. OMElement expected"");
        }
        return null;
    }
}
"
synapse,1.1,org.apache.synapse.statistics.StatisticsCollector,10,1,0,8,19,9,7,1,10,0.666666667,157,1.0,0,0.0,0.475,0,0,14.4,2,1.2,0,"
package org.apache.synapse.statistics;

import org.apache.synapse.SynapseConstants;

import java.util.*;



public class StatisticsCollector {

    
    private Map sequenceStatistics = Collections.synchronizedMap(new HashMap());

    
    private Map endpointStatistics = Collections.synchronizedMap(new HashMap());

    
    private Map proxyServicesStatistics = Collections.synchronizedMap(new HashMap());

    
    public void reportForEndPoint(String keyOfStatistic, boolean isResponse, long inTime,
                                  long outTime, boolean isFault) {
        StatisticsHolder statisticsHolder =
                (StatisticsHolder) endpointStatistics.get(keyOfStatistic);
        if (statisticsHolder == null) {
            statisticsHolder = new StatisticsHolder();
            statisticsHolder.setKey(keyOfStatistic);
            statisticsHolder.setStatisticsCategory(SynapseConstants.ENDPOINT_STATISTICS);
            endpointStatistics.put(keyOfStatistic, statisticsHolder);
        }
        statisticsHolder.update(isResponse, inTime, outTime, isFault);

    }

    
    public void reportForProxyService(String keyOfStatistic, boolean isResponse, long inTime,
                                      long outTime, boolean isFault) {
        StatisticsHolder statisticsHolder =
                (StatisticsHolder) proxyServicesStatistics.get(keyOfStatistic);
        if (statisticsHolder == null) {
            statisticsHolder = new StatisticsHolder();
            statisticsHolder.setKey(keyOfStatistic);
            statisticsHolder.setStatisticsCategory(SynapseConstants.PROXYSERVICE_STATISTICS);
            proxyServicesStatistics.put(keyOfStatistic, statisticsHolder);
        }
        statisticsHolder.update(isResponse, inTime, outTime, isFault);
    }

    
    public void reportForSequence(String keyOfStatistic, boolean isResponse, long inTime,
                                  long outTime, boolean isFault) {
        StatisticsHolder statisticsHolder =
                (StatisticsHolder) sequenceStatistics.get(keyOfStatistic);
        if (statisticsHolder == null) {
            statisticsHolder = new StatisticsHolder();
            statisticsHolder.setKey(keyOfStatistic);
            statisticsHolder.setStatisticsCategory(SynapseConstants.SEQUENCE_STATISTICS);
            sequenceStatistics.put(keyOfStatistic, statisticsHolder);
        }
        statisticsHolder.update(isResponse, inTime, outTime, isFault);
    }

    
    public Map getSequenceStatistics() {
        return sequenceStatistics;
    }

    
    public Map getProxyServiceStatistics() {
        return proxyServicesStatistics;
    }

    
    public Map getEndPointStatistics() {
        return endpointStatistics;
    }

    
    public void resetSequenceStatistics() {
        this.sequenceStatistics.clear();
    }

    
    public void resetProxyServiceStatistics() {
        this.proxyServicesStatistics.clear();
    }

    
    public void resetEndPointStatistics() {
        this.endpointStatistics.clear();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.MediatorSerializer,2,1,0,8,2,1,6,2,2,2.0,2,0.0,0,0.0,0.666666667,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;


public interface MediatorSerializer {

    
    public OMElement serializeMediator(OMElement parent, Mediator m);

    
    public String getMediatorClassName();
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.EndpointFactory,1,1,0,15,1,0,12,3,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.config.XMLToObjectMapper;
import org.apache.axiom.om.OMElement;


public interface EndpointFactory extends XMLToObjectMapper {

    
    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint);
}
"
synapse,1.1,org.apache.synapse.mediators.ListMediator,6,1,0,11,6,15,10,1,6,2.0,6,0.0,0,0.0,0.458333333,0,0,0.0,1,1.0,0,"

package org.apache.synapse.mediators;

import org.apache.synapse.Mediator;

import java.util.List;


public interface ListMediator extends Mediator {

    
    public boolean addChild(Mediator m);

    
    public boolean addAll(List c);

    
    public Mediator getChild(int pos);

    
    public boolean removeChild(Mediator m);

    
    public Mediator removeChild(int pos);

    
    public List getList();
}
"
synapse,1.1,org.apache.synapse.config.xml.SequenceMediatorFactory,5,3,0,12,19,6,4,8,4,0.75,159,1.0,0,0.571428571,0.75,0,0,30.6,9,3.2,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.base.SequenceMediator;

import javax.xml.namespace.QName;


public class SequenceMediatorFactory extends AbstractListMediatorFactory {

    private static final QName SEQUENCE_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""sequence"");

    public QName getTagQName() {
        return SEQUENCE_Q;
    }

    public SequenceMediator createAnonymousSequence(OMElement elem) {
        SequenceMediator seqMediator = new SequenceMediator();
        OMAttribute e = elem.getAttribute(ATT_ONERROR);
        if (e != null) {
            seqMediator.setErrorHandler(e.getAttributeValue());
        }
        processTraceState(seqMediator, elem);
        addChildren(elem, seqMediator);
        OMAttribute statistics = elem.getAttribute(ATT_STATS);
        if (statistics != null) {
            String statisticsValue = statistics.getAttributeValue();
            if (statisticsValue != null) {
                if (XMLConfigConstants.STATISTICS_ENABLE.equals(statisticsValue)) {
                    seqMediator.setStatisticsState(
                        org.apache.synapse.SynapseConstants.STATISTICS_ON);
                } else if (XMLConfigConstants.STATISTICS_DISABLE.equals(statisticsValue)) {
                    seqMediator.setStatisticsState(
                        org.apache.synapse.SynapseConstants.STATISTICS_OFF);
                }
            }
        }
        return seqMediator;
    }
    
    public Mediator createMediator(OMElement elem) {

        SequenceMediator seqMediator = new SequenceMediator();

        OMAttribute n = elem.getAttribute(ATT_NAME);
        OMAttribute e = elem.getAttribute(ATT_ONERROR);
        if (n != null) {
            seqMediator.setName(n.getAttributeValue());
            if (e != null) {
                seqMediator.setErrorHandler(e.getAttributeValue());
            }
            processTraceState(seqMediator, elem);
            addChildren(elem, seqMediator);

        } else {
            n = elem.getAttribute(ATT_KEY);
            if (n != null) {
                seqMediator.setKey(n.getAttributeValue());
                if (e != null) {
                    String msg = ""A sequence mediator with a reference to another "" +
                        ""sequence can not have 'ErrorHandler'"";
                    log.error(msg);
                    throw new SynapseException(msg);
                }
            } else {
                String msg = ""A sequence mediator should be a named sequence or a reference "" +
                    ""to another sequence (i.e. a name attribute or key attribute is required)"";
                log.error(msg);
                throw new SynapseException(msg);
            }
        }

        OMAttribute statistics = elem.getAttribute(ATT_STATS);
        if (statistics != null) {
            String statisticsValue = statistics.getAttributeValue();
            if (statisticsValue != null) {
                if (XMLConfigConstants.STATISTICS_ENABLE.equals(statisticsValue)) {
                    seqMediator.setStatisticsState(
                        org.apache.synapse.SynapseConstants.STATISTICS_ON);
                } else if (XMLConfigConstants.STATISTICS_DISABLE.equals(statisticsValue)) {
                    seqMediator.setStatisticsState(
                        org.apache.synapse.SynapseConstants.STATISTICS_OFF);
                }
            }
        }

        return seqMediator;
    }
}
"
synapse,1.1,org.apache.synapse.statistics.impl.SequenceStatisticsStack,6,1,0,6,22,0,4,3,5,0.0,154,1.0,0,0.0,0.5,0,0,24.5,7,3.0,0,"
package org.apache.synapse.statistics.impl;

import org.apache.synapse.statistics.StatisticsStack;
import org.apache.synapse.statistics.StatisticsCollector;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;



public class SequenceStatisticsStack implements StatisticsStack {

    
    private List sequenceStatisticsList = new ArrayList();

    
    public void put(String sequenceName, long initTime, boolean isInFlow,
                    boolean isStatisticsEnable, boolean isFault) {
        sequenceStatisticsList.add(new SequenceStatistics(sequenceName, initTime,
                isInFlow, isStatisticsEnable, isFault));
    }

    
    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault) {
        int top = sequenceStatisticsList.size();
        if (top > 0) {
            popSequenceStatistics(sequenceStatisticsList.size() - 1, statisticsCollector);
        }
    }

    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault, String name) {
        if (!sequenceStatisticsList.isEmpty()) {
            List tobeRemoved = new ArrayList();
            for (Iterator seqIterator = sequenceStatisticsList.iterator();
                 seqIterator.hasNext();) {
                SequenceStatistics sequenceStatistics =
                        (SequenceStatistics) seqIterator.next();
                if (sequenceStatistics != null) {
                    if (sequenceStatistics.isStatisticsEnable &&
                            sequenceStatistics.sequenceName != null &&
                            sequenceStatistics.sequenceName.equals(name)
                            ) {
                        statisticsCollector.reportForSequence(sequenceStatistics.sequenceName,
                                !sequenceStatistics.isInFlow, sequenceStatistics.initTime,
                                System.currentTimeMillis(), sequenceStatistics.isFault);
                    }
                    tobeRemoved.add(sequenceStatistics);
                }
            }
            sequenceStatisticsList.removeAll(tobeRemoved);
        }
    }

    
    public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector,
                                               boolean isFault) {
        int i = sequenceStatisticsList.size() - 1;
        for (; i >= 0; i--) {
            popSequenceStatistics(i, statisticsCollector);
        }
    }

    
    private void popSequenceStatistics(int index, StatisticsCollector statisticsCollector) {
        if (index >= 0) {
            SequenceStatistics sequenceStatistics =
                    (SequenceStatistics) sequenceStatisticsList.get(index);
            if (sequenceStatistics != null) {
                if (sequenceStatistics.isStatisticsEnable &&
                        sequenceStatistics.sequenceName != null) {
                    statisticsCollector.reportForSequence(sequenceStatistics.sequenceName,
                            !sequenceStatistics.isInFlow, sequenceStatistics.initTime,
                            System.currentTimeMillis(), sequenceStatistics.isFault);
                }
                sequenceStatisticsList.remove(index);
            }
        }
    }

    
    class SequenceStatistics {

        
        String sequenceName;
        
        long initTime;
        
        boolean isInFlow;
        
        boolean isStatisticsEnable;
        
        private boolean isFault;

        public SequenceStatistics(String sequenceName, long initTime, boolean inFlow,
                                  boolean statisticsEnable, boolean isFault) {
            this.sequenceName = sequenceName;
            this.initTime = initTime;
            isInFlow = inFlow;
            isStatisticsEnable = statisticsEnable;
            this.isFault = isFault;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            final SequenceStatistics that = (SequenceStatistics) o;

            if (!sequenceName.equals(that.sequenceName)) return false;

            return true;
        }

        public int hashCode() {
            return sequenceName.hashCode();
        }
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.CacheMediatorFactory,5,2,0,9,38,4,0,9,3,0.8125,318,1.0,0,0.5,0.5,0,0,60.2,22,5.4,0,"

package org.apache.synapse.config.xml;

import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.CacheMediator;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.wso2.caching.CachingConstants;
import org.wso2.caching.digest.DigestGenerator;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class CacheMediatorFactory extends AbstractMediatorFactory {

    private static final QName CACHE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""cache"");
    private static final QName ATT_ID = new QName(""id"");
    private static final QName ATT_COLLECTOR = new QName(""collector"");
    private static final QName ATT_HASH_GENERATOR = new QName(""hashGenerator"");
    private static final QName ATT_MAX_MSG_SIZE = new QName(""maxMessageSize"");
    private static final QName ATT_TIMEOUT = new QName(""timeout"");
    private static final QName ATT_SCOPE = new QName(""scope"");
    private static final QName ATT_SEQUENCE = new QName(""sequence"");
    private static final QName ATT_TYPE = new QName(""type"");
    private static final QName ATT_SIZE = new QName(""maxSize"");
    private static final QName ON_CACHE_HIT_Q =
        new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""onCacheHit"");
    private static final QName IMPLEMENTATION_Q =
        new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""implementation"");
    private static final long DEFAULT_TIMEOUT = 5000L;
    private static final int DEFAULT_DISK_CACHE_SIZE = 200;

    public Mediator createMediator(OMElement elem) {

        if (!CACHE_Q.equals(elem.getQName())) {
            handleException(""Unable to create the cache mediator. "" +
                ""Unexpected element as the cache mediator configuration"");
        }

        CacheMediator cache = new CacheMediator();

        OMAttribute idAttr = elem.getAttribute(ATT_ID);
        if (idAttr != null && idAttr.getAttributeValue() != null) {
            cache.setId(idAttr.getAttributeValue());
        }

        OMAttribute scopeAttr = elem.getAttribute(ATT_SCOPE);
        if (scopeAttr != null && scopeAttr.getAttributeValue() != null &&
            isValidScope(scopeAttr.getAttributeValue(), cache.getId())) {
            cache.setScope(scopeAttr.getAttributeValue());
        } else {
            cache.setScope(CachingConstants.SCOPE_PER_HOST);
        }

        OMAttribute collectorAttr = elem.getAttribute(ATT_COLLECTOR);
        if (collectorAttr != null && collectorAttr.getAttributeValue() != null &&
            ""true"".equals(collectorAttr.getAttributeValue())) {

            cache.setCollector(true);
        } else {
            
            cache.setCollector(false);

            OMAttribute hashGeneratorAttr = elem.getAttribute(ATT_HASH_GENERATOR);
            if (hashGeneratorAttr != null && hashGeneratorAttr.getAttributeValue() != null) {
                try {
                    Class generator = Class.forName(hashGeneratorAttr.getAttributeValue());
                    Object o = generator.newInstance();
                    if (o instanceof DigestGenerator) {
                        cache.setDigestGenerator((DigestGenerator) o);
                    } else {
                        handleException(""Specified class for the hashGenerator is not a "" +
                            ""DigestGenerator. It *must* implement "" +
                            ""org.wso2.caching.digest.DigestGenerator interface"");
                    }
                } catch (ClassNotFoundException e) {
                    handleException(""Unable to load the hash generator class"", e);
                } catch (IllegalAccessException e) {
                    handleException(""Unable to access the hash generator class"", e);
                } catch (InstantiationException e) {
                    handleException(""Unable to instantiate the hash generator class"", e);
                }
            }

            OMAttribute timeoutAttr = elem.getAttribute(ATT_TIMEOUT);
            if (timeoutAttr != null && timeoutAttr.getAttributeValue() != null) {
                cache.setTimeout(Long.parseLong(timeoutAttr.getAttributeValue()));
            } else {
                cache.setTimeout(DEFAULT_TIMEOUT);
            }

            OMAttribute maxMessageSizeAttr = elem.getAttribute(ATT_MAX_MSG_SIZE);
            if (maxMessageSizeAttr != null && maxMessageSizeAttr.getAttributeValue() != null) {
                cache.setMaxMessageSize(Integer.parseInt(maxMessageSizeAttr.getAttributeValue()));
            }

            OMElement onCacheHitElem = elem.getFirstChildWithName(ON_CACHE_HIT_Q);
            if (onCacheHitElem != null) {
                OMAttribute sequenceAttr = onCacheHitElem.getAttribute(ATT_SEQUENCE);
                if (sequenceAttr != null && sequenceAttr.getAttributeValue() != null) {
                    cache.setOnCacheHitRef(sequenceAttr.getAttributeValue());
                } else if (onCacheHitElem.getFirstElement() != null) {
                    cache.setOnCacheHitSequence(
                        new SequenceMediatorFactory().createAnonymousSequence(onCacheHitElem));
                }
            }

            for (Iterator itr = elem.getChildrenWithName(IMPLEMENTATION_Q); itr.hasNext();) {
                OMElement implElem = (OMElement) itr.next();
                OMAttribute typeAttr = implElem.getAttribute(ATT_TYPE);
                OMAttribute sizeAttr = implElem.getAttribute(ATT_SIZE);
                if (typeAttr != null && typeAttr.getAttributeValue() != null) {
                    String type = typeAttr.getAttributeValue();
                    if (CachingConstants.TYPE_MEMORY.equals(type) && sizeAttr != null &&
                        sizeAttr.getAttributeValue() != null) {
                        cache.setInMemoryCacheSize(Integer.parseInt(sizeAttr.getAttributeValue()));
                    } else if (CachingConstants.TYPE_DISK.equals(type)) {
                        log.warn(""Disk based and hirearchycal caching is not implemented yet"");
                        if (sizeAttr != null && sizeAttr.getAttributeValue() != null) {
                            cache.setDiskCacheSize(Integer.parseInt(sizeAttr.getAttributeValue()));
                        } else {
                            cache.setDiskCacheSize(DEFAULT_DISK_CACHE_SIZE);
                        }
                    } else {
                        handleException(""unknown implementation type for the Cache mediator"");
                    }
                }
            }
        }

        return cache;
    }

    private boolean isValidScope(String scope, String id) {
        if (CachingConstants.SCOPE_PER_HOST.equals(scope)) {
            return true;
        } else if (CachingConstants.SCOPE_PER_MEDIATOR.equals(scope)) {
            if (id != null) {
                return true;
            } else {
                handleException(""Id is required for a cache wirth scope : "" + scope);
                return false;
            }
        } else if (CachingConstants.SCOPE_DISTRIBUTED.equals(scope)) {
            handleException(""Scope distributed is not supported yet by the Cache mediator"");
            return false;
        } else {
            handleException(""Unknown scope "" + scope + "" for the Cache mediator"");
            return false;
        }
    }

    public QName getTagQName() {
        return CACHE_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.ValidateMediatorSerializer,3,3,0,12,29,3,0,12,3,2.0,151,0.0,0,0.777777778,0.555555556,0,0,49.33333333,9,3.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.ValidateMediator;
import org.apache.synapse.mediators.MediatorProperty;

import java.util.Iterator;
import java.util.List;


public class ValidateMediatorSerializer extends AbstractListMediatorSerializer
    implements MediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof ValidateMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        ValidateMediator mediator = (ValidateMediator) m;
        OMElement validate = fac.createOMElement(""validate"", synNS);
        saveTracingState(validate, mediator);

        if (mediator.getSource() != null) {
            validate.addAttribute(fac.createOMAttribute(
                    ""source"", nullNS, mediator.getSource().toString()));
            serializeNamespaces(validate, mediator.getSource());
        }

        Iterator iterator = mediator.getSchemaKeys().iterator();
        while (iterator.hasNext()) {
            String key = (String) iterator.next();
            OMElement schema = fac.createOMElement(""schema"", synNS, validate);
            schema.addAttribute(fac.createOMAttribute(""key"", nullNS, key));
        }

        List features = mediator.getFeatures();
        if (!features.isEmpty()) {
            for (Iterator iter = features.iterator(); iter.hasNext();) {
                MediatorProperty mp = (MediatorProperty) iter.next();
                OMElement feature = fac.createOMElement(""feature"", synNS, validate);
                if (mp.getName() != null) {
                    feature.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
                } else {
                    handleException(""The Feature name is missing"");
                }
                if (mp.getValue() != null) {
                    feature.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue()));
                } else {
                    handleException(""The Feature value is missing"");
                }
            }
        }
        OMElement onFail = fac.createOMElement(""on-fail"", synNS, validate);
        serializeChildren(onFail, mediator.getList());

        if (parent != null) {
            parent.addChild(validate);
        }
        return validate;
    }

    public String getMediatorClassName() {
        return ValidateMediator.class.getName();
    }

}
"
synapse,1.1,org.apache.synapse.util.concurrent.SynapseThreadPool,3,3,0,2,8,3,1,1,3,1.5,60,0.0,0,1.0,0.555555556,0,0,15.0,0,0.0,0,"

package org.apache.synapse.util.concurrent;

import org.apache.synapse.config.SynapseConfiguration;

import java.util.concurrent.*;


public class SynapseThreadPool extends ThreadPoolExecutor {

    
    public static final int SYNAPSE_CORE_THREADS  = 20;
    public static final int SYNAPSE_MAX_THREADS   = 100;
    public static final int SYNAPSE_KEEP_ALIVE    = 5;
    public static final int SYNAPSE_THREAD_QLEN   = 10;
    public static final String SYNAPSE_THREAD_GROUP     = ""synapse-thread-group"";
    public static final String SYNAPSE_THREAD_ID_PREFIX = ""SynapseWorker"";

    
    public static final String SYN_THREAD_CORE     = ""synapse.threads.core"";
    public static final String SYN_THREAD_MAX      = ""synapse.threads.max"";
    public static final String SYN_THREAD_ALIVE    = ""synapse.threads.keepalive"";
    public static final String SYN_THREAD_QLEN     = ""synapse.threads.qlen"";
    public static final String SYN_THREAD_GROUP    = ""synapse.threads.group"";
    public static final String SYN_THREAD_IDPREFIX = ""synapse.threads.idprefix"";

    
    public SynapseThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime,
        TimeUnit unit, BlockingQueue<Runnable> workQueue) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
            new SynapseThreadFactory(
                new ThreadGroup(SYNAPSE_THREAD_GROUP), SYNAPSE_THREAD_ID_PREFIX));
    }

    
    public SynapseThreadPool() {
        this(SYNAPSE_CORE_THREADS, SYNAPSE_MAX_THREADS, SYNAPSE_KEEP_ALIVE,
            TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
    }

    
    public SynapseThreadPool(int corePoolSize, int maxPoolSize, long keepAliveTime, int qlen,
        String threadGroup, String threadIdPrefix) {
        super(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.SECONDS,
            new LinkedBlockingQueue<Runnable>(qlen),
            new SynapseThreadFactory(new ThreadGroup(threadGroup), threadIdPrefix));
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.ProxyService,53,1,0,37,144,1172,9,30,47,0.941568047,1164,0.961538462,4,0.0,0.134615385,0,0,20.47169811,39,1.8302,4,"

package org.apache.synapse.core.axis2;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNamespace;
import org.apache.axis2.AxisFault;
import org.apache.axis2.description.*;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.neethi.Policy;
import org.apache.neethi.PolicyEngine;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfigUtils;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.xml.sax.InputSource;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.*;


public class ProxyService {

    private static final Log log = LogFactory.getLog(ProxyService.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);
    private final Log serviceLog;
    
    private String name;
    
    private String description;
    
    private ArrayList transports;
    
    private List pinnedServers = new ArrayList();
    
    private String targetEndpoint = null;
    
    private String targetInSequence = null;
    
    private String targetOutSequence = null;
    
    private String targetFaultSequence = null;
    
    private Endpoint targetInLineEndpoint = null;
    
    private SequenceMediator targetInLineInSequence = null;
    
    private SequenceMediator targetInLineOutSequence = null;
    
    private SequenceMediator targetInLineFaultSequence = null;
    
    private Map parameters = new HashMap();
    
    private String wsdlKey;
    
    private URI wsdlURI;
    
    private Object inLineWSDL;
    
    private ResourceMap resourceMap;
    
    private List serviceLevelPolicies = new ArrayList();
    
    private boolean wsRMEnabled = false;
    
    private boolean wsSecEnabled = false;
    
    private boolean startOnLoad = true;
    
    private boolean running = false;

    public static final String ALL_TRANSPORTS = ""all"";

    
    private int statisticsState = SynapseConstants.STATISTICS_UNSET;
    
    protected int traceState = SynapseConstants.TRACING_UNSET;


    
    public ProxyService(String name) {
        this.name = name;
        serviceLog = LogFactory.getLog(SynapseConstants.SERVICE_LOGGER_PREFIX + name);
    }

    
    public AxisService buildAxisService(SynapseConfiguration synCfg, AxisConfiguration axisCfg) {

        auditInfo(""Building Axis service for Proxy service : "" + name);
        AxisService proxyService = null;

        
        if (trace()) {
            trace.info(""Loading the WSDL : "" +
                (wsdlKey != null ? "" key = "" + wsdlKey :
                (wsdlURI != null ? "" URI = "" + wsdlURI : "" <Inlined>"")));
        }

        InputStream wsdlInputStream = null;
        OMElement wsdlElement = null;

        if (wsdlKey != null) {
            synCfg.getEntryDefinition(wsdlKey);
            Object keyObject = synCfg.getEntry(wsdlKey);
            if (keyObject instanceof OMElement) {
                wsdlElement = (OMElement) keyObject;
            }
        } else if (inLineWSDL != null) {
            wsdlElement = (OMElement) inLineWSDL;
        } else if (wsdlURI != null) {
            try {
                URL url = wsdlURI.toURL();
                wsdlElement = SynapseConfigUtils.getOMElementFromURL(url.toString());
            } catch (MalformedURLException e) {
                handleException(""Malformed URI for wsdl"", e);
            } catch (IOException e) {
                handleException(""Error reading from wsdl URI"", e);
            }
        }

        
        if (wsdlElement != null) {
            OMNamespace wsdlNamespace = wsdlElement.getNamespace();

            
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                if (trace()) trace.info(""Serializing wsdlElement found to build an Axis2 service"");
                wsdlElement.serialize(baos);
                wsdlInputStream = new ByteArrayInputStream(baos.toByteArray());
            } catch (XMLStreamException e) {
                handleException(""Error converting to a StreamSource"", e);
            }

            if (wsdlInputStream != null) {

                try {
                    
                    if (trace()) trace.info(""WSDL Namespace is : ""
                        + wsdlNamespace.getNamespaceURI());

                    if (wsdlNamespace != null) {
                        boolean isWSDL11 = false;
                        WSDLToAxisServiceBuilder wsdlToAxisServiceBuilder = null;

                        if (WSDL2Constants.WSDL_NAMESPACE.
                                equals(wsdlNamespace.getNamespaceURI())) {
                            wsdlToAxisServiceBuilder =
                                    new WSDL20ToAxisServiceBuilder(wsdlInputStream, null, null);

                        } else if (org.apache.axis2.namespace.Constants.NS_URI_WSDL11.
                                equals(wsdlNamespace.getNamespaceURI())) {
                            wsdlToAxisServiceBuilder =
                                    new WSDL11ToAxisServiceBuilder(wsdlInputStream);
                            isWSDL11 = true;
                        } else {
                            handleException(""Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0"");
                        }

                        if (wsdlToAxisServiceBuilder == null) {
                            throw new SynapseException(
                                    ""Could not get the WSDL to Axis Service Builder"");
                        }

                        wsdlToAxisServiceBuilder.setBaseUri(
                                wsdlURI != null ? wsdlURI.toString() : """");

                        if (trace()) {
                            trace.info(""Setting up custom resolvers"");
                        }
                        

                        if (resourceMap != null) {
                            
                            wsdlToAxisServiceBuilder.setCustomResolver(
                                new CustomURIResolver(resourceMap, synCfg));
                            
                            if (wsdlToAxisServiceBuilder instanceof WSDL11ToAxisServiceBuilder) {
                                ((WSDL11ToAxisServiceBuilder)
                                    wsdlToAxisServiceBuilder).setCustomWSLD4JResolver(
                                    new CustomWSDLLocator(new InputSource(wsdlInputStream),
                                                          wsdlURI != null ? wsdlURI.toString() : """",
                                                          resourceMap, synCfg));
                            }
                        } else {
                            
                            
                            wsdlToAxisServiceBuilder.setCustomResolver(
                                new CustomURIResolver());
                            
                            if (wsdlToAxisServiceBuilder instanceof WSDL11ToAxisServiceBuilder) {
                                ((WSDL11ToAxisServiceBuilder)
                                    wsdlToAxisServiceBuilder).setCustomWSLD4JResolver(
                                    new CustomWSDLLocator(new InputSource(wsdlInputStream),
                                                          wsdlURI != null ? wsdlURI.toString() : """"));
                            }
                        }

                        if (trace()) {
                            trace.info(""Populating Axis2 service using WSDL"");
                            if (trace.isTraceEnabled()) {
                                trace.trace(""WSDL : "" + wsdlElement.toString());
                            }
                        }
                        proxyService = wsdlToAxisServiceBuilder.populateService();
                        proxyService.setWsdlFound(true);

                        if (isWSDL11) {
                            
                            
                            Collection endpoints = proxyService.getEndpoints().values();
                            Iterator iter = endpoints.iterator();
                            while (iter.hasNext()) {
                                AxisEndpoint endpoint = (AxisEndpoint) iter.next();
                                Iterator children = endpoint.getBinding().getChildren();
                                while (children.hasNext()) {
                                    AxisBindingOperation axisBindingOperation =
                                        (AxisBindingOperation) children.next();
                                    axisBindingOperation.setProperty(
                                        WSDL2Constants.ATTR_WHTTP_IGNORE_UNCITED,
                                        new Boolean(false));
                                }
                            }
                        }

                    } else {
                        handleException(""Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0"");
                    }

                } catch (AxisFault af) {
                    handleException(""Error building service from WSDL"", af);
                } catch (IOException ioe) {
                    handleException(""Error reading WSDL"", ioe);
                }
            }
        } else {
            
            
            if (trace()) trace.info(""Did not find a WSDL. Assuming a POX or Legacy service"");
            proxyService = new AxisService();
            AxisOperation mediateOperation = new InOutAxisOperation(new QName(""mediate""));
            proxyService.addOperation(mediateOperation);
        }

        
        
        if (proxyService == null) {
            throw new SynapseException(""Could not create a proxy service"");
        }
        proxyService.setName(name);
        if (description != null) {
            proxyService.setDocumentation(description);
        }

        
        
        
        if (transports == null || transports.size() == 0) {
            
        } else {
            if (trace()) trace.info(""Exposing transports : "" + transports);
            proxyService.setExposedTransports(transports);
        }

        
        if (trace() && parameters.size() > 0) {
            trace.info(""Setting service parameters : "" + parameters);
        }
        Iterator iter = parameters.keySet().iterator();
        while (iter.hasNext()) {
            String name = (String) iter.next();
            Object value = parameters.get(name);

            Parameter p = new Parameter();
            p.setName(name);
            p.setValue(value);

            try {
                proxyService.addParameter(p);
            } catch (AxisFault af) {
                handleException(""Error setting parameter : "" + name + """" +
                        ""to proxy service as a Parameter"", af);
            }
        }

        
        if (!serviceLevelPolicies.isEmpty()) {

            if (trace()) {
                trace.info(""Setting service level policies : "" + serviceLevelPolicies);
            }
            Policy svcEffectivePolicy = null;
            iter = serviceLevelPolicies.iterator();

            while (iter.hasNext()) {
                String policyKey = (String) iter.next();
                synCfg.getEntryDefinition(policyKey);
                Object policyProp = synCfg.getEntry(policyKey);
                if (policyProp != null) {
                    if (svcEffectivePolicy == null) {
                        svcEffectivePolicy = PolicyEngine.getPolicy(
                            SynapseConfigUtils.getStreamSource(policyProp).getInputStream());
                    } else {
                        svcEffectivePolicy = svcEffectivePolicy.merge(
                            PolicyEngine.getPolicy(SynapseConfigUtils.getStreamSource(
                                policyProp).getInputStream()));
                    }
                }
            }
            PolicyInclude pi = proxyService.getPolicyInclude();
            if (pi != null && svcEffectivePolicy != null) {
                if (trace()) {
                    if (trace.isTraceEnabled()) {
                        trace.trace(""Effective policy applied : "" + svcEffectivePolicy);
                    }
                }
                pi.addPolicyElement(PolicyInclude.AXIS_SERVICE_POLICY, svcEffectivePolicy);
            }
        }

        
        ProxyServiceMessageReceiver msgRcvr = new ProxyServiceMessageReceiver();
        msgRcvr.setName(name);
        msgRcvr.setProxy(this);

        iter = proxyService.getOperations();
        while (iter.hasNext()) {
            AxisOperation op = (AxisOperation) iter.next();
            op.setMessageReceiver(msgRcvr);
        }

        try {
            auditInfo(""Adding service "" + name + "" to the Axis2 configuration"");
            axisCfg.addService(proxyService);
            this.setRunning(true);
        } catch (AxisFault axisFault) {
            try {
                if (axisCfg.getService(proxyService.getName()) != null) {
                    if (trace()) trace.info(""Removing service "" + name + "" due to error : ""
                        + axisFault.getMessage());
                    axisCfg.removeService(proxyService.getName());
                }
            } catch (AxisFault ignore) {}
            handleException(""Error adding Proxy service to the Axis2 engine"", axisFault);
        }

        
        
        if (wsRMEnabled) {
            auditInfo(""WS-Reliable messaging is enabled for service : "" + name);
            try {
                proxyService.engageModule(axisCfg.getModule(
                    SynapseConstants.SANDESHA2_MODULE_NAME), axisCfg);
            } catch (AxisFault axisFault) {
                handleException(""Error loading WS RM module on proxy service : "" + name, axisFault);
            }
        }

        
        if (wsSecEnabled) {
            auditInfo(""WS-Security is enabled for service : "" + name);
            try {
                proxyService.engageModule(axisCfg.getModule(
                    SynapseConstants.RAMPART_MODULE_NAME), axisCfg);
            } catch (AxisFault axisFault) {
                handleException(""Error loading WS Sec module on proxy service : ""
                        + name, axisFault);
            }
        }

        auditInfo(""Successfully created the Axis2 service for Proxy service : "" + name);
        return proxyService;
    }

    
    public void start(SynapseConfiguration synCfg) {
        AxisConfiguration axisConfig = synCfg.getAxisConfiguration();
        if (axisConfig != null) {
            
            Parameter param = axisConfig.getParameter(SynapseConstants.SYNAPSE_ENV);
            if (param != null && param.getValue() instanceof SynapseEnvironment)  {
                SynapseEnvironment env = (SynapseEnvironment) param.getValue();
                if (targetInLineInSequence != null) {
                    targetInLineInSequence.init(env);
                }
                if (targetInLineOutSequence != null) {
                    targetInLineOutSequence.init(env);
                }
                if (targetInLineFaultSequence != null) {
                    targetInLineFaultSequence.init(env);
                }
            } else {
                auditWarn(""Unable to find the SynapseEnvironment. "" +
                    ""Components of the proxy service may not be initialized"");
            }
            
            axisConfig.getServiceForActivation(this.getName()).setActive(true);
            this.setRunning(true);
            auditInfo(""Started the proxy service : "" + name);
        } else {
            auditWarn(""Unable to start proxy service : "" + name + 
                "". Couldn't access Axis configuration"");
        }
    }

    
    public void stop(SynapseConfiguration synCfg) {
        AxisConfiguration axisConfig = synCfg.getAxisConfiguration();
        if (axisConfig != null) {

            if (targetInLineInSequence != null) {
                targetInLineInSequence.destroy();
            }
            if (targetInLineOutSequence != null) {
                targetInLineOutSequence.destroy();
            }
            if (targetInLineFaultSequence != null) {
                targetInLineFaultSequence.destroy();
            }

            try {
                AxisService as = axisConfig.getService(this.getName());
                if (as != null) {
                    as.setActive(false);
                }
                this.setRunning(false);
                auditInfo(""Started the proxy service : "" + name);
            } catch (AxisFault axisFault) {
                handleException(""Error stopping the proxy service : "" + name, axisFault);
            }
        } else {
            auditWarn(""Unable to stop proxy service : "" + name +
                "". Couldn't access Axis configuration"");
        }
    }

    private void handleException(String msg) {
        serviceLog.error(msg);
        log.error(msg);
        if (trace()) trace.error(msg);
        throw new SynapseException(msg);
    }

    private void handleException(String msg, Exception e) {
        serviceLog.error(msg);
        log.error(msg, e);
        if (trace()) trace.error(msg + "" :: "" + e.getMessage());
        throw new SynapseException(msg, e);
    }

    
    private void auditInfo(String message) {
        log.info(message);
        serviceLog.info(message);
        if (trace()) {
            trace.info(message);
        }
    }

    
    private void auditWarn(String message) {
        log.warn(message);
        serviceLog.warn(message);
        if (trace()) {
            trace.warn(message);
        }
    }

    
    private boolean trace() {
        return traceState == SynapseConstants.TRACING_ON;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public ArrayList getTransports() {
        return transports;
    }

    public void addParameter(String name, Object value) {
        parameters.put(name, value);
    }

    public Map getParameterMap() {
        return this.parameters;
    }

    public void setTransports(ArrayList transports) {
        this.transports = transports;
    }

    public String getTargetEndpoint() {
        return targetEndpoint;
    }

    public void setTargetEndpoint(String targetEndpoint) {
        this.targetEndpoint = targetEndpoint;
    }

    public String getTargetInSequence() {
        return targetInSequence;
    }

    public void setTargetInSequence(String targetInSequence) {
        this.targetInSequence = targetInSequence;
    }

    public String getTargetOutSequence() {
        return targetOutSequence;
    }

    public void setTargetOutSequence(String targetOutSequence) {
        this.targetOutSequence = targetOutSequence;
    }

    public String getWSDLKey() {
        return wsdlKey;
    }

    public void setWSDLKey(String wsdlKey) {
        this.wsdlKey = wsdlKey;
    }

    public List getServiceLevelPolicies() {
        return serviceLevelPolicies;
    }

    public void addServiceLevelPolicy(String serviceLevelPolicy) {
        this.serviceLevelPolicies.add(serviceLevelPolicy);
    }

    public boolean isWsRMEnabled() {
        return wsRMEnabled;
    }

    public void setWsRMEnabled(boolean wsRMEnabled) {
        this.wsRMEnabled = wsRMEnabled;
    }

    public boolean isWsSecEnabled() {
        return wsSecEnabled;
    }

    public void setWsSecEnabled(boolean wsSecEnabled) {
        this.wsSecEnabled = wsSecEnabled;
    }

    public boolean isStartOnLoad() {
        return startOnLoad;
    }

    public void setStartOnLoad(boolean startOnLoad) {
        this.startOnLoad = startOnLoad;
    }

    public boolean isRunning() {
        return running;
    }

    public void setRunning(boolean running) {
        this.running = running;
    }

    
    public int getStatisticsState() {
        return statisticsState;
    }

    
    public void setStatisticsState(int statisticsState) {
        this.statisticsState = statisticsState;
    }

    
    public int getTraceState() {
        return traceState;
    }

    
    public void setTraceState(int traceState) {
        this.traceState = traceState;
    }

    public String getTargetFaultSequence() {
        return targetFaultSequence;
    }

    public void setTargetFaultSequence(String targetFaultSequence) {
        this.targetFaultSequence = targetFaultSequence;
    }

    public Object getInLineWSDL() {
        return inLineWSDL;
    }

    public void setInLineWSDL(Object inLineWSDL) {
        this.inLineWSDL = inLineWSDL;
    }

    public URI getWsdlURI() {
        return wsdlURI;
    }

    public void setWsdlURI(URI wsdlURI) {
        this.wsdlURI = wsdlURI;
    }

    public Endpoint getTargetInLineEndpoint() {
        return targetInLineEndpoint;
    }

    public void setTargetInLineEndpoint(Endpoint targetInLineEndpoint) {
        this.targetInLineEndpoint = targetInLineEndpoint;
    }

    public SequenceMediator getTargetInLineInSequence() {
        return targetInLineInSequence;
    }

    public void setTargetInLineInSequence(SequenceMediator targetInLineInSequence) {
        this.targetInLineInSequence = targetInLineInSequence;
    }

    public SequenceMediator getTargetInLineOutSequence() {
        return targetInLineOutSequence;
    }

    public void setTargetInLineOutSequence(SequenceMediator targetInLineOutSequence) {
        this.targetInLineOutSequence = targetInLineOutSequence;
    }

    public SequenceMediator getTargetInLineFaultSequence() {
        return targetInLineFaultSequence;
    }

    public void setTargetInLineFaultSequence(SequenceMediator targetInLineFaultSequence) {
        this.targetInLineFaultSequence = targetInLineFaultSequence;
    }

    public List getPinnedServers() {
      return pinnedServers;
    }

    public void setPinnedServers(List pinnedServers) {
      this.pinnedServers = pinnedServers;
    }

    public ResourceMap getResourceMap() {
        return resourceMap;
    }

    public void setResourceMap(ResourceMap resourceMap) {
        this.resourceMap = resourceMap;
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.FaultMediatorSerializer,3,2,0,10,32,3,0,10,3,1.5,212,1.0,0,0.75,0.555555556,0,0,69.0,12,4.3333,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.transform.FaultMediator;


public class FaultMediatorSerializer extends AbstractMediatorSerializer {

    private static final String SOAP11 = ""soap11"";

    private static final String SOAP12 = ""soap12"";

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof FaultMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        FaultMediator mediator = (FaultMediator) m;
        OMElement fault = fac.createOMElement(""makefault"", synNS);
        saveTracingState(fault,mediator);

        if(mediator.getSoapVersion()==FaultMediator.SOAP11) {
           fault.addAttribute(fac.createOMAttribute(
                ""version"", nullNS, SOAP11));
        }else if(mediator.getSoapVersion()==FaultMediator.SOAP12) {
           fault.addAttribute(fac.createOMAttribute(
                ""version"", nullNS, SOAP12));
        }

        OMElement code = fac.createOMElement(""code"", synNS, fault);
        if (mediator.getFaultCodeValue() != null) {
            code.addAttribute(fac.createOMAttribute(
                ""value"", nullNS, mediator.getFaultCodeValue().getPrefix() + "":""
                    + mediator.getFaultCodeValue().getLocalPart()));
            code.declareNamespace(mediator.getFaultCodeValue().getNamespaceURI(),
                    mediator.getFaultCodeValue().getPrefix());

        } else if (mediator.getFaultCodeExpr() != null) {
            code.addAttribute(fac.createOMAttribute(
                ""expression"", nullNS, mediator.getFaultCodeExpr().toString()));
            super.serializeNamespaces(code, mediator.getFaultCodeExpr());

        } else {
            handleException(""Fault code is required for a fault mediator"");
        }

        OMElement reason = fac.createOMElement(""reason"", synNS, fault);
        if (mediator.getFaultReasonValue() != null) {
            reason.addAttribute(fac.createOMAttribute(
                ""value"", nullNS, mediator.getFaultReasonValue()));

        } else if (mediator.getFaultReasonExpr() != null) {
            reason.addAttribute(fac.createOMAttribute(
                ""expression"", nullNS, mediator.getFaultReasonExpr().toString()));
            super.serializeNamespaces(code, mediator.getFaultReasonExpr());

        } else {
            handleException(""Fault reason is required for a fault mediator"");
        }


        if (mediator.getFaultNode() != null) {
            OMElement node = fac.createOMElement(""node"", synNS, fault);
            node.setText(mediator.getFaultNode().toString());
        }

        if (mediator.getFaultRole() != null) {
            OMElement role = fac.createOMElement(""role"", synNS, fault);
            role.setText(mediator.getFaultRole().toString());
        }

        if (mediator.getFaultDetail() != null) {
            OMElement detail = fac.createOMElement(""detail"", synNS, fault);
            detail.setText(mediator.getFaultDetail());
        }

        if (parent != null) {
            parent.addChild(fault);
        }
        return fault;
    }

    public String getMediatorClassName() {
        return FaultMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AbstractMediatorFactory,5,1,17,24,18,10,17,7,0,1.0,142,1.0,0,0.0,0.45,0,0,24.8,5,1.4,0,"

package org.apache.synapse.config.xml;

import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;

public abstract class AbstractMediatorFactory implements MediatorFactory {

    
    protected static Log log;
    protected static final QName ATT_NAME    = new QName(""name"");
    protected static final QName ATT_VALUE   = new QName(""value"");
    protected static final QName ATT_XPATH   = new QName(""xpath"");
    protected static final QName ATT_REGEX   = new QName(""regex"");
    protected static final QName ATT_EXPRN   = new QName(""expression"");
    protected static final QName ATT_KEY     = new QName(""key"");
    protected static final QName ATT_SOURCE  = new QName(""source"");
    protected static final QName ATT_TARGET  = new QName(""target"");
    protected static final QName ATT_ONERROR = new QName(""onError"");
    protected static final QName ATT_STATS
        = new QName(XMLConfigConstants.STATISTICS_ATTRIB_NAME);
    protected static final QName PROP_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""property"");
    protected static final QName FEATURE_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""feature"");
    protected static final QName TARGET_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""target"");

    
    protected AbstractMediatorFactory() {
        log = LogFactory.getLog(this.getClass());
    }

    
    protected void processTraceState(Mediator mediator, OMElement mediatorOmElement) {

        OMAttribute trace = mediatorOmElement.getAttribute(
            new QName(XMLConfigConstants.NULL_NAMESPACE, XMLConfigConstants.TRACE_ATTRIB_NAME));

        if (trace != null) {
            String traceValue = trace.getAttributeValue();
            if (traceValue != null) {
                if (traceValue.equals(XMLConfigConstants.TRACE_ENABLE)) {
                    mediator.setTraceState(org.apache.synapse.SynapseConstants.TRACING_ON);
                } else if (traceValue.equals(XMLConfigConstants.TRACE_DISABLE)) {
                    mediator.setTraceState(org.apache.synapse.SynapseConstants.TRACING_OFF);
                }
            }
        }
    }

    protected void handleException(String message, Exception e) {
        LogFactory.getLog(this.getClass()).error(message, e);
        throw new SynapseException(message, e);
    }

    protected void handleException(String message) {
        LogFactory.getLog(this.getClass()).error(message);
        throw new SynapseException(message);
    }
}
"
synapse,1.1,org.apache.synapse.mediators.eip.Target,14,1,0,15,26,29,8,7,14,0.769230769,159,1.0,2,0.0,0.3,0,0,9.928571429,10,1.5714,0,"

package org.apache.synapse.mediators.eip;

import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.axis2.addressing.EndpointReference;


public class Target {

    
    private String toAddress = null;

    
    private String soapAction = null;

    
    private SequenceMediator sequence = null;

    
    private String sequenceRef = null;

    
    private Endpoint endpoint = null;

    
    private String endpointRef = null;

    
    public void mediate(MessageContext synCtx) {

        if (soapAction != null) {
            synCtx.setSoapAction(soapAction);
        }

        if (toAddress != null) {
            if (synCtx.getTo() != null) {
                synCtx.getTo().setAddress(toAddress);
            } else {
                synCtx.setTo(new EndpointReference(toAddress));
            }
        }

        
        
        if (sequence != null) {
            synCtx.getEnvironment().injectAsync(synCtx, sequence);
        } else if (sequenceRef != null) {
            SequenceMediator refSequence = (SequenceMediator) synCtx.getSequence(sequenceRef);
            if (refSequence != null) {
                synCtx.getEnvironment().injectAsync(synCtx, refSequence);
            }
        } else if (endpoint != null) {
            endpoint.send(synCtx);
        } else if (endpointRef != null) {
            Endpoint epr = synCtx.getConfiguration().getEndpoint(endpointRef);
            if (epr != null) {
                epr.send(synCtx);
            }
        }
    }

    
    
    

    public String getToAddress() {
        return toAddress;
    }

    public void setToAddress(String toAddress) {
        this.toAddress = toAddress;
    }

    public String getSoapAction() {
        return soapAction;
    }

    public void setSoapAction(String soapAction) {
        this.soapAction = soapAction;
    }

    public SequenceMediator getSequence() {
        return sequence;
    }

    public void setSequence(SequenceMediator sequence) {
        this.sequence = sequence;
    }

    public String getSequenceRef() {
        return sequenceRef;
    }

    public void setSequenceRef(String sequenceRef) {
        this.sequenceRef = sequenceRef;
    }

    public Endpoint getEndpoint() {
        return endpoint;
    }

    public void setEndpoint(Endpoint endpoint) {
        this.endpoint = endpoint;
    }

    public String getEndpointRef() {
        return endpointRef;
    }

    public void setEndpointRef(String endpointRef) {
        this.endpointRef = endpointRef;
    }
}"
synapse,1.1,org.apache.synapse.config.xml.endpoints.LoadbalanceEndpointFactory,8,1,0,13,35,20,1,13,3,0.714285714,152,1.0,1,0.0,0.244897959,0,0,17.75,5,1.5,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.LoadbalanceEndpoint;
import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.OMAttribute;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;
import java.util.Iterator;
import java.util.ArrayList;


public class LoadbalanceEndpointFactory implements EndpointFactory {

    private static Log log = LogFactory.getLog(LoadbalanceEndpointFactory.class);

    private static LoadbalanceEndpointFactory instance = new LoadbalanceEndpointFactory();

    private LoadbalanceEndpointFactory() {}

    public static LoadbalanceEndpointFactory getInstance() {
        return instance;
    }

    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {

        

        OMElement loadbalanceElement =  null;
        loadbalanceElement = epConfig.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""loadbalance""));

        if(loadbalanceElement != null) {

            LoadbalanceEndpoint loadbalanceEndpoint = new LoadbalanceEndpoint();

            
            OMAttribute name = epConfig.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""name""));

            if (name != null) {
                loadbalanceEndpoint.setName(name.getAttributeValue());
            }

            
            ArrayList endpoints = getEndpoints(loadbalanceElement, loadbalanceEndpoint);
            loadbalanceEndpoint.setEndpoints(endpoints);

            
            LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory.
                    createLoadbalanceAlgorithm(loadbalanceElement, endpoints);
            loadbalanceEndpoint.setAlgorithm(algorithm);

            
            String failover = loadbalanceElement.getAttributeValue(new QName(""failover""));
            if (failover != null && failover.equalsIgnoreCase(""false"")) {
                loadbalanceEndpoint.setFailover(false);
            }

            return loadbalanceEndpoint;
        }

        return null;  
    }

    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return createEndpoint((OMElement) om, false);
        } else {
            handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
        }
        return null;
    }

    private ArrayList getEndpoints(OMElement loadbalanceElement, Endpoint parent) {

        ArrayList endpoints = new ArrayList();
        Iterator iter = loadbalanceElement.getChildrenWithName
                (org.apache.synapse.config.xml.XMLConfigConstants.ENDPOINT_ELT);
        while (iter.hasNext()) {

            OMElement endptElem = (OMElement) iter.next();

            EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
            Endpoint endpoint = epFac.createEndpoint(endptElem, true);
            endpoint.setParentEndpoint(parent);
            endpoints.add(endpoint);
        }

        return endpoints;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.XMLConfigConstants,2,1,0,6,4,1,6,0,1,1.692307692,80,0.0,0,0.0,1.0,0,0,26.0,0,0.0,0,"

package org.apache.synapse.config.xml;

import org.apache.synapse.SynapseConstants;
import javax.xml.namespace.QName;


public class XMLConfigConstants {

    
    public static final String SYNAPSE_NAMESPACE = SynapseConstants.SYNAPSE_NAMESPACE;

    
    
    
    public static final String SCOPE_DEFAULT = ""default"";
    
    public static final String SCOPE_AXIS2 = ""axis2"";
    
    public static final String SCOPE_CLIENT = ""axis2-client"";
    
    public static final String SCOPE_TRANSPORT = ""transport"";

    
    
    public static final String SEQUENCE_VERSION_1_0 = ""1.0"";
    
    public static final String SEQUENCE_VERSION_1_1 = ""1.1"";

    
    public static final QName DEFINITIONS_ELT = new QName(SYNAPSE_NAMESPACE, ""definitions"");
    public static final QName SEQUENCE_ELT    = new QName(SYNAPSE_NAMESPACE, ""sequence"");
    public static final QName ENDPOINT_ELT    = new QName(SYNAPSE_NAMESPACE, ""endpoint"");
    public static final QName ENTRY_ELT       = new QName(SYNAPSE_NAMESPACE, ""localEntry"");
    public static final QName REGISTRY_ELT    = new QName(SYNAPSE_NAMESPACE, ""registry"");
    public static final QName TASK_ELT        = new QName(SYNAPSE_NAMESPACE, ""task"");
    public static final QName PROXY_ELT       = new QName(SYNAPSE_NAMESPACE, ""proxy"");
    public static final String NULL_NAMESPACE = """";
    public static final Object QUARTZ_QNAME   =
        new QName(""http:

	
	public static final String TRACE_ATTRIB_NAME = ""trace"";
	
	public static final String TRACE_ENABLE = ""enable"";
	
	public static final String TRACE_DISABLE = ""disable"";

	
	public static final String STATISTICS_ATTRIB_NAME = ""statistics"";
	
	public static final String STATISTICS_ENABLE = ""enable"";
	
	public static final String STATISTICS_DISABLE = ""disable"";

	public static final String SUSPEND_DURATION_ON_FAILURE = ""suspendDurationOnFailure"";
	public static final String ALGORITHM_NAME = ""policy"";

    public static final String ONREJECT = ""onReject"";
	public static final String ONACCEPT = ""onAccept"";
}
"
synapse,1.1,org.apache.synapse.util.UUIDGenerator,4,1,0,4,31,0,4,0,2,0.5,179,1.0,0,0.0,0.333333333,0,0,42.75,4,2.0,0,"

package org.apache.synapse.util;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;


public class UUIDGenerator {
    

    private static String baseUUID = null;
    private static long incrementingValue = 0;

    private static Random myRand = null;
    private static boolean useNano = false;

    
    public static String getUUID() {
        if (baseUUID == null) {
            baseUUID = getInitialUUID();
            baseUUID = ""urn:uuid:"" + baseUUID;
        }
        if (++incrementingValue >= Long.MAX_VALUE) {
            incrementingValue = 0;
        }

        if (useNano) {
            return baseUUID + (System.nanoTime() + incrementingValue) +
                Integer.toString(myRand.nextInt());
        } else {

            return baseUUID + (System.currentTimeMillis() + incrementingValue +
                Integer.toString(myRand.nextInt()));
        }

    }

    protected static String getInitialUUID() {

        try {
            if (System.class.getMethod(""nanoTime"", new Class[0]) != null) {
                useNano = true;
            }
        } catch (NoSuchMethodException ignore) {}

        if (myRand == null) {
            myRand = new Random();
        }
        long rand = myRand.nextLong();
        String sid;
        try {
            sid = InetAddress.getLocalHost().toString();
        } catch (UnknownHostException e) {
            sid = Thread.currentThread().getName();
        }
        StringBuffer sb = new StringBuffer();
        sb.append(sid);
        sb.append("":"");
        sb.append(Long.toString(rand));
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            
            
        }
        md5.update(sb.toString().getBytes());
        byte[] array = md5.digest();
        StringBuffer sb2 = new StringBuffer();
        for (int j = 0; j < array.length; ++j) {
            int b = array[j] & 0xFF;
            sb2.append(Integer.toHexString(b));
        }
        int begin = myRand.nextInt();
        if (begin < 0) begin = begin * -1;
        begin = begin % 8;
        return sb2.toString().substring(begin, begin + 18).toUpperCase();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AbstractDBMediatorSerializer,2,2,2,14,30,1,2,12,1,2.0,377,0.0,0,0.857142857,0.666666667,0,0,187.5,25,12.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.db.AbstractDBMediator;
import org.apache.synapse.mediators.db.Statement;

import javax.xml.namespace.QName;
import java.sql.Types;
import java.util.Iterator;


public abstract class AbstractDBMediatorSerializer extends AbstractMediatorSerializer {

    protected void serializeDBInformation(AbstractDBMediator mediator, OMElement dbParent) {

        OMElement connElt = fac.createOMElement(""connection"", synNS);
        OMElement poolElt = fac.createOMElement(""pool"", synNS);

        Iterator iter = mediator.getDataSourceProps().keySet().iterator();
        while (iter.hasNext()) {

            Object o = iter.next();
            String value = (String) mediator.getDataSourceProps().get(o);

            if (o instanceof QName) {
                QName name = (QName) o;
                OMElement elt = fac.createOMElement(name.getLocalPart(), synNS);
                elt.setText(value);
                poolElt.addChild(elt);

            } else if (o instanceof String) {
                OMElement elt = fac.createOMElement(
                    AbstractDBMediatorFactory.PROP_Q.getLocalPart(), synNS);
                elt.addAttribute(fac.createOMAttribute(""name"", nullNS, (String) o));
                elt.addAttribute(fac.createOMAttribute(""value"", nullNS, value));
                poolElt.addChild(elt);
            }
        }

        connElt.addChild(poolElt);
        dbParent.addChild(connElt);

        
        Iterator statementIter = mediator.getStatementList().iterator();
        while (statementIter.hasNext()) {

            Statement statement = (Statement) statementIter.next();
            OMElement stmntElt = fac.createOMElement(
                AbstractDBMediatorFactory.STMNT_Q.getLocalPart(), synNS);

            OMElement sqlElt = fac.createOMElement(
                AbstractDBMediatorFactory.SQL_Q.getLocalPart(), synNS);
            sqlElt.setText(statement.getRawStatement());
            stmntElt.addChild(sqlElt);

            
            for (Iterator it = statement.getParameters().iterator(); it.hasNext(); ) {

                Statement.Parameter param = (Statement.Parameter) it.next();
                OMElement paramElt = fac.createOMElement(
                    AbstractDBMediatorFactory.PARAM_Q.getLocalPart(), synNS);

                if (param.getPropertyName() != null) {
                    paramElt.addAttribute(
                        fac.createOMAttribute(""value"", nullNS, param.getPropertyName()));
                }
                if (param.getXpath() != null) {
                    paramElt.addAttribute(
                        fac.createOMAttribute(""expression"", nullNS, param.getXpath().toString()));
                    serializeNamespaces(paramElt, param.getXpath());
                }

                switch (param.getType()) {
                    case Types.CHAR: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""CHAR""));
                        break;
                    }
                    case Types.VARCHAR: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""VARCHAR""));
                        break;
                    }
                    case Types.LONGVARCHAR: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""LONGVARCHAR""));
                        break;
                    }
                    case Types.NUMERIC: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""NUMERIC""));
                        break;
                    }
                    case Types.DECIMAL: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""DECIMAL""));
                        break;
                    }
                    case Types.BIT: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""BIT""));
                        break;
                    }
                    case Types.TINYINT: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""TINYINT""));
                        break;
                    }
                    case Types.SMALLINT: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""SMALLINT""));
                        break;
                    }
                    case Types.INTEGER: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""INTEGER""));
                        break;
                    }
                    case Types.BIGINT: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""BIGINT""));
                        break;
                    }
                    case Types.REAL: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""REAL""));
                        break;
                    }
                    case Types.FLOAT: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""FLOAT""));
                        break;
                    }
                    case Types.DOUBLE: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""DOUBLE""));
                        break;
                    }
                    case Types.DATE: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""DATE""));
                        break;
                    }
                    case Types.TIME: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""TIME""));
                        break;
                    }
                    case Types.TIMESTAMP: {
                        paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""TIMESTAMP""));
                        break;
                    }
                    default: {
                        throw new SynapseException(""Unknown or unsupported JDBC type : "" +
                            param.getType());                            
                    }
                }

                stmntElt.addChild(paramElt);
            }

            
            for (Iterator it = statement.getResultsMap().keySet().iterator(); it.hasNext(); ) {

                String name = (String) it.next();
                String columnStr = (String) statement.getResultsMap().get(name);

                OMElement resultElt = fac.createOMElement(
                    AbstractDBMediatorFactory.RESULT_Q.getLocalPart(), synNS);

                resultElt.addAttribute(
                    fac.createOMAttribute(""name"", nullNS, name));
                resultElt.addAttribute(
                    fac.createOMAttribute(""column"", nullNS, columnStr));

                stmntElt.addChild(resultElt);
            }

            dbParent.addChild(stmntElt);
        }
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseMessageReceiver,5,1,1,21,47,0,2,19,2,0.25,242,1.0,0,0.0,0.5,0,0,47.0,4,1.6,0,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.axis2.engine.MessageReceiver;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.MediatorFaultHandler;
import org.apache.synapse.statistics.StatisticsStack;
import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;


public class SynapseMessageReceiver implements MessageReceiver {

    private static final Log log = LogFactory.getLog(SynapseMessageReceiver.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    public void receive(org.apache.axis2.context.MessageContext mc) throws AxisFault {

        MessageContext synCtx = MessageContextCreatorForAxis2.getSynapseMessageContext(mc);

        boolean traceOn = synCtx.getMainSequence().getTraceState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Synapse received a new message for message mediation..."");
            traceOrDebug(traceOn, ""Received To: "" +
                (mc.getTo() != null ? mc.getTo().getAddress() : ""null""));
            traceOrDebug(traceOn, ""SOAPAction: "" +
                (mc.getSoapAction() != null ? mc.getSoapAction() : ""null""));
            traceOrDebug(traceOn, ""WSA-Action: "" +
                (mc.getWSAAction() != null ? mc.getWSAAction() : ""null""));

            if (traceOn && trace.isTraceEnabled()) {
                String[] cids = mc.getAttachmentMap().getAllContentIDs();
                if (cids != null && cids.length > 0) {
                    for (int i=0; i<cids.length; i++) {
                        trace.trace(""Attachment : "" + cids[i]);
                    }
                }
                trace.trace(""Envelope : "" + mc.getEnvelope());
            }
        }

        
        Log serviceLog = LogFactory.getLog(SynapseConstants.SERVICE_LOGGER_PREFIX +
            SynapseConstants.SYNAPSE_SERVICE_NAME);
        ((Axis2MessageContext) synCtx).setServiceLog(serviceLog);

        try {
            
            StatisticsStack synapseServiceStack = new ProxyServiceStatisticsStack();
            boolean isFault = synCtx.getEnvelope().getBody().hasFault();
            synapseServiceStack.put(SynapseConstants.SYNAPSE_SERVICE_NAME,
                System.currentTimeMillis(), !synCtx.isResponse(), true, isFault);
            synCtx.setProperty(SynapseConstants.SERVICE_STATS, synapseServiceStack);

            
            synCtx.pushFaultHandler(new MediatorFaultHandler(
                        synCtx.getSequence(SynapseConstants.FAULT_SEQUENCE_KEY)));

            
            synCtx.getEnvironment().injectMessage(synCtx);

        } catch (SynapseException syne) {

            if (!synCtx.getFaultStack().isEmpty()) {
                warn(traceOn, ""Executing fault handler due to exception encountered"", synCtx);
                ((FaultHandler) synCtx.getFaultStack().pop()).handleFault(synCtx, syne);

            } else {
                warn(traceOn, ""Exception encountered but no fault handler found - "" +
                    ""message dropped"", synCtx);
            }
        }
    }

    private void traceOrDebug(boolean traceOn, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }

    private void warn(boolean traceOn, String msg, MessageContext msgContext) {
        if (traceOn) {
            trace.warn(msg);
        }
        if (log.isDebugEnabled()) {
            log.warn(msg);
        }
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().warn(msg);
        }
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseStartUpServlet,8,3,0,3,30,26,0,3,4,0.857142857,208,1.0,0,0.806451613,0.464285714,3,4,24.875,8,1.625,0,"
package org.apache.synapse.core.axis2;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.ServerManager;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;



public class SynapseStartUpServlet extends HttpServlet {

    private static Log log = LogFactory.getLog(SynapseStartUpServlet.class);

    public void init() throws ServletException {
        super.init();
    }

    public void init(ServletConfig servletConfig) throws ServletException {
        ServerManager serverManager = ServerManager.getInstance();
        ServletContext servletContext = servletConfig.getServletContext();
        if (""true"".equals(servletContext.getAttribute(""hasAlreadyInit""))) {
            return;
        }
        String synapseHome = resolveSynapseHome(servletConfig);
        
        if (synapseHome != null) {
            if (synapseHome.endsWith(""/"")) {
                synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
            }
            System.setProperty(SynapseConstants.SYNAPSE_HOME, synapseHome);
            
            String axis2Repo = System.getProperty(org.apache.axis2.Constants.AXIS2_REPO);
            if (axis2Repo == null) {
                ServerManager.getInstance().setAxis2Repolocation(synapseHome + ""/WEB-INF"" +
                    File.separator + ""repository"");
                System.setProperty(org.apache.axis2.Constants.AXIS2_REPO,
                    synapseHome + ""/WEB-INF"" +
                        File.separator + ""repository"");
            }
            
            String axis2Xml = System.getProperty(org.apache.axis2.Constants.AXIS2_CONF);
            if (axis2Xml == null) {
                System.setProperty(org.apache.axis2.Constants.AXIS2_CONF,
                    synapseHome + File.separator
                        + ""WEB-INF/conf""
                        + File.separator + org.apache.axis2.Constants.AXIS2_CONF);
            }
            
            String synapseXml = System.getProperty(org.apache.synapse.SynapseConstants.SYNAPSE_XML);
            if (synapseXml == null) {
                System.setProperty(org.apache.synapse.SynapseConstants.SYNAPSE_XML,
                    synapseHome + File.separator
                        + ""WEB-INF/conf""
                        + File.separator + org.apache.synapse.SynapseConstants.SYNAPSE_XML);

            }
        } else {
            log.fatal(""Can not resolve synapse home  : startup failed"");
            return;
        }
        serverManager.start();
        servletContext.setAttribute(""hasAlreadyInit"", ""true"");
    }


    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response) throws ServletException,
        IOException {
    }

    protected void doPost(HttpServletRequest request,
                          HttpServletResponse response) throws ServletException,
        IOException {
    }

    public void destroy() {
        try {
            ServerManager serverManager = ServerManager.getInstance();
            serverManager.stop(); 
        } catch (Exception ignored) {
        }
    }

    private String resolveSynapseHome(ServletConfig servletConfig) {
        
        String synapseHomeAsParam = servletConfig.getInitParameter(SynapseConstants.SYNAPSE_HOME);
        if (synapseHomeAsParam != null) {
            if (synapseHomeAsParam.endsWith(""/"")) {
                return synapseHomeAsParam.substring(0, synapseHomeAsParam.lastIndexOf(""/""));
            }
        }
        
        String synapseHome = System.getProperty(SynapseConstants.SYNAPSE_HOME);
        
        if (synapseHome == null || """".equals(synapseHome)) {
            ServletContext servletContext = servletConfig.getServletContext();
            
            String webinfPath = servletContext.getRealPath(""WEB-INF"");
            if (webinfPath != null) {
                synapseHome = webinfPath.substring(0, webinfPath.lastIndexOf(""WEB-INF""));
                if (synapseHome != null) {
                    if (synapseHome.endsWith(""/"")) {
                        synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
                    }
                }
            }
        }
        return synapseHome;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.OutMediatorFactory,4,3,0,5,9,4,0,5,3,0.666666667,30,1.0,0,0.666666667,0.666666667,0,0,6.25,1,0.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.filters.OutMediator;

import javax.xml.namespace.QName;


public class OutMediatorFactory extends AbstractListMediatorFactory {

    private static final QName OUT_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""out"");

    public Mediator createMediator(OMElement elem) {
        OutMediator filter = new OutMediator();

        
        
        processTraceState(filter,elem);

        addChildren(elem, filter);
        return filter;
    }

    public QName getTagQName() {
        return OUT_Q;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.AnonymousServiceFactory,6,1,0,17,32,11,1,16,2,1.044444444,244,0.777777778,1,0.0,0.333333333,0,0,38.16666667,13,2.8333,1,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.axis2.wsdl.WSDLConstants;
import org.apache.axis2.description.AxisService;
import org.apache.axis2.description.AxisMessage;
import org.apache.axis2.description.OutOnlyAxisOperation;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfiguration;

import javax.xml.namespace.QName;


public class AnonymousServiceFactory {

    private static final Log log = LogFactory.getLog(AnonymousServiceFactory.class);

    private static final String NONE            = ""__NONE__"";
    private static final String ADDR_ONLY       = ""__ADDR_ONLY__"";
    private static final String RM_AND_ADDR     = ""__RM_AND_ADDR__"";
    private static final String SEC_AND_ADDR    = ""__SEC_AND_ADDR__"";
    private static final String RM_SEC_AND_ADDR = ""__RM_SEC_AND_ADDR__"";

    public static final String OUT_IN_OPERATION   = ""__OUT_IN_OPERATION__"";
    public static final String OUT_ONLY_OPERATION = ""__OUT_ONLY_OPERATION__"";

    private static SynapseCallbackReceiver synapseCallbackReceiver = null;

    
    public static AxisService getAnonymousService(SynapseConfiguration synCfg,
                                                  AxisConfiguration axisCfg, boolean wsAddrOn,
                                                  boolean wsRMOn, boolean wsSecOn) {

        String servicekey = null;
        if (!wsAddrOn) {
            servicekey = NONE;
        } else {
            if (!wsSecOn && !wsRMOn) {
                servicekey = ADDR_ONLY;
            } else if (wsRMOn && !wsSecOn) {
                servicekey = RM_AND_ADDR;
            } else if (wsSecOn && !wsRMOn) {
                servicekey = SEC_AND_ADDR;
            } else {
                servicekey = RM_SEC_AND_ADDR;
            }
        }

        try {
            AxisService service = axisCfg.getService(servicekey);
            if (service == null) {
                synchronized (AnonymousServiceFactory.class) {

                    
                    service = axisCfg.getService(servicekey);
                    if (service != null) {
                        return service;
                    }

                    service = createAnonymousService(synCfg, axisCfg, servicekey);

                    if (wsAddrOn) {
                        service.engageModule(axisCfg.getModule(
                            SynapseConstants.ADDRESSING_MODULE_NAME), axisCfg);

                        if (wsRMOn) {
                            service.engageModule(axisCfg.getModule(
                                SynapseConstants.SANDESHA2_MODULE_NAME), axisCfg);
                        }
                        if (wsSecOn) {
                            service.engageModule(axisCfg.getModule(
                                SynapseConstants.RAMPART_MODULE_NAME), axisCfg);
                        }
                    }
                    
                }
            }
            return service;
        } catch (AxisFault e) {
            handleException(""Error retrieving anonymous service for QoS : "" + servicekey, e);
        }
        return null;
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }

    
    private static AxisService createAnonymousService(SynapseConfiguration synCfg,
        AxisConfiguration axisCfg, String serviceKey) {

        try {
            DynamicAxisOperation dynamicOperation =
                new DynamicAxisOperation(new QName(OUT_IN_OPERATION));
            dynamicOperation.setMessageReceiver(getCallbackReceiver(synCfg));
            AxisMessage inMsg = new AxisMessage();
            inMsg.setName(""in-message"");
            inMsg.setParent(dynamicOperation);
            AxisMessage outMsg = new AxisMessage();
            outMsg.setName(""out-message"");
            outMsg.setParent(dynamicOperation);
            dynamicOperation.addMessage(inMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
            dynamicOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_IN_VALUE);

            OutOnlyAxisOperation asyncOperation =
                new OutOnlyAxisOperation(new QName(OUT_ONLY_OPERATION));
            asyncOperation.setMessageReceiver(getCallbackReceiver(synCfg));
            AxisMessage outOnlyMsg = new AxisMessage();
            outOnlyMsg.setName(""out-message"");
            outOnlyMsg.setParent(asyncOperation);
            asyncOperation.addMessage(outMsg, WSDLConstants.MESSAGE_LABEL_OUT_VALUE);

            AxisService axisAnonymousService  = new AxisService(serviceKey);
            axisAnonymousService.addOperation(dynamicOperation);
            axisAnonymousService.addOperation(asyncOperation);
            axisCfg.addService(axisAnonymousService);
            axisCfg.getPhasesInfo().setOperationPhases(dynamicOperation);
            return axisAnonymousService;

        } catch (AxisFault e) {
            handleException(
                ""Error occured while creating an anonymous service for QoS : "" +
                 serviceKey, e);
        }
        return null;
    }

    
    private static synchronized SynapseCallbackReceiver getCallbackReceiver(
        SynapseConfiguration synCfg) {

        if (synapseCallbackReceiver == null) {
            synapseCallbackReceiver = new SynapseCallbackReceiver(synCfg);
        }
        return synapseCallbackReceiver;
    }
}
"
synapse,1.1,org.apache.synapse.MessageContext,48,1,0,71,48,1128,65,10,48,2.0,48,0.0,0,0.0,0.138257576,0,0,0.0,1,1.0,0,"

package org.apache.synapse;


import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axis2.AxisFault;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.addressing.RelatesTo;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.commons.logging.Log;

import java.util.Set;
import java.util.Stack;
import java.util.Map;



public interface MessageContext {

    
    public SynapseConfiguration getConfiguration();

    
    public void setConfiguration(SynapseConfiguration cfg);

    
    public SynapseEnvironment getEnvironment();

    
    public void setEnvironment(SynapseEnvironment se);

    
    public Map getContextEntries();

    
    public void setContextEntries(Map entries);

    
    public Mediator getMainSequence();

    
    public Mediator getFaultSequence();

    
    public Mediator getSequence(String key);

    
    public Endpoint getEndpoint(String key);

    
    public Object getProperty(String key);

    
    public Object getEntry(String key);

    
    public void setProperty(String key, Object value);

    
    public Set getPropertyKeySet();

    
    public SOAPEnvelope getEnvelope();

    
    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault;

    
    
    public EndpointReference getFaultTo();

    
    public void setFaultTo(EndpointReference reference);

    
    public EndpointReference getFrom();

    
    public void setFrom(EndpointReference reference);

    
    public String getMessageID();

    
    public void setMessageID(String string);

    
    public RelatesTo getRelatesTo();

    
    public void setRelatesTo(RelatesTo[] reference);

    
    public EndpointReference getReplyTo();

    
    public void setReplyTo(EndpointReference reference);

    
    public EndpointReference getTo();

     
    public void setTo(EndpointReference reference);

    
    public void setWSAAction(String actionURI);

    
    public String getWSAAction();

    
    public String getSoapAction();

    
    public void setSoapAction(String string);

    
    public void setWSAMessageID(String messageID);

    
    public String getWSAMessageID();

    
    public boolean isDoingMTOM();

    
    public boolean isDoingSWA();

    
    public void setDoingMTOM(boolean b);

    
    public void setDoingSWA(boolean b);

    
    public boolean isDoingPOX();

    
    public void setDoingPOX(boolean b);

    
    public boolean isDoingGET();

    
    public void setDoingGET(boolean b);

    
    public boolean isSOAP11();

    
    public void setResponse(boolean b);

    
    public boolean isResponse();

    
    public void setFaultResponse(boolean b);

    
    public boolean isFaultResponse();

    
    public int getTracingState();

    
    public void setTracingState(int tracingState);

    public Stack getFaultStack();

    public void pushFaultHandler(FaultHandler fault);

    
    public Log getServiceLog();
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.AddressEndpointFactory,8,1,0,11,56,20,1,10,4,0.714285714,468,1.0,1,0.0,0.261904762,0,0,57.0,31,5.125,3,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.AddressEndpoint;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;


public class AddressEndpointFactory implements EndpointFactory {

    private static Log log = LogFactory.getLog(AddressEndpointFactory.class);

    private static AddressEndpointFactory instance = new AddressEndpointFactory();

    
    private int statisticsState = SynapseConstants.STATISTICS_UNSET;
    
    protected int traceState = SynapseConstants.TRACING_UNSET;

    private AddressEndpointFactory() {}

    public static AddressEndpointFactory getInstance() {
        return instance;
    }

    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {

        AddressEndpoint addressEndpoint = new AddressEndpoint();

        if (!anonymousEndpoint) {
            OMAttribute name = epConfig.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""name""));

            if (name != null) {
                addressEndpoint.setName(name.getAttributeValue());
            }
        }

        OMElement addressElement = epConfig.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""address""));

        if (addressElement != null) {
            EndpointDefinition endpoint = createEndpointDefinition(addressElement);
            addressEndpoint.setEndpoint(endpoint);

            
            OMElement suspendElement = addressElement.getFirstChildWithName(new QName(
                    SynapseConstants.SYNAPSE_NAMESPACE,
                    org.apache.synapse.config.xml.XMLConfigConstants.SUSPEND_DURATION_ON_FAILURE));

            if (suspendElement != null) {
                String suspend = suspendElement.getText();

                try {
                    if (suspend != null) {
                        long suspendDuration = Long.parseLong(suspend.trim());
                        addressEndpoint.setSuspendOnFailDuration(suspendDuration * 1000);
                    }

                } catch (NumberFormatException e) {
                    handleException(""The suspend duration should be specified as a valid number :: ""
                        + e.getMessage(), e);
                }
            }
        }

        return addressEndpoint;
    }

    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return createEndpoint((OMElement) om, false);
        } else {
            handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
        }
        return null;
    }

    
    public EndpointDefinition createEndpointDefinition(OMElement elem) {

        OMAttribute address = elem.getAttribute(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""uri""));
        OMAttribute format = elem.getAttribute(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""format""));
        OMAttribute optimize = elem.getAttribute(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""optimize""));

        EndpointDefinition endpoint = new EndpointDefinition();
        OMAttribute statistics = elem.getAttribute(
                new QName(org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE,
                        org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ATTRIB_NAME));
        if (statistics != null) {
            String statisticsValue = statistics.getAttributeValue();
            if (statisticsValue != null) {
                if (org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ENABLE.equals(
                        statisticsValue)) {
                    endpoint.setStatisticsState(org.apache.synapse.SynapseConstants.STATISTICS_ON);
                } else if (org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_DISABLE.equals(
                        statisticsValue)) {
                    endpoint.setStatisticsState(org.apache.synapse.SynapseConstants.STATISTICS_OFF);
                }
            }
        }
        if (address != null) {
            endpoint.setAddress(address.getAttributeValue());



        }
        if (format != null)
        {
            String forceValue = format.getAttributeValue().trim().toLowerCase();
            if (SynapseConstants.FORMAT_POX.equals(forceValue)) {
                endpoint.setForcePOX(true);
                endpoint.setFormat(SynapseConstants.FORMAT_POX);
                
            } else if (SynapseConstants.FORMAT_GET.equals(forceValue)) {
            	endpoint.setForceGET(true);
            	endpoint.setFormat(SynapseConstants.FORMAT_GET);

            } else if (SynapseConstants.FORMAT_SOAP11.equals(forceValue)) {
            	endpoint.setForceSOAP11(true);
            	endpoint.setFormat(SynapseConstants.FORMAT_SOAP11);
                
            } else if (SynapseConstants.FORMAT_SOAP12.equals(forceValue)) {
            	endpoint.setForceSOAP12(true);
                endpoint.setFormat(SynapseConstants.FORMAT_SOAP12);
                
            } else {
                handleException(""unknown value -""""+forceValue+"""". Attribute 'format' accepts only 'pox', 'get', 'soap11', 'soap12'"");
            }
        }

        if (optimize != null && optimize.getAttributeValue().length() > 0) {
            String method = optimize.getAttributeValue().trim();
            if (""mtom"".equalsIgnoreCase(method)) {
                endpoint.setUseMTOM(true);
            } else if (""swa"".equalsIgnoreCase(method)) {
                endpoint.setUseSwa(true);
            }
        }

        OMElement wsAddr = elem.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableAddressing""));
        if (wsAddr != null) {
            endpoint.setAddressingOn(true);
            String useSepList = wsAddr.getAttributeValue(new QName(
                    ""separateListener""));
            if (useSepList != null) {
                if (useSepList.trim().toLowerCase().startsWith(""tr"")
                        || useSepList.trim().startsWith(""1"")) {
                    endpoint.setUseSeparateListener(true);
                }
            }
        }
        OMElement wsSec = elem.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableSec""));
        if (wsSec != null) {
            endpoint.setSecurityOn(true);
            OMAttribute policy = wsSec.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""policy""));
            if (policy != null) {
                endpoint.setWsSecPolicyKey(policy.getAttributeValue());
            }
        }
        OMElement wsRm = elem.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableRM""));
        if (wsRm != null) {
            endpoint.setReliableMessagingOn(true);
            OMAttribute policy = wsRm.getAttribute(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""policy""));
            if (policy != null) {
                endpoint.setWsRMPolicyKey(policy.getAttributeValue());
            }
        }
        
        OMElement timeout = elem.getFirstChildWithName(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""timeout""));
        if (timeout != null) {
            OMElement duration = timeout.getFirstChildWithName(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""duration""));
            if (duration != null) {
                String d = duration.getText();
                if (d != null) {
                    try {
                        long timeoutSeconds = new Long(d.trim()).longValue();
                        endpoint.setTimeoutDuration(timeoutSeconds * 1000);

                    } catch (NumberFormatException e) {
                        handleException(
                            ""The timeout seconds should be specified as a valid number :: ""
                            + e.getMessage(), e);
                    }
                }
            }

            OMElement action = timeout.getFirstChildWithName(new QName(
                    org.apache.synapse.config.xml.XMLConfigConstants.SYNAPSE_NAMESPACE, ""action""));
            if (action != null) {
                String a = action.getText();
                if (a != null) {
                    if ((a.trim()).equalsIgnoreCase(""discard"")) {
                        endpoint.setTimeoutAction(SynapseConstants.DISCARD);

                        
                        if (endpoint.getTimeoutDuration() == 0) {
                            endpoint.setTimeoutDuration(30000);
                        }
                    } else if ((a.trim()).equalsIgnoreCase(""fault"")) {
                        endpoint.setTimeoutAction(SynapseConstants.DISCARD_AND_FAULT);

                        
                        if (endpoint.getTimeoutDuration() == 0) {
                            endpoint.setTimeoutDuration(30000);
                        }
                    }
                }
            }
        }

        return endpoint;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseAxisServlet,3,4,0,4,13,1,0,4,3,2.0,35,0.0,0,0.964285714,0.555555556,1,6,10.66666667,1,0.6667,2,"
package org.apache.synapse.core.axis2;

import java.lang.reflect.Field;

import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.transport.http.AxisServlet;
import org.apache.axis2.transport.http.ListingAgent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.ServerManager;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;



public class SynapseAxisServlet extends AxisServlet {
    private final static Log log = LogFactory.getLog(SynapseAxisServlet.class);
    
    
    public void init(ServletConfig config) throws ServletException {
        ServletContext servletContext = config.getServletContext();
        this.configContext = ServerManager.getInstance().getConfigurationContext();
        this.axisConfiguration = this.configContext.getAxisConfiguration();
        servletContext.setAttribute(this.getClass().getName(), this);
        this.servletConfig = config;
        
        
        
        try {
            Field agentField = AxisServlet.class.getDeclaredField(""agent"");
            agentField.setAccessible(true);
            agentField.set(this, new ListingAgent(configContext));
        }
        catch (Throwable ex) {
        	log.warn(""Unable to initialize AxisServlet#agent. Published WSDL documents may be inaccessible."");
        }
        
        initParams();
    }

    public void initContextRoot(HttpServletRequest req) {
        this.configContext.setContextRoot(""/"");
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.ValidateMediatorFactory,4,3,0,10,30,2,0,10,3,0.666666667,226,1.0,0,0.666666667,0.666666667,0,0,54.75,16,4.25,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.ValidateMediator;
import org.jaxen.JaxenException;
import org.xml.sax.SAXException;

import javax.xml.namespace.QName;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class ValidateMediatorFactory extends AbstractListMediatorFactory {

    private static final QName VALIDATE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""validate"");
    private static final QName ON_FAIL_Q  = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""on-fail"");
    private static final QName SCHEMA_Q   = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""schema"");

    public Mediator createMediator(OMElement elem) {

        ValidateMediator validateMediator = new ValidateMediator();

        
        List schemaKeys = new ArrayList();
        Iterator schemas = elem.getChildrenWithName(SCHEMA_Q);

        while (schemas.hasNext()) {
            Object o = schemas.next();
            if (o instanceof OMElement) {
                OMElement omElem = (OMElement) o;
                OMAttribute keyAtt = omElem.getAttribute(ATT_KEY);
                if (keyAtt != null) {
                    schemaKeys.add(keyAtt.getAttributeValue());
                } else {
                    handleException(""A 'schema' definition must contain a local property 'key'"");
                }
            } else {
                handleException(""Invalid 'schema' declaration for validate mediator"");
            }
        }

        if (schemaKeys.size() == 0) {
            handleException(""No schemas specified for the validate mediator"");
        } else {
            validateMediator.setSchemaKeys(schemaKeys);
        }

        
        OMAttribute attSource = elem.getAttribute(ATT_SOURCE);

        if (attSource != null) {
            try {
                AXIOMXPath xp = new AXIOMXPath(attSource.getAttributeValue());
                validateMediator.setSource(xp);
                OMElementUtils.addNameSpaces(xp, elem, log);
            } catch (JaxenException e) {
                handleException(""Invalid XPath expression specified for attribute 'source'"", e);
            }
        }

        
        OMElement onFail = null;
        Iterator iterator = elem.getChildrenWithName(ON_FAIL_Q);
        if (iterator.hasNext()) {
            onFail = (OMElement)iterator.next();
        }

        if (onFail != null && onFail.getChildElements().hasNext()) {
            addChildren(onFail, validateMediator);
        } else {
            handleException(""A non-empty <on-fail> child element is required for "" +
                ""the <validate> mediator"");
        }

        
        
        processTraceState(validateMediator,elem);
        
        Iterator iter = elem.getChildrenWithName(FEATURE_Q);
        while (iter.hasNext()) {
            OMElement featureElem = (OMElement) iter.next();
            OMAttribute attName = featureElem.getAttribute(ATT_NAME);
            OMAttribute attValue = featureElem.getAttribute(ATT_VALUE);
            if (attName != null && attValue != null) {
                String name = attName.getAttributeValue();
                String value = attValue.getAttributeValue();
                if (name != null && value != null) {
                    try {
                        if (""true"".equals(value.trim())) {
                            validateMediator.addFeature(name.trim(), true);
                        } else if (""false"".equals(value.trim())) {
                            validateMediator.addFeature(name.trim(), false);
                        } else {
                            handleException(""The feature must have value true or false"");
                        }
                    } catch (SAXException e) {
                        handleException(""Error setting validation feature : "" + name + "" to : "" + value, e);
                    }
                } else {
                    handleException(""The valid values for both of the name and value are need"");
                }
            } else {
                handleException(""Both of the name and value attribute are required for a feature"");
            }
        }
        return validateMediator;
    }

    public QName getTagQName() {
        return VALIDATE_Q;
    }
}
"
synapse,1.1,org.apache.synapse.startup.quartz.SimpleQuartzJob,5,1,0,12,31,0,0,12,2,1.0,132,0.25,0,0.0,0.5,0,0,24.6,1,0.6,0,"package org.apache.synapse.startup.quartz;

import java.util.Iterator;
import java.util.Set;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.startup.Task;
import org.apache.synapse.config.xml.PropertyHelper;
import org.apache.synapse.core.SynapseEnvironment;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class SimpleQuartzJob implements Job {
    public static final String
        SYNAPSE_ENVIRONMENT = ""SynapseEnvironment"",
        CLASSNAME = ""ClassName"",
        PROPERTIES = ""Properties"";
    private static final Log log = LogFactory.getLog(SimpleQuartzJob.class);

    public void execute(JobExecutionContext ctx) throws JobExecutionException {

        log.debug(""Executing task : "" + ctx.getJobDetail().getFullName());
        JobDataMap jdm = ctx.getMergedJobDataMap();
        String jobClassName = (String) jdm.get(CLASSNAME);
        if (jobClassName == null) {
            handleException(""No "" + CLASSNAME + "" in JobDetails"");
        }

        Task task = null;
        try {
            task = (Task) getClass().getClassLoader().loadClass(jobClassName).newInstance();
        } catch (Exception e) {
            handleException(""Cannot instantiate task : "" + jobClassName, e);
        }

        Set properties = (Set) jdm.get(PROPERTIES);
        Iterator it = properties.iterator();
        while (it.hasNext()) {
            OMElement prop = (OMElement) it.next();
            log.debug(""Found Property : "" + prop.toString());
            PropertyHelper.setStaticProperty(prop, task);
        }

        SynapseEnvironment se = (SynapseEnvironment) jdm.get(""SynapseEnvironment"");
        if (task instanceof ManagedLifecycle) {
            if (se != null) {
                ((ManagedLifecycle) task).init(se);
            }
        }

        if (se.isInitialized()) {
            task.execute();
        }
    }

    private void handleException(String msg) throws JobExecutionException {
        log.error(msg);
        throw new JobExecutionException(msg);
    }

    private void handleException(String msg, Exception e) throws JobExecutionException {
        log.error(msg, e);
        throw new JobExecutionException(msg, e);
    }

}
"
synapse,1.1,org.apache.synapse.core.axis2.Axis2MessageContext,61,1,0,55,154,540,26,30,58,0.893939394,940,1.0,2,0.0,0.097916667,0,0,14.2295082,10,1.5574,0,"

package org.apache.synapse.core.axis2;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.impl.llom.OMElementImpl;
import org.apache.axiom.om.impl.llom.OMTextImpl;
import org.apache.axiom.om.impl.llom.OMDocumentImpl;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.addressing.RelatesTo;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.*;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.GetPropertyFunction;
import org.apache.synapse.mediators.MediatorFaultHandler;
import org.jaxen.JaxenException;
import org.jaxen.SimpleFunctionContext;
import org.jaxen.XPathFunctionContext;

import java.util.*;


public class Axis2MessageContext implements MessageContext {

    private static final Log log = LogFactory.getLog(Axis2MessageContext.class);

    
    private SynapseConfiguration synCfg = null;

    
    private SynapseEnvironment synEnv = null;

    
    private Map properties = new HashMap();

    
    private Map localEntries = new HashMap();

    
    private Stack faultStack = new Stack();

    
    private org.apache.axis2.context.MessageContext axis2MessageContext = null;

    
    private boolean response = false;

    
    private boolean faultResponse = false;

    
    private int tracingState = SynapseConstants.TRACING_UNSET;

    
    private Log serviceLog = null;

    public SynapseConfiguration getConfiguration() {
        return synCfg;
    }

    public void setConfiguration(SynapseConfiguration synCfg) {
        this.synCfg = synCfg;
    }

    public SynapseEnvironment getEnvironment() {
        return synEnv;
    }

    public void setEnvironment(SynapseEnvironment synEnv) {
        this.synEnv = synEnv;
    }

    public Map getContextEntries() {
        return localEntries;
    }

    public void setContextEntries(Map entries) {
        this.localEntries = entries;
    }

    public Mediator getMainSequence() {
        Object o = localEntries.get(SynapseConstants.MAIN_SEQUENCE_KEY);
        if (o != null && o instanceof Mediator) {
            return (Mediator) o;
        } else {
            Mediator main = getConfiguration().getMainSequence();
            localEntries.put(SynapseConstants.MAIN_SEQUENCE_KEY, main);
            return main;
        }
    }

    public Mediator getFaultSequence() {
        Object o = localEntries.get(SynapseConstants.FAULT_SEQUENCE_KEY);
        if (o != null && o instanceof Mediator) {
            return (Mediator) o;
        } else {
            Mediator fault = getConfiguration().getFaultSequence();
            localEntries.put(SynapseConstants.FAULT_SEQUENCE_KEY, fault);
            return fault;
        }
    }

    public Mediator getSequence(String key) {
        Object o = localEntries.get(key);
        if (o != null && o instanceof Mediator) {
            return (Mediator) o;
        } else {
            Mediator m = getConfiguration().getSequence(key);
            localEntries.put(key, m);
            return m;
        }
    }

    public Endpoint getEndpoint(String key) {
        Object o = localEntries.get(key);
        if (o != null && o instanceof Endpoint) {
            return (Endpoint) o;
        } else {
            Endpoint e = getConfiguration().getEndpoint(key);
            localEntries.put(key, e);
            return e;
        }
    }

    public Object getEntry(String key) {
        Object o = localEntries.get(key);
        if (o != null && o instanceof Entry) {
            return ((Entry) o).getValue();
        } else {
            Object e = getConfiguration().getEntry(key);
            if (e != null) {
                localEntries.put(key, e);
                return e;
            } else {
                getConfiguration().getEntryDefinition(key);
                return getConfiguration().getEntry(key);
            }
        }
    }

    public Object getProperty(String key) {
        return properties.get(key);
    }

    public void setProperty(String key, Object value) {
        properties.put(key, value);

        
        if (SynapseConstants.RESPONSE.equals(key) &&
                getAxis2MessageContext().getOperationContext() != null) {
            getAxis2MessageContext().getOperationContext().setProperty(
                org.apache.axis2.Constants.RESPONSE_WRITTEN, ""SKIP"");
        }
    }

    public Set getPropertyKeySet() {
        return properties.keySet();
    }

    
    public Axis2MessageContext(org.apache.axis2.context.MessageContext axisMsgCtx,
                               SynapseConfiguration synCfg, SynapseEnvironment synEnv) {
        setAxis2MessageContext(axisMsgCtx);
        this.synCfg = synCfg;
        this.synEnv = synEnv;
        this.pushFaultHandler(new MediatorFaultHandler(synCfg.getFaultSequence()));
    }

    public EndpointReference getFaultTo() {
        return axis2MessageContext.getFaultTo();
    }

    public void setFaultTo(EndpointReference reference) {
        axis2MessageContext.setFaultTo(reference);
    }

    public EndpointReference getFrom() {
        return axis2MessageContext.getFrom();
    }

    public void setFrom(EndpointReference reference) {
        axis2MessageContext.setFrom(reference);
    }

    public SOAPEnvelope getEnvelope() {
        return axis2MessageContext.getEnvelope();
    }

    public void setEnvelope(SOAPEnvelope envelope) throws AxisFault {
        axis2MessageContext.setEnvelope(envelope);
    }

    public String getMessageID() {
        return axis2MessageContext.getMessageID();
    }

    public void setMessageID(String string) {
        axis2MessageContext.setMessageID(string);
    }

    public RelatesTo getRelatesTo() {
        return axis2MessageContext.getRelatesTo();
    }

    public void setRelatesTo(RelatesTo[] reference) {
        axis2MessageContext.setRelationships(reference);
    }

    public EndpointReference getReplyTo() {
        return axis2MessageContext.getReplyTo();
    }

    public void setReplyTo(EndpointReference reference) {
        axis2MessageContext.setReplyTo(reference);
    }

    public EndpointReference getTo() {
        return axis2MessageContext.getTo();
    }

    public void setTo(EndpointReference reference) {
        axis2MessageContext.setTo(reference);
    }

    public void setWSAAction(String actionURI) {
        axis2MessageContext.setWSAAction(actionURI);
    }

    public String getWSAAction() {
        return axis2MessageContext.getWSAAction();
    }

    public void setWSAMessageID(String messageID) {
        axis2MessageContext.setWSAMessageId(messageID);
    }

    public String getWSAMessageID() {
        return axis2MessageContext.getMessageID();
    }

    public String getSoapAction() {
        return axis2MessageContext.getSoapAction();
    }

    public void setSoapAction(String string) {
        axis2MessageContext.setSoapAction(string);
    }

    public boolean isDoingMTOM() {
        return axis2MessageContext.isDoingMTOM();
    }

    public boolean isDoingSWA() {
        return axis2MessageContext.isDoingSwA();
    }

    public void setDoingMTOM(boolean b) {
        axis2MessageContext.setDoingMTOM(b);
    }

    public void setDoingSWA(boolean b) {
        axis2MessageContext.setDoingSwA(b);
    }

    public boolean isDoingPOX() {
        return axis2MessageContext.isDoingREST();
    }

    public void setDoingPOX(boolean b) {
        axis2MessageContext.setDoingREST(b);
    }

    public boolean isDoingGET() {
        return Constants.Configuration.HTTP_METHOD_GET.equals(
            axis2MessageContext.getProperty(Constants.Configuration.HTTP_METHOD))
            && axis2MessageContext.isDoingREST();
    }

    public void setDoingGET(boolean b) {
        if(b) {
            axis2MessageContext.setDoingREST(b);
            axis2MessageContext.setProperty(Constants.Configuration.HTTP_METHOD,
                Constants.Configuration.HTTP_METHOD_GET);
        } else {
            axis2MessageContext.removeProperty(Constants.Configuration.HTTP_METHOD);
        }
    }

    public boolean isSOAP11() {
        return axis2MessageContext.isSOAP11();
    }

    public void setResponse(boolean b) {
        response = b;
        axis2MessageContext.setProperty(SynapseConstants.ISRESPONSE_PROPERTY, Boolean.valueOf(b));
    }

    public boolean isResponse() {
        Object o = properties.get(SynapseConstants.RESPONSE);
        if (o != null && o instanceof String && ((String) o).equalsIgnoreCase(""true"")) {
            return true;
        }
        return response;
    }

    public void setFaultResponse(boolean b) {
        this.faultResponse = b;
    }

    public boolean isFaultResponse() {
        return this.faultResponse;
    }

    public int getTracingState() {
        return tracingState;
    }

    public void setTracingState(int tracingState) {
        this.tracingState= tracingState;
    }

    public Stack getFaultStack() {
        return this.faultStack;
    }

    public void pushFaultHandler(FaultHandler fault) {
        this.faultStack.push(fault);
    }

    
    public Log getServiceLog() {

        if (serviceLog != null) {
            return serviceLog;
        } else {
            String serviceName = (String) getProperty(SynapseConstants.PROXY_SERVICE);
            if (serviceName != null && synCfg.getProxyService(serviceName) != null) {
                serviceLog = LogFactory.getLog(SynapseConstants.SERVICE_LOGGER_PREFIX + serviceName);
                return serviceLog;
            } else {
                serviceLog = LogFactory.getLog(
                    SynapseConstants.SERVICE_LOGGER_PREFIX.substring(0,
                    SynapseConstants.SERVICE_LOGGER_PREFIX.length()-1));
                return serviceLog;
            }
        }
    }

    
    public void setServiceLog(Log serviceLog) {
        this.serviceLog = serviceLog;
    }

    public org.apache.axis2.context.MessageContext getAxis2MessageContext() {
        return axis2MessageContext;
    }

    public void setAxis2MessageContext(org.apache.axis2.context.MessageContext axisMsgCtx) {
        this.axis2MessageContext = axisMsgCtx;
        Boolean resp = (Boolean) axisMsgCtx.getProperty(SynapseConstants.ISRESPONSE_PROPERTY);
        if (resp != null)
            response = resp.booleanValue();
    }

    public void setPaused(boolean value) {
        axis2MessageContext.setPaused(value);
    }

    public boolean isPaused() {
        return axis2MessageContext.isPaused();
    }

    public boolean isServerSide() {
        return axis2MessageContext.isServerSide();
    }

    public void setServerSide(boolean value) {
        axis2MessageContext.setServerSide(value);
    }

    
    public static String getStringValue(AXIOMXPath xpath, MessageContext synCtx) {

        synchronized(xpath) {

        if (xpath != null) {
            try {
                
                GetPropertyFunction getPropertyFunc = new GetPropertyFunction();
                getPropertyFunc.setSynCtx(synCtx);

                
                SimpleFunctionContext fc = new XPathFunctionContext();
                fc.registerFunction(SynapseConstants.SYNAPSE_NAMESPACE, ""get-property"", getPropertyFunc);
                fc.registerFunction(null, ""get-property"", getPropertyFunc);
                xpath.setFunctionContext(fc);

                
                xpath.addNamespace(""synapse"", SynapseConstants.SYNAPSE_NAMESPACE);
                xpath.addNamespace(""syn"", SynapseConstants.SYNAPSE_NAMESPACE);

            } catch (JaxenException je) {
                handleException(""Error setting up the Synapse XPath "" +
                    ""extension function for XPath : "" + xpath, je);
            }
            try {
                Object result = xpath.evaluate(synCtx.getEnvelope());
                if (result == null) {
                    return null;
                }
                StringBuffer textValue = new StringBuffer();
                if (result instanceof List) {
                    List list = (List) result;
                    Iterator iter = list.iterator();
                    while (iter.hasNext()) {
                        Object o = iter.next();
                        if (o == null && list.size() == 1) {
                            return null;
                        }
                        if (o instanceof OMTextImpl) {
                            textValue.append(((OMTextImpl) o).getText());
                        } else if (o instanceof OMElementImpl) {
                            String s = ((OMElementImpl) o).getText();
                            if (s.trim().length() == 0) {
                                s = o.toString();
                            }
                            textValue.append(s);
                        } else if (o instanceof OMDocumentImpl) {
                            textValue.append(((OMDocumentImpl) o).getOMDocumentElement().toString());
                        }
                    }
                } else {
                    textValue.append(result.toString());
                }
                return textValue.toString();

            } catch (JaxenException je) {
                handleException(""Evaluation of the XPath expression "" + xpath.toString() +
                    "" resulted in an error"", je);
            }
        } else {
            handleException(""Invalid (null) XPath expression"");
        }
        return null;
        }
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    public String toString() {
        StringBuffer sb = new StringBuffer();
        String separator = ""
"";

        if (getTo() != null)
            sb.append(""To: "" + getTo().getAddress());
        else
            sb.append(""To: "");
        if (getFrom() != null)
            sb.append(separator + ""From: "" + getFrom().getAddress());
        if (getWSAAction() != null)
            sb.append(separator + ""WSAction: "" + getWSAAction());
        if (getSoapAction() != null)
            sb.append(separator + ""SOAPAction: "" + getSoapAction());
        if (getReplyTo() != null)
            sb.append(separator + ""ReplyTo: "" + getReplyTo().getAddress());
        if (getMessageID() != null)
            sb.append(separator + ""MessageID: "" + getMessageID());

        SOAPHeader soapHeader = getEnvelope().getHeader();
        if (soapHeader != null) {
            sb.append(separator + ""Headers : "");
            for (Iterator iter = soapHeader.examineAllHeaderBlocks(); iter.hasNext();) {
                Object o = iter.next();
                if (o instanceof SOAPHeaderBlock) {
                    SOAPHeaderBlock headerBlock = (SOAPHeaderBlock) o;
                    sb.append(separator + headerBlock.getLocalName() + "" : "" + headerBlock.getText());
                } else if (o instanceof OMElement) {
                    OMElement headerElem = (OMElement) o;
                    sb.append(separator + headerElem.getLocalName() + "" : "" + headerElem.getText());
                }
            }
        }

        return sb.toString();
    }


}
"
synapse,1.1,org.apache.synapse.startup.quartz.SimpleQuartz,15,2,0,16,50,59,2,15,14,0.875,231,0.875,0,0.133333333,0.238095238,0,0,13.86666667,3,1.0667,0,"

package org.apache.synapse.startup.quartz;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.startup.AbstractStartup;
import org.quartz.CronTrigger;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerUtils;
import org.quartz.impl.DirectSchedulerFactory;


public class SimpleQuartz extends AbstractStartup {

    private static final Log log = LogFactory.getLog(SimpleQuartz.class);
    private static final int THREADPOOLSIZE = 5;

    static {
      try {
        DirectSchedulerFactory.getInstance().createVolatileScheduler(THREADPOOLSIZE);
      } catch (SchedulerException e) {
        throw new SynapseException(""Error initializing scheduler factory"", e);
      }
    }
    
    private String cron;
    private int repeatCount = -1;
    private long repeatInterval; 
    private String className;
    private List pinnedServers;
    private Scheduler sch;
    Set xmlProperties = new HashSet();

    public QName getTagQName() {
        return SimpleQuartzFactory.TASK;
    }

    public void destroy() {
        if (sch != null) {
            try {
                sch.shutdown();
            } catch (SchedulerException e) {
                log.warn(""Error shutting down scheduler"", e);
                throw new SynapseException(""Error shutting down scheduler"", e);
            }
        }
    }

    public void init(SynapseEnvironment synapseEnvironment) {

        
        
        
        String thisServerName = System.getProperty(SynapseConstants.SYNAPSE_SERVER_NAME);
        if(thisServerName == null || thisServerName.equals("""")) {
          try {
            InetAddress addr = InetAddress.getLocalHost();
            thisServerName = addr.getHostName();
  
          } catch (UnknownHostException e) {
            log.warn(""Could not get local host name"", e);
          }
          
          if(thisServerName == null || thisServerName.equals("""")) {
            thisServerName = ""localhost"";
          }
        }
        log.debug(""Synapse server name : "" + thisServerName);
        
        
        
        
        List pinnedServers = getPinnedServers();
        if(pinnedServers != null && !pinnedServers.isEmpty()) {
          if(!pinnedServers.contains(thisServerName)) {
            log.info(""Server name not in pinned servers list. Not starting Task : "" + getName());
            return;
          }
        }
      
      
        try {
            sch = DirectSchedulerFactory.getInstance().getScheduler();
            if (sch == null) {
              DirectSchedulerFactory.getInstance().createVolatileScheduler(THREADPOOLSIZE);
              sch = DirectSchedulerFactory.getInstance().getScheduler();
            }
            
            if(sch == null) {
              throw new NullPointerException(""Scheduler is null"");
            }

            Trigger trigger = null;
            if (cron == null) {
                if (repeatCount >= 0) {
                    trigger = TriggerUtils.makeImmediateTrigger(repeatCount - 1, repeatInterval);
                } else {
                    trigger = TriggerUtils.makeImmediateTrigger(-1, repeatInterval);
                }

            } else {
                CronTrigger cronTrig = new CronTrigger();
                cronTrig.setCronExpression(cron);
                trigger = cronTrig;
            }

            
            trigger.setName(""Trigger"" + String.valueOf((new Random()).nextLong()));
            trigger.setGroup(""synapse.simple.quartz"");
            trigger.setVolatility(true);
            JobDetail jobDetail = new JobDetail();

            
            jobDetail.setName(name);
            jobDetail.setGroup(""synapse.simple.quartz"");
            jobDetail.setJobClass(SimpleQuartzJob.class);
            JobDataMap jdm = new JobDataMap();
            jdm.put(SimpleQuartzJob.SYNAPSE_ENVIRONMENT, synapseEnvironment);
            jdm.put(SimpleQuartzJob.CLASSNAME, className);
            jdm.put(SimpleQuartzJob.PROPERTIES, xmlProperties);
            jobDetail.setJobDataMap(jdm);

            sch.scheduleJob(jobDetail, trigger);
            sch.start();
            log.info(""Scheduled job "" + jobDetail.getFullName() + "" for class "" + className);

        } catch (Exception e) {
            log.fatal(""Error starting up Scheduler"", e);
            throw new SynapseException(""Error starting up Scheduler"", e);
        }

    }

    public String getJobClass() {
        return className;
    }

    public void setJobClass(String attributeValue) {
        className = attributeValue;

    }

    public void setInterval(long l) {
        repeatInterval = l;

    }

    public long getInterval() {
        return repeatInterval;
    }

    public void setCount(int i) {
        repeatCount = i;
    }

    public int getCount() {
        return repeatCount;
    }

    public void addProperty(OMElement prop) {
        xmlProperties.add(prop);
    }

    public Set getProperties() {
        return xmlProperties;
    }

    public void setCron(String attributeValue) {
        cron = attributeValue;

    }

    public String getCron() {
        return cron;
    }

    public List getPinnedServers() {
      return pinnedServers;
    }

    public void setPinnedServers(List pinnedServers) {
      this.pinnedServers = pinnedServers;
    }

}
"
synapse,1.1,org.apache.synapse.core.axis2.Axis2SynapseEnvironment,12,1,0,29,64,38,1,28,11,0.818181818,394,1.0,2,0.0,0.238636364,0,0,31.33333333,11,2.0833,3,"

package org.apache.synapse.core.axis2;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.OperationContext;
import org.apache.axis2.context.ServiceContext;
import org.apache.axis2.description.InOutAxisOperation;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.mediators.MediatorWorker;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.statistics.StatisticsCollector;
import org.apache.synapse.statistics.StatisticsUtils;
import org.apache.synapse.util.UUIDGenerator;
import org.apache.synapse.util.concurrent.SynapseThreadPool;

import java.util.concurrent.ExecutorService;


public class Axis2SynapseEnvironment implements SynapseEnvironment {

    private static final Log log = LogFactory.getLog(Axis2SynapseEnvironment.class);

    private SynapseConfiguration synapseConfig;
    private ConfigurationContext configContext;
    private ExecutorService executorService;
    private boolean initialized = false;

    
    private StatisticsCollector statisticsCollector;

    public Axis2SynapseEnvironment(SynapseConfiguration synCfg) {
        
        int coreThreads = SynapseThreadPool.SYNAPSE_CORE_THREADS;
        int maxThreads  = SynapseThreadPool.SYNAPSE_MAX_THREADS;
        long keepAlive  = SynapseThreadPool.SYNAPSE_KEEP_ALIVE;
        int qlength     = SynapseThreadPool.SYNAPSE_THREAD_QLEN;
        
        try {
            qlength = Integer.parseInt(synCfg.getProperty(SynapseThreadPool.SYN_THREAD_QLEN));
        } catch (Exception ignore) {}

        try {
            coreThreads = Integer.parseInt(synCfg.getProperty(SynapseThreadPool.SYN_THREAD_CORE));
        } catch (Exception ignore) {}

        try {
            maxThreads = Integer.parseInt(synCfg.getProperty(SynapseThreadPool.SYN_THREAD_MAX));
        } catch (Exception ignore) {}

        try {
            keepAlive = Long.parseLong(synCfg.getProperty(SynapseThreadPool.SYN_THREAD_ALIVE));
        } catch (Exception ignore) {}
        
        this.executorService = new SynapseThreadPool(coreThreads, maxThreads, keepAlive, qlength,
            synCfg.getProperty(SynapseThreadPool.SYN_THREAD_GROUP,
                SynapseThreadPool.SYNAPSE_THREAD_GROUP),
            synCfg.getProperty(SynapseThreadPool.SYN_THREAD_IDPREFIX,
                SynapseThreadPool.SYNAPSE_THREAD_ID_PREFIX));
    }

    public Axis2SynapseEnvironment(ConfigurationContext cfgCtx,
        SynapseConfiguration synapseConfig) {
        this(synapseConfig);
        this.configContext = cfgCtx;
        this.synapseConfig = synapseConfig;
    }

    public boolean injectMessage(final MessageContext synCtx) {
        if (log.isDebugEnabled()) {
            log.debug(""Injecting MessageContext"");
        }
        synCtx.setEnvironment(this);
        if (synCtx.isResponse()) {
            
            StatisticsUtils.processEndPointStatistics(synCtx);
            StatisticsUtils.processProxyServiceStatistics(synCtx);
            StatisticsUtils.processSequenceStatistics(synCtx);
        }

        
        if (synCtx.getProperty(SynapseConstants.PROXY_SERVICE) != null) {

            if (synCtx.getConfiguration().getProxyService((String) synCtx.getProperty(
                    SynapseConstants.PROXY_SERVICE)).getTargetOutSequence() != null) {

                String sequenceName = synCtx.getConfiguration().getProxyService((String) synCtx.
                        getProperty(SynapseConstants.PROXY_SERVICE)).getTargetOutSequence();
                Mediator outSequence = synCtx.getSequence(sequenceName);

                if (outSequence != null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Using the sequence named "" + sequenceName
                                + "" for the outgoing message mediation of the proxy service ""
                                + synCtx.getProperty(SynapseConstants.PROXY_SERVICE));
                    }
                    outSequence.mediate(synCtx);
                } else {
                    log.error(""Unable to find the out-sequence "" +
                            ""specified by the name "" + sequenceName);
                    throw new SynapseException(""Unable to find the "" +
                            ""out-sequence specified by the name "" + sequenceName);
                }

            } else if (synCtx.getConfiguration().getProxyService((String) synCtx.getProperty(
                    SynapseConstants.PROXY_SERVICE)).getTargetInLineOutSequence() != null) {
                if (log.isDebugEnabled()) {
                    log.debug(""Using the anonymous out-sequence specified in the proxy service ""
                            + synCtx.getProperty(SynapseConstants.PROXY_SERVICE)
                            + "" for outgoing message mediation"");
                }
                synCtx.getConfiguration().getProxyService((String) synCtx.getProperty(
                        SynapseConstants.PROXY_SERVICE)).getTargetInLineOutSequence().mediate(synCtx);
            } else {
                if (log.isDebugEnabled()) {
                    log.debug(""Proxy service "" + synCtx.getProperty(SynapseConstants.PROXY_SERVICE)
                            + "" does not specifies an out-sequence - sending the response back"");
                }
                Axis2Sender.sendBack(synCtx);
            }

        } else {
            if (log.isDebugEnabled()) {
                log.debug(""Using Main Sequence for injected message"");
            }
            return synCtx.getMainSequence().mediate(synCtx);
        }
        return true;
    }

    public void injectAsync(final MessageContext synCtx, SequenceMediator seq) {
        if (log.isDebugEnabled()) {
            log.debug(""Injecting MessageContext for asynchronous mediation using the : ""
                + (seq.getName() == null? ""Anonymous"" : seq.getName()) + "" Sequence"");
        }
        synCtx.setEnvironment(this);
        
        if (synCtx.isResponse()) {
            
            StatisticsUtils.processEndPointStatistics(synCtx);
            StatisticsUtils.processProxyServiceStatistics(synCtx);
            StatisticsUtils.processSequenceStatistics(synCtx);
        }

        executorService.execute(new MediatorWorker(seq, synCtx));

    }

    
    public void send(EndpointDefinition endpoint, MessageContext synCtx) {
        if (synCtx.isResponse()) {

            if (endpoint != null) {
                
                StatisticsUtils.processEndPointStatistics(synCtx);
                StatisticsUtils.processProxyServiceStatistics(synCtx);
                StatisticsUtils.processAllSequenceStatistics(synCtx);

                Axis2Sender.sendOn(endpoint, synCtx);

            } else {
                Axis2Sender.sendBack(synCtx);
            }
        } else {
            Axis2Sender.sendOn(endpoint, synCtx);
        }
    }

    
    public MessageContext createMessageContext() {

        if (log.isDebugEnabled()) {
            log.debug(""Creating Message Context"");
        }

        org.apache.axis2.context.MessageContext axis2MC
                = new org.apache.axis2.context.MessageContext();
        axis2MC.setConfigurationContext(this.configContext);

        ServiceContext svcCtx = new ServiceContext();
        OperationContext opCtx = new OperationContext(new InOutAxisOperation(), svcCtx);
        axis2MC.setServiceContext(svcCtx);
        axis2MC.setOperationContext(opCtx);
        MessageContext mc = new Axis2MessageContext(axis2MC, synapseConfig, this);
        mc.setMessageID(UUIDGenerator.getUUID());
        try {
			mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
			mc.getEnvelope().addChild(OMAbstractFactory.getSOAP12Factory().createSOAPBody());
		} catch (Exception e) {
			e.printStackTrace();
		}

        return mc;
    }

    
    public StatisticsCollector getStatisticsCollector() {
        return statisticsCollector;
    }

    
    public void setStatisticsCollector(StatisticsCollector collector) {
        this.statisticsCollector = collector;
    }

    
    public ExecutorService getExecutorService() {
        return executorService;
    }

    
    public boolean isInitialized() {
        return initialized;
    }

    
    public void setInitialized(boolean state) {
        this.initialized = state;
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.OMElementUtils,4,1,0,22,21,4,13,9,3,0.666666667,112,1.0,0,0.0,0.4,0,0,26.75,5,2.25,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.OMContainer;
import org.apache.axiom.om.OMDocument;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.jaxen.JaxenException;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;


public class OMElementUtils {

    private static final Log log = LogFactory.getLog(OMElementUtils.class);

    
    public static String getNameSpaceWithPrefix(String prefix, OMElement elem) {
        if (prefix == null || elem == null) {
            log.warn(""Searching for null NS prefix and/or using null OMElement"");
            return null;
        }
        
        OMElement currentElem = elem;
        while (true) {
            Iterator iter = currentElem.getAllDeclaredNamespaces();
            while (iter.hasNext()) {
                OMNamespace ns = (OMNamespace) iter.next();
                if (prefix.equals(ns.getPrefix())) {
                    return ns.getNamespaceURI();     
                }
            }
            OMContainer parent = currentElem.getParent();
            if (parent != null && parent instanceof OMElement) {
                currentElem = (OMElement)parent;
            } else {
                return null;
            }
        }
    }

    
    public static void addNameSpaces(AXIOMXPath xpath, OMElement elem, Log log) {

        OMElement currentElem = elem;

        while (currentElem != null) {              
            Iterator it = currentElem.getAllDeclaredNamespaces();
            while (it.hasNext()) {

                OMNamespace n = (OMNamespace) it.next();
                if (n != null) {

                    try {
                        xpath.addNamespace(n.getPrefix(), n.getNamespaceURI());
                    } catch (JaxenException je) {
                        String msg = ""Error adding declared name space with prefix : ""
                            + n.getPrefix() + ""and uri : "" + n.getNamespaceURI()
                            + "" to the XPath : "" + xpath;
                        log.error(msg);
                        throw new SynapseException(msg, je);
                    }
                }
            }

            OMContainer parent = currentElem.getParent();
            
            if (parent == null || parent instanceof OMDocument) {
                return;
            }
            if (parent instanceof OMElement) {
                currentElem = (OMElement) parent;
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.IterateMediatorFactory,4,2,0,12,29,2,0,12,3,0.666666667,169,1.0,0,0.6,0.666666667,0,0,40.0,8,2.25,0,"

package org.apache.synapse.config.xml;

import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.eip.splitter.IterateMediator;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;


public class IterateMediatorFactory extends AbstractMediatorFactory {

    private static final Log log = LogFactory.getLog(IterateMediatorFactory.class);

    
    private static final QName ITERATE_Q = new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""iterate"");
    private static final QName ATT_CONTPAR = new QName(""continueParent"");
    private static final QName ATT_PREPLD = new QName(""preservePayload"");
    private static final QName ATT_ATTACHPATH = new QName(""attachPath"");

    
    public Mediator createMediator(OMElement elem) {

        IterateMediator mediator = new IterateMediator();
        processTraceState(mediator, elem);

        OMAttribute continueParent = elem.getAttribute(ATT_CONTPAR);
        if (continueParent != null) {
            mediator.setContinueParent(
                Boolean.valueOf(continueParent.getAttributeValue()).booleanValue());
        }

        OMAttribute preservePayload = elem.getAttribute(ATT_PREPLD);
        if (preservePayload != null) {
            mediator.setPreservePayload(
                Boolean.valueOf(preservePayload.getAttributeValue()).booleanValue());
        }

        OMAttribute expression = elem.getAttribute(ATT_EXPRN);
        if (expression != null) {
            try {
                AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
                OMElementUtils.addNameSpaces(xp, elem, log);
                mediator.setExpression(xp);
            } catch (JaxenException e) {
                handleException(""Unable to build the IterateMediator. "" + ""Invalid XPATH "" +
                    expression.getAttributeValue(), e);
            }
        } else {
            handleException(""XPATH expression is required "" +
                ""for an IterateMediator under the ""expression"" attribute"");
        }

        OMAttribute attachPath = elem.getAttribute(ATT_ATTACHPATH);
        String attachPathValue = ""."";
        if (attachPath != null && !mediator.isPreservePayload()) {
            handleException(""Wrong configuration for the iterate mediator :: if the iterator "" +
                ""should not preserve payload, then attachPath can not be present"");
        } else if (attachPath != null) {
            attachPathValue = attachPath.getAttributeValue();
        }
        
        try {
            AXIOMXPath xp = new AXIOMXPath(attachPathValue);
            OMElementUtils.addNameSpaces(xp, elem, log);
            mediator.setAttachPath(xp);
        } catch (JaxenException e) {
            handleException(""Unable to build the IterateMediator. Invalid XPATH "" +
                attachPathValue, e);
        }

        OMElement targetElement = elem.getFirstChildWithName(TARGET_Q);
        if (targetElement != null) {
            mediator.setTarget(TargetFactory.createTarget(targetElement));
        } else {
            handleException(""Target for an iterate mediator is required :: missing target"");
        }

        return mediator;
    }

    
    public QName getTagQName() {
        return ITERATE_Q;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.FilterMediator,1,1,0,5,1,0,3,2,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,0,"

package org.apache.synapse.mediators;

import org.apache.synapse.MessageContext;


public interface FilterMediator extends ListMediator {

    
    public boolean test(MessageContext synCtx);
}
"
synapse,1.1,org.apache.synapse.statistics.impl.EndPointStatisticsStack,5,1,0,6,26,0,4,3,5,0.25,288,1.0,0,0.0,0.6,0,0,56.2,9,4.2,0,"
package org.apache.synapse.statistics.impl;

import org.apache.synapse.statistics.StatisticsStack;
import org.apache.synapse.statistics.StatisticsCollector;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.List;



public class EndPointStatisticsStack implements StatisticsStack {

    
    private List endpointStatistics;
    
    private boolean isCompleteInFlowStatisicsReport = false;

    
    public void put(String key, long initTime, boolean isInFlow, boolean isStatisticsEnable,
                    boolean isFault) {
        if (endpointStatistics == null) {
            endpointStatistics = new ArrayList();
        }
        endpointStatistics.add(
                new EndPointStatistics(key, initTime, isInFlow, isStatisticsEnable, isFault));
    }

    

    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault) {
        if (endpointStatistics != null && !endpointStatistics.isEmpty()) {
            EndPointStatistics statistics =
                    (EndPointStatistics) endpointStatistics.get(
                            endpointStatistics.size() - 1);
            if (statistics != null && statistics.isStatisticsEnable &&
                    statistics.endPointName != null) {
                if (statistics.inTimeForInFlow != -1) {
                    long initTimeForOutFlow = System.currentTimeMillis();
                    statisticsCollector.reportForEndPoint(statistics.endPointName,
                            false, statistics.inTimeForInFlow,
                            initTimeForOutFlow, isFault);
                    statistics.inTimeForInFlow = -1;
                    statistics.inTimeForOutFlow = initTimeForOutFlow;
                } else if (statistics.inTimeForOutFlow != -1 &&
                        isCompleteInFlowStatisicsReport) {
                    statisticsCollector.reportForEndPoint(statistics.endPointName,
                            true, statistics.inTimeForOutFlow,
                            System.currentTimeMillis(), isFault);
                    endpointStatistics.remove(statistics);
                }
            }
        }
    }

    
    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault, String name) {
        if (endpointStatistics != null && !endpointStatistics.isEmpty()) {
            List tobeRemoved = new ArrayList();
            for (Iterator epIterator = endpointStatistics.iterator();
                 epIterator.hasNext();) {
                Object statisticsObj = epIterator.next();
                if (statisticsObj instanceof EndPointStatistics) {
                    EndPointStatistics statistics = (EndPointStatistics) statisticsObj;
                    if (statistics.isStatisticsEnable && statistics.endPointName != null &&
                            statistics.endPointName.equals(name)) {
                        if (statistics.inTimeForInFlow != -1) {
                            long initTimeForOutFlow = System.currentTimeMillis();
                            statisticsCollector.reportForEndPoint(statistics.endPointName,
                                    false, statistics.inTimeForInFlow,
                                    initTimeForOutFlow, isFault);
                            statistics.inTimeForInFlow = -1;
                            statistics.inTimeForOutFlow = initTimeForOutFlow;
                        } else if (statistics.inTimeForOutFlow != -1 &&
                                isCompleteInFlowStatisicsReport) {
                            statisticsCollector.reportForEndPoint(statistics.endPointName,
                                    true, statistics.inTimeForOutFlow,
                                    System.currentTimeMillis(), isFault);
                            tobeRemoved.add(statistics);
                        }
                    }
                }
            }
            endpointStatistics.removeAll(tobeRemoved);
        }
    }

    
    public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector,
                                               boolean isFault) {
        if (endpointStatistics != null && !endpointStatistics.isEmpty()) {
            List tobeRemoved = new ArrayList();
            for (Iterator epIterator = endpointStatistics.iterator();
                 epIterator.hasNext();) {
                Object statisticsObj = epIterator.next();
                if (statisticsObj instanceof EndPointStatistics) {
                    EndPointStatistics statistics = (EndPointStatistics) statisticsObj;
                    if (statistics.isStatisticsEnable && statistics.endPointName != null) {
                        if (statistics.inTimeForInFlow != -1) {
                            long initTimeForOutFlow = System.currentTimeMillis();
                            statisticsCollector.reportForEndPoint(statistics.endPointName,
                                    false, statistics.inTimeForInFlow,
                                    initTimeForOutFlow, isFault);
                            statistics.inTimeForInFlow = -1;
                            statistics.inTimeForOutFlow = initTimeForOutFlow;
                        } else if (statistics.inTimeForOutFlow != -1 &&
                                isCompleteInFlowStatisicsReport) {
                            statisticsCollector.reportForEndPoint(statistics.endPointName,
                                    true, statistics.inTimeForOutFlow,
                                    System.currentTimeMillis(), isFault);
                            tobeRemoved.add(statistics);
                        }
                    }
                }
            }
            endpointStatistics.removeAll(tobeRemoved);
        }
        isCompleteInFlowStatisicsReport = true;
    }

    class EndPointStatistics {

        
        private String endPointName;
         
        private boolean isStatisticsEnable;
        
        private boolean isFault;
        
        private long inTimeForInFlow = -1;
        
        private long inTimeForOutFlow = -1;

        public EndPointStatistics(String endPointName, long initTime, boolean inFlow,
                                  boolean statisticsEnable, boolean fault) {
            if (inFlow) {
                this.endPointName = endPointName;
                this.inTimeForInFlow = initTime;
                isStatisticsEnable = statisticsEnable;
                isFault = fault;
            }
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            EndPointStatistics that = (EndPointStatistics) o;

            if (endPointName != null ? !endPointName.equals(that.endPointName) : that.endPointName != null)
                return false;

            return true;
        }

        public int hashCode() {
            return (endPointName != null ? endPointName.hashCode() : 0);
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.ProxyServiceSerializer,4,1,0,17,57,2,1,16,2,0.583333333,503,1.0,0,0.0,0.333333333,0,0,123.75,30,7.75,2,"

package org.apache.synapse.config.xml;

import java.net.URI;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
import org.apache.synapse.config.xml.endpoints.EndpointSerializer;
import org.apache.synapse.core.axis2.ProxyService;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.base.SequenceMediator;


public class ProxyServiceSerializer {

    private static final Log log = LogFactory.getLog(PropertyMediatorSerializer.class);

    protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
    protected static final OMNamespace synNS = fac.createOMNamespace(XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");
    protected static final OMNamespace nullNS = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, """");

    public static OMElement serializeProxy(OMElement parent, ProxyService service) {

        OMElement proxy = fac.createOMElement(""proxy"", synNS);
        if (service.getName() != null) {
            proxy.addAttribute(fac.createOMAttribute(
                    ""name"", nullNS, service.getName()));
        } else {
            handleException(""Invalid proxy service. Service name is required"");
        }
        String descriptionStr = service.getDescription();
        if (descriptionStr != null) {
            OMElement description = fac.createOMElement(""description"", synNS);
            description.addChild(fac.createOMText(descriptionStr));
            proxy.addChild(description);
        }
        ArrayList transports = service.getTransports();
        if (transports != null && !transports.isEmpty()) {
            String transportStr = """" + transports.get(0);
            for (int i = 1; i < transports.size(); i++) {
                transportStr = transportStr + "" "" + transports.get(i);
            }
            proxy.addAttribute(fac.createOMAttribute(""transports"", nullNS, transportStr));
        }

        List pinnedServers = service.getPinnedServers();
        if (pinnedServers != null && !pinnedServers.isEmpty()) {
          String pinnedServersStr = """" + pinnedServers.get(0);
          for (int i = 1; i < pinnedServers.size(); i++) {
            pinnedServersStr = pinnedServersStr + "" "" + pinnedServers.get(i);
          }
          proxy.addAttribute(fac.createOMAttribute(""pinnedServers"", nullNS, pinnedServersStr));
        }
        
        if (service.isStartOnLoad()) {
            proxy.addAttribute(fac.createOMAttribute(
                    ""startOnLoad"", nullNS, ""true""));
        } else {
            proxy.addAttribute(fac.createOMAttribute(
                    ""startOnLoad"", nullNS, ""false""));
        }
        String endpoint = service.getTargetEndpoint();

        OMElement target = fac.createOMElement(""target"", synNS);
        Endpoint inLineEndpoint = service.getTargetInLineEndpoint();
        if (endpoint != null) {
            target.addAttribute(fac.createOMAttribute(
                    ""endpoint"", nullNS, endpoint));
            proxy.addChild(target);
        } else if (inLineEndpoint != null) {
            EndpointSerializer serializer
                    = EndpointAbstractSerializer.getEndpointSerializer(inLineEndpoint);
            OMElement epElement = serializer.serializeEndpoint(inLineEndpoint);
            target.addChild(epElement);            
            proxy.addChild(target);
        }
            String inSeq = service.getTargetInSequence();
            String outSeq = service.getTargetOutSequence();
            String faultSeq = service.getTargetFaultSequence();
            SequenceMediatorSerializer serializer = new SequenceMediatorSerializer();
            if (inSeq != null) {
                target.addAttribute(fac.createOMAttribute(""inSequence"", nullNS, inSeq));
                proxy.addChild(target);
            } else {
                SequenceMediator inLineInSeq = service.getTargetInLineInSequence();
                if (inLineInSeq != null) {
                    OMElement inSeqElement = serializer.serializeAnonymousSequence(null, inLineInSeq);
                    inSeqElement.setLocalName(""inSequence"");
                    target.addChild(inSeqElement);
                    proxy.addChild(target);
                }
            }
            if (outSeq != null) {
                target.addAttribute(fac.createOMAttribute(""outSequence"", nullNS, outSeq));
                proxy.addChild(target);
            } else {
                SequenceMediator inLineOutSeq = service.getTargetInLineOutSequence();
                if (inLineOutSeq != null) {
                    OMElement outSeqElement = serializer.serializeAnonymousSequence(null, inLineOutSeq);
                    outSeqElement.setLocalName(""outSequence"");
                    target.addChild(outSeqElement);
                    proxy.addChild(target);
                }
            }
            if (faultSeq != null) {
                target.addAttribute(fac.createOMAttribute(""faultSequence"", nullNS, faultSeq));
                proxy.addChild(target);
            } else {
                SequenceMediator inLineFaultSeq = service.getTargetInLineFaultSequence();
                if (inLineFaultSeq != null) {
                    OMElement faultSeqElement = serializer.serializeAnonymousSequence(null, inLineFaultSeq);
                    faultSeqElement.setLocalName(""faultSequence"");
                    target.addChild(faultSeqElement);
                    proxy.addChild(target);
                }
            }

        

        String wsdlKey = service.getWSDLKey();
        URI wsdlUri = service.getWsdlURI();
        Object inLineWSDL = service.getInLineWSDL();
        if (wsdlKey != null || wsdlUri != null || inLineWSDL != null) {
            OMElement wsdl = fac.createOMElement(""publishWSDL"", synNS);
            if (wsdlKey != null) {
                wsdl.addAttribute(fac.createOMAttribute(
                        ""key"", nullNS, wsdlKey));
            } else if (inLineWSDL != null) {
                wsdl.addChild((OMNode) inLineWSDL);
            } else if (wsdlUri != null) {
                wsdl.addAttribute(fac.createOMAttribute(
                        ""uri"", nullNS, wsdlUri.toString()));
            }
            ResourceMapSerializer.serializeResourceMap(wsdl, service.getResourceMap());
            proxy.addChild(wsdl);
        }

        
        
        

        Iterator iter = service.getServiceLevelPolicies().iterator();
        while (iter.hasNext()) {
            String policyKey = (String) iter.next();
            OMElement policy = fac.createOMElement(""policy"", synNS);
            policy.addAttribute(fac.createOMAttribute(
                    ""key"", nullNS, policyKey));
            proxy.addChild(policy);
        }

        iter = service.getParameterMap().keySet().iterator();
        while (iter.hasNext()) {
            String propertyName = (String) iter.next();
            OMElement property = fac.createOMElement(""parameter"", synNS);
            property.addAttribute(fac.createOMAttribute(
                    ""name"", nullNS, propertyName));
            Object value = service.getParameterMap().get(propertyName);
            if (value != null) {
                if (value instanceof String) {
                    property.setText(((String) value).trim());
                    proxy.addChild(property);
                } else if (value instanceof OMNode) {
                    property.addChild((OMNode) value);
                    proxy.addChild(property);
                }
            }
        }

        if (service.isWsRMEnabled()) {
            proxy.addChild(fac.createOMElement(""enableRM"", synNS));
        }
        if (service.isWsSecEnabled()) {
            proxy.addChild(fac.createOMElement(""enableSec"", synNS));
        }

        int isEnableStatistics = service.getStatisticsState();
        String statisticsValue = null;
        if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_ON) {
            statisticsValue = XMLConfigConstants.STATISTICS_ENABLE;
        } else if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_OFF) {
            statisticsValue = XMLConfigConstants.STATISTICS_DISABLE;
        }
        if (statisticsValue != null) {
            proxy.addAttribute(fac.createOMAttribute(
                    XMLConfigConstants.STATISTICS_ATTRIB_NAME, nullNS, statisticsValue));
        }

        int traceState = service.getTraceState();
        String traceValue = null;
        if (traceState == org.apache.synapse.SynapseConstants.TRACING_ON) {
            traceValue = XMLConfigConstants.TRACE_ENABLE;
        } else if (traceState == org.apache.synapse.SynapseConstants.TRACING_OFF) {
            traceValue = XMLConfigConstants.TRACE_DISABLE;
        }
        if (traceValue != null) {
            proxy.addAttribute(fac.createOMAttribute(
                    XMLConfigConstants.TRACE_ATTRIB_NAME, nullNS, traceValue));
        }
        if (parent != null) {
            parent.addChild(proxy);
        }
        return proxy;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.FaultHandler,7,1,3,19,32,9,16,4,5,0.5,211,1.0,0,0.0,0.333333333,0,0,28.85714286,9,2.8571,0,"

package org.apache.synapse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.Stack;
import java.io.StringWriter;
import java.io.Writer;
import java.io.PrintWriter;


public abstract class FaultHandler {

    private static final Log log = LogFactory.getLog(FaultHandler.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    public void handleFault(MessageContext synCtx) {

        boolean traceOn = synCtx.getTracingState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        if (traceOrDebugOn) {
            traceOrDebugWarn(traceOn, ""FaultHandler executing impl: "" + this.getClass().getName());
        }

        try {
            synCtx.getServiceLog().info(""FaultHandler executing impl: "" + this.getClass().getName());
            onFault(synCtx);

        } catch (SynapseException e) {

            Stack faultStack = synCtx.getFaultStack();
            if (faultStack != null && !faultStack.isEmpty()) {
                ((FaultHandler) faultStack.pop()).handleFault(synCtx);
            }
        }
    }

    
    public void handleFault(MessageContext synCtx, Exception e) {

        boolean traceOn = synCtx.getTracingState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        synCtx.setProperty(SynapseConstants.ERROR_CODE, ""00000"");
        
        synCtx.setProperty(SynapseConstants.ERROR_MESSAGE, e.getMessage().split(""
"")[0]);

        synCtx.setProperty(SynapseConstants.ERROR_DETAIL, getStackTrace(e));
        synCtx.setProperty(SynapseConstants.ERROR_EXCEPTION, e);

        if (traceOrDebugOn) {
            traceOrDebugWarn(traceOn, ""Fault handler - setting ERROR_MESSAGE : "" +
                synCtx.getProperty(SynapseConstants.ERROR_MESSAGE));
            traceOrDebugWarn(traceOn, ""Fault handler - setting ERROR_DETAIL : "" +
                synCtx.getProperty(SynapseConstants.ERROR_DETAIL));
            traceOrDebugWarn(traceOn, ""Fault handler - setting ERROR_EXCEPTION : "" +
                synCtx.getProperty(SynapseConstants.ERROR_EXCEPTION));
        }

        synCtx.getServiceLog().warn(""Fault handler - setting ERROR_MESSAGE : "" +
            synCtx.getProperty(SynapseConstants.ERROR_MESSAGE));

        try {
            onFault(synCtx);

        } catch (SynapseException se) {

            Stack faultStack = synCtx.getFaultStack();
            if (faultStack != null && !faultStack.isEmpty()) {
                ((FaultHandler) faultStack.pop()).handleFault(synCtx, se);
            }
        }
    }

    
    public abstract void onFault(MessageContext synCtx);

    
    public static String getStackTrace(Throwable aThrowable) {
        final Writer result = new StringWriter();
        final PrintWriter printWriter = new PrintWriter(result);
        aThrowable.printStackTrace(printWriter);
        return result.toString();
    }

    private void traceOrDebugWarn(boolean traceOn, String msg) {
        if (traceOn) {
            trace.warn(msg);
        }
        log.warn(msg);
    }

}
"
synapse,1.1,org.apache.synapse.mediators.builtin.SendMediator,4,2,0,14,30,0,2,12,4,0.0,187,1.0,1,0.8125,0.5,0,0,45.5,17,4.75,0,"

package org.apache.synapse.mediators.builtin;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.axis2.context.OperationContext;

import java.util.List;


public class SendMediator extends AbstractMediator {

    private Endpoint endpoint = null;

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Send mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        
        if (endpoint == null) {

            if (traceOrDebugOn) {
                StringBuffer sb = new StringBuffer();
                sb.append(""Sending "" + (synCtx.isResponse() ? ""response"" : ""request"")
                    + "" message using implicit message properties.."");
                sb.append(""
Sending To: "" + (synCtx.getTo() != null ?
                        synCtx.getTo().getAddress() : ""null""));
                sb.append(""
SOAPAction: "" + (synCtx.getWSAAction() != null ?
                        synCtx.getWSAAction() : ""null""));
                traceOrDebug(traceOn, sb.toString());
            }

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Envelope : "" + synCtx.getEnvelope());
            }

            if (synCtx.isResponse()) {
                Axis2MessageContext axis2MsgCtx = (Axis2MessageContext) synCtx;
                OperationContext opCtx = axis2MsgCtx.getAxis2MessageContext().getOperationContext();
                Object o = opCtx.getProperty(""endpointList"");
                if (o != null && o instanceof List) {
                    
                    
                    List endpointList = (List) o;
                    Object e = endpointList.remove(0);
                    if (e != null && e instanceof SALoadbalanceEndpoint) {
                        SALoadbalanceEndpoint saLoadbalanceEndpoint = (SALoadbalanceEndpoint) e;
                        saLoadbalanceEndpoint.updateSession(synCtx, endpointList);
                    }
                }
            }
            synCtx.getEnvironment().send(null, synCtx);

        } else {
            endpoint.send(synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Send mediator"");
        }
        return true;
    }

    public Endpoint getEndpoint() {
        return endpoint;
    }

    public void setEndpoint(Endpoint endpoint) {
        this.endpoint = endpoint;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.MediatorFaultHandler,6,2,0,10,20,0,4,7,4,0.533333333,106,1.0,1,0.555555556,0.4,1,2,16.16666667,2,0.8333,0,"

package org.apache.synapse.mediators;

import org.apache.synapse.*;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class MediatorFaultHandler extends FaultHandler {

    private static final Log log = LogFactory.getLog(MediatorFaultHandler.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    
    private Mediator faultMediator = null;

    
    public MediatorFaultHandler(Mediator faultMediator) {

        this.faultMediator = faultMediator;
    }

    
    public void onFault(MessageContext synCtx) throws SynapseException {

        boolean traceOn = synCtx.getTracingState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        String name = null;
        if (faultMediator instanceof SequenceMediator) {
            name = ((SequenceMediator) faultMediator).getName();
        }
        if (name == null) {
            name = faultMediator.getClass().getName();
        }

        if (traceOrDebugOn) {
            traceOrDebugWarn(traceOn, ""Executing fault handler mediator : "" + name);
        }

        synCtx.getServiceLog().warn(""Executing fault sequence mediator : "" + name);
        this.faultMediator.mediate(synCtx);
    }

    
    public Mediator getFaultMediator() {
        return faultMediator;
    }

    
    public void setFaultMediator(Mediator faultMediator) {
        this.faultMediator = faultMediator;
    }

    private void traceOrDebugWarn(boolean traceOn, String msg) {
        if (traceOn) {
            trace.warn(msg);
        }
        log.warn(msg);
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.FaultMediatorFactory,4,2,0,10,36,2,0,10,3,0.814814815,386,1.0,0,0.6,0.666666667,0,0,93.25,17,4.5,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.transform.FaultMediator;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.net.URI;
import java.net.URISyntaxException;


public class FaultMediatorFactory extends AbstractMediatorFactory  {

    private static final QName FAULT_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""makefault"");

    private static final QName ATT_VERSION_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""version"");
    private static final QName CODE_Q        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""code"");
    private static final QName REASON_Q      = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""reason"");
    private static final QName NODE_Q        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""node"");
    private static final QName ROLE_Q        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""role"");
    private static final QName DETAIL_Q      = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""detail"");

    private static final String SOAP11 = ""soap11"";
    private static final String SOAP12 = ""soap12"";

    public Mediator createMediator(OMElement elem) {

        FaultMediator faultMediator = new FaultMediator();

        OMAttribute version = elem.getAttribute(ATT_VERSION_Q);
        if (version != null) {
            if (SOAP11.equals(version.getAttributeValue())) {
                faultMediator.setSoapVersion(FaultMediator.SOAP11);
            } else if (SOAP12.equals(version.getAttributeValue())) {
                faultMediator.setSoapVersion(FaultMediator.SOAP12);
            }else {
                String msg = ""Invalid SOAP version"";
                log.error(msg);
                throw new SynapseException(msg);
            }
        }

        OMElement code = elem.getFirstChildWithName(CODE_Q);
        if (code != null) {
            OMAttribute value = code.getAttribute(ATT_VALUE);
            OMAttribute expression = code.getAttribute(ATT_EXPRN);

            if (value != null) {
                String strValue = value.getAttributeValue();
                String prefix, name;
                if (strValue.indexOf("":"") != -1) {
                    prefix = strValue.substring(0, strValue.indexOf("":""));
                    name = strValue.substring(strValue.indexOf("":"")+1);
                } else {
                    String msg = ""A QName is expected for fault code as prefix:name"";
                    log.error(msg);
                    throw new SynapseException(msg);
                }
                String namespaceURI = OMElementUtils.getNameSpaceWithPrefix(prefix, code);
                if (namespaceURI == null) {
                    String msg = ""Invalid namespace prefix '"" + prefix + ""' in code attribute"";
                    log.error(msg);
                    throw new SynapseException(msg);
                }
                faultMediator.setFaultCodeValue(new QName(namespaceURI, name, prefix));
            } else if (expression != null) {
                try {
                    AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
                    OMElementUtils.addNameSpaces(xp, code, log);
                    faultMediator.setFaultCodeExpr(xp);
                } catch (JaxenException je) {
                    String msg = ""Invalid fault code expression : "" + je.getMessage();
                    log.error(msg);
                    throw new SynapseException(msg, je);
                }
            } else {
                String msg = ""A 'value' or 'expression' attribute must specify the fault code"";
                log.error(msg);
                throw new SynapseException(msg);
            }

        } else {
            String msg = ""The fault code is a required attribute for the makefault mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        }

        OMElement reason = elem.getFirstChildWithName(REASON_Q);
        if (reason != null) {
            OMAttribute value = reason.getAttribute(ATT_VALUE);
            OMAttribute expression = reason.getAttribute(ATT_EXPRN);

            if (value != null) {
                faultMediator.setFaultReasonValue(value.getAttributeValue());
            } else if (expression != null) {
                try {
                    AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
                    OMElementUtils.addNameSpaces(xp, reason, log);
                    faultMediator.setFaultReasonExpr(xp);

                } catch (JaxenException je) {
                    String msg = ""Invalid fault reason expression : "" + je.getMessage();
                    log.error(msg);
                    throw new SynapseException(msg, je);
                }
            } else {
                String msg = ""A 'value' or 'expression' attribute must specify the fault code"";
                log.error(msg);
                throw new SynapseException(msg);
            }

        } else {
            String msg = ""The fault reason is a required attribute for the makefault mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        }

        
        
        processTraceState(faultMediator,elem);

        OMElement node = elem.getFirstChildWithName(NODE_Q);
        if (node != null && node.getText() != null) {
            try {
                faultMediator.setFaultNode(new URI(node.getText()));
            } catch (URISyntaxException e) {
                String msg = ""Invalid URI specified for fault node : "" + node.getText();
                log.error(msg);
                throw new SynapseException(msg);
            }
        }

        OMElement role = elem.getFirstChildWithName(ROLE_Q);
        if (role != null && role.getText() != null) {
            try {
                faultMediator.setFaultRole(new URI(role.getText()));
            } catch (URISyntaxException e) {
                String msg = ""Invalid URI specified for fault role : "" + role.getText();
                log.error(msg);
                throw new SynapseException(msg);
            }
        }

        OMElement detail = elem.getFirstChildWithName(DETAIL_Q);
        if (detail != null && detail.getText() != null) {
            faultMediator.setFaultDetail(detail.getText());
        }

        return faultMediator;
    }

    public QName getTagQName() {
        return FAULT_Q;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.eip.EIPConstants,1,1,0,0,2,0,0,0,1,2.0,7,0.0,0,0.0,1.0,0,0,3.0,0,0.0,0,"

package org.apache.synapse.mediators.eip;


public final class EIPConstants {

    
    public static final String AGGREGATE_CORRELATION = ""aggregateCorelation"";

    
    public static final String MESSAGE_SEQUENCE = ""messageSequence"";

    
    public static final String MESSAGE_SEQUENCE_DELEMITER = ""/"";
}
"
synapse,1.1,org.apache.synapse.mediators.filters.OutMediator,3,3,0,7,16,3,2,5,3,2.0,70,0.0,0,0.916666667,0.833333333,1,2,22.33333333,8,3.0,0,"

package org.apache.synapse.mediators.filters;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.AbstractListMediator;


public class OutMediator extends AbstractListMediator implements org.apache.synapse.mediators.FilterMediator {

    
    public boolean mediate(MessageContext synCtx) {
        
        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Out mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        boolean result = true;
        if (test(synCtx)) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Current message is outgoing - executing child mediators"");
            }
            result = super.mediate(synCtx);

        } else {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Current message is a request - skipping child mediators"");
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Out mediator"");
        }

        return result;
    }

    
    public boolean test(MessageContext synCtx) {
        return synCtx.isResponse();
    }
}
"
synapse,1.1,org.apache.synapse.startup.tasks.MessageInjector,7,1,0,9,22,5,0,9,7,0.7,114,1.0,1,0.0,0.392857143,0,0,14.57142857,5,1.4286,0,"

package org.apache.synapse.startup.tasks;

import org.apache.axiom.om.OMElement;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.startup.Task;
import org.apache.synapse.util.PayloadHelper;


public class MessageInjector implements Task, ManagedLifecycle {

    
    private Log log = LogFactory.getLog(MessageInjector.class);

    
    private OMElement message = null;

    
    private String to = null;

    private String soapAction = null;

    
    private SynapseEnvironment synapseEnvironment;

    
    public void init(SynapseEnvironment se) {
		synapseEnvironment = se;
	}

    
    public void setMessage(OMElement elem) {
		log.debug(""set message "" + elem.toString());
		message = elem;
	}

    
    public void setTo(String url) {
		to = url;
	}

    public void setSoapAction(String soapAction) {
        this.soapAction = soapAction;
    }

    
    public void execute() {
		log.debug(""execute"");
		if (synapseEnvironment == null) {
			log.error(""Synapse Environment not set"");
			return;
		}
		if (message == null) {
			log.error(""message not set"");
			return;

		}
		if (to == null) {
			log.error(""to address not set"");
			return;

		}
        MessageContext mc = synapseEnvironment.createMessageContext();
        mc.setTo(new EndpointReference(to));
        PayloadHelper.setXMLPayload(mc, message.cloneOMElement());
        if (soapAction != null) {
            mc.setSoapAction(soapAction);
        }
        synapseEnvironment.injectMessage(mc);

	}

    
    public void destroy() {
	}

}
"
synapse,1.1,org.apache.synapse.config.xml.RMSequenceMediatorSerializer,3,2,0,9,22,3,0,9,3,2.0,125,0.0,0,0.75,0.555555556,0,0,40.66666667,11,4.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.RMSequenceMediator;


public class RMSequenceMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof RMSequenceMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        RMSequenceMediator mediator = (RMSequenceMediator) m;
        OMElement sequence = fac.createOMElement(""RMSequence"", synNS);
        saveTracingState(sequence, mediator);
        
        if(mediator.isSingle() && mediator.getCorrelation() != null) {
            handleException(""Invalid RMSequence mediator. A RMSequence can't have both a "" 
                    + ""single attribute value of true and a correlation attribute specified."");
        }
        if(mediator.isSingle() && mediator.getLastMessage() != null) {
            handleException(""Invalid RMSequence mediator. A RMSequence can't have both a "" 
                    + ""single attribute value of true and a last-message attribute specified."");
        }
        
        if (mediator.isSingle()) {
            sequence.addAttribute(fac.createOMAttribute(""single"", nullNS, String.valueOf(mediator.isSingle())));
        } else if (mediator.getCorrelation() != null) {
            sequence.addAttribute(fac.createOMAttribute(""correlation"", nullNS, 
                    mediator.getCorrelation().toString()));
            super.serializeNamespaces(sequence, mediator.getCorrelation());
        } else {
            handleException(""Invalid RMSequence mediator. Specify a single message sequence "" 
                    + ""or a correlation attribute."");
        }
        
        if (mediator.getLastMessage() != null) {
            sequence.addAttribute(fac.createOMAttribute(
                ""last-message"", nullNS, mediator.getLastMessage().toString()));
            super.serializeNamespaces(sequence, mediator.getLastMessage());
        }
        
        if (mediator.getVersion() != null) {
            sequence.addAttribute(fac.createOMAttribute(""version"", nullNS, mediator.getVersion()));
        }

        if (parent != null) {
            parent.addChild(sequence);
        }
        return sequence;
    }

    public String getMediatorClassName() {
        return RMSequenceMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.SynapseConfigUtils,10,1,0,15,53,25,8,7,7,0.222222222,537,1.0,0,0.0,0.222222222,0,0,52.6,10,2.9,1,"

package org.apache.synapse.config;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.impl.builder.StAXOMBuilder;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.xml.sax.InputSource;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.stream.StreamSource;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.*;

public class SynapseConfigUtils {

    private static final Log log = LogFactory.getLog(SynapseConfigUtils.class);

    
    public static StreamSource getStreamSource(Object o) {

        if (o == null) {
            handleException(""Cannot convert null to a StreamSource"");

        } else if (o instanceof OMNode) {
            OMNode omNode = (OMNode) o;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                omNode.serialize(baos);
                return new StreamSource(new ByteArrayInputStream(baos.toByteArray()));
            } catch (XMLStreamException e) {
                handleException(""Error converting to a StreamSource"", e);
            }

        } else {
            handleException(""Cannot convert object to a StreamSource"");
        }
        return null;
    }

    public static InputStream getInputStream(Object o) {

        if (o == null) {
            handleException(""Cannot convert null to a StreamSource"");

        } else if (o instanceof OMElement) {
            OMElement omElement = (OMElement) o;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                omElement.serialize(baos);
                return new ByteArrayInputStream(baos.toByteArray());
            } catch (XMLStreamException e) {
                handleException(""Error converting to a StreamSource"", e);
            }

        } else if (o instanceof URI) {
            try {
                return ((URI) (o)).toURL().openStream();
            } catch (IOException e) {
                handleException(""Error opening stream form URI"", e);
            }
        } else {
            handleException(""Cannot convert object to a StreamSource"");
        }
        return null;
    }

    
    public static Object getObject(URL url) {
        try {
            if (url != null && ""file"".equals(url.getProtocol())) {
                try {
                    url.openStream();
                } catch (IOException ignored) {
                    String path = url.getPath();
                    if (log.isDebugEnabled()) {
                        log.debug(""Can not open a connection to the URL with a path :"" +
                            path);
                    }
                    String synapseHome = System.getProperty(SynapseConstants.SYNAPSE_HOME);
                    if (synapseHome != null) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Trying  to resolve an absolute path of the "" +
                                "" URL using the synapse.home : "" + synapseHome);
                        }
                        if (synapseHome.endsWith(""/"")) {
                            synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
                        }
                        url = new URL(url.getProtocol() + "":"" + synapseHome + ""/"" + path);
                        try {
                            url.openStream();
                        } catch (IOException e) {
                            if (log.isDebugEnabled()) {
                                log.debug(""Faild to resolve an absolute path of the "" +
                                    "" URL using the synapse.home : "" + synapseHome);
                            }
                            log.warn(""IO Error reading from URL "" + url.getPath() + e);
                        }
                    }
                }
            }
            if (url == null) {
                return null;
            }
            URLConnection urlc = url.openConnection();
            XMLToObjectMapper xmlToObject =
                getXmlToObjectMapper(urlc.getContentType());

            try {
                XMLStreamReader parser = XMLInputFactory.newInstance().
                    createXMLStreamReader(urlc.getInputStream());
                StAXOMBuilder builder = new StAXOMBuilder(parser);
                OMElement omElem = builder.getDocumentElement();

                
                
                omElem.build();

                if (xmlToObject != null) {
                    return xmlToObject.getObjectFromOMNode(omElem);
                } else {
                    return omElem;
                }

            } catch (XMLStreamException e) {
                log.warn(""Content at URL : "" + url + "" is non XML.."");
                return urlc.getContent();
            }

        } catch (IOException e) {
            handleException(""Error connecting to URL : "" + url, e);
        }
        return null;
    }

    
    public static OMElement getOMElementFromURL(String urlStr) throws IOException {
        URL url = getURLFromPath(urlStr);
        if (url == null) {
            return null;
        }
        URLConnection conn = url.openConnection();
        conn.setReadTimeout(getReadTimeout());
        conn.setConnectTimeout(getConnectionTimeout());
        conn.setRequestProperty(""Connection"", ""close""); 
        InputStream urlInStream = conn.getInputStream();

        if (urlInStream != null) {
            try {
                StAXOMBuilder builder = new StAXOMBuilder(urlInStream);
                OMElement doc = builder.getDocumentElement();
                doc.build();
                return doc;
            } catch (Exception e) {
                handleException(""Error parsing resource at URL : "" + url +
                    "" as XML"", e);
            } finally {
                try {
                    urlInStream.close();
                } catch (IOException ignore) {
                }
            }
        }
        return null;
    }

    public static InputSource getInputSourceFormURI(URI uri) {
        if (uri == null) {
            if (log.isDebugEnabled()) {
                log.debug(""Can not create a URL from 'null' "");
            }
            return null;
        }
        try {
            URL url = uri.toURL();
            String protocol = url.getProtocol();
            String path = url.getPath();
            if (protocol == null || """".equals(protocol)) {
                url = new URL(""file:"" + path);
            }
            URLConnection conn = url.openConnection();
            conn.setReadTimeout(getReadTimeout());
            conn.setConnectTimeout(getConnectionTimeout());
            conn.setRequestProperty(""Connection"", ""close""); 
            InputStream urlInStream = conn.getInputStream();
            return new InputSource(urlInStream);
        } catch (MalformedURLException e) {
            handleException(""Invalid URL ' "" + uri + "" '"", e);
        } catch (IOException e) {
            handleException(""Error reading at URI ' "" + uri + "" ' "", e);
        }
        return null;
    }

    private static int getReadTimeout() {
        
        String readTO = System.getProperty(SynapseConstants.READTIMEOUT);
        int readTimeout = SynapseConstants.DEFAULT_READTIMEOUT;
        if (readTO != null && !"""".equals(readTO)) {
            try {
                readTimeout = Integer.parseInt(readTO);
            } catch (NumberFormatException ignored) {
            }
        }
        return readTimeout;
    }

    private static int getConnectionTimeout() {
        
        String connectionTO = System.getProperty(SynapseConstants.CONNECTTIMEOUT);
        int connectionTimeout = SynapseConstants.DEFAULT_CONNECTTIMEOUT;
        if (connectionTO != null && !"""".equals(connectionTO)) {
            try {
                connectionTimeout = Integer.parseInt(connectionTO);
            } catch (NumberFormatException ignored) {
            }
        }
        return connectionTimeout;
    }

    private static void handleException(String msg, Exception e) {
        log.warn(msg, e);
        throw new SynapseException(msg, e);
    }

    private static void handleException(String msg) {
        log.warn(msg);
        throw new SynapseException(msg);
    }

    
    public static XMLToObjectMapper getXmlToObjectMapper(String contentType) {
        return null;
    }

    
    public static URL getURLFromPath(String path) {
        if (path == null || ""null"".equals(path)) {
            if (log.isDebugEnabled()) {
                log.debug(""Can not create a URL from 'null' "");
            }
            return null;
        }
        URL url = null;
        try {
            url = new URL(path);
            if (""file"".equals(url.getProtocol())) {
                try {
                    url.openStream();
                } catch (MalformedURLException e) {
                    handleException(""Invalid URL reference : "" + path, e);
                } catch (IOException ignored) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Can not open a connection to the URL with a path :"" +
                            path);
                    }
                    String synapseHome = System.getProperty(SynapseConstants.SYNAPSE_HOME);
                    if (synapseHome != null) {
                        if (synapseHome.endsWith(""/"")) {
                            synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
                        }
                        if (log.isDebugEnabled()) {
                            log.debug(""Trying  to resolve an absolute path of the "" +
                                "" URL using the synapse.home : "" + synapseHome);
                        }
                        try {
                            url = new URL(url.getProtocol() + "":"" + synapseHome + ""/"" +
                                url.getPath());
                            url.openStream();
                        } catch (MalformedURLException e) {
                            handleException(""Invalid URL reference "" + url.getPath() + e);
                        } catch (IOException e) {
                            if (log.isDebugEnabled()) {
                                log.debug(""Faild to resolve an absolute path of the "" +
                                    "" URL using the synapse.home : "" + synapseHome);
                            }
                            log.warn(""IO Error reading from URL : "" + url.getPath() + e);
                        }
                    }
                }
            }
        } catch (MalformedURLException e) {
            handleException(""Invalid URL reference :  "" + path, e);
        } catch (IOException e) {
            handleException(""IO Error reading from URL : "" + path, e);
        }
        return url;
    }

    public static InputSource resolveRelativeURI(String parentLocation, String relativeLocation) {

        if (relativeLocation == null) {
            throw new IllegalArgumentException(""Import URI cannot be null"");
        }

        if (log.isDebugEnabled()) {
            log.debug(""Resolving import URI ' "" + parentLocation + "" '  against base URI ' "" + relativeLocation + "" '  "");
        }

        URI importUri = null;
        try {
            importUri = new URI(relativeLocation);
            if (importUri.isAbsolute()) {
                return getInputSourceFormURI(importUri);
            }
        } catch (URISyntaxException e) {
            handleException(""Invalid URI"", e);
        }

        if (parentLocation == null) {
            return getInputSourceFormURI(importUri);
        } else {
            
            if (relativeLocation.startsWith(""/"") || relativeLocation.startsWith(""\"")) {
                if (importUri != null && !importUri.isAbsolute()) {
                    try {
                        importUri = new URI(""file:"" + relativeLocation);
                        return getInputSourceFormURI(importUri);
                    } catch (URISyntaxException e) {
                        handleException(""Invalid URI ' "" + importUri.getPath() + "" '"", e);
                    }
                }
            } else {
                int index = parentLocation.lastIndexOf(""/"");
                if (index == -1) {
                    index = parentLocation.lastIndexOf(""\"");
                }
                if (index != -1) {
                    String basepath = parentLocation.substring(0, index + 1);
                    String resolvedPath = basepath + relativeLocation;
                    try {
                        URI resolvedUri = new URI(resolvedPath);
                        if (!resolvedUri.isAbsolute()) {
                            resolvedUri = new URI(""file:"" + resolvedPath);
                        }
                        return getInputSourceFormURI(resolvedUri);
                    } catch (URISyntaxException e) {
                        handleException(""Invalid URI ' "" + resolvedPath + "" '"", e);
                    }
                } else {
                    return getInputSourceFormURI(importUri);
                }
            }
        }
        return null;
    }
}

"
synapse,1.1,org.apache.synapse.config.xml.endpoints.IndirectEndpointFactory,7,1,0,9,17,13,1,8,3,0.666666667,69,1.0,1,0.0,0.25,0,0,8.571428571,2,0.8571,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.IndirectEndpoint;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;


public class IndirectEndpointFactory implements EndpointFactory {

    private static Log log = LogFactory.getLog(IndirectEndpointFactory.class);

    private static IndirectEndpointFactory instance = new IndirectEndpointFactory();

    private IndirectEndpointFactory() {}

    public static IndirectEndpointFactory getInstance() {
        return instance;
    }

    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {

        IndirectEndpoint indirectEndpoint = new IndirectEndpoint();
        String ref = epConfig.getAttributeValue(new QName(""key""));
        indirectEndpoint.setKey(ref);
        return indirectEndpoint;
    }

    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
			return createEndpoint((OMElement) om, false);
		} else {
			handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
		}
		return null;
    }

     private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.SynapseConfiguration,47,1,0,42,105,589,23,20,45,0.860869565,933,0.9,1,0.0,0.144927536,0,0,18.63829787,8,2.0426,1,"

package org.apache.synapse.config;

import org.apache.axis2.AxisFault;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.*;
import org.apache.synapse.config.xml.MediatorFactoryFinder;
import org.apache.synapse.config.xml.endpoints.XMLToEndpointMapper;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.core.axis2.ProxyService;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.registry.Registry;

import javax.xml.namespace.QName;
import java.io.IOException;
import java.util.*;


public class SynapseConfiguration implements ManagedLifecycle {

	private static final Log log = LogFactory.getLog(SynapseConfiguration.class);

	
	Registry registry = null;

    
    private QName defaultQName = null;

	
	private Map proxyServices = new HashMap();

    
    private Map startups = new HashMap();

    
	private Map localRegistry = new HashMap();

    
    private Properties properties = new Properties();

    
    private Timer synapseTimer = new Timer(true);

    
	private AxisConfiguration axisConfiguration = null;

	
	private String pathToConfigFile = null;

    
	public void addSequence(String key, Mediator mediator) {
		localRegistry.put(key, mediator);
	}

	
	public void addSequence(String key, Entry entry) {
		localRegistry.put(key, entry);
	}

	
	public Map getDefinedSequences() {
		Map definedSequences = new HashMap();
		Iterator itr = localRegistry.values().iterator();
		while (itr.hasNext()) {
			Object o = itr.next();
			if (o instanceof SequenceMediator) {
				definedSequences.put(((SequenceMediator) o).getName(), o);
			}
		}
		return definedSequences;
	}

	
	public Mediator getSequence(String key) {
		Object o = localRegistry.get(key);
		if (o != null && o instanceof Mediator) {
			return (Mediator) o;
		}

		Entry entry = null;
		if (o != null && o instanceof Entry) {
			entry = (Entry) o;
		} else {
			entry = new Entry(key);
			entry.setType(Entry.REMOTE_ENTRY);
			entry.setMapper(MediatorFactoryFinder.getInstance());
		}

		if (registry != null) {
			o = registry.getResource(entry);
			if (o != null && o instanceof Mediator) {
				localRegistry.put(key, entry);
				return (Mediator) o;
			}
		}

		return null;
	}

	
	public void removeSequence(String key) {
		localRegistry.remove(key);
	}

	
	public Mediator getMainSequence() {
		return getSequence(SynapseConstants.MAIN_SEQUENCE_KEY);
	}

	
	public Mediator getFaultSequence() {
		return getSequence(SynapseConstants.FAULT_SEQUENCE_KEY);
	}

	
	public void addEntry(String key, Entry entry) {

		if (entry.getType() == Entry.URL_SRC) {
			try {
				entry.setValue(SynapseConfigUtils.getOMElementFromURL(entry.getSrc()
						.toString()));
				localRegistry.put(key, entry);
			} catch (IOException e) {
				handleException(""Can not read from source URL : ""
						+ entry.getSrc());
			}
		} else {
			localRegistry.put(key, entry);
		}
	}

    
    public Map getCachedEntries() {
        Map cachedEntries = new HashMap();
        for (Iterator itr = localRegistry.values().iterator(); itr.hasNext();) {
            Object o = itr.next();
            if (o != null && o instanceof Entry) {
                Entry entry = (Entry) o;
                if (entry.isDynamic() && entry.isCached()) {
                    cachedEntries.put(entry.getKey(), entry);
                }
            }
        }

        return cachedEntries;
    }

    
	public Map getDefinedEntries() {
		Map definedEntries = new HashMap();
		Iterator itr = localRegistry.values().iterator();
		while (itr.hasNext()) {
			Object o = itr.next();
			if (o instanceof Entry
					&& ((Entry) o).getType() != Entry.REMOTE_ENTRY) {
				definedEntries.put(((Entry) o).getKey(), o);
			}
		}
		return definedEntries;
	}

	
	public Object getEntry(String key) {
		Object o = localRegistry.get(key);
		if (o != null && o instanceof Entry) {
			Entry entry = (Entry) o;
			if (entry.isDynamic()) {
                if (entry.isCached() && !entry.isExpired()) {
                    return entry.getValue();
                } else if (registry != null) {
                    o = registry.getResource(entry);
                } else {
                    if (log.isDebugEnabled()) {
                        log.debug(""Will not  evaluate the value of the remote entry with a key ""
                            + key + "",  because the registry is not available"");
                    }
                    return null; 
                    
                }
			} else {
				return entry.getValue();
			}
		}
		return o;
	}

	
	public Entry getEntryDefinition(String key) {
		Object o = localRegistry.get(key);
		if (o == null || o instanceof Entry) {
			if (o == null) {
				
				Entry entry = new Entry(key);
				entry.setType(Entry.REMOTE_ENTRY);
				addEntry(key, entry);
				return entry;
			}
			return (Entry) o;
		} else {
			handleException(""Invalid local registry entry : "" + key);
			return null;
		}
	}

	
	public void removeEntry(String key) {
		localRegistry.remove(key);
	}

    
    public void clearCachedEntry(String key) {
        Entry entry = getEntryDefinition(key);
        if (entry.isDynamic() && entry.isCached()) {
            entry.clearCache();
        }
    }

    
    public void clearCache() {
        for (Iterator itr = localRegistry.values().iterator(); itr.hasNext();) {
            Object o = itr.next();
            if (o != null && o instanceof Entry) {
                Entry entry = (Entry) o;
                if (entry.isDynamic() && entry.isCached()) {
                    entry.clearCache();
                }
            }
        }
    }

    
	public void addEndpoint(String key, Endpoint endpoint) {
		localRegistry.put(key, endpoint);
	}

	
	public void addEndpoint(String key, Entry entry) {
		localRegistry.put(key, entry);
	}

	
	public Map getDefinedEndpoints() {
		Map definedEndpoints = new HashMap();
		Iterator itr = localRegistry.values().iterator();
		while (itr.hasNext()) {
			Object o = itr.next();
			if (o instanceof Endpoint) {
				definedEndpoints.put(((Endpoint) o).getName(), o);
			}
		}
		return definedEndpoints;
	}

	
	public Endpoint getEndpoint(String key) {
		Object o = localRegistry.get(key);
		if (o != null && o instanceof Endpoint) {
			return (Endpoint) o;
		}

		Entry entry = null;
		if (o != null && o instanceof Entry) {
			entry = (Entry) o;
		} else {
			entry = new Entry(key);
			entry.setType(Entry.REMOTE_ENTRY);
			entry.setMapper(XMLToEndpointMapper.getInstance());
		}

		if (registry != null) {
			o = registry.getResource(entry);
			if (o != null && o instanceof Endpoint) {
				localRegistry.put(key, entry);
				return (Endpoint) o;
			}
		}

		return null;
	}

	
	public void removeEndpoint(String key) {
		localRegistry.remove(key);
	}

	
	public void addProxyService(String name, ProxyService proxy) {
		proxyServices.put(name, proxy);
	}

	
	public ProxyService getProxyService(String name) {
		return (ProxyService) proxyServices.get(name);
	}

	
	public void removeProxyService(String name) {
		Object o = proxyServices.get(name);
		if (o == null) {
			handleException(""Unknown proxy service for name : "" + name);
		} else {
			try {
				if (getAxisConfiguration().getServiceForActivation(name) != null) {
					if (getAxisConfiguration().getServiceForActivation(name)
							.isActive()) {
						getAxisConfiguration().getService(name)
								.setActive(false);
					}
					getAxisConfiguration().removeService(name);
				}
				proxyServices.remove(name);
			} catch (AxisFault axisFault) {
				handleException(axisFault.getMessage());
			}
		}
	}

	
	public Collection getProxyServices() {
		return proxyServices.values();
	}

	
	public Map getLocalRegistry() {
		return Collections.unmodifiableMap(localRegistry);
	}

	
	public Registry getRegistry() {
		return registry;
	}

	
	public void setRegistry(Registry registry) {
		this.registry = registry;
	}

	
	public void setAxisConfiguration(AxisConfiguration axisConfig) {
		this.axisConfiguration = axisConfig;
	}

	
	public AxisConfiguration getAxisConfiguration() {
		return axisConfiguration;
	}

	
	public String getPathToConfigFile() {
		return pathToConfigFile;
	}

	
	public void setPathToConfigFile(String pathToConfigFile) {
		this.pathToConfigFile = pathToConfigFile;
	}

    
    public void setDefaultQName(QName defaultQName) {
		this.defaultQName = defaultQName;
	}

    
    public QName getDefaultQName() {
		return defaultQName;
	}

    
    public Timer getSynapseTimer() {
        return synapseTimer;
    }

    
    public Collection getStartups() {
        return startups.values();
    }

    
    public Startup getStartup(String id) {
        return (Startup) startups.get(id);
    }

    
    public void addStartup(Startup startup) {
        startups.put(startup.getName(), startup);
    }

    
    public void removeStartup(String name) {
        startups.remove(name);
    }

    
    public Properties getProperties() {
        return properties;
    }

    
    public void setProperties(Properties properties) {
        this.properties = properties;
    }

    
    public String getProperty(String propKey, String def) {
        String val = System.getProperty(propKey);
        if (val == null) {
            val = properties.getProperty(propKey);
        }

        if (val != null) {
            if (log.isDebugEnabled()) {
                log.debug(""Using synapse tuning parameter : "" + propKey + "" = "" + val);
            }
            return val;
        }
        return def;
    }

    
    public String getProperty(String propKey) {
        String val = System.getProperty(propKey);
        if (val == null) {
            val = properties.getProperty(propKey);
        }

        if (val != null) {
            if (log.isDebugEnabled()) {
                log.debug(""Using synapse tuning parameter : "" + propKey + "" = "" + val);
            }
            return val;
        }
        return null;
    }

    
    public void destroy() {
        
        if (log.isDebugEnabled()) {
            log.debug(""Destroying the Synapse Configuration"");
        }

        
        synapseTimer.cancel();
        synapseTimer = null;

        
        for (Iterator it = getProxyServices().iterator(); it.hasNext();) {
            Object o = it.next();
            if (o instanceof ProxyService) {
                ProxyService p = (ProxyService) o;
                if (p.getTargetInLineInSequence() != null) {
                    p.getTargetInLineInSequence().destroy();
                }
                if (p.getTargetInLineOutSequence() != null) {
                    p.getTargetInLineOutSequence().destroy();
                }
            }
        }

        
        Map sequences = getDefinedSequences();
        for (Iterator it = sequences.entrySet().iterator(); it.hasNext();) {
            Object o = it.next();
            if (o instanceof ManagedLifecycle) {
                ManagedLifecycle m = (ManagedLifecycle) o;
                m.destroy();
            }
        }

        
        if (startups != null) {
            for (Iterator it = startups.values().iterator(); it.hasNext();) {
                Object o = it.next();
                if (o instanceof ManagedLifecycle) {
                    ManagedLifecycle m = (ManagedLifecycle) o;
                    m.destroy();
                }
            }
        }
    }

    
    public void init(SynapseEnvironment se) {
        
        if (log.isDebugEnabled()) {
            log.debug(""Initializing the Synapse Configuration"");
        }

        
        if (registry != null && registry instanceof ManagedLifecycle) {
            ((ManagedLifecycle) registry).init(se);
        }
        
        
        for (Iterator it = getProxyServices().iterator(); it.hasNext();) {
            Object o = it.next();
            if (o instanceof ProxyService) {
                ProxyService p = (ProxyService) o;
                if (p.getTargetInLineInSequence() != null) {
                    p.getTargetInLineInSequence().init(se);
                }
                if (p.getTargetInLineOutSequence() != null) {
                    p.getTargetInLineOutSequence().init(se);
                }
            }
        }

        
        Map sequences = getDefinedSequences();
        for (Iterator it = sequences.values().iterator(); it.hasNext();) {
            Object o = it.next();
            if (o instanceof ManagedLifecycle) {
                ManagedLifecycle m = (ManagedLifecycle) o;
                m.init(se);
            }
        }
    }

    private void handleException(String msg) {
		log.error(msg);
		throw new SynapseException(msg);
	}
}
"
synapse,1.1,org.apache.synapse.config.xml.InMediatorFactory,4,3,0,5,9,4,0,5,3,0.666666667,30,1.0,0,0.666666667,0.666666667,0,0,6.25,1,0.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.filters.InMediator;

import javax.xml.namespace.QName;


public class InMediatorFactory extends AbstractListMediatorFactory {

    private static final QName IN_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""in"");

    public Mediator createMediator(OMElement elem) {
        InMediator filter = new InMediator();
        
        
        processTraceState(filter,elem);
        addChildren(elem, filter);
        return filter;
    }

    public QName getTagQName() {
        return IN_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AbstractListMediatorFactory,2,2,7,14,15,1,7,7,1,2.0,46,0.0,0,0.75,0.5,0,0,22.0,3,1.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.ListMediator;
import org.apache.synapse.Mediator;

import javax.xml.namespace.QName;
import java.util.Iterator;


public abstract class AbstractListMediatorFactory extends AbstractMediatorFactory {

    protected static void addChildren(OMElement el, ListMediator m) {
        Iterator it = el.getChildElements();
        while (it.hasNext()) {
            OMElement child = (OMElement) it.next();
            Mediator med = MediatorFactoryFinder.getInstance().getMediator(child);
            if (med != null) {
                m.addChild(med);
            } else {
                String msg = ""Unknown mediator : "" + child.getLocalName();
                log.error(msg);
                throw new SynapseException(msg);
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.mediators.db.DBReportMediator,2,3,0,5,15,1,2,3,1,2.0,77,0.0,0,0.962962963,0.666666667,2,5,37.5,2,1.0,0,"

package org.apache.synapse.mediators.db;

import org.apache.synapse.MessageContext;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Connection;


public class DBReportMediator extends AbstractDBMediator {

    protected void processStatement(Statement stmnt, MessageContext msgCtx) {

        boolean traceOn = isTraceOn(msgCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        Connection con = null;
        try {
            PreparedStatement ps = getPreparedStatement(stmnt, msgCtx);
            con = ps.getConnection();
            int count = ps.executeUpdate();

            if (count > 0) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn,
                        ""Inserted "" + count + "" row/s using statement : "" + stmnt.getRawStatement());
                }
            } else {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn,
                        ""No rows were inserted for statement : "" + stmnt.getRawStatement());
                }
            }
            con.commit();

        } catch (SQLException e) {
            handleException(""Error execuring insert statement : "" + stmnt.getRawStatement() +
                "" against DataSource : "" + getDSName(), e, msgCtx);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ignore) {}
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.XSLTMediatorFactory,4,2,0,10,27,4,0,10,3,0.666666667,148,1.0,0,0.6,0.666666667,0,0,35.75,10,2.75,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.config.xml.OMElementUtils;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.transform.XSLTMediator;
import org.apache.synapse.config.xml.XMLConfigConstants;
import org.apache.synapse.config.xml.AbstractMediatorFactory;
import org.apache.synapse.config.xml.MediatorPropertyFactory;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class XSLTMediatorFactory extends AbstractMediatorFactory {

    private static final QName TAG_NAME    = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""xslt"");

    public QName getTagQName() {
        return TAG_NAME;
    }

    public Mediator createMediator(OMElement elem) {

        XSLTMediator transformMediator = new XSLTMediator();

        OMAttribute attXslt   = elem.getAttribute(ATT_KEY);
        OMAttribute attSource = elem.getAttribute(ATT_SOURCE);
        OMAttribute attTarget = elem.getAttribute(ATT_TARGET);

        if (attXslt != null) {
            transformMediator.setXsltKey(attXslt.getAttributeValue());
        } else {
            handleException(""The 'key' attribute is required for the XSLT mediator"");
        }

        if (attSource != null) {
            try {
                transformMediator.setSourceXPathString(attSource.getAttributeValue());
                AXIOMXPath xp = new AXIOMXPath(attSource.getAttributeValue());
                OMElementUtils.addNameSpaces(xp, elem, log);
                transformMediator.setSource(xp);

            } catch (JaxenException e) {
                handleException(""Invalid XPath specified for the source attribute : "" +
                    attSource.getAttributeValue());
            }
        }

        if (attTarget != null) {
            transformMediator.setTargetPropertyName(attTarget.getAttributeValue());    
        }

        
        
        processTraceState(transformMediator, elem);
        
        Iterator iter = elem.getChildrenWithName(FEATURE_Q);
        while (iter.hasNext()) {
            OMElement featureElem = (OMElement) iter.next();
            OMAttribute attName = featureElem.getAttribute(ATT_NAME);
            OMAttribute attValue = featureElem.getAttribute(ATT_VALUE);
            if (attName != null && attValue != null) {
                String name = attName.getAttributeValue();
                String value = attValue.getAttributeValue();
                if (name != null && value != null) {
                    if (""true"".equals(value.trim())) {
                        transformMediator.addFeature(name.trim(),
                                true);
                    } else if (""false"".equals(value.trim())) {
                        transformMediator.addFeature(name.trim(),
                                false);
                    } else {
                        handleException(""The feature must have value true or false"");
                    }
                } else {
                    handleException(""The valid values for both of the name and value are need"");
                }
            } else {
                handleException(""Both of the name and value attribute are required for a feature"");
            }
        }
        transformMediator.addAllProperties(
            MediatorPropertyFactory.getMediatorProperties(elem));

        return transformMediator;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher,5,1,0,7,14,0,2,5,5,0.25,128,0.0,0,0.0,0.6,0,0,24.4,5,3.0,0,"

package org.apache.synapse.endpoints.dispatch;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;

import java.util.HashMap;
import java.util.Map;
import java.util.Collections;


public class HttpSessionDispatcher implements Dispatcher {

    private final static String TRANSPORT_HEADERS = ""TRANSPORT_HEADERS"";
    
    private final static String COOKIE = ""Cookie"";
    private final static String SET_COOKIE = ""Set-Cookie"";
    
    private final Map sessionMap = Collections.synchronizedMap(new HashMap());

    
    public Endpoint getEndpoint(MessageContext synCtx) {

        Endpoint endpoint = null;

        org.apache.axis2.context.MessageContext axis2MessageContext =
            ((Axis2MessageContext) synCtx).getAxis2MessageContext();

        Object o = axis2MessageContext.getProperty(TRANSPORT_HEADERS);
        if (o != null && o instanceof Map) {
            Map headerMap = (Map) o;
            Object cookie = headerMap.get(COOKIE);

            if (cookie != null) {
                Object e = sessionMap.get(cookie);
                if (e != null) {
                    endpoint = (Endpoint) e;
                }
            }
        }

        return endpoint;
    }

    
    public void updateSession(MessageContext synCtx, Endpoint endpoint) {

        org.apache.axis2.context.MessageContext axis2MessageContext =
            ((Axis2MessageContext) synCtx).getAxis2MessageContext();

        Object o = axis2MessageContext.getProperty(TRANSPORT_HEADERS);
        if (o != null && o instanceof Map) {
            Map headerMap = (Map) o;
            Object cookie = headerMap.get(SET_COOKIE);

            if (cookie != null) {
                
                synchronized (sessionMap) {
                    if (!sessionMap.containsKey(cookie)) {
                        sessionMap.put(cookie, endpoint);
                    }
                }
            }
        }
    }

    public void unbind(MessageContext synCtx) {

        org.apache.axis2.context.MessageContext axis2MessageContext =
            ((Axis2MessageContext) synCtx).getAxis2MessageContext();

        Object o = axis2MessageContext.getProperty(TRANSPORT_HEADERS);
        if (o != null && o instanceof Map) {
            Map headerMap = (Map) o;
            Object cookie = headerMap.get(COOKIE);

            if (cookie != null) {
                sessionMap.remove(cookie);
            }
        }
    }

    
    public boolean isServerInitiatedSession() {
        return true;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.RegistrySerializer,4,1,0,11,23,2,1,10,2,0.583333333,101,1.0,0,0.0,0.333333333,0,0,23.25,4,1.25,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.registry.Registry;

import java.util.Iterator;


public class RegistrySerializer {

    private static final Log log = LogFactory.getLog(RegistrySerializer.class);

    protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
    protected static final OMNamespace synNS = fac.createOMNamespace(XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");
    protected static final OMNamespace nullNS = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, """");

    public static OMElement serializeRegistry(OMElement parent, Registry registry) {

        OMElement reg = fac.createOMElement(""registry"", synNS);

        if (registry.getProviderClass() != null) {
            reg.addAttribute(fac.createOMAttribute(
                ""provider"", nullNS, registry.getProviderClass()));
        } else {
            handleException(""Invalid registry. Provider is required"");
        }

        Iterator iter = registry.getConfigProperties().keySet().iterator();
        while (iter.hasNext()) {
            String name = (String) iter.next();
            String value = (String) registry.getConfigProperties().get(name);
            OMElement property = fac.createOMElement(""parameter"", synNS);
            property.addAttribute(fac.createOMAttribute(
                ""name"", nullNS, name));
            property.setText(value.trim());
            reg.addChild(property);
        }

        if (parent != null) {
            parent.addChild(reg);
        }
        return reg;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.SALoadbalanceEndpointSerializer,4,1,0,20,25,2,1,20,2,0.5,174,1.0,0,0.0,0.555555556,0,0,42.0,8,2.25,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
import org.apache.synapse.endpoints.dispatch.Dispatcher;
import org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher;
import org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher;
import org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher;
import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
import org.apache.synapse.endpoints.algorithms.RoundRobin;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;

public class SALoadbalanceEndpointSerializer implements EndpointSerializer {

    private static final Log log = LogFactory.getLog(SALoadbalanceEndpointSerializer.class);

    private OMFactory fac = null;

    public OMElement serializeEndpoint(Endpoint endpoint) {

        if (!(endpoint instanceof SALoadbalanceEndpoint)) {
            handleException(""Invalid endpoint type for serializing. "" +
                    ""Expected: SALoadbalanceEndpoint Found: "" + endpoint.getClass().getName());
        }

        SALoadbalanceEndpoint loadbalanceEndpoint = (SALoadbalanceEndpoint) endpoint;

        fac = OMAbstractFactory.getOMFactory();
        OMElement endpointElement = fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        String name = loadbalanceEndpoint.getName();
        if (name != null) {
            endpointElement.addAttribute(""name"", name, null);
        }

        Dispatcher dispatcher = loadbalanceEndpoint.getDispatcher();

        if (dispatcher instanceof SoapSessionDispatcher) {
            OMElement sessionElement = fac.createOMElement(""session"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            sessionElement.addAttribute(""type"", ""soap"", null);
            endpointElement.addChild(sessionElement);

        } else if (dispatcher instanceof HttpSessionDispatcher) {
            OMElement sessionElement = fac.createOMElement(""session"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            sessionElement.addAttribute(""type"", ""http"", null);
            endpointElement.addChild(sessionElement);

        } else if (dispatcher instanceof SimpleClientSessionDispatcher) {
            OMElement sessionElement = fac.createOMElement(""session"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            sessionElement.addAttribute(""type"", ""simpleClientSession"", null);
            endpointElement.addChild(sessionElement);
        }

        OMElement loadbalanceElement = fac.createOMElement(""loadbalance"", SynapseConstants.SYNAPSE_OMNAMESPACE);
        endpointElement.addChild(loadbalanceElement);

        LoadbalanceAlgorithm algorithm = loadbalanceEndpoint.getAlgorithm();
        String algorithmName = ""roundRobin"";
        if (algorithm instanceof RoundRobin) {
             algorithmName = ""roundRobin"";
        }
        loadbalanceElement.addAttribute(""algorithm"", algorithmName, null);

        List endpoints = loadbalanceEndpoint.getEndpoints();
        for (int i = 0; i < endpoints.size(); i++) {
            Endpoint childEndpoint = (Endpoint) endpoints.get(i);
            EndpointSerializer serializer = EndpointAbstractSerializer.
                    getEndpointSerializer(childEndpoint);
            OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
            loadbalanceElement.addChild(aeElement);
        }

        return endpointElement;
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.EndpointSerializer,1,1,0,13,1,0,11,2,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.endpoints.Endpoint;


public interface EndpointSerializer {

    
    public OMElement serializeEndpoint(Endpoint endpoint);
}
"
synapse,1.1,org.apache.synapse.config.xml.SynapseXMLConfigurationFactory,15,1,0,26,77,99,0,26,6,0.357142857,445,1.0,0,0.0,0.314285714,0,0,28.6,19,2.6,2,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.Startup;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.SynapseConfigUtils;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
import org.apache.synapse.core.axis2.ProxyService;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.mediators.builtin.DropMediator;
import org.apache.synapse.mediators.builtin.LogMediator;
import org.apache.synapse.mediators.MediatorProperty;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import java.util.Iterator;

public class SynapseXMLConfigurationFactory implements ConfigurationFactory {
    
    private static Log log = LogFactory.getLog(SynapseXMLConfigurationFactory.class);

    public SynapseConfiguration getConfiguration(OMElement definitions) {
        
        if (!definitions.getQName().equals(XMLConfigConstants.DEFINITIONS_ELT)) {
            throw new SynapseException(
                    ""Wrong QName for this config factory "" + definitions.getQName());
        }

        SynapseConfiguration config = new SynapseConfiguration();
        config.setDefaultQName(definitions.getQName());

        SequenceMediator rootSequence = new SequenceMediator();
        rootSequence.setName(org.apache.synapse.SynapseConstants.MAIN_SEQUENCE_KEY);

        Iterator iter = definitions.getChildren();
        
        while (iter.hasNext()) {
            Object o = iter.next();
            if (o instanceof OMElement) {
                OMElement elt = (OMElement) o;
                if (XMLConfigConstants.SEQUENCE_ELT.equals(elt.getQName())) {
                    String key = elt.getAttributeValue(
                            new QName(XMLConfigConstants.NULL_NAMESPACE, ""key""));
                    
                    if (key != null) {
                        Mediator m = MediatorFactoryFinder.getInstance().getMediator(elt);
                        rootSequence.addChild(m);
                    } else {
                        defineSequence(config, elt);
                    }
                } else if (XMLConfigConstants.ENDPOINT_ELT.equals(elt.getQName())) {
                    defineEndpoint(config, elt);
                } else if (XMLConfigConstants.ENTRY_ELT.equals(elt.getQName())) {
                    defineEntry(config, elt);
                } else if (XMLConfigConstants.PROXY_ELT.equals(elt.getQName())) {
                    defineProxy(config, elt);
                } else if (XMLConfigConstants.REGISTRY_ELT.equals(elt.getQName())) {
                    defineRegistry(config, elt);
                } else if (XMLConfigConstants.TASK_ELT.equals(elt.getQName())) {
                    defineStartup(config, elt);
                } else {
                    Mediator m = MediatorFactoryFinder.getInstance().getMediator(elt);
                    rootSequence.addChild(m);
                }
            }
        }

        if (config.getLocalRegistry().isEmpty() && config.getProxyServices().isEmpty() &&
                rootSequence.getList().isEmpty() && config.getRegistry() != null) {
            OMNode remoteConfigNode = config.getRegistry().lookup(""synapse.xml"");
            try {
                config = XMLConfigurationBuilder.getConfiguration(SynapseConfigUtils
                    .getStreamSource(remoteConfigNode).getInputStream());
            } catch (XMLStreamException xse) {
                throw new SynapseException(""Problem loading remote synapse.xml "", xse);
            }

        }

        
        
        
        if (!config.getLocalRegistry().containsKey(SynapseConstants.MAIN_SEQUENCE_KEY)) {
            
            
            if (rootSequence.getList().isEmpty() && config.getMainSequence() == null) {
                setDefaultMainSequence(config);
            } else {
                config.addSequence(rootSequence.getName(), rootSequence);
            }
        } else if (!rootSequence.getList().isEmpty()) {
            handleException(""Invalid Synapse Configuration : Conflict in resolving the ""main"" "" +
                    ""mediator
	Synapse Configuration cannot have sequence named ""main"" and "" +
                    ""toplevel mediators simultaniously"");
        }

        if (config.getFaultSequence() == null) {
            setDefaultFaultSequence(config);
        }

        return config;
    }

    private static void defineRegistry(SynapseConfiguration config, OMElement elem) {
        if (config.getRegistry() != null) {
            handleException(""Only one remote registry can be defined within a configuration"");
        }
        config.setRegistry(RegistryFactory.createRegistry(elem));
    }

    private static void defineStartup(SynapseConfiguration config, OMElement elem) {
        Startup startup = StartupFinder.getInstance().getStartup(elem);
        if (config.getStartup(startup.getName()) != null) {
            handleException(""Duplicate startup with name : "" + startup.getName());
        }
        config.addStartup(startup);
    }

    private static void defineProxy(SynapseConfiguration config, OMElement elem) {
        ProxyService proxy = ProxyServiceFactory.createProxy(elem);
        if (config.getProxyService(proxy.getName()) != null) {
            handleException(""Duplicate proxy service with name : "" + proxy.getName());
        }
        config.addProxyService(proxy.getName(), proxy);
    }

    private static void defineEntry(SynapseConfiguration config, OMElement elem) {
        Entry entry = EntryFactory.createEntry(elem);
        if (config.getLocalRegistry().get(entry.getKey()) != null) {
            handleException(""Duplicate registry entry definition for key : "" + entry.getKey());
        }
        config.addEntry(entry.getKey(), entry);
    }

    public static void defineSequence(SynapseConfiguration config, OMElement ele) {

        String name = ele.getAttributeValue(new QName(XMLConfigConstants.NULL_NAMESPACE, ""name""));
        if (name != null) {
            if (config.getLocalRegistry().get(name) != null) {
                handleException(""Duplicate sequence definition : "" + name);
            }
            config.addSequence(name, MediatorFactoryFinder.getInstance().getMediator(ele));
        } else {
            handleException(""Invalid sequence definition without a name"");
        }
    }

    public static void defineEndpoint(SynapseConfiguration config, OMElement ele) {

        String name = ele.getAttributeValue(new QName(XMLConfigConstants.NULL_NAMESPACE, ""name""));
        if (name != null) {
            if (config.getLocalRegistry().get(name.trim()) != null) {
                handleException(""Duplicate endpoint definition : "" + name);
            }
            Endpoint endpoint =
                    EndpointAbstractFactory.getEndpointFactroy(ele).createEndpoint(ele, false);
            config.addEndpoint(name.trim(), endpoint);
        } else {
            handleException(""Invalid endpoint definition without a name"");
        }
    }

    
    private static void setDefaultMainSequence(SynapseConfiguration config) {
        SequenceMediator main = new SequenceMediator();
        main.setName(SynapseConstants.MAIN_SEQUENCE_KEY);
        main.addChild(new LogMediator());
        main.addChild(new DropMediator());
        config.addSequence(SynapseConstants.MAIN_SEQUENCE_KEY, main);
    }

    
    private static void setDefaultFaultSequence(SynapseConfiguration config) {
        SequenceMediator fault = new SequenceMediator();
        fault.setName(org.apache.synapse.SynapseConstants.FAULT_SEQUENCE_KEY);
        LogMediator log = new LogMediator();
        log.setLogLevel(LogMediator.FULL);

        MediatorProperty mp = new MediatorProperty();
        mp.setName(""MESSAGE"");
        mp.setValue(""Executing default ""fault"" sequence"");
        log.addProperty(mp);

        mp = new MediatorProperty();
        mp.setName(""ERROR_CODE"");
        try {
            mp.setExpression(new AXIOMXPath(""get-property('ERROR_CODE')""));
        } catch (JaxenException ignore) {}
        log.addProperty(mp);

        mp = new MediatorProperty();
        mp.setName(""ERROR_MESSAGE"");
        try {
            mp.setExpression(new AXIOMXPath(""get-property('ERROR_MESSAGE')""));
        } catch (JaxenException ignore) {}
        log.addProperty(mp);

        fault.addChild(log);
        fault.addChild(new DropMediator());
        config.addSequence(org.apache.synapse.SynapseConstants.FAULT_SEQUENCE_KEY, fault);
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }


    public QName getTagQName() {

        return XMLConfigConstants.DEFINITIONS_ELT;
    }

    public Class getSerializerClass() {
        return SynapseXMLConfigurationSerializer.class;
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer,2,1,0,19,15,1,7,15,2,2.0,63,0.0,0,0.0,0.5,0,0,30.5,7,3.5,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.endpoints.*;
import org.apache.synapse.SynapseException;


public class EndpointAbstractSerializer {

    
    public static EndpointSerializer getEndpointSerializer(Endpoint endpoint) {

        if (endpoint instanceof AddressEndpoint) {
            return new AddressEndpointSerializer();
        } else if (endpoint instanceof WSDLEndpoint) {
            return new WSDLEndpointSerializer();
        } else if (endpoint instanceof IndirectEndpoint) {
            return new IndirectEndpointSerializer();
        } else if (endpoint instanceof LoadbalanceEndpoint) {
            return new LoadbalanceEndpointSerializer();
        } else if (endpoint instanceof SALoadbalanceEndpoint) {
            return new SALoadbalanceEndpointSerializer();
        } else if (endpoint instanceof FailoverEndpoint) {
            return new FailoverEndpointSerializer();
        }

        throw new SynapseException(""Serializer for endpoint "" +
                endpoint.getClass().toString() + "" is not defined."");
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.SynapseMediatorSerializer,3,3,0,7,15,3,0,7,3,2.0,46,0.0,0,0.777777778,0.555555556,0,0,14.33333333,3,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.base.SynapseMediator;


public class SynapseMediatorSerializer extends AbstractListMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof SynapseMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        SynapseMediator mediator = (SynapseMediator) m;
        OMElement rules = fac.createOMElement(""rules"", synNS);
        saveTracingState(rules,mediator);

        serializeChildren(rules, mediator.getList());

        if (parent != null) {
            parent.addChild(rules);
        }
        return rules;
    }

    public String getMediatorClassName() {
        return SynapseMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.XMLToEndpointMapper,4,1,0,8,8,4,1,7,2,0.666666667,32,1.0,1,0.0,0.5,0,0,6.75,2,0.75,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.synapse.config.XMLToObjectMapper;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.OMElement;


public class XMLToEndpointMapper implements XMLToObjectMapper {

    private static XMLToEndpointMapper instance = new XMLToEndpointMapper();

    private XMLToEndpointMapper() {}

    public static XMLToEndpointMapper getInstance() {
        return instance;
    }

    
    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            OMElement epElement = (OMElement) om;
            return EndpointAbstractFactory.
                    getEndpointFactroy(epElement).createEndpoint(epElement, false);
        } else {
            throw new SynapseException(""Configuration is not in proper format."");
        }
    }
}
"
synapse,1.1,org.apache.synapse.mediators.base.SequenceMediator,14,3,0,31,48,37,21,11,14,0.794871795,389,1.0,0,0.628571429,0.3,1,4,26.35714286,29,2.9286,0,"

package org.apache.synapse.mediators.base;

import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.mediators.AbstractListMediator;
import org.apache.synapse.mediators.MediatorFaultHandler;
import org.apache.synapse.statistics.StatisticsUtils;
import org.apache.synapse.statistics.StatisticsStack;
import org.apache.synapse.statistics.impl.SequenceStatisticsStack;

import java.util.Stack;


public class SequenceMediator extends AbstractListMediator {

    
    private String name = null;
    
    private String key = null;
    
    private String errorHandler = null;
    
    private boolean dynamic = false;
    
    private boolean initialized = false;
    
    private String registryKey = null;

    
    private int statisticsState = SynapseConstants.STATISTICS_UNSET;

    
    public boolean mediate(MessageContext synCtx) {

        boolean statsOn = SynapseConstants.STATISTICS_ON == statisticsState;
        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Sequence ""
                + (name == null ? (key == null ? ""<anonymous"" : ""key=<"" + key) : ""<"" + name) + "">"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        if (key == null) {

            
            
            Mediator errorHandlerMediator = null;

            
            if (statsOn) {
                StatisticsStack sequenceStack = (StatisticsStack)
                    synCtx.getProperty(SynapseConstants.SEQUENCE_STATS);
                if (sequenceStack == null) {
                    sequenceStack = new SequenceStatisticsStack();
                    synCtx.setProperty(SynapseConstants.SEQUENCE_STATS, sequenceStack);
                }
                String seqName = (name == null ? SynapseConstants.ANONYMOUS_SEQUENCE : name);
                boolean isFault = synCtx.getEnvelope().getBody().hasFault();
                sequenceStack.put(seqName, System.currentTimeMillis(),
                        !synCtx.isResponse(), statsOn, isFault);
            }
            try {

                
                if (errorHandler != null) {
                    errorHandlerMediator = synCtx.getSequence(errorHandler);

                    if (errorHandlerMediator != null) {
                        if (traceOrDebugOn) {
                            traceOrDebug(traceOn, ""Setting the onError handler : "" +
                                errorHandler + "" for the sequence : "" + name);
                        }
                        synCtx.pushFaultHandler(
                                new MediatorFaultHandler(errorHandlerMediator));
                    } else {
                        auditWarn(""onError handler : "" + errorHandler + "" for sequence : "" +
                            name + "" cannot be found"", synCtx);
                    }
                }

                boolean result = super.mediate(synCtx);

                
                
                if (errorHandlerMediator != null) {
                    Stack faultStack = synCtx.getFaultStack();
                    if (faultStack != null && !faultStack.isEmpty()) {
                        Object o = faultStack.peek();

                        if (o instanceof MediatorFaultHandler &&
                            errorHandlerMediator.equals(
                                ((MediatorFaultHandler) o).getFaultMediator())) {
                            faultStack.pop();
                        }
                    }
                }

                if (traceOrDebugOn) {
                    if (traceOn && trace.isTraceEnabled()) {
                        trace.trace(""Message : "" + synCtx.getEnvelope());
                    }

                    traceOrDebug(traceOn,
                        ""End : Sequence <"" + (name == null ? ""anonymous"" : name) + "">"");
                }

                return result;

            } finally {

                
                if (statsOn) {
                    StatisticsUtils.processSequenceStatistics(synCtx);
                }
                
                StatisticsUtils.processProxyServiceStatistics(synCtx);
            }

        } else {

            Mediator m = synCtx.getSequence(key);
            if (m == null) {
                handleException(""Sequence named "" + key + "" cannot be found"", synCtx);

            } else {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Executing with key "" + key);
                }

                boolean result = m.mediate(synCtx);

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""End : Sequence key=<"" + key + "">"");
                }
                return result;
            }
        }

        return false;
    }

    
    public synchronized void init(SynapseEnvironment se) {
        if (!initialized) {
            super.init(se);
            initialized = true;
        }
    }

    public synchronized void destroy() {
        if (initialized) {
            super.destroy();
            initialized = false;
        }
    }

    
    public String getName() {
        return name;
    }

    
    public void setName(String name) {
        this.name = name;
    }

    
    public String getKey() {
        return key;
    }

    
    public void setKey(String key) {
        this.key = key;
    }

    
    public String getErrorHandler() {
        return errorHandler;
    }

    
    public void setErrorHandler(String errorHandler) {
        this.errorHandler = errorHandler;
    }

    
    public int getStatisticsState() {
        return statisticsState;
    }

    
    public void setStatisticsState(int statisticsState) {
        this.statisticsState = statisticsState;
    }

    
    public boolean isDynamic() {
        return dynamic;
    }

    
    public void setDynamic(boolean dynamic) {
        this.dynamic = dynamic;
    }

    
    public String getRegistryKey() {
        return registryKey;
    }

    
    public void setRegistryKey(String registryKey) {
        this.registryKey = registryKey;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.SwitchMediatorSerializer,3,2,0,12,28,3,0,12,3,2.0,137,0.0,0,0.75,0.555555556,0,0,44.66666667,8,3.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.filters.SwitchMediator;

import java.util.Iterator;


public class SwitchMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof SwitchMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        SwitchMediator mediator = (SwitchMediator) m;
        OMElement switchMed = fac.createOMElement(""switch"", synNS);
        saveTracingState(switchMed, mediator);

        if (mediator.getSource() != null) {
            switchMed.addAttribute(fac.createOMAttribute(
                    ""source"", nullNS, mediator.getSource().toString()));
            super.serializeNamespaces(switchMed, mediator.getSource());

        } else {
            handleException(""Invalid switch mediator. Source required"");
        }

        Iterator iter = mediator.getCases().iterator();
        while (iter.hasNext()) {
            OMElement caseElem = fac.createOMElement(""case"", synNS);
            SwitchCase aCase = ((SwitchCase) iter.next());
            if (aCase.getRegex() != null) {
                caseElem.addAttribute(fac.createOMAttribute(
                        ""regex"", nullNS, aCase.getRegex().pattern()));
            } else {
                handleException(""Invalid switch case. Regex required"");
            }
            AnonymousListMediator caseMediator = aCase.getCaseMediator();
            if (caseMediator != null) {
                new AnonymousListMediatorSerializer().serializeMediator(
                        caseElem, caseMediator);
                switchMed.addChild(caseElem);
            }
        }
        SwitchCase defaultCase = mediator.getDefaultCase();
        if (defaultCase != null) {
            OMElement caseDefaultElem = fac.createOMElement(""default"", synNS);
            AnonymousListMediator caseDefaultMediator = defaultCase.getCaseMediator();
            if (caseDefaultMediator != null) {
                new AnonymousListMediatorSerializer().serializeMediator(
                        caseDefaultElem, caseDefaultMediator);
                switchMed.addChild(caseDefaultElem);
            }
        }
        if (parent != null) {
            parent.addChild(switchMed);
        }
        return switchMed;
    }

    public String getMediatorClassName() {
        return SwitchMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.LogMediatorFactory,4,2,0,6,16,2,0,6,3,1.047619048,97,1.0,0,0.6,0.666666667,0,0,21.5,7,2.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.LogMediator;

import javax.xml.namespace.QName;


public class LogMediatorFactory extends AbstractMediatorFactory  {

    private static final QName LOG_Q    = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""log"");
    private static final String SIMPLE  = ""simple"";
    private static final String HEADERS = ""headers"";
    private static final String FULL    = ""full"";
    private static final String CUSTOM  = ""custom"";
    private static final QName ATT_LEVEL = new QName(""level"");
    private static final QName ATT_SEPERATOR = new QName(""separator"");

    public QName getTagQName() {
        return LOG_Q;
    }

    public Mediator createMediator(OMElement elem) {

        LogMediator logMediator = new LogMediator();

        
        
        processTraceState(logMediator,elem);
        
        
        OMAttribute level = elem.getAttribute(ATT_LEVEL);
        if (level != null) {
            String levelstr = level.getAttributeValue();
            if (SIMPLE.equals(levelstr)) {
                logMediator.setLogLevel(LogMediator.SIMPLE);
            } else if (HEADERS.equals(levelstr)) {
                logMediator.setLogLevel(LogMediator.HEADERS);
            } else if (FULL.equals(levelstr)) {
                logMediator.setLogLevel(LogMediator.FULL);
            } else if (CUSTOM.equals(levelstr)) {
                logMediator.setLogLevel(LogMediator.CUSTOM);
            }
        }

        
        OMAttribute separator = elem.getAttribute(ATT_SEPERATOR);
        if (separator != null) {
            logMediator.setSeparator(separator.getAttributeValue());
        }

        logMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));

        return logMediator;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.transform.FaultMediator,24,2,0,28,87,150,2,26,18,0.873517787,595,0.727272727,0,0.361111111,0.2,0,0,23.33333333,16,2.9167,2,"

package org.apache.synapse.mediators.transform;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMDocument;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.*;
import org.apache.axis2.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;

import javax.xml.namespace.QName;
import java.net.URI;
import java.util.Iterator;


public class FaultMediator extends AbstractMediator {

    public static final String WSA_ACTION = ""Action"";
    
    public static final int SOAP11 = 1;
    
    public static final int SOAP12 = 2;
    
    private int soapVersion;

    
    
    private QName faultCodeValue = null;
    
    private AXIOMXPath faultCodeExpr = null;
    
    private String faultReasonValue = null;
    
    private AXIOMXPath faultReasonExpr = null;
    
    private URI faultNode = null;
    
    private URI faultRole = null;
    
    private String faultDetail = null;

    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Fault mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        switch (soapVersion) {
            case SOAP11:
                return makeSOAPFault(synCtx, SOAP11, traceOrDebugOn, traceOn);
            case SOAP12:
                return makeSOAPFault(synCtx, SOAP12, traceOrDebugOn, traceOn);

            default : {
                
                SOAPEnvelope envelop = synCtx.getEnvelope();
                if (envelop != null) {
                    if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(
                        envelop.getNamespace().getNamespaceURI())) {
                        soapVersion = SOAP12;
                        return makeSOAPFault(synCtx, SOAP12, traceOrDebugOn, traceOn);
                    } else {
                        soapVersion = SOAP11;
                        return makeSOAPFault(synCtx, SOAP11, traceOrDebugOn, traceOn);
                    }
                } else {
                    
                    return makeSOAPFault(synCtx, SOAP11, traceOrDebugOn, traceOn);
                }
            }
        }
    }

    
    private boolean makeSOAPFault(MessageContext synCtx, int soapVersion,
        boolean traceOrDebugOn, boolean traceOn) {

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Creating a SOAP "" + (soapVersion == SOAP11 ? ""1.1"" : ""1.2"") + "" fault"");
        }

        
        SOAPFactory factory = (
            soapVersion == SOAP11 ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory());

        
        OMDocument soapFaultDocument = factory.createOMDocument();
        SOAPEnvelope faultEnvelope = factory.getDefaultFaultEnvelope();
        soapFaultDocument.addChild(faultEnvelope);

        
        SOAPFault fault = faultEnvelope.getBody().getFault();
        if(fault == null){
            fault = factory.createSOAPFault();
        }

        
        setFaultCode(synCtx, factory, fault);
        setFaultResaon(synCtx, factory, fault);
        setFaultNode(factory, fault);
        setFaultRole(factory, fault);
        setFaultDetail(factory, fault);

        
        if (synCtx.getEnvelope() != null) {
            SOAPHeader soapHeader = synCtx.getEnvelope().getHeader();
            if (soapHeader != null) {
                for (Iterator iter = soapHeader.examineAllHeaderBlocks(); iter.hasNext();) {
                    Object o = iter.next();
                    if (o instanceof SOAPHeaderBlock) {
                        SOAPHeaderBlock header = (SOAPHeaderBlock) o;
                        faultEnvelope.getHeader().addChild(header);
                    } else if (o instanceof OMElement) {
                        faultEnvelope.getHeader().addChild((OMElement) o);
                    }
                }
            }
        }

        if (traceOrDebugOn) {
            String msg =
                ""Original SOAP Message : "" + synCtx.getEnvelope().toString() +
                ""Fault Message created : "" + faultEnvelope.toString();
            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(msg);
            }
            if (log.isTraceEnabled()) {
                log.trace(msg);
            }
        }

        
        try {
            synCtx.setEnvelope(faultEnvelope);
        } catch (AxisFault af) {
            handleException(""Error replacing current SOAP envelope with the fault envelope"", af, synCtx);
        }

        if (synCtx.getFaultTo() != null) {
            synCtx.setTo(synCtx.getFaultTo());
        } else if (synCtx.getReplyTo() != null) {
            synCtx.setTo(synCtx.getReplyTo());
        } else {
            synCtx.setTo(null);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Fault mediator"");
        }
        
        return true;
    }

    private void setFaultCode(MessageContext synCtx, SOAPFactory factory, SOAPFault fault) {

        QName fault_code = null;

        if (faultCodeValue == null && faultCodeExpr == null) {
            handleException(""A valid fault code QName value or expression is required"", synCtx);
        } else if (faultCodeValue != null) {
            fault_code = faultCodeValue;
        } else {
            fault_code = QName.valueOf(Axis2MessageContext.getStringValue(faultCodeExpr, synCtx));
        }

        SOAPFaultCode code = factory.createSOAPFaultCode();
        switch(soapVersion){
            case SOAP11:
                code.setText(fault_code);
                break;
            case SOAP12:
                SOAPFaultValue value = factory.createSOAPFaultValue(code);
                value.setText(fault_code);
                break;
        }
        fault.setCode(code);
    }

    private void setFaultResaon(MessageContext synCtx, SOAPFactory factory, SOAPFault fault) {
        String reasonString = null;

        if (faultReasonValue == null && faultReasonExpr == null) {
            handleException(""A valid fault reason value or expression is required"", synCtx);
        } else if (faultReasonValue != null) {
            reasonString = faultReasonValue;
        } else {
            reasonString = Axis2MessageContext.getStringValue(faultReasonExpr, synCtx);
        }

        SOAPFaultReason reason = factory.createSOAPFaultReason();
        switch(soapVersion){
            case SOAP11:
                reason.setText(reasonString);
                break;
            case SOAP12:
                SOAPFaultText text = factory.createSOAPFaultText();
                text.setText(reasonString);
                reason.addSOAPText(text);
                break;
        }
        fault.setReason(reason);
    }

    private void setFaultNode(SOAPFactory factory, SOAPFault fault) {
        if (faultNode != null) {
            SOAPFaultNode soapfaultNode = factory.createSOAPFaultNode();
            soapfaultNode.setNodeValue(faultNode.toString());
            fault.setNode(soapfaultNode);
        }
    }

    private void setFaultRole(SOAPFactory factory, SOAPFault fault) {
        if (faultRole != null) {
            SOAPFaultRole soapFaultRole = factory.createSOAPFaultRole();
            soapFaultRole.setRoleValue(faultRole.toString());
            fault.setRole(soapFaultRole);
        }
    }

    private void setFaultDetail(SOAPFactory factory, SOAPFault fault) {
        if (faultDetail != null) {
            SOAPFaultDetail soapFaultDetail = factory.createSOAPFaultDetail();
            soapFaultDetail.setText(faultDetail);
            fault.setDetail(soapFaultDetail);
        } else if (fault.getDetail() != null) {
            
            
            fault.getDetail().detach();
        }
    }

    public int getSoapVersion() {
        return soapVersion;
    }

    public void setSoapVersion(int soapVersion) {
        this.soapVersion = soapVersion;
    }

    public QName getFaultCodeValue() {
        return faultCodeValue;
    }

    public void setFaultCodeValue(QName faultCodeValue) {

        if (soapVersion == SOAP11) {
            this.faultCodeValue = faultCodeValue;

        } else {
            if (
                SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(faultCodeValue.getNamespaceURI()) &&

                (SOAP12Constants.FAULT_CODE_DATA_ENCODING_UNKNOWN.equals(faultCodeValue.getLocalPart()) ||
                SOAP12Constants.FAULT_CODE_MUST_UNDERSTAND.equals(faultCodeValue.getLocalPart()) ||
                SOAP12Constants.FAULT_CODE_RECEIVER.equals(faultCodeValue.getLocalPart()) ||
                SOAP12Constants.FAULT_CODE_SENDER.equals(faultCodeValue.getLocalPart()) ||
                SOAP12Constants.FAULT_CODE_VERSION_MISMATCH.equals(faultCodeValue.getLocalPart())) ){

                this.faultCodeValue = faultCodeValue;

            } else {
                String msg = ""Invalid Fault code value for a SOAP 1.2 fault : "" + faultCodeValue;
                log.error(msg);
                throw new SynapseException(msg);
            }
        }
    }

    public AXIOMXPath getFaultCodeExpr() {
        return faultCodeExpr;
    }

    public void setFaultCodeExpr(AXIOMXPath faultCodeExpr) {
        this.faultCodeExpr = faultCodeExpr;
    }

    public String getFaultReasonValue() {
        return faultReasonValue;
    }

    public void setFaultReasonValue(String faultReasonValue) {
        this.faultReasonValue = faultReasonValue;
    }

    public AXIOMXPath getFaultReasonExpr() {
        return faultReasonExpr;
    }

    public void setFaultReasonExpr(AXIOMXPath faultReasonExpr) {
        this.faultReasonExpr = faultReasonExpr;
    }

    public URI getFaultNode() {
        return faultNode;
    }

    public void setFaultNode(URI faultNode) {
        if (soapVersion == SOAP11) {
            String msg = ""A fault node does not apply to a SOAP 1.1 fault"";
            log.error(msg);
            throw new SynapseException(msg);
        }
        this.faultNode = faultNode;
    }

    public URI getFaultRole() {
        return faultRole;
    }

    public void setFaultRole(URI faultRole) {
        this.faultRole = faultRole;
    }

    public String getFaultDetail() {
        return faultDetail;
    }

    public void setFaultDetail(String faultDetail) {
        this.faultDetail = faultDetail;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.DynamicAxisOperation,3,5,0,6,6,3,2,5,3,2.0,18,0.0,0,0.99047619,0.5,0,0,5.0,1,0.3333,2,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.axis2.transport.TransportUtils;
import org.apache.axis2.i18n.Messages;
import org.apache.axis2.util.TargetResolver;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.client.OperationClient;
import org.apache.axis2.client.Options;
import org.apache.axis2.client.async.Callback;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.context.ServiceContext;
import org.apache.axis2.description.*;
import org.apache.axis2.engine.AxisEngine;
import org.apache.axis2.wsdl.WSDLConstants;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.synapse.SynapseConstants;

import javax.xml.namespace.QName;


public class DynamicAxisOperation extends OutInAxisOperation {

	public DynamicAxisOperation() {
		super();
	}

	public DynamicAxisOperation(QName name) {
		super(name);
	}

	public OperationClient createClient(ServiceContext sc, Options options) {
		return new DynamicOperationClient(this, sc, options);
	}

	class DynamicOperationClient extends OperationClient {

		DynamicOperationClient(OutInAxisOperation axisOp, ServiceContext sc, Options options) {
            super(axisOp, sc, options);
		}

		
		public void addMessageContext(MessageContext mc) throws AxisFault {
			mc.setServiceContext(sc);
			if (mc.getMessageID() == null) {
				setMessageID(mc);
			}
			axisOp.registerOperationContext(mc, oc);
		}

		
		public MessageContext getMessageContext(String messageLabel) throws AxisFault {
			return oc.getMessageContext(messageLabel);
		}

        
        public void setCallback(Callback callback) {
			this.callback = callback;
		}

		public void executeImpl(boolean block) throws AxisFault {

            
            if (completed) {
				throw new AxisFault(Messages.getMessage(""mepiscomplted""));
			}

            
            MessageContext outMsgCtx = oc.getMessageContext(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);
			if (outMsgCtx == null) {
				throw new AxisFault(Messages.getMessage(""outmsgctxnull""));
			}

            ConfigurationContext cfgCtx = sc.getConfigurationContext();

            
            outMsgCtx.setOptions(options);

			
			TargetResolver tr = cfgCtx.getAxisConfiguration().getTargetResolverChain();
            if (tr != null) {
                tr.resolveTarget(outMsgCtx);
            }

            
			TransportOutDescription transportOut = options.getTransportOut();
			if (transportOut == null) {
				EndpointReference toEPR =
                    (options.getTo() != null) ? options.getTo() : outMsgCtx.getTo();
				transportOut =
                    ClientUtils.inferOutTransport(cfgCtx.getAxisConfiguration(), toEPR, outMsgCtx);
			}
			outMsgCtx.setTransportOut(transportOut);

			if (options.getTransportIn() == null && outMsgCtx.getTransportIn() == null) {
				outMsgCtx.setTransportIn(
                    ClientUtils.inferInTransport(cfgCtx.getAxisConfiguration(), options, outMsgCtx));
			} else if (outMsgCtx.getTransportIn() == null) {
				outMsgCtx.setTransportIn(options.getTransportIn());
			}

            
            addReferenceParameters(outMsgCtx);

            if (options.isUseSeparateListener()) {

                

			} else {

                SynapseCallbackReceiver callbackReceiver =
                    (SynapseCallbackReceiver) axisOp.getMessageReceiver();
                callbackReceiver.addCallback(outMsgCtx.getMessageID(), axisCallback);
                send(outMsgCtx);
			}
		}

		private void send(MessageContext msgctx) throws AxisFault {

			
            
            
            MessageContext responseMessageContext = new MessageContext();
            responseMessageContext.setMessageID(msgctx.getMessageID());
            responseMessageContext.setProperty(SynapseConstants.RELATES_TO_FOR_POX, msgctx.getMessageID());
            responseMessageContext.setOptions(options);
			addMessageContext(responseMessageContext);

            AxisEngine engine = new AxisEngine(msgctx.getConfigurationContext());
			engine.send(msgctx);

            
            
			if (msgctx.getProperty(MessageContext.TRANSPORT_IN) != null) {

                responseMessageContext.setOperationContext(msgctx.getOperationContext());                
                responseMessageContext.setAxisMessage(
                    msgctx.getOperationContext().getAxisOperation().
                    getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE));
                responseMessageContext.setAxisService(msgctx.getAxisService());

                
                responseMessageContext.setServerSide(true);
                responseMessageContext.setProperty(MessageContext.TRANSPORT_OUT,
                    msgctx.getProperty(MessageContext.TRANSPORT_OUT));
                responseMessageContext.setProperty(org.apache.axis2.Constants.OUT_TRANSPORT_INFO,
                    msgctx.getProperty(org.apache.axis2.Constants.OUT_TRANSPORT_INFO));

                responseMessageContext.setProperty(
                    org.apache.synapse.SynapseConstants.ISRESPONSE_PROPERTY, Boolean.TRUE);
                responseMessageContext.setTransportIn(msgctx.getTransportIn());
                responseMessageContext.setTransportOut(msgctx.getTransportOut());

                
                responseMessageContext.setDoingREST(msgctx.isDoingREST());

                responseMessageContext.setProperty(MessageContext.TRANSPORT_IN,
                    msgctx.getProperty(MessageContext.TRANSPORT_IN));
                responseMessageContext.setTransportIn(msgctx.getTransportIn());
                responseMessageContext.setTransportOut(msgctx.getTransportOut());

                
                
                responseMessageContext.setSoapAction("""");

                if (responseMessageContext.getEnvelope() == null) {
                    
                    

                    SOAPEnvelope resenvelope =
                        TransportUtils.createSOAPMessage(responseMessageContext);

                    if (resenvelope != null) {
                        responseMessageContext.setEnvelope(resenvelope);
                        engine = new AxisEngine(msgctx.getConfigurationContext());
                        engine.receive(responseMessageContext);
                        if (responseMessageContext.getReplyTo() != null) {
                            sc.setTargetEPR(responseMessageContext.getReplyTo());
                        }
                    } else {
                        throw new AxisFault(Messages.getMessage(""blockingInvocationExpectsResponse""));
                    }
                }
            }
        }
	}
}
"
synapse,1.1,org.apache.synapse.config.xml.TargetSerializer,3,1,0,14,19,1,2,12,2,0.5,93,1.0,0,0.0,0.5,0,0,29.0,7,2.3333,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
import org.apache.synapse.mediators.eip.Target;


public class TargetSerializer {

    
    private static final OMFactory fac = OMAbstractFactory.getOMFactory();

    
    private static final OMNamespace synNS
            = fac.createOMNamespace(XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");

    
    private static final OMNamespace nullNS = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, """");

    
    public static OMElement serializeTarget(Target target) {

        OMElement targetElem = fac.createOMElement(""target"", synNS);
        if (target.getToAddress() != null) {
            targetElem.addAttribute(""to"", target.getToAddress(), nullNS);
        }

        if (target.getSoapAction() != null) {
            targetElem.addAttribute(""soapAction"", target.getSoapAction(), nullNS);
        }

        if (target.getSequenceRef() != null) {
            targetElem.addAttribute(""sequence"", target.getSequenceRef(), nullNS);
        }

        if (target.getEndpointRef() != null) {
            targetElem.addAttribute(""endpoint"", target.getEndpointRef(), nullNS);
        }

        if (target.getSequence() != null) {
            SequenceMediatorSerializer serializer = new SequenceMediatorSerializer();
            serializer.serializeAnonymousSequence(targetElem, target.getSequence());
        }

        if (target.getEndpoint() != null) {
            targetElem.addChild(EndpointAbstractSerializer.getEndpointSerializer(
                    target.getEndpoint()).serializeEndpoint(target.getEndpoint()));
        }

        return targetElem;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.TargetFactory,4,1,0,13,26,2,2,11,2,0.5,147,1.0,0,0.0,0.333333333,0,0,35.25,12,3.5,1,"

package org.apache.synapse.config.xml;

import org.apache.synapse.mediators.eip.Target;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.xml.namespace.QName;


public class TargetFactory {

    
    private static final Log log = LogFactory.getLog(TargetFactory.class);

    
    private static final QName TARGET_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""target"");

    
    public static Target createTarget(OMElement elem) {

        if (!TARGET_Q.equals(elem.getQName())) {
            handleException(""Element does not match with the target QName"");
        }

        Target target = new Target();
        OMAttribute toAttr = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""to""));
        if (toAttr != null && toAttr.getAttributeValue() != null) {
            target.setToAddress(toAttr.getAttributeValue());
        }

        OMAttribute soapAction = elem.getAttribute(
                new QName(XMLConfigConstants.NULL_NAMESPACE, ""soapAction""));
        if (soapAction != null && soapAction.getAttributeValue() != null) {
            target.setSoapAction(soapAction.getAttributeValue());
        }

        OMAttribute sequenceAttr = elem.getAttribute(
                new QName(XMLConfigConstants.NULL_NAMESPACE, ""sequence""));
        if (sequenceAttr != null && sequenceAttr.getAttributeValue() != null) {
            target.setSequenceRef(sequenceAttr.getAttributeValue());
        }

        OMAttribute endpointAttr = elem.getAttribute(
                new QName(XMLConfigConstants.NULL_NAMESPACE, ""endpoint""));
        if (endpointAttr != null && endpointAttr.getAttributeValue() != null) {
            target.setEndpointRef(endpointAttr.getAttributeValue());
        }

        OMElement sequence = elem.getFirstChildWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""sequence""));
        if (sequence != null) {
            SequenceMediatorFactory fac = new SequenceMediatorFactory();
            target.setSequence(fac.createAnonymousSequence(sequence));
        }

        OMElement endpoint = elem.getFirstChildWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""endpoint""));
        if (endpoint != null) {
            target.setEndpoint(EndpointAbstractFactory.
                    getEndpointFactroy(endpoint).createEndpoint(endpoint, true));
        }

        return target;
    }

    
    private static void handleException (String message) {
        if (log.isDebugEnabled()) {
            log.debug(message);
        }
        throw new SynapseException(message);
    }
}
"
synapse,1.1,org.apache.synapse.SynapseException,3,4,0,82,6,3,82,0,3,1.5,17,1.0,0,1.0,0.777777778,0,0,4.333333333,0,0.0,0,"

package org.apache.synapse;


public class SynapseException extends RuntimeException {

    private static final long serialVersionUID = -7244032125641596311L;

    public SynapseException(String string) {
        super(string);
    }

    public SynapseException(String msg, Throwable e) {
        super(msg, e);
    }

    public SynapseException(Throwable t) {
        super(t);
    }

}
"
synapse,1.1,org.apache.synapse.metrics.MetricsAggregatorModule,6,1,0,11,13,15,0,11,6,2.0,35,0.0,0,0.0,0.361111111,0,0,4.833333333,1,0.8333,0,"

package org.apache.synapse.metrics;

import org.apache.axis2.AxisFault;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.description.AxisDescription;
import org.apache.axis2.description.AxisModule;
import org.apache.axis2.description.Parameter;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.axis2.modules.Module;
import org.apache.neethi.Assertion;
import org.apache.neethi.Policy;


public class MetricsAggregatorModule implements Module {
    
    public void init(ConfigurationContext configContext, AxisModule module) throws AxisFault {
        AxisConfiguration axiConfiguration = configContext.getAxisConfiguration();

        Counter globalRequestCounter = new Counter();
        Parameter globalRequestCounterParameter = new Parameter();
        globalRequestCounterParameter.setName(MetricsConstants.GLOBAL_REQUEST_COUNTER);
        globalRequestCounterParameter.setValue(globalRequestCounter);
        axiConfiguration.addParameter(globalRequestCounterParameter);

    }

    public void engageNotify(AxisDescription axisDescription) throws AxisFault {}

    public boolean canSupportAssertion(Assertion assertion) {
        return false;
    }

    public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {
        
    }

    
    public void shutdown(ConfigurationContext configurationContext) throws AxisFault {}
}
"
synapse,1.1,org.apache.synapse.startup.quartz.SimpleQuartzSerializer,3,1,0,11,28,1,0,11,2,0.625,148,1.0,0,0.0,0.666666667,0,0,47.0,8,2.6667,0,"

package org.apache.synapse.startup.quartz;

import java.util.List;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.synapse.Startup;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.StartupSerializer;
import org.apache.synapse.config.xml.XMLConfigConstants;

import javax.xml.namespace.QName;

public class SimpleQuartzSerializer implements StartupSerializer {

    protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
    protected static final OMNamespace synNS
        = fac.createOMNamespace(XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");
    protected static final OMNamespace nullNS
        = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, """");
    protected static final QName PROP_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""property"", ""syn"");

    public OMElement serializeStartup(OMElement parent, Startup s) {

        if (!(s instanceof SimpleQuartz)) {
            throw new SynapseException(""called TaskSerializer on some other "" +
                    ""kind of startup"" + s.getClass().getName());
        }

        SimpleQuartz sq = (SimpleQuartz) s;

        OMElement task = fac.createOMElement(""task"", synNS, parent);
        task.addAttribute(""name"", sq.getName(), nullNS);
        task.addAttribute(""class"", sq.getJobClass(), nullNS);

        List pinnedServers = sq.getPinnedServers();
        if (pinnedServers != null && !pinnedServers.isEmpty()) {
          String pinnedServersStr = """" + pinnedServers.get(0);
          for (int i = 1; i < pinnedServers.size(); i++) {
            pinnedServersStr = pinnedServersStr + "" "" + pinnedServers.get(i);
          }
          task.addAttribute(fac.createOMAttribute(""pinnedServers"", nullNS, pinnedServersStr));
        }
        
        OMElement el = fac.createOMElement(""trigger"", synNS, task);
        if (sq.getInterval() == 1 && sq.getCount() == 1) {
            el.addAttribute(""once"", ""true"", nullNS);
        } else if (sq.getCron() != null) {
            el.addAttribute(""cron"", sq.getCron(), nullNS);
        } else {
            if (sq.getCount() != -1) {
                el.addAttribute(""count"", Integer.toString(sq.getCount()), nullNS);
            }

            if (sq.getInterval() != 0) {
                long interval = sq.getInterval() / 1000;
                el.addAttribute(""interval"", Long.toString(interval), nullNS);
            }
        }
        
        for (Object o : sq.getProperties()) {
            OMElement prop = (OMElement) o;
            task.addChild(prop.cloneOMElement());
        }

        return task;
    }

}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseMustUnderstandHandler,2,2,0,8,14,1,0,8,2,2.0,46,0.0,0,0.875,0.75,0,0,22.0,1,0.5,0,"

package org.apache.synapse.core.axis2;

import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axis2.AxisFault;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.handlers.AbstractHandler;

import java.util.ArrayList;
import java.util.Iterator;


public class SynapseMustUnderstandHandler extends AbstractHandler {
    
    public InvocationResponse invoke(MessageContext messageContext) throws AxisFault {

        SOAPEnvelope envelope = messageContext.getEnvelope();

        if (envelope.getHeader() != null) {
            Iterator headerBlocks = envelope.getHeader().getHeadersToProcess(null);
            ArrayList markedHeaderBlocks = new ArrayList();

            while (headerBlocks.hasNext()) {
                SOAPHeaderBlock headerBlock = (SOAPHeaderBlock) headerBlocks.next();

                
                
                if (!headerBlock.isProcessed() && headerBlock.getMustUnderstand()) {
                    markedHeaderBlocks.add(headerBlock);
                    headerBlock.setProcessed();
                }
            }

            
            messageContext.setProperty(""headersMarkedAsProcessedBySynapse"", markedHeaderBlocks);
        }

        return InvocationResponse.CONTINUE;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.MediatorSerializerFinder,7,1,0,9,29,0,3,6,3,0.541666667,265,1.0,1,0.0,0.333333333,0,0,36.28571429,3,1.1429,0,"

package org.apache.synapse.config.xml;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import sun.misc.Service;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class MediatorSerializerFinder {

    private static final Log log = LogFactory.getLog(MediatorSerializerFinder.class);

    private static final Class[] mediatorSerializers = {
        SequenceMediatorSerializer.class,
        LogMediatorSerializer.class,
        SendMediatorSerializer.class,
        FilterMediatorSerializer.class,
        SynapseMediatorSerializer.class,
        DropMediatorSerializer.class,
        HeaderMediatorSerializer.class,
        FaultMediatorSerializer.class,
        PropertyMediatorSerializer.class,
        SwitchMediatorSerializer.class,
        InMediatorSerializer.class,
        OutMediatorSerializer.class,
        RMSequenceMediatorSerializer.class,     
        ClassMediatorSerializer.class,
        ValidateMediatorSerializer.class,
        XSLTMediatorSerializer.class,
        POJOCommandMediatorSerializer.class,
        CloneMediatorSerializer.class,
        IterateMediatorSerializer.class,
        AggregateMediatorSerializer.class,
        DBLookupMediatorSerializer.class,
        DBReportMediatorSerializer.class,
        CacheMediatorSerializer.class,
        CalloutMediatorSerializer.class
    };

    private static MediatorSerializerFinder instance = null;

    
    private static Map serializerMap = new HashMap();

    public static synchronized MediatorSerializerFinder getInstance() {
        if (instance == null) {
            instance = new MediatorSerializerFinder();
        }
        return instance;
    }

    public MediatorSerializer getSerializer(Mediator mediator) {
        return (MediatorSerializer) serializerMap.get(mediator.getClass().getName());
    }

    private MediatorSerializerFinder() {

        serializerMap = new HashMap();

        for (int i = 0; i < mediatorSerializers.length; i++) {
            Class c = mediatorSerializers[i];
            try {
                MediatorSerializer ser = (MediatorSerializer) c.newInstance();
                serializerMap.put(ser.getMediatorClassName(), ser);
            } catch (Exception e) {
                throw new SynapseException(""Error instantiating "" + c.getName(), e);
            }
        }
        
        registerExtensions();
    }

    
    private void registerExtensions() {
        if (log.isDebugEnabled()) {
            log.debug(""Registering mediator extensions found in the classpath : "" + System.getProperty(""java.class.path""));
        }
        
        Iterator it = Service.providers(MediatorSerializer.class);
        while (it.hasNext()) {
            MediatorSerializer ms = (MediatorSerializer) it.next();
            String name = ms.getMediatorClassName();
            try {
                serializerMap.put(name, ms.getClass().newInstance());
            } catch (InstantiationException e) {
                handleException(""Error instantiating mediator serializer : "" + ms);
            } catch (IllegalAccessException e) {
                handleException(""Error instantiating mediator serializer : "" + ms);
            }
            if (log.isDebugEnabled()) {
                log.debug(""Added MediatorSerializer "" + ms.getClass().getName() + "" to handle "" + name);
            }
        }
    }

    
    public Map getSerializerMap() {
        return serializerMap;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.mediators.builtin.DropMediator,2,2,0,11,16,1,5,6,2,2.0,50,0.0,0,0.928571429,0.75,0,0,24.0,5,2.5,0,"

package org.apache.synapse.mediators.builtin;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.statistics.StatisticsUtils;
import org.apache.synapse.mediators.AbstractMediator;


public class DropMediator extends AbstractMediator {

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Drop mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        
        
        StatisticsUtils.processProxyServiceStatistics(synCtx);
        
        StatisticsUtils.processAllSequenceStatistics(synCtx);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Drop mediator"");
        }
        synCtx.setTo(null);
        return false;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.SendMediatorSerializer,3,2,0,10,16,3,0,10,3,2.0,56,0.0,0,0.75,0.555555556,0,0,17.66666667,4,1.6667,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.config.xml.endpoints.EndpointSerializer;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
import org.apache.synapse.mediators.builtin.SendMediator;
import org.apache.synapse.endpoints.Endpoint;


public class SendMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof SendMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        SendMediator mediator = (SendMediator) m;
        OMElement send = fac.createOMElement(""send"", synNS);
        saveTracingState(send, mediator);

        Endpoint activeEndpoint = mediator.getEndpoint();
        if (activeEndpoint != null) {
            EndpointSerializer serializer = EndpointAbstractSerializer.
                    getEndpointSerializer(activeEndpoint);

            OMElement endpointElement = serializer.serializeEndpoint(activeEndpoint);
            send.addChild(endpointElement);
        }

        if (parent != null) {
            parent.addChild(send);
        }
        return send;
    }

    public String getMediatorClassName() {
        return SendMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.mediators.base.SynapseMediator,2,3,0,10,23,1,2,8,2,2.0,114,0.0,0,0.956521739,0.75,1,2,56.0,11,5.5,0,"

package org.apache.synapse.mediators.base;

import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.statistics.StatisticsStack;
import org.apache.synapse.statistics.StatisticsUtils;
import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
import org.apache.synapse.mediators.AbstractListMediator;


public class SynapseMediator extends AbstractListMediator {

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Mediation using '"" + SynapseConstants.MAIN_SEQUENCE_KEY +
                ""' sequence Message is a : "" + (synCtx.isResponse() ? ""response"" : ""request""));

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        
        if (synCtx.isResponse()) {
            StatisticsUtils.processAllSequenceStatistics(synCtx);
        }

        
        StatisticsStack sequenceStack = (StatisticsStack) synCtx.getProperty(
                SynapseConstants.SEQUENCE_STATS);
        if (sequenceStack == null) {
            sequenceStack = new SequenceStatisticsStack();
            synCtx.setProperty(SynapseConstants.SEQUENCE_STATS,sequenceStack);
        }
        String seqName = ""MainSequence"";
        boolean isFault = synCtx.getEnvelope().getBody().hasFault();
        sequenceStack.put(seqName,System.currentTimeMillis(),!synCtx.isResponse(),true,isFault);

        boolean result = super.mediate(synCtx);

        if (traceOrDebugOn) {
            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
            traceOrDebug(traceOn, ""End : Mediation using '"" +
                SynapseConstants.MAIN_SEQUENCE_KEY + ""' sequence"");
        }
        return result;        
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AnonymousListMediator,2,3,0,7,4,1,5,2,2,2.0,9,0.0,0,0.956521739,0.75,0,0,3.5,1,0.5,0,"
package org.apache.synapse.config.xml;

import org.apache.synapse.mediators.AbstractListMediator;
import org.apache.synapse.MessageContext;



public class AnonymousListMediator extends AbstractListMediator {

     public boolean mediate(MessageContext synCtx) {
         return super.mediate(synCtx);
     }
}
"
synapse,1.1,org.apache.synapse.config.xml.POJOCommandMediatorSerializer,3,2,0,9,27,3,0,9,3,2.0,152,0.0,0,0.75,0.555555556,0,0,49.66666667,7,2.6667,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.ext.POJOCommandMediator;

import java.util.Iterator;


public class POJOCommandMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {
        
        if (!(m instanceof POJOCommandMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }
        
        POJOCommandMediator mediator = (POJOCommandMediator) m;
        
        OMElement pojoCommand = fac.createOMElement(""pojoCommand"", synNS);
        saveTracingState(pojoCommand, mediator);

        if (mediator.getCommand() != null && mediator.getCommand().getClass().getName() != null) {
            pojoCommand.addAttribute(fac.createOMAttribute(
                ""name"", nullNS, mediator.getCommand().getName()));
        } else {
            handleException(""Invalid POJO Command mediator. The command class name is required"");
        }

        for (Iterator itr = mediator.
            getStaticSetterProperties().keySet().iterator(); itr.hasNext(); ) {

            String propName = (String) itr.next();
            Object value = mediator.getStaticSetterProperties().get(propName);
            OMElement prop = fac.createOMElement(PROP_Q);
            prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));

            if (value instanceof String) {
                prop.addAttribute(fac.createOMAttribute(""value"", nullNS, (String) value));
            } else if (value instanceof OMElement) {
                prop.addChild((OMElement) value);
            } else {
                handleException(""Unable to serialize the command "" +
                    ""mediator property with the naem "" + propName + "" : Unknown type"");
            }

            if (mediator.getContextGetterProperties().containsKey(propName)) {
                prop.addAttribute(fac.createOMAttribute(""context-name"", nullNS,
                    mediator.getContextGetterProperties().get(propName)));
            } else if (mediator.getMessageGetterProperties().containsKey(propName)) {
                AXIOMXPath xpath = mediator.getMessageGetterProperties().get(propName);
                prop.addAttribute(fac.createOMAttribute(""expression"", nullNS, xpath.toString()));
                serializeNamespaces(prop, xpath);
            }
            pojoCommand.addChild(prop);
        }

        for (Iterator itr = mediator.
            getMessageSetterProperties().keySet().iterator(); itr.hasNext(); ) {

            String propName = (String) itr.next();
            AXIOMXPath exprn = mediator.getMessageSetterProperties().get(propName);
            OMElement prop = fac.createOMElement(PROP_Q);
            prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
            prop.addAttribute(fac.createOMAttribute(""expression"", nullNS, exprn.toString()));
            serializeNamespaces(prop, exprn);

            if (mediator.getMessageGetterProperties().containsKey(propName)) {
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""ReadAndUpdateMessage""));
            } else if (mediator.getContextGetterProperties().containsKey(propName)) {
                prop.addAttribute(fac.createOMAttribute(""context-name"", nullNS,
                    mediator.getContextGetterProperties().get(propName)));
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""ReadMessage""));                
            } else {
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""ReadMessage""));                                
            }
            pojoCommand.addChild(prop);
        }

        for (Iterator itr = mediator.
            getContextSetterProperties().keySet().iterator(); itr.hasNext(); ) {

            String propName = (String) itr.next();
            OMElement prop = fac.createOMElement(PROP_Q);
            prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
            prop.addAttribute(fac.createOMAttribute(""context-name"", nullNS,
                mediator.getContextSetterProperties().get(propName)));

            if (mediator.getContextGetterProperties().containsKey(propName)) {
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""ReadAndUpdateContext""));
            } else if (mediator.getMessageGetterProperties().containsKey(propName)) {
                AXIOMXPath exprn = mediator.getMessageGetterProperties().get(propName);
                prop.addAttribute(fac.createOMAttribute(""expression"", nullNS, exprn.toString()));
                serializeNamespaces(prop, exprn);
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""ReadContext""));
            } else {
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""ReadContext""));                
            }
            pojoCommand.addChild(prop);
        }

        for (Iterator itr = mediator.
            getContextGetterProperties().keySet().iterator(); itr.hasNext(); ) {

            String propName = (String) itr.next();
            if (!isSerialized(propName, mediator)) {
                String value = mediator.getContextGetterProperties().get(propName);
                OMElement prop = fac.createOMElement(PROP_Q);
                prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
                prop.addAttribute(fac.createOMAttribute(""context-name"", nullNS, value));
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""UpdateContext""));
                pojoCommand.addChild(prop);
            }
        }

        for (Iterator itr = mediator.
            getMessageGetterProperties().keySet().iterator(); itr.hasNext(); ) {

            String propName = (String) itr.next();
            if (!isSerialized(propName, mediator)) {
                AXIOMXPath exprn = mediator.getMessageGetterProperties().get(propName);
                OMElement prop = fac.createOMElement(PROP_Q);
                prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
                prop.addAttribute(fac.createOMAttribute(""expression"", nullNS,
                    exprn.toString()));
                serializeNamespaces(prop, exprn);
                prop.addAttribute(fac.createOMAttribute(""action"", nullNS, ""UpdateMessage""));
                pojoCommand.addChild(prop);
            }
        }

        if (parent != null) {
            parent.addChild(pojoCommand);
        }
        return pojoCommand;
    }

    private boolean isSerialized(String propName, POJOCommandMediator m) {
        return m.getContextSetterProperties().containsKey(propName) ||
            m.getStaticSetterProperties().containsKey(propName) ||
            m.getMessageSetterProperties().containsKey(propName);
    }

    public String getMediatorClassName() {
        return POJOCommandMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.HeaderMediatorFactory,4,2,0,11,34,2,0,11,3,0.666666667,191,1.0,0,0.6,0.666666667,0,0,46.25,13,3.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.transform.HeaderMediator;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;


public class HeaderMediatorFactory extends AbstractMediatorFactory  {

    private static final QName HEADER_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""header"");
    private static final QName ATT_ACTION = new QName(""action"");

    public Mediator createMediator(OMElement elem) {

        HeaderMediator headerMediator = new HeaderMediator();
        OMAttribute name   = elem.getAttribute(ATT_NAME);
        OMAttribute value  = elem.getAttribute(ATT_VALUE);
        OMAttribute exprn  = elem.getAttribute(ATT_EXPRN);
        OMAttribute action = elem.getAttribute(ATT_ACTION);

        if (name == null || name.getAttributeValue() == null) {
            String msg = ""A valid name attribute is required for the header mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        } else {
            String nameAtt = name.getAttributeValue();
            int colonPos = nameAtt.indexOf("":"");
            if (colonPos != -1) {
                
                String prefix = nameAtt.substring(0, colonPos);
                String namespaceURI = OMElementUtils.getNameSpaceWithPrefix(prefix, elem);
                if (namespaceURI == null) {
                    String msg = ""Invalid namespace prefix '"" + prefix + ""' in name attribute"";
                    log.error(msg);
                    throw new SynapseException(msg);
                } else {
                	headerMediator.setQName(new QName(namespaceURI, nameAtt.substring(colonPos+1), prefix));
                }
            } else {
                
                headerMediator.setQName(new QName(nameAtt));
            }
        }

        
        
        processTraceState(headerMediator,elem);

        
        
        if (action != null && ""remove"".equals(action.getAttributeValue())) {
            headerMediator.setAction(HeaderMediator.ACTION_REMOVE);
        }

        if (headerMediator.getAction() == HeaderMediator.ACTION_SET &&
            value == null && exprn == null) {
            String msg = ""A 'value' or 'expression' attribute is required for a [set] header mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        }

        if (value != null && value.getAttributeValue() != null) {
            headerMediator.setValue(value.getAttributeValue());

        } else if (exprn != null && exprn.getAttributeValue() != null) {
            try {
                AXIOMXPath xp = new AXIOMXPath(exprn.getAttributeValue());
                OMElementUtils.addNameSpaces(xp, elem, log);
                headerMediator.setExpression(xp);
            } catch (JaxenException je) {
                String msg = ""Invalid XPath expression : "" + exprn.getAttributeValue();
                log.error(msg);
                throw new SynapseException(msg, je);
            }
        }

        return headerMediator;
    }

    public QName getTagQName() {
        return HEADER_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.CacheMediatorSerializer,3,2,0,11,29,3,0,11,3,2.0,192,0.0,0,0.75,0.555555556,0,0,63.0,11,4.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.CacheMediator;


public class CacheMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof CacheMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }
        CacheMediator mediator = (CacheMediator) m;
        OMElement cache = fac.createOMElement(""cache"", synNS);
        saveTracingState(cache, mediator);

        if (mediator.getId() != null) {
            cache.addAttribute(fac.createOMAttribute(""id"", nullNS, mediator.getId()));
        }

        if (mediator.getScope() != null) {
            cache.addAttribute(fac.createOMAttribute(""scope"", nullNS, mediator.getScope()));
        }

        if (mediator.isCollector()) {
            cache.addAttribute(fac.createOMAttribute(""collector"", nullNS, ""true""));
        } else {

            cache.addAttribute(fac.createOMAttribute(""collector"", nullNS, ""false""));

            if (mediator.getDigestGenerator() != null) {
                cache.addAttribute(fac.createOMAttribute(""hashGenerator"", nullNS,
                    mediator.getDigestGenerator().getClass().getName()));
            }

            if (mediator.getTimeout() != 0) {
                cache.addAttribute(
                    fac.createOMAttribute(""timeout"", nullNS, Long.toString(mediator.getTimeout())));
            }

            if (mediator.getMaxMessageSize() != 0) {
                cache.addAttribute(
                    fac.createOMAttribute(""maxMessageSize"", nullNS,
                        Integer.toString(mediator.getMaxMessageSize())));
            }

            if (mediator.getOnCacheHitRef() != null) {
                OMElement onCacheHit = fac.createOMElement(""onCacheHit"", synNS);
                onCacheHit.addAttribute(
                    fac.createOMAttribute(""sequence"", nullNS, mediator.getOnCacheHitRef()));
                cache.addChild(onCacheHit);
            } else if (mediator.getOnCacheHitSequence() != null) {
                OMElement onCacheHit = fac.createOMElement(""onCacheHit"", synNS);
                new SequenceMediatorSerializer()
                    .serializeChildren(onCacheHit, mediator.getOnCacheHitSequence().getList());
                cache.addChild(onCacheHit);
            }

            if (mediator.getInMemoryCacheSize() != 0) {
                OMElement implElem = fac.createOMElement(""implementation"", synNS);
                implElem.addAttribute(fac.createOMAttribute(""type"", nullNS, ""memory""));
                implElem.addAttribute(fac.createOMAttribute(""maxSize"", nullNS,
                    Integer.toString(mediator.getInMemoryCacheSize())));
                cache.addChild(implElem);
            }

            if (mediator.getDiskCacheSize() != 0) {
                OMElement implElem = fac.createOMElement(""implementation"", synNS);
                implElem.addAttribute(fac.createOMAttribute(""type"", nullNS, ""disk""));
                implElem.addAttribute(fac.createOMAttribute(""maxSize"", nullNS,
                    Integer.toString(mediator.getDiskCacheSize())));
                cache.addChild(implElem);
            }
        }

        if (parent != null) {
            parent.addChild(cache);
        }

        return cache;
    }

    public String getMediatorClassName() {
        return CacheMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseInitializationModule,8,1,0,26,63,20,0,26,6,0.785714286,281,1.0,1,0.0,0.333333333,0,0,33.875,3,1.0,1,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.description.*;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.axis2.modules.Module;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.MDC;
import org.apache.neethi.Assertion;
import org.apache.neethi.Policy;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.config.SynapseConfigurationBuilder;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;


public class SynapseInitializationModule implements Module {

    private static final Log log = LogFactory.getLog(SynapseInitializationModule.class);
    private SynapseConfiguration synCfg;

    public void init(ConfigurationContext configurationContext,
        AxisModule axisModule) throws AxisFault {

        log.info(""Initializing Synapse at : "" + new Date());
        try {
            InetAddress addr = InetAddress.getLocalHost();
            if (addr != null) {
                
                String ipAddr = addr.getHostAddress();
                if (ipAddr != null) {
                    MDC.put(""ip"", ipAddr);
                }

                
                String hostname = addr.getHostName();
                if (hostname == null) {
                    hostname = ipAddr;
                }
                MDC.put(""host"", hostname);
            }
        } catch (UnknownHostException e) {
            log.warn(""Unable to determine hostname or IP address of the server for logging"", e);
        }

        
        log.info(""Loading mediator extensions..."");
        configurationContext.getAxisConfiguration().getConfigurator().loadServices();

        
        log.info(""Initializing the Synapse configuration ..."");
        synCfg = getConfiguration(configurationContext);

        log.info(""Deploying the Synapse service.."");
        
        AxisConfiguration axisCfg = configurationContext.getAxisConfiguration();
        AxisService synapseService = new AxisService(SynapseConstants.SYNAPSE_SERVICE_NAME);
        AxisOperation mediateOperation = new InOutAxisOperation(SynapseConstants.SYNAPSE_OPERATION_NAME);
        mediateOperation.setMessageReceiver(new SynapseMessageReceiver());
        synapseService.addOperation(mediateOperation);
        List transports = new ArrayList();
        transports.add(Constants.TRANSPORT_HTTP);
        transports.add(Constants.TRANSPORT_HTTPS);
        synapseService.setExposedTransports(transports);
        axisCfg.addService(synapseService);

        log.info(""Initializing Sandesha 2..."");
        AxisModule sandeshaAxisModule = configurationContext.getAxisConfiguration().
            getModule(SynapseConstants.SANDESHA2_MODULE_NAME);
        if (sandeshaAxisModule != null) {
            Module sandesha2 = sandeshaAxisModule.getModule();
            sandesha2.init(configurationContext, sandeshaAxisModule);
        }

        
        
        
        String thisServerName = System.getProperty(SynapseConstants.SYNAPSE_SERVER_NAME);
        if(thisServerName == null || thisServerName.equals("""")) {
          try {
            InetAddress addr = InetAddress.getLocalHost();
            thisServerName = addr.getHostName();

          } catch (UnknownHostException e) {
            log.warn(""Could not get local host name"", e);
          }
          
          if(thisServerName == null || thisServerName.equals("""")) {
            thisServerName = ""localhost"";
          }
        }
        log.info(""Synapse server name : "" + thisServerName);
        
        log.info(""Deploying Proxy services..."");
        Iterator iter = synCfg.getProxyServices().iterator();
        while (iter.hasNext()) {
            ProxyService proxy = (ProxyService) iter.next();

            
            
            
            List pinnedServers = proxy.getPinnedServers();
            if(pinnedServers != null && !pinnedServers.isEmpty()) {
              if(!pinnedServers.contains(thisServerName)) {
                log.info(""Server name not in pinned servers list. Not deploying Proxy service : "" + proxy.getName());
                continue;
              }
            }
            
            proxy.buildAxisService(synCfg, axisCfg);
            log.info(""Deployed Proxy service : "" + proxy.getName());
            if (!proxy.isStartOnLoad()) {
                proxy.stop(synCfg);
            }
        }
        
        log.info(""Synapse initialized successfully...!"");
    }

    private static SynapseConfiguration getConfiguration(ConfigurationContext cfgCtx) {

        cfgCtx.setProperty(""addressing.validateAction"", Boolean.FALSE);
        AxisConfiguration axisConfiguration = cfgCtx.getAxisConfiguration();
        SynapseConfiguration synapseConfiguration;

        String config = System.getProperty(SynapseConstants.SYNAPSE_XML);

        if (config != null) {
            if (log.isDebugEnabled()) {
                log.debug(""System property '"" + SynapseConstants.SYNAPSE_XML +
                        ""' specifies Synapse configuration as "" + config);
            }
            synapseConfiguration = SynapseConfigurationBuilder.getConfiguration(config);
        } else {
            log.warn(""System property '"" + SynapseConstants.SYNAPSE_XML +
                ""' is not specified. Using default configuration.."");
            synapseConfiguration = SynapseConfigurationBuilder.getDefaultConfiguration();
        }

        
        synapseConfiguration.setAxisConfiguration(cfgCtx.getAxisConfiguration());

        
        Parameter synapseCtxParam = new Parameter(SynapseConstants.SYNAPSE_CONFIG, null);
        synapseCtxParam.setValue(synapseConfiguration);
        MessageContextCreatorForAxis2.setSynConfig(synapseConfiguration);

        Parameter synapseEnvParam = new Parameter(SynapseConstants.SYNAPSE_ENV, null);
        Axis2SynapseEnvironment synEnv = new Axis2SynapseEnvironment(cfgCtx, synapseConfiguration);
        synapseEnvParam.setValue(synEnv);
        MessageContextCreatorForAxis2.setSynEnv(synEnv);

        try {
            axisConfiguration.addParameter(synapseCtxParam);
            axisConfiguration.addParameter(synapseEnvParam);

        } catch (AxisFault e) {
            String msg =
                ""Could not set parameters '"" + SynapseConstants.SYNAPSE_CONFIG +
                    ""' and/or '"" + SynapseConstants.SYNAPSE_ENV +
                    ""'to the Axis2 configuration : "" + e.getMessage();
            log.fatal(msg, e);
            throw new SynapseException(msg, e);
        }
        synapseConfiguration.init(synEnv);
        
        return synapseConfiguration;
    }

    public void engageNotify(AxisDescription axisDescription) throws AxisFault {
        
    }

    public boolean canSupportAssertion(Assertion assertion) {
        return false;
    }

    public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {
        
    }

    public void shutdown(ConfigurationContext configurationContext)
        throws AxisFault {
        
    	synCfg.destroy();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.MediatorFactory,2,1,0,5,2,1,3,2,2,2.0,2,0.0,0,0.0,0.75,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;

import javax.xml.namespace.QName;


public interface MediatorFactory {
    
    public Mediator createMediator(OMElement elem);

    
    public QName getTagQName();
}
"
synapse,1.1,org.apache.synapse.mediators.GetPropertyFunction,7,1,0,11,38,0,1,11,5,0.625,359,0.75,1,0.0,0.270833333,0,0,49.71428571,31,5.2857,0,"

package org.apache.synapse.mediators;

import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.description.AxisOperation;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.config.xml.XMLConfigConstants;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.jaxen.Context;
import org.jaxen.Function;
import org.jaxen.FunctionCallException;
import org.jaxen.Navigator;
import org.jaxen.function.StringFunction;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.text.Format;
import java.text.SimpleDateFormat;


public class GetPropertyFunction implements Function {

    private static final Log log = LogFactory.getLog(GetPropertyFunction.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    public static final String NULL_STRING = """";

    
    private MessageContext synCtx = null;

    public MessageContext getSynCtx() {
        return synCtx;
    }

    public void setSynCtx(MessageContext synCtx) {
        this.synCtx = synCtx;
    }

    
    public Object call(Context context, List args) throws FunctionCallException {

        boolean traceOn = synCtx.getTracingState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        if (args == null || args.size() == 0) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Property key value for lookup is not specified"");
            }
            return NULL_STRING;

        } else {
            int size = args.size();
            if (size == 1) {
                return evaluate(
                    XMLConfigConstants.SCOPE_DEFAULT, args.get(0), null, context.getNavigator());

            } else if (size == 2) {
                String argOne = StringFunction.evaluate(args.get(0), context.getNavigator());
                if (argOne != null) {
                    if (!XMLConfigConstants.SCOPE_AXIS2.equals(argOne) &&
                        !XMLConfigConstants.SCOPE_DEFAULT.equals(argOne) &&
                        !XMLConfigConstants.SCOPE_TRANSPORT.equals(argOne)) {
                        return evaluate(XMLConfigConstants.SCOPE_DEFAULT, args.get(0),
                            args.get(1), context.getNavigator());
                    } else {
                        return evaluate(args.get(0), args.get(1), null, context.getNavigator());
                    }
                }
            } else if (size == 3) {
                return evaluate(args.get(0), args.get(1), args.get(2), context.getNavigator());
            } else {

                String msg = ""Invalid arguments for synapse:get-property(prop-name) 0r  "" +
                    ""synapse:get-property(scope, prop-name) XPath function "";
                if (traceOn) {
                    trace.error(msg);
                }
                log.error(msg);
                throw new FunctionCallException(msg);
            }
        }
        return NULL_STRING;
    }

    
    public Object evaluate(Object scopeObject, Object keyObject, Object dateformat,Navigator navigator) {

        boolean traceOn = synCtx.getTracingState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        if (synCtx == null) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Synapse message context has not been set for the "" +
                    ""XPath extension function 'synapse:get-property(prop-name)'"");
            }
            return null;
        }

        String scope = StringFunction.evaluate(scopeObject, navigator);
        String key = StringFunction.evaluate(keyObject, navigator);

        if (key == null || """".equals(key)) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn,
                    ""property-name should be provided when executing synapse:get-property"" +
                    ""(scope,prop-name) or synapse:get-property(prop-name) Xpath function"");
            }
            return NULL_STRING;
        }

        
        

        if (SynapseConstants.SYSTEM_DATE.equals(key)) {
            if (dateformat != null) {
                Format formatter = new SimpleDateFormat(dateformat.toString());
                return formatter.format(new java.util.Date());
            } else {
                Format formatter = new SimpleDateFormat();
                return formatter.format(new java.util.Date());
            }
        }

        
        if (SynapseConstants.SYSTEM_TIME.equals(key)) {

            return Long.toString(System.currentTimeMillis());
        }

        if (XMLConfigConstants.SCOPE_DEFAULT.equals(scope)) {

            if (SynapseConstants.HEADER_TO.equals(key)) {
                EndpointReference toEPR = synCtx.getTo();
                if (toEPR != null) {
                    return toEPR.getAddress();
                } else {
                    return NULL_STRING;
                }
            } else if (SynapseConstants.HEADER_FROM.equals(key)) {
                EndpointReference fromEPR = synCtx.getFrom();
                if (fromEPR != null) {
                    return fromEPR.getAddress();
                } else {
                    return NULL_STRING;
                }
            } else if (SynapseConstants.HEADER_ACTION.equals(key)) {
                String wsaAction = synCtx.getWSAAction();
                if (wsaAction != null) {
                    return wsaAction;
                } else {
                    return NULL_STRING;
                }
            } else if (SynapseConstants.HEADER_FAULT.equals(key)) {
                EndpointReference faultEPR = synCtx.getFaultTo();
                if (faultEPR != null) {
                    return faultEPR.getAddress();
                } else {
                    return NULL_STRING;
                }
            } else if (SynapseConstants.HEADER_REPLY_TO.equals(key)) {
                EndpointReference replyToEPR = synCtx.getReplyTo();
                if (replyToEPR != null) {
                    return replyToEPR.getAddress();
                } else {
                    return NULL_STRING;
                }
            } else if (SynapseConstants.HEADER_MESSAGE_ID.equals(key)) {
                String messageID = synCtx.getMessageID();
                if (messageID != null) {
                    return messageID;
                } else {
                    return NULL_STRING;
                }
            } else if (SynapseConstants.PROPERTY_MESSAGE_FORMAT.equals(key)) {
                if (synCtx.isDoingPOX())
                    return SynapseConstants.FORMAT_POX;
                else if (synCtx.isDoingGET())
                    return SynapseConstants.FORMAT_GET;
                else if (synCtx.isSOAP11())
                    return SynapseConstants.FORMAT_SOAP11;
                else
                    return SynapseConstants.FORMAT_SOAP12;
            } else if (SynapseConstants.PROPERTY_OPERATION_NAME.equals(key) ||
                       SynapseConstants.PROPERTY_OPERATION_NAMESPACE.equals(key)) {
                if (synCtx instanceof Axis2MessageContext) {
                    AxisOperation axisOperation
                        = ((Axis2MessageContext)synCtx).getAxis2MessageContext().getAxisOperation();
                    if (axisOperation != null) {
                        if (SynapseConstants.PROPERTY_OPERATION_NAMESPACE.equals(key)) {
                            return axisOperation.getName().getNamespaceURI();
                        } else {
                            return axisOperation.getName().getLocalPart();
                        }
                    }
                }
            } else {
                Object result = synCtx.getProperty(key);
                if (result != null) {
                    return result;
                } else {
                    return synCtx.getEntry(key);
                }
            }
        } else if (XMLConfigConstants.SCOPE_AXIS2.equals(scope)
            && synCtx instanceof Axis2MessageContext) {

            org.apache.axis2.context.MessageContext axis2MessageContext
                = ((Axis2MessageContext) synCtx).getAxis2MessageContext();
            return axis2MessageContext.getProperty(key);

        } else if (XMLConfigConstants.SCOPE_TRANSPORT.equals(scope)
            && synCtx instanceof Axis2MessageContext) {

            org.apache.axis2.context.MessageContext axis2MessageContext
                = ((Axis2MessageContext) synCtx).getAxis2MessageContext();
            Object headers = axis2MessageContext.getProperty(
                org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);

            if (headers != null && headers instanceof Map) {
                Map headersMap = (HashMap) headers;
                return headersMap.get(key);
            }

        } else {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Invalid scope : '"" + scope + ""' has been set for the "" +
                    ""synapse:get-property(scope,prop-name) XPath function"");
            }
        }
        return NULL_STRING;
    }

    private void traceOrDebug(boolean traceOn, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }

}

"
synapse,1.1,org.apache.synapse.util.TextFileDataSource,15,1,0,11,38,81,2,10,6,0.857142857,177,1.0,0,0.0,0.160714286,0,0,10.4,1,0.8667,5,"

package org.apache.synapse.util;

import org.apache.axiom.om.OMDataSource;
import org.apache.axiom.om.OMOutputFormat;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.impl.llom.OMSourcedElementImpl;
import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;
import org.apache.synapse.SynapseException;
import org.apache.synapse.transport.base.BaseConstants;

import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;

public class TextFileDataSource implements OMDataSource {

    private static final byte[] empty =
        ""<text xmlns=""http:
    private InputStream is = null;

    public TextFileDataSource(DataSource ds) {
        try {
            this.is = ds.getInputStream();
        } catch (IOException e) {
            throw new SynapseException(
                ""Unable to get an InputStream for DataSource : "" + ds.getName(), e);
        }
    }

    public void serialize(OutputStream out, OMOutputFormat format) throws XMLStreamException {
        try {
            byte[] buf = new byte[4096];
            int len;
            while ((len = is.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
        } catch (IOException e) {
            throw new SynapseException(""Error serializing TextFileDataSource to an OutputStream"", e);
        }
    }

    public void serialize(Writer writer, OMOutputFormat format) throws XMLStreamException {
        try {
            writer.write(new String(empty));
        } catch (IOException e) {
            throw new XMLStreamException(e);
        }
    }

    public void serialize(XMLStreamWriter xmlWriter) throws XMLStreamException {
        StreamingOMSerializer serializer = new StreamingOMSerializer();
        serializer.serialize(getReader(), xmlWriter);
    }

    public XMLStreamReader getReader() throws XMLStreamException {
        return new WrappedTextNodeStreamReader(BaseConstants.DEFAULT_TEXT_WRAPPER, new InputStreamReader(is));
    }
}
"
synapse,1.1,org.apache.synapse.mediators.db.Statement,6,1,0,7,12,1,6,2,6,0.666666667,56,0.0,0,0.0,0.555555556,0,0,7.833333333,1,0.8333,0,"

package org.apache.synapse.mediators.db;

import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.SynapseException;

import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class Statement {

    String rawStatement = null;
    List parameters = new ArrayList();
    Map resultsMap = new HashMap();

    public Statement(String rawStatement) {
        this.rawStatement = rawStatement;
    }

    public String getRawStatement() {
        return rawStatement;
    }

    public void addParameter(String propertyName, AXIOMXPath xpath, String type){
        parameters.add(new Parameter(propertyName, xpath, type));
    }

    public void addResult(String propertyName, String column) {
        resultsMap.put(propertyName, column);
    }

    public List getParameters() {
        return parameters;
    }

    public Map getResultsMap() {
        return resultsMap;
    }

    public class Parameter {
        String propertyName = null;
        AXIOMXPath xpath = null;
        int type = 0;

        Parameter(String value, AXIOMXPath xpath, String type) {

            this.propertyName = value;
            this.xpath = xpath; 
            if (""CHAR"".equals(type)) {
                this.type = Types.CHAR;
            } else if (""VARCHAR"".equals(type)) {
                this.type = Types.VARCHAR;
            } else if (""LONGVARCHAR"".equals(type)) {
                this.type = Types.LONGVARCHAR;
            } else if (""NUMERIC"".equals(type)) {
                this.type = Types.NUMERIC;
            } else if (""DECIMAL"".equals(type)) {
                this.type = Types.DECIMAL;
            } else if (""BIT"".equals(type)) {
                this.type = Types.BIT;
            } else if (""TINYINT"".equals(type)) {
                this.type = Types.TINYINT;
            } else if (""SMALLINT"".equals(type)) {
                this.type = Types.SMALLINT;
            } else if (""INTEGER"".equals(type)) {
                this.type = Types.INTEGER;
            } else if (""BIGINT"".equals(type)) {
                this.type = Types.BIGINT;
            } else if (""REAL"".equals(type)) {
                this.type = Types.REAL;
            } else if (""FLOAT"".equals(type)) {
                this.type = Types.FLOAT;
            } else if (""DOUBLE"".equals(type)) {
                this.type = Types.DOUBLE;
            } else if (""DATE"".equals(type)) {
                this.type = Types.DATE;
            } else if (""TIME"".equals(type)) {
                this.type = Types.TIME;
             } else if (""TIMESTAMP"".equals(type)) {
                this.type = Types.TIMESTAMP;
            } else {
                throw new SynapseException(""Unknown or unsupported JDBC type : "" + type);
            }
        }

        public String getPropertyName() {
            return propertyName;
        }

        public AXIOMXPath getXpath() {
            return xpath;
        }

        public int getType() {
            return type;
        }
    }
}

"
synapse,1.1,org.apache.synapse.util.concurrent.SynapseThreadFactory,2,1,0,1,13,0,1,0,2,0.0,57,0.0,0,0.0,0.625,0,0,26.0,1,0.5,0,"

package org.apache.synapse.util.concurrent;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.ThreadFactory;


public class SynapseThreadFactory implements ThreadFactory {

    
    final ThreadGroup group;

    
    final AtomicInteger count;

    
    final String namePrefix;

    
    public SynapseThreadFactory(final ThreadGroup group, final String namePrefix) {
        super();
        this.count = new AtomicInteger(1);
        this.group = group;
        this.namePrefix = namePrefix;
    }

    
    public Thread newThread(final Runnable runnable) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(this.namePrefix);
        buffer.append('-');
        buffer.append(this.count.getAndIncrement());
        Thread t = new Thread(group, runnable, buffer.toString(), 0);
        t.setDaemon(false);
        t.setPriority(Thread.NORM_PRIORITY);
        return t;
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.AggregateMediatorSerializer,4,2,0,11,24,6,0,11,3,1.0,140,1.0,0,0.75,0.555555556,0,0,33.75,6,1.75,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.eip.aggregator.AggregateMediator;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class AggregateMediatorSerializer extends AbstractMediatorSerializer {

    private static final Log log = LogFactory.getLog(AggregateMediatorSerializer.class);

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof AggregateMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }
        AggregateMediator mediator = (AggregateMediator) m;
        OMElement aggregator = fac.createOMElement(""aggregate"", synNS);
        saveTracingState(aggregator, mediator);

        if (mediator.getCorrelateExpression() != null) {
            OMElement corelateOn = fac.createOMElement(""correlateOn"", synNS);
            corelateOn.addAttribute(""expression"", mediator.getCorrelateExpression().toString(), nullNS);
            super.serializeNamespaces(corelateOn, mediator.getCorrelateExpression());
            aggregator.addChild(corelateOn);
        }

        OMElement completeCond = fac.createOMElement(""completeCondition"", synNS);
        if (mediator.getCompletionTimeoutMillis() != 0) {
            completeCond.addAttribute(""timeout"", Long.toString(mediator.getCompletionTimeoutMillis() / 1000), nullNS);
        }
        OMElement messageCount = fac.createOMElement(""messageCount"", synNS);
        if (mediator.getMinMessagesToComplete() != 0) {
            messageCount.addAttribute(""min"", Integer.toString(mediator.getMinMessagesToComplete()), nullNS);
        }
        if (mediator.getMaxMessagesToComplete() != 0) {
            messageCount.addAttribute(""max"", Integer.toString(mediator.getMaxMessagesToComplete()), nullNS);
        }
        completeCond.addChild(messageCount);
        aggregator.addChild(completeCond);

        OMElement onCompleteElem = fac.createOMElement(""onComplete"", synNS);
        if (mediator.getAggregationExpression() != null) {
            onCompleteElem.addAttribute(""expression"", mediator.getAggregationExpression().toString(), nullNS);
            super.serializeNamespaces(onCompleteElem, mediator.getAggregationExpression());
        }
        if (mediator.getOnCompleteSequenceRef() != null) {
            onCompleteElem.addAttribute(""sequence"", mediator.getOnCompleteSequenceRef(), nullNS);
        } else if (mediator.getOnCompleteSequence() != null) {
            new SequenceMediatorSerializer().serializeChildren(
                    onCompleteElem, mediator.getOnCompleteSequence().getList());
        }
        aggregator.addChild(onCompleteElem);

        if (parent != null) {
            parent.addChild(aggregator);
        }

        return aggregator;
    }

    public String getMediatorClassName() {
        return AggregateMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.registry.RegistryEntry,8,1,0,4,8,28,4,0,8,2.0,8,0.0,0,0.0,1.0,0,0,0.0,1,1.0,0,"

package org.apache.synapse.registry;

import java.net.URI;


public interface RegistryEntry {

    
    public String getKey();

    
    public String getName();

    
    public long getVersion();

    
    public URI getType();

    
    public String getDescription();

    
    public long getCreated();

    
    public long getLastModified();

    
    public long getCachableDuration();
}
"
synapse,1.1,org.apache.synapse.config.xml.HeaderMediatorSerializer,3,2,0,9,26,3,0,9,3,2.0,148,0.0,0,0.75,0.555555556,0,0,48.33333333,10,3.6667,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.transform.HeaderMediator;

import javax.xml.namespace.QName;


public class HeaderMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof HeaderMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        HeaderMediator mediator = (HeaderMediator) m;
        OMElement header = fac.createOMElement(""header"", synNS);
        saveTracingState(header,mediator);

        QName qName = mediator.getQName();
        if (qName != null) {
            if (qName.getNamespaceURI() != null) {
                header.addAttribute(fac.createOMAttribute(
                    ""name"", nullNS,
                    (qName.getPrefix() != null && !"""".equals(qName.getPrefix())
                        ? qName.getPrefix() + "":"" : """") + 
                    qName.getLocalPart()));
                header.declareNamespace(qName.getNamespaceURI(), qName.getPrefix());
            } else {
                header.addAttribute(fac.createOMAttribute(
                    ""name"", nullNS, qName.getLocalPart()));
            }
        }

        if (mediator.getAction() == HeaderMediator.ACTION_REMOVE) {
            header.addAttribute(fac.createOMAttribute(
                ""action"", nullNS, ""remove""));
        } else {
            if (mediator.getValue() != null) {
                header.addAttribute(fac.createOMAttribute(
                    ""value"", nullNS, mediator.getValue()));

            } else if (mediator.getExpression() != null) {
                header.addAttribute(fac.createOMAttribute(
                    ""expression"", nullNS, mediator.getExpression().toString()));
                super.serializeNamespaces(header, mediator.getExpression());

            } else {
                handleException(""Value or expression required for a set header mediator"");
            }
        }

        if (parent != null) {
            parent.addChild(header);
        }
        return header;
    }

    public String getMediatorClassName() {
        return HeaderMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.PropertyMediatorSerializer,3,2,0,9,22,3,0,9,3,2.0,119,0.0,0,0.75,0.555555556,0,0,38.66666667,9,3.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.PropertyMediator;


public class PropertyMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof PropertyMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        PropertyMediator mediator = (PropertyMediator) m;
        OMElement property = fac.createOMElement(""property"", synNS);
        saveTracingState(property, mediator);

        if (mediator.getName() != null) {
            property.addAttribute(fac.createOMAttribute(
                    ""name"", nullNS, mediator.getName()));
        } else {
            handleException(""Invalid property mediator. Name is required"");
        }

        if (mediator.getValue() != null) {
            property.addAttribute(fac.createOMAttribute(
                    ""value"", nullNS, mediator.getValue()));

        } else if (mediator.getExpression() != null) {
            property.addAttribute(fac.createOMAttribute(
                    ""expression"", nullNS, mediator.getExpression().toString()));
            super.serializeNamespaces(property, mediator.getExpression());

        } else if (mediator.getAction() == PropertyMediator.ACTION_SET) {
            handleException(""Invalid property mediator. Value or expression is required if action is SET"");
        }
        if (mediator.getScope() != null) {
            
            property.addAttribute(fac.createOMAttribute(""scope"", nullNS, mediator.getScope()));
        }
        if (mediator.getAction() == PropertyMediator.ACTION_REMOVE) {
            property.addAttribute(fac.createOMAttribute(
                    ""action"", nullNS, ""remove""));
        }
        if (parent != null) {
            parent.addChild(property);
        }
        return property;
    }

    public String getMediatorClassName() {
        return PropertyMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.mediators.transform.XSLTMediator,16,2,0,30,103,48,2,28,12,0.866666667,932,0.833333333,0,0.464285714,0.2421875,0,0,56.5,33,4.0625,7,"

package org.apache.synapse.mediators.transform;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.impl.builder.StAXOMBuilder;
import org.apache.axiom.om.impl.dom.DOOMAbstractFactory;
import org.apache.axiom.om.impl.dom.jaxp.DocumentBuilderFactoryImpl;
import org.apache.axiom.om.impl.llom.OMSourcedElementImpl;
import org.apache.axiom.om.impl.llom.OMTextImpl;
import org.apache.axiom.om.util.ElementHelper;
import org.apache.axiom.om.util.StAXUtils;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.SOAP11Constants;
import org.apache.axiom.soap.SOAP12Constants;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.impl.builder.StAXSOAPModelBuilder;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.SynapseConfigUtils;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.MediatorProperty;
import org.apache.synapse.transport.base.BaseConstants;
import org.apache.synapse.util.FixedByteArrayOutputStream;
import org.apache.synapse.util.TextFileDataSource;
import org.apache.axis2.AxisFault;
import org.jaxen.JaxenException;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import javax.activation.FileDataSource;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;


public class XSLTMediator extends AbstractMediator {

    
    private static final int BYTE_ARRAY_SIZE = 8192;
    
    public static final String USE_DOM_SOURCE_AND_RESULTS =
        ""http:
    
    private String xsltKey = null;

    
    private String sourceXPathString = null;

    
    private AXIOMXPath source = null;

    
    private String targetPropertyName = null;

    
    private List properties = new ArrayList();

    
    private List explicitFeatures = new ArrayList();

    
    private Templates cachedTemplates = null;

    
    private final TransformerFactory transFact = TransformerFactory.newInstance();

    
    private final Object transformerLock = new Object();

    
    private boolean useDOMSourceAndResults = false;

    
    
    
    public static final String DEFAULT_XPATH = ""s11:Body/child::*[position()=1] | "" +
            ""s12:Body/child::*[position()=1]"";

    public XSLTMediator() {
        
        try {
            this.source = new AXIOMXPath(DEFAULT_XPATH);
            this.source.addNamespace(""s11"", SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
            this.source.addNamespace(""s12"", SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        } catch (JaxenException e) {
            String msg = ""Error creating default source XPath expression : "" + DEFAULT_XPATH;
            log.error(msg, e);
            throw new SynapseException(msg, e);
        }
    }

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : XSLT mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        try {
            performXSLT(synCtx, traceOrDebugOn, traceOn);

        } catch (Exception e) {
            handleException(""Unable to perform XSLT transformation using : "" + xsltKey +
                "" against source XPath : "" +
                (sourceXPathString == null ? DEFAULT_XPATH : "" source XPath : "" +
                 sourceXPathString), e, synCtx);

        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : XSLT mediator"");
        }

        return true;
    }

    
    private void performXSLT(MessageContext synCtx, boolean traceOrDebugOn, boolean traceOn) {

        boolean reCreate = false;
        OMNode sourceNode = getTransformSource(synCtx);
        OutputStream osForTarget = null;
        InputStream  isForSource = null;
        ByteArrayOutputStream baosForTarget = new FixedByteArrayOutputStream(BYTE_ARRAY_SIZE);
        File tempTargetFile = null;
        File tempSourceFile = null;
        boolean isSoapEnvelope = (sourceNode == synCtx.getEnvelope());
        boolean isSoapBody = (sourceNode == synCtx.getEnvelope().getBody());

        if (traceOrDebugOn) {
            trace.trace(""Transformation source : "" + sourceNode.toString());
        }

        Source transformSrc = null;
        Result transformTgt = null;

        if (useDOMSourceAndResults) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Using a DOMSource for transformation"");
            }

            
            transformSrc = new DOMSource(
                ((Element) ElementHelper.importOMElement((OMElement) sourceNode,
                DOOMAbstractFactory.getOMFactory())).getOwnerDocument());
            DocumentBuilderFactoryImpl.setDOOMRequired(true);

            try {
                transformTgt = new DOMResult(
                    DocumentBuilderFactoryImpl.newInstance().newDocumentBuilder().newDocument());
            } catch (ParserConfigurationException e) {
                handleException(""Error creating a DOMResult for the transformation,"" +
                    "" Consider setting optimization feature : "" + USE_DOM_SOURCE_AND_RESULTS +
                    "" off"", e, synCtx);
            }

        } else {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Using byte array serialization for transformation"");
            }

            try {
                
                ByteArrayOutputStream baosForSource = new FixedByteArrayOutputStream(BYTE_ARRAY_SIZE);
                XMLStreamWriter xsWriterForSource = XMLOutputFactory.newInstance().
                    createXMLStreamWriter(baosForSource);

                sourceNode.serialize(xsWriterForSource);
                isForSource = new ByteArrayInputStream(baosForSource.toByteArray());
                transformSrc = new StreamSource(isForSource);
                transformTgt = new StreamResult(baosForTarget);

            } catch (XMLStreamException e) {
                handleException(""Error creating a StreamResult for the transformation"", e, synCtx);

            } catch (SynapseException x) {

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Error creating a StreamResult using a byte array"" +
                        "" - attempting using temporary files for serialization"");
                }

                OutputStream osForSource = null;

                try {
                    
                    tempSourceFile = File.createTempFile(""xs_"", "".xml"");
                    tempTargetFile = File.createTempFile(""xt_"", "".xml"");

                    osForSource = new FileOutputStream(tempSourceFile);
                    osForTarget = new FileOutputStream(tempTargetFile);

                    XMLStreamWriter xsWriterForSource =
                        XMLOutputFactory.newInstance().createXMLStreamWriter(osForSource);

                    sourceNode.serialize(xsWriterForSource);
                    transformSrc = new StreamSource(tempSourceFile);
                    transformTgt = new StreamResult(osForTarget);

                } catch (XMLStreamException e) {
                    handleException(""Error creating a StreamResult for the transformation"", e, synCtx);
                } catch (IOException e) {
                    handleException(""Error using a temporary file/s for the transformation"", e, synCtx);
                } finally {
                    try {
                        osForSource.close();
                    } catch (IOException ignore) {}
                }
            }
        }

        if (transformTgt == null) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Was unable to get a javax.xml.transform.Result created"");
            }
            return;
        }

        
        Entry dp = synCtx.getConfiguration().getEntryDefinition(xsltKey);

        
        if (dp != null && dp.isDynamic()) {
            if (!dp.isCached() || dp.isExpired()) {
                reCreate = true;
            }
        }

        synchronized (transformerLock) {
            if (reCreate || cachedTemplates == null) {
                try {
                    cachedTemplates = transFact.newTemplates(
                        SynapseConfigUtils.getStreamSource(synCtx.getEntry(xsltKey)));
                    if (cachedTemplates == null) {
                        handleException(""Error compiling the XSLT with key : "" + xsltKey, synCtx);
                    }
                } catch (Exception e) {
                    handleException(""Error creating XSLT transformer using : ""
                        + xsltKey, e, synCtx);
                }
            }
        }

        try {
            
            Transformer transformer = cachedTemplates.newTransformer();
            if (!properties.isEmpty()) {
                
                for (int i = 0; i < properties.size(); i++) {
                    MediatorProperty prop = (MediatorProperty) properties.get(i);
                    if (prop != null) {
                        if (prop.getValue() != null) {
                            transformer.setParameter(prop.getName(), prop.getValue());
                        } else {
                            transformer.setParameter(prop.getName(),
                                Axis2MessageContext.getStringValue(prop.getExpression(), synCtx));
                        }
                    }
                }
            }

            try {
                transformer.transform(transformSrc, transformTgt);

            } catch (TransformerException x) {
                
                try {
                    tempTargetFile = File.createTempFile(""xt_"", "".xml"");
                    osForTarget  = new FileOutputStream(tempTargetFile);
                    transformTgt = new StreamResult(osForTarget);

                    
                    isForSource.reset();
                    transformer.reset();
                    transformer.transform(transformSrc, transformTgt);

                } catch (IOException e) {
                    handleException(""Error using a temporary file/s for the transformation"", e, synCtx);
                }
            }

            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Transformation completed - processing result"");
            }

            if (tempSourceFile != null) {
                boolean deleted = tempSourceFile.delete();
                if (!deleted) {
                    tempSourceFile.deleteOnExit();
                }
            }

            
            OMElement result = null;
            if (transformTgt instanceof DOMResult) {
                Node node = ((DOMResult) transformTgt).getNode();
                if (node == null) {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, (""Transformation result (DOMResult) was null""));
                    }
                    return;
                }
                Node resultNode = node.getFirstChild();
                if (resultNode == null) {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, (""Transformation result (DOMResult) was empty""));
                    }
                    return;
                }

                result = ElementHelper.importOMElement(
                    (OMElement) resultNode, OMAbstractFactory.getOMFactory());

            } else {

                
                if (tempTargetFile != null) {
                    try {
                        XMLStreamReader reader = StAXUtils.createXMLStreamReader(
                            new FileInputStream(tempTargetFile));
                        if (isSoapEnvelope) {
                            result = new StAXSOAPModelBuilder(reader).getSOAPEnvelope();
                        } else {
                            result = new StAXOMBuilder(reader).getDocumentElement();
                        }                        

                    } catch (XMLStreamException e) {
                        handleException(
                            ""Error building result element from XSLT transformation"", e, synCtx);

                    } catch (Exception e) {
                        result = handleNonXMLResult(tempTargetFile, traceOrDebugOn, traceOn);

                    } finally {
                        boolean deleted = tempTargetFile.delete();
                        if (!deleted) {
                            tempTargetFile.deleteOnExit();
                        }
                    }

                } else {
                    
                    try {
                        XMLStreamReader reader = StAXUtils.createXMLStreamReader(
                            new ByteArrayInputStream(baosForTarget.toByteArray()));
                        if (isSoapEnvelope) {
                            result = new StAXSOAPModelBuilder(reader).getSOAPEnvelope();
                        } else {
                            result = new StAXOMBuilder(reader).getDocumentElement();
                        }

                    } catch (XMLStreamException e) {
                        handleException(
                            ""Error building result element from XSLT transformation"", e, synCtx);

                    } catch (Exception e) {
                        result = handleNonXMLResult(baosForTarget.toString(), traceOrDebugOn, traceOn);
                    }
                }
            }

            if (result == null) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Transformation result was null"");
                }
                return;
            } else {
                if (traceOn && trace.isTraceEnabled()) {
                    trace.trace(""Transformation result : "" + result.toString());
                }
            }

            if (targetPropertyName != null) {
                
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Adding result as message context property : "" +
                        targetPropertyName);
                }
                synCtx.setProperty(targetPropertyName, result);
            } else {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Replace "" +
                        (isSoapEnvelope ? ""SOAP envelope"" : isSoapBody ? ""SOAP body"" : ""node"")
                        + "" with result"");
                }

                if (isSoapEnvelope) {
                    try {
                        synCtx.setEnvelope((SOAPEnvelope) result);
                    } catch (AxisFault ex) {
                        handleException(""Unable to replace SOAP envelope with result"", ex, synCtx);
                    }

                } else if (isSoapBody) {
                    for (Iterator iter = synCtx.getEnvelope().getBody().getChildElements();
                        iter.hasNext(); ) {
                        OMElement child = (OMElement) iter.next();
                        child.detach();
                    }

                    for (Iterator iter = result.getChildElements(); iter.hasNext(); ) {
                        OMElement child = (OMElement) iter.next();
                        synCtx.getEnvelope().getBody().addChild(child);
                    }

                } else {
                    sourceNode.insertSiblingAfter(result);
                    sourceNode.detach();
                }
            }

        } catch (TransformerException e) {
            handleException(""Error performing XSLT transformation using : "" + xsltKey, e, synCtx);
        }
    }

    
    private OMNode getTransformSource(MessageContext synCtx) {

        try {
            Object o = source.evaluate(synCtx.getEnvelope());
            if (o instanceof OMNode) {
                return (OMNode) o;
            } else if (o instanceof List && !((List) o).isEmpty()) {
                return (OMNode) ((List) o).get(0);  
            } else {
                handleException(""The evaluation of the XPath expression ""
                        + source + "" did not result in an OMNode"", synCtx);
            }
        } catch (JaxenException e) {
            handleException(""Error evaluating XPath expression : "" + source, e, synCtx);
        }
        return null;
    }

    public AXIOMXPath getSource() {
        return source;
    }

    public void setSource(AXIOMXPath source) {
        this.source = source;
    }

    public String getXsltKey() {
        return xsltKey;
    }

    public void setXsltKey(String xsltKey) {
        this.xsltKey = xsltKey;
    }

    public void addProperty(MediatorProperty p) {
        properties.add(p);
    }
    
    
    
    public void addFeature(String featureName, boolean isFeatureEnable) {
        try {
            MediatorProperty mp = new MediatorProperty();
            mp.setName(featureName);
            if (isFeatureEnable) {
                mp.setValue(""true"");
            } else {
                mp.setValue(""false"");
            }
            explicitFeatures.add(mp);
            if (USE_DOM_SOURCE_AND_RESULTS.equals(featureName)) {
                useDOMSourceAndResults = isFeatureEnable;
            } else {
                transFact.setFeature(featureName, isFeatureEnable);
            }
        } catch (TransformerConfigurationException e) {
            String msg = ""Error occured when setting features to the TransformerFactory"";
            log.error(msg, e);
            throw new SynapseException(msg, e);
        }
    }

    
    private OMElement handleNonXMLResult(File file, boolean traceOrDebugOn, boolean traceOn) {

        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMElement wrapper = null;

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Processing non SOAP/XML (text) transformation result"");
        }
        if (traceOn && trace.isTraceEnabled()) {
            trace.trace(""Wrapping text transformation result from : "" + file);
        }

        if (file != null) {
            TextFileDataSource txtFileDS = new TextFileDataSource(new FileDataSource(file));
            wrapper = new OMSourcedElementImpl(BaseConstants.DEFAULT_TEXT_WRAPPER, fac, txtFileDS);
        }

        return wrapper;
    }

    
    private OMElement handleNonXMLResult(String textPayload, boolean traceOrDebugOn, boolean traceOn) {

        OMFactory fac = OMAbstractFactory.getOMFactory();
        OMElement wrapper = null;

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Processing non SOAP/XML (text) transformation result"");
        }
        if (traceOn && trace.isTraceEnabled()) {
            trace.trace(""Wrapping text transformation result : "" + textPayload);
        }

        if (textPayload != null) {
            OMTextImpl textData = (OMTextImpl) fac.createOMText(textPayload);
            wrapper = fac.createOMElement(BaseConstants.DEFAULT_TEXT_WRAPPER, null);
            wrapper.addChild(textData);
        }

        return wrapper;
    }

    
    public List getFeatures(){
        return explicitFeatures;
    }

    public void addAllProperties(List list) {
        properties.addAll(list);
    }

    public List getProperties() {
        return properties;
    }

    public void setSourceXPathString(String sourceXPathString) {
        this.sourceXPathString = sourceXPathString;
    }

    public String getTargetPropertyName() {
        return targetPropertyName;
    }

    public void setTargetPropertyName(String targetPropertyName) {
        this.targetPropertyName = targetPropertyName;
    }
}

	
"
synapse,1.1,org.apache.synapse.registry.url.SimpleURLRegistry,11,2,0,11,65,41,0,11,8,0.9,561,1.0,0,0.357142857,0.38,2,3,49.81818182,9,2.7273,0,"

package org.apache.synapse.registry.url;

import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.impl.builder.StAXOMBuilder;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfigUtils;
import org.apache.synapse.registry.AbstractRegistry;
import org.apache.synapse.registry.Registry;
import org.apache.synapse.registry.RegistryEntry;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import java.io.*;
import java.net.*;
import java.util.ArrayList;


public class SimpleURLRegistry extends AbstractRegistry implements Registry {

    private static final Log log = LogFactory.getLog(SimpleURLRegistry.class);

    private static final int MAX_KEYS = 200;

    public OMNode lookup(String key) {

        log.info(""==> Repository fetch of resource with key : "" + key);
        URLConnection urlc = null;
        try {
            URL url = SynapseConfigUtils.getURLFromPath(getRoot() + key);
            if (url == null) {
                return null;
            }
            urlc = url.openConnection();
            urlc.connect();
        } catch (IOException e) {
            return null;
        }

        try {
            XMLStreamReader parser = XMLInputFactory.newInstance().
                    createXMLStreamReader(urlc.getInputStream());
            StAXOMBuilder builder = new StAXOMBuilder(parser);
            return builder.getDocumentElement();

        } catch (MalformedURLException e) {
            handleException(""Invalid URL reference "" + getRoot() + key, e);
        } catch (FileNotFoundException fnf) {
            return null;
        } catch (IOException e) {
            handleException(""IO Error reading from URL "" + getRoot() + key, e);
        } catch (XMLStreamException e) {
            handleException(""XML Error reading from URL "" + getRoot() + key, e);
        }
        return null;
    }

    public RegistryEntry getRegistryEntry(String key) {
        if (log.isDebugEnabled()) {
            log.debug(""Perform RegistryEntry lookup for key : "" + key);
        }
        try {
            URL url = SynapseConfigUtils.getURLFromPath(getRoot() + key);
            if (url == null) {
                return null;
            }
            URLConnection urlc = url.openConnection();
            urlc.setReadTimeout(30000);
            urlc.setRequestProperty(""Connection"", ""Close"");

            URLRegistryEntry wre = new URLRegistryEntry();
            wre.setKey(key);
            wre.setName(url.getFile());
            wre.setType(new URI(urlc.getContentType()));
            wre.setDescription(""Resource at : "" + url.toString());
            wre.setLastModified(urlc.getLastModified());
            wre.setVersion(urlc.getLastModified());
            if (urlc.getExpiration() > 0) {
                wre.setCachableDuration(
                        urlc.getExpiration() - System.currentTimeMillis());
            } else {
                wre.setCachableDuration(getCachableDuration());
            }
            return wre;

        } catch (MalformedURLException e) {
            handleException(""Invalid URL reference "" + getRoot() + key, e);
        } catch (IOException e) {
            handleException(""IO Error reading from URL "" + getRoot() + key, e);
        } catch (URISyntaxException e) {
            handleException(""URI Syntax error reading from URL "" + getRoot() + key, e);
        }
        return null;
    }

    public void addConfigProperty(String name, String value) {

        if (name.equals(""root"")) {

            
            
            try {
                URL url = new URL(value);
                if (url.getProtocol().equals(""file"")) {
                    if (!value.endsWith(""/"")) {
                        value = value + ""/"";
                    }
                }
            } catch (MalformedURLException e) {
                
            }
        }

        super.addConfigProperty(name, value);
    }

    public String getRoot() {
        String root = (String) properties.get(""root"");
        if (root == null) {
            return """";
        } else {
            return root;
        }
    }

    public long getCachableDuration() {
        String cachableDuration = (String) properties.get(""cachableDuration"");
        return cachableDuration == null ? 1500 : Long.parseLong(cachableDuration);
    }

    public RegistryEntry[] getChildren(RegistryEntry entry) {
        URL url;
        if (entry == null) {
            URLRegistryEntry urlEntry = new URLRegistryEntry();
            urlEntry.setKey("""");
            entry = urlEntry;
        }
        url = SynapseConfigUtils.getURLFromPath(getRoot() + entry.getKey());
        if (url == null) {
            return null;
        }
        if (url.getProtocol().equals(""file"")) {

            File file = new File(url.getFile());
            if (!file.isDirectory()) {
                return null;
            }
            InputStream inStream = null;
            try {
                inStream = (InputStream) url.getContent();

                BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
                ArrayList entryList = new ArrayList();
                String key = """";
                while ((key = reader.readLine()) != null) {
                    URLRegistryEntry registryEntry = new URLRegistryEntry();
                    if (entry.getKey().equals("""")) {
                        registryEntry.setKey(key);
                    } else {
                        if (entry.getKey().endsWith(""/"")) {
                            registryEntry.setKey(entry.getKey() + key);
                        } else {
                            registryEntry.setKey(entry.getKey() + ""/"" + key);
                        }
                    }

                    entryList.add(registryEntry);
                }

                RegistryEntry[] entries = new RegistryEntry[entryList.size()];
                for (int i = 0; i < entryList.size(); i++) {
                    entries[i] = (RegistryEntry) entryList.get(i);
                }
                return entries;

            } catch (Exception e) {
                throw new SynapseException(""Error in reading the URL."");
            }

        } else {
            throw new SynapseException(""Invalid protocol."");
        }
    }

    public RegistryEntry[] getDescendants(RegistryEntry entry) {

        ArrayList list = new ArrayList();
        RegistryEntry[] entries = getChildren(entry);
        if (entries != null) {
            for (int i = 0; i < entries.length; i++) {

                if (list.size() > MAX_KEYS) {
                    break;
                }

                fillDescendants(entries[i], list);
            }
        }

        RegistryEntry[] descendants = new RegistryEntry[list.size()];
        for (int i = 0; i < list.size(); i++) {
            descendants[i] = (RegistryEntry) list.get(i);
        }

        return descendants;
    }

    private void fillDescendants(RegistryEntry parent, ArrayList list) {

        RegistryEntry[] entries = getChildren(parent);
        if (entries != null) {
            for (int i = 0; i < entries.length; i++) {

                if (list.size() > MAX_KEYS) {
                    break;
                }

                fillDescendants(entries[i], list);
            }
        } else {
            list.add(parent);
        }
    }

    private void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.ClassMediatorSerializer,3,2,0,8,24,3,0,8,3,2.0,114,0.0,0,0.75,0.555555556,0,0,37.0,7,2.6667,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.ext.ClassMediator;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class ClassMediatorSerializer extends AbstractMediatorSerializer  {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof ClassMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }
        ClassMediator mediator = (ClassMediator) m;
        OMElement clazz = fac.createOMElement(""class"", synNS);
        saveTracingState(clazz, mediator);

        if (mediator.getMediator() != null && mediator.getMediator().getClass().getName() != null) {
            clazz.addAttribute(fac.createOMAttribute(
                ""name"", nullNS, mediator.getMediator().getClass().getName()));
        } else {
            handleException(""Invalid class mediator. The class name is required"");
        }

        Iterator itr = mediator.getProperties().keySet().iterator();
        while(itr.hasNext()) {
            String propName = (String) itr.next();
            Object o = mediator.getProperties().get(propName);
            OMElement prop = fac.createOMElement(PROP_Q);
            prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));

            if (o instanceof String) {
                prop.addAttribute(fac.createOMAttribute(""value"", nullNS, (String) o));
            } else {
                prop.addChild((OMNode) o);
            }
            clazz.addChild(prop);
        }

        if (parent != null) {
            parent.addChild(clazz);
        }
        return clazz;
    }

    public String getMediatorClassName() {
        return ClassMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.mediators.builtin.RMSequenceMediator,17,2,0,15,58,100,2,13,11,0.90625,446,1.0,0,0.464285714,0.3,0,0,24.76470588,12,2.0588,1,"

package org.apache.synapse.mediators.builtin;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Collections;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.util.UUIDGenerator;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.xml.XMLConfigConstants;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.sandesha2.client.SandeshaClientConstants;
import org.jaxen.JaxenException;

public class RMSequenceMediator extends AbstractMediator {

    private AXIOMXPath correlation = null;
    private AXIOMXPath lastMessage = null;
    private Boolean single = null;
    private String version = null;

    private static final String WSRM_SpecVersion_1_0 = ""Spec_2005_02"";
    private static final String WSRM_SpecVersion_1_1 = ""Spec_2007_02"";
    
    private static final long SEQUENCE_EXPIRY_TIME = 300000;
    private static Map sequenceMap = Collections.synchronizedMap(new HashMap());

    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : RMSequence mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        if (!(synCtx instanceof Axis2MessageContext)) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Only axis2 message contexts are supported"");
            }

        } else {
            Axis2MessageContext axis2MessageCtx = (Axis2MessageContext) synCtx;
            org.apache.axis2.context.MessageContext orgMessageCtx =
                axis2MessageCtx.getAxis2MessageContext();

            cleanupSequenceMap();

            String version = getVersionValue();
            orgMessageCtx.getOptions().setProperty(
                SynapseConstants.SANDESHA_SPEC_VERSION, version);

            if (isSingle()) {
                String sequenceID = UUIDGenerator.getUUID();
                String offeredSeqID = UUIDGenerator.getUUID();

                orgMessageCtx.getOptions().setProperty(
                    SynapseConstants.SANDESHA_SEQUENCE_KEY, sequenceID);
                orgMessageCtx.getOptions().setProperty(
                    SandeshaClientConstants.OFFERED_SEQUENCE_ID, offeredSeqID);
                orgMessageCtx.getOptions().setProperty(
                    SynapseConstants.SANDESHA_LAST_MESSAGE, ""true"");

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Using WS-RM version "" + version +
                        "" and a single message sequence : "" + sequenceID +
                        "" and offering sequence : "" + offeredSeqID);
                }

            } else {

                String correlationValue = getCorrelationValue(synCtx);
                boolean lastMessage = isLastMessage(synCtx);
                String offeredSeqID = null;

                if (!sequenceMap.containsKey(correlationValue)) {
                    offeredSeqID = UUIDGenerator.getUUID();
                    orgMessageCtx.getOptions().setProperty(
                        SandeshaClientConstants.OFFERED_SEQUENCE_ID, offeredSeqID);
                }

                String sequenceID = retrieveSequenceID(correlationValue);
                orgMessageCtx.getOptions().setProperty(
                    SynapseConstants.SANDESHA_SEQUENCE_KEY, sequenceID);

                if (lastMessage) {
                    orgMessageCtx.getOptions().setProperty(
                        SynapseConstants.SANDESHA_LAST_MESSAGE, ""true"");
                    sequenceMap.remove(correlationValue);
                }

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Correlation value : "" + correlationValue +
                        "" last message = "" + lastMessage + "" using sequence : "" + sequenceID +
                        (offeredSeqID != null ? "" offering sequence : "" + offeredSeqID : """"));
                }
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : RMSequence mediator"");
        }
        return true;
    }

    private String retrieveSequenceID(String correlationValue) {
        String sequenceID = null;
        if (!sequenceMap.containsKey(correlationValue)) {
            sequenceID = UUIDGenerator.getUUID();
            if (log.isDebugEnabled()) {
                log.debug(""setting sequenceID "" + sequenceID + "" for correlation "" + correlationValue);
            }
            Entry sequenceEntry = new Entry();
            sequenceEntry.setValue(sequenceID);
            sequenceEntry.setExpiryTime(System.currentTimeMillis() + SEQUENCE_EXPIRY_TIME);
            sequenceMap.put(correlationValue, sequenceEntry);
        } else {
            sequenceID = (String) ((Entry) sequenceMap.get(correlationValue)).getValue();
            if (log.isDebugEnabled()) {
                log.debug(""got sequenceID "" + sequenceID + "" for correlation "" + correlationValue);
            }
        }
        return sequenceID;
    }

    private String getCorrelationValue(MessageContext smc) {
        OMElement node = null;
        try {
            node = (OMElement) getCorrelation().selectSingleNode(smc.getEnvelope());

            if (node != null) {
                return node.getText();
            } else {
                handleException(""XPath expression : "" + getCorrelation() +
                    "" did not return any node"", smc);
            }

        } catch (JaxenException e) {
            handleException(""Error evaluating XPath expression to determine correlation : "" +
                getCorrelation(), e, smc);
        }
        return null; 
    }

    private String getVersionValue() {
        if (XMLConfigConstants.SEQUENCE_VERSION_1_1.equals(getVersion())) {
            return WSRM_SpecVersion_1_1;
        } else {
            return WSRM_SpecVersion_1_0;
        }
    }

    private boolean isLastMessage(MessageContext smc) {
        if (getLastMessage() == null) {
            return false;
        } else {
            try {
                return getLastMessage().booleanValueOf(smc.getEnvelope());
            } catch (JaxenException e) {
                handleException(""Error evaluating XPath expression to determine if last message : "" +
                    getLastMessage(), e, smc);
            }
            return false;
        }
    }

    private synchronized void cleanupSequenceMap() {
        Iterator itKey = sequenceMap.keySet().iterator();
        while (itKey.hasNext()) {
            Object key = itKey.next();
            Entry sequenceEntry = (Entry) sequenceMap.get(key);
            if (sequenceEntry.isExpired()) {
                sequenceMap.remove(key);
            }
        }
    }

    public boolean isSingle() {
        if (getSingle() != null && getSingle().booleanValue()) {
            return true;

        } else {
            return false;
        }
    }

    public AXIOMXPath getCorrelation() {
        return correlation;
    }

    public void setCorrelation(AXIOMXPath correlation) {
        this.correlation = correlation;
    }

    public AXIOMXPath getLastMessage() {
        return lastMessage;
    }

    public void setLastMessage(AXIOMXPath lastMessage) {
        this.lastMessage = lastMessage;
    }

    public Boolean getSingle() {
        return single;
    }

    public void setSingle(Boolean single) {
        this.single = single;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.PropertyHelper,7,1,0,7,42,9,3,4,4,0.333333333,558,1.0,0,0.0,0.3,0,0,78.57142857,12,3.2857,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.SynapseException;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;


public class PropertyHelper {

    
    private static final Log log = LogFactory.getLog(PropertyHelper.class);

    
    public static void setInstanceProperty(String name, Object val, Object obj) {

        String mName = ""set"" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
        Method method = null;

        try {
            Method[] methods = obj.getClass().getMethods();
            boolean invoked = false;

            for (int i=0; i<methods.length; i++) {
                if (mName.equals(methods[i].getName())) {
                    Class[] params = methods[i].getParameterTypes();
                    if (params.length != 1) {
                        handleException(""Did not find a setter method named : "" + mName +
                            ""() that takes a single String, int, long, float, double "" +
                            ""or boolean parameter"");
                    } else if (val instanceof String) {
                        String value = (String) val;
                        if (params[0].equals(String.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{String.class});
                            method.invoke(obj, new String[]{value});
                        } else if (params[0].equals(int.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{int.class});
                            method.invoke(obj, new Integer[]{new Integer(value)});
                        } else if (params[0].equals(long.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{long.class});
                            method.invoke(obj, new Long[]{new Long(value)});
                        } else if (params[0].equals(float.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{float.class});
                            method.invoke(obj, new Float[]{new Float(value)});
                        } else if (params[0].equals(double.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{double.class});
                            method.invoke(obj, new Double[]{new Double(value)});
                        } else if (params[0].equals(boolean.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{boolean.class});
                            method.invoke(obj, new Boolean[]{new Boolean(value)});
                        } else {
                            handleException(""Did not find a setter method named : "" + mName +
                                ""() that takes a single String, int, long, float, double "" +
                                ""or boolean parameter"");
                        }
                    } else {
                        if (params[0].equals(OMElement.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{OMElement.class});
                            method.invoke(obj, new OMElement[]{(OMElement) val});
                        }
                    }
                    invoked = true;
                }
            }

            if (!invoked) {
                handleException(""Did not find a setter method named : "" + mName +
                    ""() that takes a single String, int, long, float, double "" +
                    ""or boolean parameter"");
            }

        } catch (Exception e) {
            handleException(""Error invoking setter method named : "" + mName +
                ""() that takes a single String, int, long, float, double "" +
                ""or boolean parameter"", e);
        }
    }

    
    public static void setStaticProperty(OMElement property, Object o) {

        if (property.getLocalName().toLowerCase().equals(""property"")) {

            String propertyName = property.getAttributeValue(new QName(""name""));
            String mName = ""set""
                    + Character.toUpperCase(propertyName.charAt(0))
                    + propertyName.substring(1);

            
            if (property.getAttributeValue(new QName(""value"")) != null) {
                String value = property.getAttributeValue(new QName(""value""));

                try {
                    Method method = o.getClass().getMethod(mName, new Class[]{String.class});
                    if (log.isDebugEnabled()) {
                        log.debug(""Setting property :: invoking method ""
                                + mName + ""("" + value + "")"");
                    }
                    method.invoke(o, new Object[]{value});

                } catch (Exception e) {
                    handleException(""Error setting property : "" + propertyName
                            + "" as a String property into class mediator : "" + o.getClass() + "" : ""
                            + e.getMessage(), e);
                }
                
            } else {
                
                OMElement value = property.getFirstElement();
                if (value != null) {

                    try {
                        Method method = o.getClass().getMethod(mName, new Class[]{OMElement.class});
                        if (log.isDebugEnabled()) {
                            log.debug(""Setting property :: invoking method ""
                                    + mName + ""("" + value + "")"");
                        }
                        method.invoke(o, new Object[]{value});

                    } catch (Exception e) {
                        handleException(""Error setting property : "" + propertyName
                                + "" as an OMElement property into class mediator : ""
                                + o.getClass() + "" : "" + e.getMessage(), e);
                    }

                }

            }
        }
    }

    
    public static boolean isStaticProperty(OMElement property) {
        return ""property"".equals(property.getLocalName().toLowerCase())
            && (property.getAttributeValue(new QName(""expression"")) == null);
    }

    private static void handleException(String message, Throwable e) {
        log.error(message + e.getMessage());
        throw new SynapseException(message, e);
    }

    private static void handleException(String message) {
        log.error(message);
        throw new SynapseException(message);
    }    
}
"
synapse,1.1,org.apache.synapse.mediators.ext.POJOCommandMediator,9,2,0,9,49,4,2,7,8,0.625,564,1.0,0,0.619047619,0.377777778,0,0,61.33333333,11,3.0,1,"

package org.apache.synapse.mediators.ext;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.Command;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.eip.EIPUtils;
import org.jaxen.JaxenException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;


public class POJOCommandMediator extends AbstractMediator {

    
    private Class command = null;

    
    private Map<String, Object> staticSetterProperties = new HashMap<String, Object>();

    
    private Map<String, AXIOMXPath> messageSetterProperties = new HashMap<String, AXIOMXPath>();

    
    private Map<String, String> contextSetterProperties = new HashMap<String, String>();

    
    private Map<String, String> contextGetterProperties = new HashMap<String, String>();

    
    private Map<String, AXIOMXPath> messageGetterProperties = new HashMap<String, AXIOMXPath>();

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : POJOCommand mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Creating a new instance of POJO class : "" + command.getClass());
        }

        Object commandObject = null;
        try {
            
            commandObject = command.newInstance();
        } catch (Exception e) {
            handleException(""Error creating an instance of the POJO command class : "" +
                command.getClass(), e, synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Instance created, setting static and dynamic properties"");
        }

        
        for (Iterator iter = staticSetterProperties.keySet().iterator(); iter.hasNext(); ) {
            String name = (String) iter.next();
            setInstanceProperty(name, staticSetterProperties.get(name), commandObject, synCtx);
        }

        
        for (Iterator iter = contextSetterProperties.keySet().iterator(); iter.hasNext(); ) {
            String name = (String) iter.next();
            setInstanceProperty(name, synCtx.getProperty(contextSetterProperties.get(name)),
                commandObject, synCtx);
        }

        
        for (Iterator iter = messageSetterProperties.keySet().iterator(); iter.hasNext(); ) {

            String name = (String) iter.next();
            AXIOMXPath xpath = messageSetterProperties.get(name);
            String value = Axis2MessageContext.getStringValue(xpath, synCtx);

            setInstanceProperty(name, value, commandObject, synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""POJO initialized successfully, invoking the execute() method"");
        }

        
        if (commandObject instanceof Command) {
            try {
                ((Command) commandObject).execute();
            } catch (Exception e) {
                handleException(""Error invoking POJO command class : ""
                    + command.getClass(), e, synCtx);
            }

        } else {

            Method exeMethod = null;
            try {
                exeMethod = command.getMethod(""execute"", new Class[]{});
                exeMethod.invoke(commandObject, new Object[]{});
            } catch (NoSuchMethodException e) {
                handleException(""Cannot locate an execute() method on POJO class : "" +
                    command.getClass(), e, synCtx);
            } catch (Exception e) {
                handleException(""Error invoking the execute() method on POJO class : "" +
                    command.getClass(), e, synCtx);
            }
        }

        
        for (Iterator iter = contextGetterProperties.keySet().iterator(); iter.hasNext(); ) {
            String name = (String) iter.next();
            synCtx.setProperty(contextGetterProperties.get(name),
                getInstanceProperty(name, commandObject, synCtx));
        }

        
        
        for (Iterator iter = messageGetterProperties.keySet().iterator(); iter.hasNext(); ) {

            String name = (String) iter.next();
            AXIOMXPath xpath = messageGetterProperties.get(name);

            Object resultValue = getInstanceProperty(name, commandObject, synCtx);

            try {
                List list = EIPUtils.getMatchingElements(synCtx.getEnvelope(), xpath);
                if (list.size() > 0) {
                    Object o = list.get(0);
                    if (resultValue instanceof String) {
                        OMAbstractFactory.getOMFactory().createOMText(
                            ((OMNode) o).getParent(), (String) resultValue);
                        ((OMNode) o).detach();
                    } else if (resultValue instanceof OMNode) {
                        ((OMNode) o).insertSiblingAfter((OMNode) resultValue);
                        ((OMNode) o).detach();
                    }

                } else {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Unable to set the message property "" + resultValue
                            + ""back to the message : Specified element by the xpath ""
                            + xpath + "" can not be found"");
                    }
                }
            } catch (JaxenException e) {
                handleException(""Unable to set the command property ""
                    + name + "" back to the message"", e, synCtx);
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : POJOCommand mediator"");
        }
        return true;
    }

    
    private Object getInstanceProperty(String name, Object obj, MessageContext synCtx) {

        String mName = ""get"" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
        try {
            Method[] methods = obj.getClass().getMethods();

            for (Method method : methods) {
                if (mName.equals(method.getName())) {
                    return method.invoke(obj);
                }
            }
        } catch(InvocationTargetException e) {
            handleException(""Unable to get the command property '""
                + name + ""' back to the message"", e, synCtx);
        } catch(IllegalAccessException e){
            handleException(""Unable to get the command property '""
                + name + ""' back to the message"", e, synCtx);
        }

        return null;
    }

    
    protected void setInstanceProperty(
        String name, Object value, Object obj, MessageContext synCtx) {

        String mName = ""set"" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
        Method method = null;

        try {
            Method[] methods = obj.getClass().getMethods();
            boolean invoked = false;

            for (int i=0; i<methods.length; i++) {
                if (mName.equals(methods[i].getName())) {
                    Class[] params = methods[i].getParameterTypes();
                    if (params.length != 1) {
                        handleException(""Did not find a setter method named : "" + mName +
                            ""() that takes a single String, int, long, float, double "" +
                            ""or boolean or OMElement parameter"", synCtx);
                    } else if (value instanceof String) {
                        if (params[0].equals(String.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{String.class});
                            method.invoke(obj, new String[]{(String) value});
                        } else if (params[0].equals(int.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{int.class});
                            method.invoke(obj, new Integer[]{new Integer((String) value)});
                        } else if (params[0].equals(long.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{long.class});
                            method.invoke(obj, new Long[]{new Long((String) value)});
                        } else if (params[0].equals(float.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{float.class});
                            method.invoke(obj, new Float[]{new Float((String) value)});
                        } else if (params[0].equals(double.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{double.class});
                            method.invoke(obj, new Double[]{new Double((String) value)});
                        } else if (params[0].equals(boolean.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{boolean.class});
                            method.invoke(obj, new Boolean[]{new Boolean((String) value)});
                        } else {
                            handleException(""Did not find a setter method named : "" + mName +
                                ""() that takes a single String, int, long, float, double "" +
                                ""or boolean parameter"", synCtx);
                        }
                    } else if (value instanceof OMElement) {
                        if (params[0].equals(OMElement.class)) {
                            method = obj.getClass().getMethod(mName, new Class[]{OMElement.class});
                            method.invoke(obj, new OMElement[]{(OMElement) value});                            
                        } else {
                            handleException(""Did not find a setter method named : "" + mName
                                + ""() that takes an OMElement as the parameter"", synCtx);
                        }
                    } else {
                        handleException(""Can not handle the value type : ""
                            + value.getClass(), synCtx);
                    }
                    invoked = true;
                }
            }

            if (!invoked) {
                handleException(""Did not find a setter method named : "" + mName +
                    ""() that takes a single String, int, long, float, double "" +
                    ""or boolean parameter"", synCtx);
            }

        } catch (Exception e) {
            handleException(""Error invoking setter method named : "" + mName +
                ""() that takes a single String, int, long, float, double "" +
                ""or boolean parameter"", e, synCtx);
        }
    }

    public Class getCommand() {
        return command;
    }

    public void setCommand(Class command) {
        this.command = command;
    }

    public void addStaticSetterProperty(String name, Object value) {
        this.staticSetterProperties.put(name, value);
    }

    public void addMessageSetterProperty(String name, AXIOMXPath xpath) {
        this.messageSetterProperties.put(name, xpath);
    }
    
    public void addContextSetterProperty(String name, String ctxName) {
        this.contextSetterProperties.put(name, ctxName);
    }

    public void addContextGetterProperty(String name, String value) {
        this.contextGetterProperties.put(name, value);
    }

    public void addMessageGetterProperty(String name, AXIOMXPath xpath) {
        this.messageGetterProperties.put(name, xpath);
    }

    public Map<String, Object> getStaticSetterProperties() {
        return this.staticSetterProperties;
    }

    public Map<String, AXIOMXPath> getMessageSetterProperties() {
        return this.messageSetterProperties;
    }

    public Map<String, String> getContextSetterProperties() {
        return this.contextSetterProperties;
    }

    public Map<String, String> getContextGetterProperties() {
        return this.contextGetterProperties;
    }

    public Map<String, AXIOMXPath> getMessageGetterProperties() {
        return this.messageGetterProperties;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.AddressEndpoint,17,2,0,14,53,78,4,10,13,0.8125,359,1.0,2,0.25,0.276785714,1,1,19.64705882,17,2.5882,1,"

package org.apache.synapse.endpoints;

import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.Stack;


public class AddressEndpoint extends FaultHandler implements Endpoint {

    private static final Log log = LogFactory.getLog(AddressEndpoint.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    
    private String name = null;

    
    private volatile boolean active = true;

    
    private EndpointDefinition endpoint = null;

    
    private Endpoint parentEndpoint = null;

    
    private long suspendOnFailDuration = -1;

    
    private long recoverOn = Long.MAX_VALUE;

    public EndpointDefinition getEndpoint() {
        return endpoint;
    }

    public void setEndpoint(EndpointDefinition endpoint) {
        this.endpoint = endpoint;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name.trim();
    }

    
    public boolean isActive(MessageContext synMessageContext) {

        if (!active) {
            if (System.currentTimeMillis() > recoverOn) {
                active = true;
                recoverOn = 0;
            }
        }

        return active;
    }

    
    public synchronized void setActive(boolean active, MessageContext synMessageContext) {

        
        

        if (!active) {
            if (suspendOnFailDuration != -1) {
                recoverOn = System.currentTimeMillis() + suspendOnFailDuration;
            } else {
                recoverOn = Long.MAX_VALUE;
            }
        }

        this.active = active;
    }

    
    public void send(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Address Endpoint"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        String endPointName = this.getName();
        if (endPointName == null) {
            endPointName = SynapseConstants.ANONYMOUS_ENDPOINT;
        }

        
        boolean statisticsEnable = (SynapseConstants.STATISTICS_ON == endpoint.getStatisticsState());
        if (statisticsEnable) {
            EndPointStatisticsStack endPointStatisticsStack = null;
            Object statisticsStackObj =
                synCtx.getProperty(org.apache.synapse.SynapseConstants.ENDPOINT_STATS);
            if (statisticsStackObj == null) {
                endPointStatisticsStack = new EndPointStatisticsStack();
                synCtx.setProperty(org.apache.synapse.SynapseConstants.ENDPOINT_STATS,
                    endPointStatisticsStack);
            } else if (statisticsStackObj instanceof EndPointStatisticsStack) {
                endPointStatisticsStack = (EndPointStatisticsStack) statisticsStackObj;
            }
            if (endPointStatisticsStack != null) {
                boolean isFault = synCtx.getEnvelope().getBody().hasFault();
                endPointStatisticsStack.put(endPointName, System.currentTimeMillis(),
                    !synCtx.isResponse(), statisticsEnable, isFault);
            }
        }

        if (endpoint.getAddress() != null) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Sending message to endpoint : "" +
                    endPointName + "" resolves to address = "" + endpoint.getAddress());
                traceOrDebug(traceOn, ""SOAPAction: "" + (synCtx.getSoapAction() != null ?
                    synCtx.getSoapAction() : ""null""));
                traceOrDebug(traceOn, ""WSA-Action: "" + (synCtx.getWSAAction() != null ?
                    synCtx.getWSAAction() : ""null""));

                if (traceOn && trace.isTraceEnabled()) {
                    trace.trace(""Envelope : 
"" + synCtx.getEnvelope());
                }
            }
        }

        
        synCtx.pushFaultHandler(this);

        
        synCtx.setProperty(SynapseConstants.PROCESSED_ENDPOINT, this);

        synCtx.getEnvironment().send(endpoint, synCtx);
    }

    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
        
    }

    public void setParentEndpoint(Endpoint parentEndpoint) {
        this.parentEndpoint = parentEndpoint;
    }

    public long getSuspendOnFailDuration() {
        return suspendOnFailDuration;
    }

    public void setSuspendOnFailDuration(long suspendOnFailDuration) {
        this.suspendOnFailDuration = suspendOnFailDuration;
    }

    public void onFault(MessageContext synCtx) {
        

        
        setActive(false, synCtx);

        if (parentEndpoint != null) {
            parentEndpoint.onChildEndpointFail(this, synCtx);
        } else {
            Stack faultStack = synCtx.getFaultStack();
            if (!faultStack.isEmpty()) {
                ((FaultHandler) faultStack.pop()).handleFault(synCtx);
            }
        }
    }

    
    protected boolean isTraceOn(MessageContext msgCtx) {
        return
            (endpoint.getTraceState() == SynapseConstants.TRACING_ON) ||
            (endpoint.getTraceState() == SynapseConstants.TRACING_UNSET &&
                msgCtx.getTracingState() == SynapseConstants.TRACING_ON);
    }

    
    protected boolean isTraceOrDebugOn(boolean isTraceOn) {
        return isTraceOn || log.isDebugEnabled();
    }

    
    protected void traceOrDebug(boolean traceOn, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }
}
"
synapse,1.1,org.apache.synapse.registry.Registry,8,1,0,10,8,28,7,3,8,2.0,8,0.0,0,0.0,0.4375,0,0,0.0,1,1.0,0,"

package org.apache.synapse.registry;

import org.apache.axiom.om.OMNode;
import org.apache.synapse.config.Entry;

import java.util.Map;


public interface Registry {

    
    public OMNode lookup(String key);

    
    public Object getResource(Entry entry);

    
    public RegistryEntry getRegistryEntry(String key);

    
    public void addConfigProperty(String name, String value);

    
    public RegistryEntry[] getChildren(RegistryEntry entry);

    
    public RegistryEntry[] getDescendants(RegistryEntry entry);

    
    public String getProviderClass();

    
    public Map getConfigProperties();
}
"
synapse,1.1,org.apache.synapse.core.axis2.ProxyServiceMessageReceiver,8,2,0,20,62,0,1,20,4,0.535714286,523,1.0,1,0.333333333,0.404761905,1,2,63.875,4,1.625,2,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.*;
import org.apache.synapse.mediators.MediatorFaultHandler;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;


public class ProxyServiceMessageReceiver extends SynapseMessageReceiver {

    private static final Log log = LogFactory.getLog(ProxyServiceMessageReceiver.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    
    private String name = null;
    
    private ProxyService proxy = null;

    public void receive(org.apache.axis2.context.MessageContext mc) throws AxisFault {

        boolean traceOn = proxy.getTraceState() == SynapseConstants.TRACING_ON;
        boolean traceOrDebugOn = traceOn || log.isDebugEnabled();

        String remoteAddr = (String) mc.getProperty(
            org.apache.axis2.context.MessageContext.REMOTE_ADDR);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Proxy Service "" + name + "" received a new message"" +
                (remoteAddr != null ? "" from : "" + remoteAddr : ""...""));
            traceOrDebug(traceOn, (""Message To: "" +
                (mc.getTo() != null ? mc.getTo().getAddress() : ""null"")));
            traceOrDebug(traceOn, (""SOAPAction: "" +
                (mc.getSoapAction() != null ? mc.getSoapAction() : ""null"")));
            traceOrDebug(traceOn, (""WSA-Action: "" +
                (mc.getWSAAction() != null ? mc.getWSAAction() : ""null"")));

            if (traceOn && trace.isTraceEnabled()) {
                String[] cids = mc.getAttachmentMap().getAllContentIDs();
                if (cids != null && cids.length > 0) {
                    for (int i = 0; i < cids.length; i++) {
                        trace.trace(""With attachment content ID : "" + cids[i]);
                    }
                }
                trace.trace(""Envelope : "" + mc.getEnvelope());
            }
        }

        MessageContext synCtx = MessageContextCreatorForAxis2.getSynapseMessageContext(mc);

        
        Log serviceLog = LogFactory.getLog(SynapseConstants.SERVICE_LOGGER_PREFIX + name);
        ((Axis2MessageContext) synCtx).setServiceLog(serviceLog);

        synCtx.setProperty(SynapseConstants.PROXY_SERVICE, name);
        synCtx.setTracingState(proxy.getTraceState());

        try {
            
            boolean statsOn = (SynapseConstants.STATISTICS_ON == proxy.getStatisticsState());
            if (statsOn) {
                ProxyServiceStatisticsStack proxyServiceStatisticsStack
                        = new ProxyServiceStatisticsStack();
                boolean isFault = synCtx.getEnvelope().getBody().hasFault();
                proxyServiceStatisticsStack.put(name, System.currentTimeMillis(),
                        !synCtx.isResponse(), statsOn, isFault);
                synCtx.setProperty(SynapseConstants.PROXY_STATS,
                        proxyServiceStatisticsStack);
            }

            
            if (proxy.getTargetFaultSequence() != null) {

                Mediator faultSequence = synCtx.getSequence(proxy.getTargetFaultSequence());
                if (faultSequence != null) {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn,
                            ""Setting the fault-sequence to : "" + faultSequence);
                    }
                    synCtx.pushFaultHandler(new MediatorFaultHandler(
                        synCtx.getSequence(proxy.getTargetFaultSequence())));

                } else {
                    
                    
                    
                    traceOrDebug(traceOn, ""Unable to find fault-sequence : "" +
                        proxy.getTargetFaultSequence() + ""; using default fault sequence"");
                    synCtx.pushFaultHandler(new MediatorFaultHandler(
                        synCtx.getSequence(SynapseConstants.FAULT_SEQUENCE_KEY)));
                }

            } else if (proxy.getTargetInLineFaultSequence() != null) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Setting specified anonymous fault-sequence for proxy"");
                }
                synCtx.pushFaultHandler(
                    new MediatorFaultHandler(proxy.getTargetInLineFaultSequence()));
            }

            
            if (proxy.getTargetInSequence() != null) {

                Mediator inSequence = synCtx.getSequence(proxy.getTargetInSequence());
                if (inSequence != null) {
                    traceOrDebug(traceOn, ""Using sequence named : ""
                        + proxy.getTargetInSequence() + "" for incoming message mediation"");
                    inSequence.mediate(synCtx);

                } else {
                    handleException(""Unable to find in-sequence : "" + proxy.getTargetInSequence(), synCtx);
                }

            } else if (proxy.getTargetInLineInSequence() != null) {
                traceOrDebug(traceOn, ""Using the anonymous "" +
                    ""in-sequence of the proxy service for mediation"");
                proxy.getTargetInLineInSequence().mediate(synCtx);
            }

            if (proxy.getTargetEndpoint() != null) {
                Endpoint endpoint = synCtx.getEndpoint(proxy.getTargetEndpoint());

                if (endpoint != null) {
                    traceOrDebug(traceOn, ""Forwarding message to the endpoint : ""
                        + proxy.getTargetEndpoint());
                    endpoint.send(synCtx);

                } else {
                    handleException(""Unable to find the endpoint specified : "" +
                        proxy.getTargetEndpoint(), synCtx);
                }

            } else if (proxy.getTargetInLineEndpoint() != null) {
                traceOrDebug(traceOn, ""Forwarding the message to the anonymous "" +
                    ""endpoint of the proxy service"");
                proxy.getTargetInLineEndpoint().send(synCtx);
            }

        } catch (SynapseException syne) {

            if (!synCtx.getFaultStack().isEmpty()) {
                warn(traceOn, ""Executing fault handler due to exception encountered"", synCtx);
                ((FaultHandler) synCtx.getFaultStack().pop()).handleFault(synCtx, syne);

            } else {
                warn(traceOn, ""Exception encountered but no fault handler found - "" +
                    ""message dropped"", synCtx);
            }
        }
    }

    
    public void setName(String name) {
        this.name = name;
    }

    
    public void setProxy(ProxyService proxy) {
        this.proxy = proxy;
    }

    private void traceOrDebug(boolean traceOn, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }

    private void warn(boolean traceOn, String msg, MessageContext msgContext) {
        if (traceOn) {
            trace.warn(msg);
        }
        if (log.isDebugEnabled()) {
            log.warn(msg);
        }
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().warn(msg);
        }
    }

    private void handleException(String msg, MessageContext msgContext) {
        log.error(msg);
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().error(msg);
        }
        if (proxy.getTraceState() == SynapseConstants.TRACING_ON) {
            trace.error(msg);
        }
        throw new SynapseException(msg);
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.ConfigurationFactory,3,1,0,4,3,3,2,2,3,2.0,3,0.0,0,0.0,0.666666667,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config.xml;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.config.SynapseConfiguration;


public interface ConfigurationFactory {

    
    QName getTagQName();

    
    SynapseConfiguration getConfiguration(OMElement element);

    
    Class getSerializerClass();
}
"
synapse,1.1,org.apache.synapse.core.axis2.Axis2FlexibleMEPClient,9,1,0,39,96,30,1,38,3,0.625,556,1.0,0,0.0,0.196428571,0,0,60.66666667,6,2.3333,3,"

package org.apache.synapse.core.axis2;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPFactory;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.addressing.AddressingConstants;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.client.OperationClient;
import org.apache.axis2.client.Options;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.context.ServiceContext;
import org.apache.axis2.context.ServiceGroupContext;
import org.apache.axis2.description.AxisOperation;
import org.apache.axis2.description.AxisService;
import org.apache.axis2.description.AxisServiceGroup;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.axis2.wsdl.WSDLConstants;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.neethi.Policy;
import org.apache.neethi.PolicyEngine;
import org.apache.sandesha2.client.SandeshaClientConstants;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.util.MessageHelper;

import javax.xml.namespace.QName;
import java.util.ArrayList;


public class Axis2FlexibleMEPClient {

    private static final Log log = LogFactory.getLog(Axis2FlexibleMEPClient.class);

    
    public static void send(

        EndpointDefinition endpoint,
        org.apache.synapse.MessageContext synapseOutMessageContext) throws AxisFault {

        boolean separateListener    = false;
        boolean wsSecurityEnabled   = false;
        String wsSecPolicyKey       = null;
        boolean wsRMEnabled         = false;
        String wsRMPolicyKey        = null;
        boolean wsAddressingEnabled = false;

        if (endpoint != null) {
            separateListener    = endpoint.isUseSeparateListener();
            wsSecurityEnabled   = endpoint.isSecurityOn();
            wsSecPolicyKey      = endpoint.getWsSecPolicyKey();
            wsRMEnabled         = endpoint.isReliableMessagingOn();
            wsRMPolicyKey       = endpoint.getWsRMPolicyKey();
            wsAddressingEnabled = endpoint.isAddressingOn() || wsSecurityEnabled || wsRMEnabled;
        }

        if (log.isDebugEnabled()) {
            log.debug(
                ""Sending [add = "" + wsAddressingEnabled +
                ""] [sec = "" + wsSecurityEnabled +
                ""] [rm = "" + wsRMEnabled +
                (endpoint != null ?
                    ""] [ mtom = "" + endpoint.isUseMTOM() +
                    ""] [ swa = "" + endpoint.isUseSwa() +
                    ""] [ format = "" + endpoint.getFormat() +                    
                    ""] [ force soap11="" + endpoint.isForceSOAP11() +
                    ""] [ force soap12="" + endpoint.isForceSOAP12() +
                    ""] [ pox="" + endpoint.isForcePOX() +
                    ""] [ get="" + endpoint.isForcePOX() : """") +
                ""] [ to "" + synapseOutMessageContext.getTo() + ""]"");
        }

        
        MessageContext originalInMsgCtx
            = ((Axis2MessageContext) synapseOutMessageContext).getAxis2MessageContext();

        
        
        MessageContext axisOutMsgCtx = cloneForSend(originalInMsgCtx);

        
        
        if (endpoint != null) {

            if (SynapseConstants.FORMAT_POX.equals(endpoint.getFormat())) {
                axisOutMsgCtx.setDoingREST(true);

            } else if (SynapseConstants.FORMAT_GET.equals(endpoint.getFormat())) {
                axisOutMsgCtx.setDoingREST(true);
                axisOutMsgCtx.setProperty(Constants.Configuration.HTTP_METHOD,
                    Constants.Configuration.HTTP_METHOD_GET);
                
            } else if (SynapseConstants.FORMAT_SOAP11.equals(endpoint.getFormat())) {
                axisOutMsgCtx.setDoingREST(false);
                if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {
                    axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());
                }
                if(!axisOutMsgCtx.isSOAP11()) {
                    SOAPUtils.convertSOAP12toSOAP11(axisOutMsgCtx);
                }
                
            } else if (SynapseConstants.FORMAT_SOAP12.equals(endpoint.getFormat())) {
                axisOutMsgCtx.setDoingREST(false);
                if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {
                    axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());
                }
                if(axisOutMsgCtx.isSOAP11()) {
                    SOAPUtils.convertSOAP11toSOAP12(axisOutMsgCtx);
                }                
                
            }

            if (endpoint.isUseMTOM()) {
                axisOutMsgCtx.setDoingMTOM(true);
                
                axisOutMsgCtx.setProperty(
                        org.apache.axis2.Constants.Configuration.ENABLE_MTOM,
                        org.apache.axis2.Constants.VALUE_TRUE);
                axisOutMsgCtx.setDoingMTOM(true);

            } else if (endpoint.isUseSwa()) {
                axisOutMsgCtx.setDoingSwA(true);
                
                axisOutMsgCtx.setProperty(
                        org.apache.axis2.Constants.Configuration.ENABLE_SWA,
                        org.apache.axis2.Constants.VALUE_TRUE);
                axisOutMsgCtx.setDoingSwA(true);
            }

            if (endpoint.getAddress() != null) {
                axisOutMsgCtx.setTo(new EndpointReference(endpoint.getAddress()));
            }

            if (endpoint.isUseSeparateListener()) {
                axisOutMsgCtx.getOptions().setUseSeparateListener(true);
            }
        }

        if (wsAddressingEnabled) {
            axisOutMsgCtx.setProperty
                    (AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.FALSE);

        } else {
            axisOutMsgCtx.setProperty
                    (AddressingConstants.DISABLE_ADDRESSING_FOR_OUT_MESSAGES, Boolean.TRUE);
        }

        ConfigurationContext axisCfgCtx = axisOutMsgCtx.getConfigurationContext();
        AxisConfiguration axisCfg       = axisCfgCtx.getAxisConfiguration();

        AxisService anoymousService =
            AnonymousServiceFactory.getAnonymousService(synapseOutMessageContext.getConfiguration(),
            axisCfg, wsAddressingEnabled, wsRMEnabled, wsSecurityEnabled);
        ServiceGroupContext sgc = new ServiceGroupContext(
            axisCfgCtx, (AxisServiceGroup) anoymousService.getParent());
        ServiceContext serviceCtx = sgc.getServiceContext(anoymousService);

        boolean outOnlyMessage = ""true"".equals(
            synapseOutMessageContext.getProperty(SynapseConstants.OUT_ONLY));

        
        AxisOperation axisAnonymousOperation = anoymousService.getOperation(
            outOnlyMessage ?
                new QName(AnonymousServiceFactory.OUT_ONLY_OPERATION) :
                new QName(AnonymousServiceFactory.OUT_IN_OPERATION));

        Options clientOptions = new Options();
        clientOptions.setUseSeparateListener(separateListener);
        
        if (wsRMEnabled) {
            
            if (wsRMPolicyKey != null) {
                clientOptions.setProperty(
                    SynapseConstants.SANDESHA_POLICY,
                    getPolicy(synapseOutMessageContext, wsRMPolicyKey));
            }
            copyRMOptions(originalInMsgCtx, clientOptions);
        }

        
        if (wsSecurityEnabled) {
            
            if (wsSecPolicyKey != null) {
                clientOptions.setProperty(
                    SynapseConstants.RAMPART_POLICY,
                    getPolicy(synapseOutMessageContext, wsSecPolicyKey));
            }
            
            if (axisOutMsgCtx.getEnvelope().getHeader() == null) {
                SOAPFactory fac = axisOutMsgCtx.isSOAP11() ?
                    OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
                fac.createSOAPHeader(axisOutMsgCtx.getEnvelope());
            }
        }

        OperationClient mepClient = axisAnonymousOperation.createClient(serviceCtx, clientOptions);
        mepClient.addMessageContext(axisOutMsgCtx);
        axisOutMsgCtx.setAxisMessage(
            axisAnonymousOperation.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE));

        if (!outOnlyMessage) {
            
            
            
            
            AsyncCallback callback = new AsyncCallback(synapseOutMessageContext);
            if (endpoint != null) {
                
                
                callback.setTimeOutOn(System.currentTimeMillis() + endpoint.getTimeoutDuration());
                callback.setTimeOutAction(endpoint.getTimeoutAction());
            } else {
                callback.setTimeOutOn(System.currentTimeMillis());
            }
            mepClient.setCallback(callback);
        }

        mepClient.execute(true);

        
        
        
        originalInMsgCtx.getOperationContext().setProperty(
            org.apache.axis2.Constants.RESPONSE_WRITTEN, ""SKIP"");
   }

    private static MessageContext cloneForSend(MessageContext ori) throws AxisFault {

        MessageContext newMC = MessageHelper.clonePartially(ori);

        newMC.setEnvelope(ori.getEnvelope());        
        removeAddressingHeaders(newMC);

        newMC.setProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS,
            ori.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS));

        return newMC;
    }

    private static void copyRMOptions(MessageContext oriContext, Options targetOptions) {
        Options oriOptions = oriContext.getOptions();
        if (oriOptions.getProperty(SynapseConstants.SANDESHA_LAST_MESSAGE) != null) {
            targetOptions.setProperty(SynapseConstants.SANDESHA_LAST_MESSAGE,
                    oriOptions.getProperty(SynapseConstants.SANDESHA_LAST_MESSAGE));
        }
        if (oriOptions.getProperty(SynapseConstants.SANDESHA_SPEC_VERSION) != null) {
            targetOptions.setProperty(SynapseConstants.SANDESHA_SPEC_VERSION,
                    oriOptions.getProperty(SynapseConstants.SANDESHA_SPEC_VERSION));
        }
        if (oriOptions.getProperty(SynapseConstants.SANDESHA_SEQUENCE_KEY) != null) {
            targetOptions.setProperty(SynapseConstants.SANDESHA_SEQUENCE_KEY,
                    oriOptions.getProperty(SynapseConstants.SANDESHA_SEQUENCE_KEY));
        }
        if (oriOptions.getProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID) != null) {
            targetOptions.setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID,
                    oriOptions.getProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID));
        }
    }

    
    private static Policy getPolicy(org.apache.synapse.MessageContext synCtx, String propertyKey) {
        Object property = synCtx.getEntry(propertyKey);
        if (property != null && property instanceof OMElement) {
            return PolicyEngine.getPolicy((OMElement) property);
        } else {
            handleException(""Cannot locate policy from the property : "" + propertyKey);
        }
        return null;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    
    public static SOAPEnvelope removeAddressingHeaders(MessageContext axisMsgCtx) {

        SOAPEnvelope env = axisMsgCtx.getEnvelope();
        SOAPHeader soapHeader = env.getHeader();
        ArrayList addressingHeaders;

        if (soapHeader != null) {
            addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(
                AddressingConstants.Submission.WSA_NAMESPACE);

            if (addressingHeaders != null && addressingHeaders.size() != 0) {
                detachAddressingInformation(addressingHeaders);

            } else {
                addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(
                    AddressingConstants.Final.WSA_NAMESPACE);
                if (addressingHeaders != null && addressingHeaders.size() != 0) {
                    detachAddressingInformation(addressingHeaders);
                }
            }
        }
        return env;
    }

    
    private static void detachAddressingInformation(ArrayList headerInformation) {
        for (Object o : headerInformation) {
            if (o instanceof SOAPHeaderBlock) {
                SOAPHeaderBlock headerBlock = (SOAPHeaderBlock) o;
                headerBlock.detach();
            } else if (o instanceof OMElement) {
                
                OMElement om = (OMElement) o;
                OMNamespace ns = om.getNamespace();
                if (ns != null && (
                    AddressingConstants.Submission.WSA_NAMESPACE.equals(ns.getNamespaceURI()) ||
                        AddressingConstants.Final.WSA_NAMESPACE.equals(ns.getNamespaceURI()))) {
                    om.detach();
                }
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.mediators.builtin.ValidateMediator,11,3,0,17,79,1,3,15,9,0.814285714,563,0.857142857,0,0.6875,0.303030303,1,3,49.54545455,16,2.7273,0,"

package org.apache.synapse.mediators.builtin;

import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.SOAP11Constants;
import org.apache.axiom.soap.SOAP12Constants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.config.SynapseConfigUtils;
import org.apache.synapse.config.Entry;
import org.apache.synapse.mediators.AbstractListMediator;
import org.apache.synapse.mediators.MediatorProperty;
import org.jaxen.JaxenException;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.Source;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import javax.xml.XMLConstants;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.*;


public class ValidateMediator extends AbstractListMediator {

    
    private List schemaKeys = new ArrayList();

    
    private AXIOMXPath source = null;

    
    private List explicityFeatures = new ArrayList();

    
    private Schema cachedSchema;

    
    private final Object validatorLock = new Object();

    
    private  SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);




    public static final String DEFAULT_XPATH = ""s11:Body/child::*[position()=1] | "" +
        ""s12:Body/child::*[position()=1]"";
    
    public ValidateMediator() {
        
        try {
            this.source = new AXIOMXPath(DEFAULT_XPATH);
            this.source.addNamespace(""s11"", SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
            this.source.addNamespace(""s12"", SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        } catch (JaxenException e) {
            String msg = ""Error creating default source XPath expression : "" + DEFAULT_XPATH;
            log.error(msg, e);
            throw new SynapseException(msg, e);
        }
    }

    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Validate mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        
        Source validateSrc = getValidationSource(synCtx, traceOrDebugOn, traceOn);

        
        boolean reCreate = false;
        
        for (Iterator iter = schemaKeys.iterator(); iter.hasNext();) {
            String propKey = (String) iter.next();
            Entry dp = synCtx.getConfiguration().getEntryDefinition(propKey);
            if (dp != null && dp.isDynamic()) {
                if (!dp.isCached() || dp.isExpired()) {
                    reCreate = true;       
                }
            }
        }

        
        MyErrorHandler errorHandler = new MyErrorHandler();

        
        synchronized (validatorLock) {
            if (reCreate || cachedSchema == null) {

                factory.setErrorHandler(errorHandler);
                StreamSource[] sources = new StreamSource[schemaKeys.size()];
                int i = 0;
                for (Iterator iterator = schemaKeys.iterator(); iterator.hasNext();) {
                    String propName = (String) iterator.next();
                    sources[i++] = SynapseConfigUtils.getStreamSource(synCtx.getEntry(propName));
                }

                try {
                    cachedSchema = factory.newSchema(sources);
                } catch (SAXException e) {
                    handleException(""Error creating a new schema objects for "" +
                        ""schemas : "" + schemaKeys.toString(), e, synCtx);
                }

                if (errorHandler.isValidationError()) {
                    
                    errorHandler.setValidationError(false);

                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Error creating a new schema objects for "" +
                            ""schemas : "" + schemaKeys.toString());
                    }
                }
            }
        }

        
        try {
            Validator validator = cachedSchema.newValidator();
            validator.setErrorHandler(errorHandler);

            
            validator.validate(validateSrc);

            if (errorHandler.isValidationError()) {

                if (traceOrDebugOn) {
                    String msg = ""Validation of element returned by XPath : "" + source +
                        "" failed against the given schema(s) "" + schemaKeys +
                        ""with error : "" + errorHandler.getSaxParseException().getMessage() +
                        "" Executing 'on-fail' sequence"";
                    traceOrDebug(traceOn, msg);

                    
                    synCtx.getServiceLog().warn(msg);

                    if (traceOn && trace.isTraceEnabled()) {
                        log.debug(""Failed message envelope : "" + synCtx.getEnvelope());
                    }
                }

                
                synCtx.setProperty(SynapseConstants.ERROR_MESSAGE,
                    errorHandler.getSaxParseException().getMessage());
                synCtx.setProperty(SynapseConstants.ERROR_EXCEPTION,
                    errorHandler.getSaxParseException());
                synCtx.setProperty(SynapseConstants.ERROR_DETAIL,
                    FaultHandler.getStackTrace(errorHandler.getSaxParseException()));

                
                return super.mediate(synCtx);
            }
        } catch (SAXException e) {
            handleException(""Error validating "" + source + "" element"", e, synCtx);
        } catch (IOException e) {
            handleException(""Error validating "" + source + "" element"", e, synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Validation of element returned by the XPath expression : ""
                + source + "" succeeded against the given schemas and the current message"");
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Validate mediator"");
        }

        return true;
    }

    
    private Source getValidationSource(MessageContext synCtx,
        boolean traceOrDebugOn, boolean traceOn) {

        try {
            
            ByteArrayOutputStream baosForSource = new ByteArrayOutputStream();
            XMLStreamWriter xsWriterForSource =
                    XMLOutputFactory.newInstance().createXMLStreamWriter(baosForSource);

            
            OMNode validateSource = getValidateSource(synCtx);
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Validation source : "" + validateSource.toString());
            }
            validateSource.serialize(xsWriterForSource);

            ByteArrayInputStream baisFromSource = new ByteArrayInputStream(
                baosForSource.toByteArray());
            XMLReader reader = XMLReaderFactory.createXMLReader();
            return new SAXSource(reader, new InputSource(baisFromSource));

        } catch (Exception e) {
            handleException(""Error accessing source element : "" + source, e, synCtx);
        }
        return null; 
    }

    
    private class MyErrorHandler extends DefaultHandler {

        private boolean validationError = false;
        private SAXParseException saxParseException = null;

        public void error(SAXParseException exception) throws SAXException {
            validationError = true;
            saxParseException = exception;
        }

        public void fatalError(SAXParseException exception) throws SAXException {
            validationError = true;
            saxParseException = exception;
        }

        public void warning(SAXParseException exception) throws SAXException {
        }

        public boolean isValidationError() {
            return validationError;
        }

        public SAXParseException getSaxParseException() {
            return saxParseException;
        }
        
        
        public void setValidationError(boolean validationError) {
            this.validationError = validationError;
        }
    }

    
    private OMNode getValidateSource(MessageContext synCtx) {

        try {
            Object o = source.evaluate(synCtx.getEnvelope());
            if (o instanceof OMNode) {
                return (OMNode) o;
            } else if (o instanceof List && !((List) o).isEmpty()) {
                return (OMNode) ((List) o).get(0);  
            } else {
                handleException(""The evaluation of the XPath expression ""
                    + source + "" did not result in an OMNode : "" + o, synCtx);
            }
        } catch (JaxenException e) {
            handleException(""Error evaluating XPath expression : "" + source, e, synCtx);
        }
        return null;
    }

    

    
    public Object getFeature(String key) {
        for (Iterator iter = explicityFeatures.iterator(); iter.hasNext();) {
            MediatorProperty prop = (MediatorProperty) iter.next();
            if (key.equals(prop.getName())) {
                return prop.getValue();
            }
        }
        return null;
    }

    
   public void addFeature(String featureName, boolean isFeatureEnable) throws SAXException {
        MediatorProperty mp = new MediatorProperty();
        mp.setName(featureName);
        if (isFeatureEnable) {
            mp.setValue(""true"");
        } else {
            mp.setValue(""false"");
        }
        explicityFeatures.add(mp);
        factory.setFeature(featureName, isFeatureEnable);
    }

    
    public void setSchemaKeys(List schemaKeys) {
        this.schemaKeys = schemaKeys;
    }

    
    public void setSource(AXIOMXPath source) {
       this.source = source;
    }

    
    public AXIOMXPath getSource() {
        return source;
    }

    
    public List getSchemaKeys() {
        return schemaKeys;
    }

    
    public List getFeatures() {
        return explicityFeatures;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.XMLConfigurationSerializer,3,1,0,5,8,1,0,5,2,0.5,21,1.0,0,0.0,0.5,0,0,5.666666667,1,0.3333,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
import org.apache.synapse.core.axis2.ProxyService;

import javax.xml.stream.XMLStreamException;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;


public class XMLConfigurationSerializer {

    private static final Log log = LogFactory.getLog(XMLConfigurationSerializer.class);

    
    public static void serializeConfiguration(SynapseConfiguration synCfg,
        OutputStream outputStream) throws XMLStreamException {

        log.info(""Serializing the XML Configuration to the output stream"");
        
        OMElement definitions
                = ConfigurationFactoryAndSerializerFinder.serializeConfiguration(synCfg);
        definitions.serialize(outputStream);
    }
    
}
"
synapse,1.1,org.apache.synapse.mediators.filters.FilterMediator,9,3,0,10,27,0,2,8,9,0.5,281,1.0,0,0.733333333,0.388888889,1,2,29.88888889,10,2.6667,0,"

package org.apache.synapse.mediators.filters;

import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractListMediator;
import org.jaxen.JaxenException;

import java.util.regex.Pattern;
import java.util.regex.Matcher;


public class FilterMediator extends AbstractListMediator implements org.apache.synapse.mediators.FilterMediator {

    private AXIOMXPath source = null;
    private Pattern regex = null;
    private AXIOMXPath xpath = null;

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Filter mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        boolean result = false;
        if (test(synCtx)) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, (xpath == null ?
                    ""Source : "" + source + "" against : "" + regex.pattern() + "" matches"" :
                    ""XPath expression : ""  + xpath + "" evaluates to true"") +
                    "" - executing child mediators"");
            }
            result = super.mediate(synCtx);

        } else {

            if (traceOrDebugOn) {
                traceOrDebug(traceOn, (xpath == null ?
                    ""Source : "" + source + "" against : "" + regex.pattern() + "" does not match"" :
                    ""XPath expression : ""  + xpath + "" evaluates to false"") +
                    "" - skipping child mediators"");
            }
            result = true;
        }

        if (traceOrDebugOn) {
            trace.trace(""End : Filter mediator "");
        }
        return result;
    }

    
    public boolean test(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (xpath != null) {
            try {
                return xpath.booleanValueOf(synCtx.getEnvelope());
            } catch (JaxenException e) {
                handleException(""Error evaluating XPath expression : "" + xpath, e, synCtx);
            }

        } else if (source != null && regex != null) {
            String sourceString = Axis2MessageContext.getStringValue(source, synCtx);
            if (sourceString == null) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Source String : "" + source + "" evaluates to null"");
                }
                return false;
            }
            Matcher matcher = regex.matcher(sourceString);
            if (matcher == null) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Regex pattren matcher for : "" + regex.pattern() +
                        ""against source : "" + sourceString + "" is null"");
                }
                return false;
            }
            return matcher.matches();
        }

        return false; 
    }


    public AXIOMXPath getSource() {
        return source;
    }

    public void setSource(AXIOMXPath source) {
        this.source = source;
    }

    public Pattern getRegex() {
        return regex;
    }

    public void setRegex(Pattern regex) {
        this.regex = regex;
    }

    public AXIOMXPath getXpath() {
        return xpath;
    }

    public void setXpath(AXIOMXPath xpath) {
        this.xpath = xpath;
    }

}
"
synapse,1.1,org.apache.synapse.startup.AbstractStartup,3,1,1,2,4,0,1,1,3,0.0,17,1.0,0,0.0,0.666666667,0,0,4.333333333,1,0.6667,0,"

package org.apache.synapse.startup;

import org.apache.synapse.Startup;


public abstract class AbstractStartup implements Startup {

    
    protected String name = null;

    
    public String getName() {
        return this.name;
    }

    
    public void setName(String name) {
        this.name = name;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.FailoverEndpoint,10,1,0,7,22,11,3,4,10,0.622222222,169,1.0,2,0.0,0.316666667,0,0,15.4,7,1.9,1,"

package org.apache.synapse.endpoints;

import org.apache.synapse.FaultHandler;
import org.apache.synapse.MessageContext;

import java.util.List;


public class FailoverEndpoint implements Endpoint {

    
    private String name = null;

    
    private volatile boolean active = true;

    
    private List endpoints = null;

    
    private Endpoint currentEndpoint = null;

    
    private Endpoint parentEndpoint = null;

    public void send(MessageContext synMessageContext) {

        
        
        
        synMessageContext.getEnvelope().build();

        if (currentEndpoint.isActive(synMessageContext)) {
            currentEndpoint.send(synMessageContext);
        } else {

            Endpoint liveEndpoint = null;
            boolean foundEndpoint = false;
            for (int i = 0; i < endpoints.size(); i++) {
                liveEndpoint = (Endpoint) endpoints.get(i);
                if (liveEndpoint.isActive(synMessageContext)) {
                    foundEndpoint = true;
                    currentEndpoint = liveEndpoint;
                    currentEndpoint.send(synMessageContext);
                    break;
                }
            }

            if (!foundEndpoint) {
                
                setActive(false, synMessageContext);

                if (parentEndpoint != null) {
                    parentEndpoint.onChildEndpointFail(this, synMessageContext);
                } else {
                    Object o = synMessageContext.getFaultStack().pop();
                    if (o != null) {
                        ((FaultHandler) o).handleFault(synMessageContext);
                    }
                }
            }
        }
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name.trim();
    }

    
    public boolean isActive(MessageContext synMessageContext) {

        if (!active) {
            for (int i = 0; i < endpoints.size(); i++) {
                Endpoint endpoint = (Endpoint) endpoints.get(i);
                if (endpoint.isActive(synMessageContext)) {
                    active = true;

                    
                    
                    
                }
            }
        }

        return active;
    }

    public void setActive(boolean active, MessageContext synMessageContext) {
        
        this.active = active;
    }

    public List getEndpoints() {
        return endpoints;
    }

    public void setEndpoints(List endpoints) {
        this.endpoints = endpoints;
        if (endpoints.size() > 0) {
            currentEndpoint = (Endpoint) endpoints.get(0);
        }
    }

    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
        send(synMessageContext);
    }

    public void setParentEndpoint(Endpoint parentEndpoint) {
        this.parentEndpoint = parentEndpoint;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.StartupFactory,3,1,0,4,3,3,2,2,3,2.0,3,0.0,0,0.0,0.666666667,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config.xml;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Startup;


public interface StartupFactory {

    
    public Startup createStartup(OMElement elem);

    
    public QName getTagQName();

    
    public Class getSerializerClass();
}
"
synapse,1.1,org.apache.synapse.config.xml.CloneMediatorSerializer,3,2,0,10,16,3,0,10,3,2.0,56,0.0,0,0.75,0.555555556,0,0,17.66666667,4,1.6667,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.eip.splitter.CloneMediator;
import org.apache.synapse.mediators.eip.Target;

import java.util.Iterator;


public class CloneMediatorSerializer extends AbstractMediatorSerializer {

    
    public OMElement serializeMediator(OMElement parent, Mediator m) {

        OMElement cloneElem = fac.createOMElement(""clone"", synNS);
        saveTracingState(cloneElem, m);

        CloneMediator clone = (CloneMediator) m;
        if (clone.isContinueParent()) {
            cloneElem.addAttribute(""continueParent"", Boolean.toString(true), nullNS);
        }

        for (Iterator itr = clone.getTargets().iterator(); itr.hasNext();) {
            Object o = itr.next();
            if (o instanceof Target) {
                cloneElem.addChild(TargetSerializer.serializeTarget((Target) o));
            }
        }

        
        if (parent != null) {
            parent.addChild(cloneElem);
        }

        return cloneElem;
    }

    
    public String getMediatorClassName() {
        return CloneMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.FilterMediatorSerializer,3,3,0,9,23,3,0,9,3,2.0,100,0.0,0,0.777777778,0.555555556,0,0,32.33333333,6,2.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.filters.FilterMediator;


public class FilterMediatorSerializer extends AbstractListMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof FilterMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        FilterMediator mediator = (FilterMediator) m;
        OMElement filter = fac.createOMElement(""filter"", synNS);

        if (mediator.getSource() != null && mediator.getRegex() != null) {
            filter.addAttribute(fac.createOMAttribute(
                ""source"", nullNS, mediator.getSource().toString()));
            super.serializeNamespaces(filter, mediator.getSource());

            filter.addAttribute(fac.createOMAttribute(
                ""regex"", nullNS, mediator.getRegex().pattern()));

        } else if (mediator.getXpath() != null) {
            filter.addAttribute(fac.createOMAttribute(
                ""xpath"", nullNS, mediator.getXpath().toString()));
            super.serializeNamespaces(filter, mediator.getXpath());

        } else {
            handleException(""Invalid filter mediator. "" +
                ""Should have either a 'source' and a 'regex' OR an 'xpath' "");
        }

        saveTracingState(filter, mediator);
        serializeChildren(filter, mediator.getList());

        if (parent != null) {
            parent.addChild(filter);
        }
        return filter;
    }

    public String getMediatorClassName() {
        return FilterMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.RegistryFactory,6,1,0,7,26,5,1,6,2,0.55,156,0.25,0,0.0,0.28,0,0,24.33333333,4,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.registry.Registry;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class RegistryFactory {

    private static final Log log = LogFactory.getLog(RegistryFactory.class);

    public static final QName PROVIDER_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""provider"");
    public static final QName PARAMETER_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""parameter"");
    public static final QName NAME_Q     = new QName(XMLConfigConstants.NULL_NAMESPACE, ""name"");

    public static Registry createRegistry(OMElement elem) {

        OMAttribute prov = elem.getAttribute(PROVIDER_Q);
        if (prov != null) {
            try {
                Class provider = Class.forName(prov.getAttributeValue());
                Registry registry = (Registry) provider.newInstance();
                setProperties(registry, elem);
                return registry;

            } catch (ClassNotFoundException e) {
                handleException(""Cannot locate registry provider class : "" +
                    prov.getAttributeValue(), e);
            } catch (IllegalAccessException e) {
                handleException(""Error instantiating registry provider : "" +
                    prov.getAttributeValue(), e);
            } catch (InstantiationException e) {
                handleException(""Error instantiating registry provider : "" +
                    prov.getAttributeValue(), e);
            }
        } else {
            handleException(""The registry 'provider' attribute is required for a registry definition"");
        }

        return null;
    }

    private static void setProperties(Registry reg, OMElement elem) {
        Iterator params = elem.getChildrenWithName(PARAMETER_Q);
        while (params.hasNext()) {
            Object o = params.next();
            if (o instanceof OMElement) {
                OMElement prop = (OMElement) o;
                OMAttribute pname = prop.getAttribute(NAME_Q);
                String propertyValue = prop.getText();
                if (pname != null) {
                    if (propertyValue != null) {
                        reg.addConfigProperty(pname.getAttributeValue(), propertyValue.trim());
                    }
                } else {
                    handleException(""Invalid registry property - property should have a name "");
                }
            } else {
                handleException(""Invalid registry property"");
            }
        }
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.DBLookupMediatorFactory,4,3,0,5,9,4,0,5,3,0.666666667,31,1.0,0,0.818181818,0.666666667,0,0,6.5,1,0.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.db.DBLookupMediator;

import javax.xml.namespace.QName;


public class DBLookupMediatorFactory extends AbstractDBMediatorFactory {

    private static final QName DBLOOKUP_Q =
        new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""dblookup"");

    public Mediator createMediator(OMElement elem) {

        DBLookupMediator mediator = new DBLookupMediator();
        buildDataSource(elem, mediator);
        processStatements(elem, mediator);
        return mediator;
    }

    public QName getTagQName() {
        return DBLOOKUP_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.SALoadbalanceEndpointFactory,8,1,0,17,38,20,1,17,3,0.642857143,191,1.0,1,0.0,0.244897959,0,0,22.625,6,1.625,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
import org.apache.synapse.endpoints.dispatch.Dispatcher;
import org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher;
import org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher;
import org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher;
import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMNode;

import javax.xml.namespace.QName;
import java.util.ArrayList;
import java.util.Iterator;


public class SALoadbalanceEndpointFactory implements EndpointFactory {

    private static Log log = LogFactory.getLog(LoadbalanceEndpointFactory.class);

    private static SALoadbalanceEndpointFactory instance = new SALoadbalanceEndpointFactory();

    private SALoadbalanceEndpointFactory() {}

    public static SALoadbalanceEndpointFactory getInstance() {
        return instance;
    }

    public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {

        
        SALoadbalanceEndpoint loadbalanceEndpoint = new SALoadbalanceEndpoint();

        
        OMElement sessionElement = epConfig.
                getFirstChildWithName(new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""session""));
        if (sessionElement != null) {

            String type = sessionElement.getAttributeValue(new QName(""type""));

            if (type.equalsIgnoreCase(""soap"")) {
                Dispatcher soapDispatcher = new SoapSessionDispatcher();
                loadbalanceEndpoint.setDispatcher(soapDispatcher);

            } else if (type.equalsIgnoreCase(""http"")) {
                Dispatcher httpDispatcher = new HttpSessionDispatcher();
                loadbalanceEndpoint.setDispatcher(httpDispatcher);

            } else if (type.equalsIgnoreCase(""simpleClientSession"")) {
                Dispatcher csDispatcher = new SimpleClientSessionDispatcher();
                loadbalanceEndpoint.setDispatcher(csDispatcher);
            }
        } else {
            handleException(""Session affinity endpoints should have a session element in the configuration."");
        }

        
        OMAttribute name = epConfig.getAttribute(new QName(
                org.apache.synapse.config.xml.XMLConfigConstants.NULL_NAMESPACE, ""name""));

        if (name != null) {
            loadbalanceEndpoint.setName(name.getAttributeValue());
        }

        OMElement loadbalanceElement =  null;
        loadbalanceElement = epConfig.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""loadbalance""));

        if(loadbalanceElement != null) {

            
            ArrayList endpoints = getEndpoints(loadbalanceElement, loadbalanceEndpoint);
            loadbalanceEndpoint.setEndpoints(endpoints);

            
            LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory.
                    createLoadbalanceAlgorithm(loadbalanceElement, endpoints);
            loadbalanceEndpoint.setAlgorithm(algorithm);

            
            
            
            
            
            
            
            
            

            
            
            
            
            
            
            
            

            
            
            
            
            
            
            
            

            return loadbalanceEndpoint;
        }

        return null;  
    }

    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return createEndpoint((OMElement) om, false);
        } else {
            handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
        }
        return null;
    }

    private ArrayList getEndpoints(OMElement loadbalanceElement, Endpoint parent) {

        ArrayList endpoints = new ArrayList();
        Iterator iter = loadbalanceElement.getChildrenWithName
                (org.apache.synapse.config.xml.XMLConfigConstants.ENDPOINT_ELT);
        while (iter.hasNext()) {

            OMElement endptElem = (OMElement) iter.next();

            EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
            Endpoint endpoint = epFac.createEndpoint(endptElem, true);
            endpoint.setParentEndpoint(parent);
            endpoints.add(endpoint);
        }

        return endpoints;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.POJOCommandMediatorFactory,4,2,0,10,30,4,0,10,3,0.666666667,141,1.0,0,0.6,0.666666667,0,0,34.0,6,1.75,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.ext.POJOCommandMediator;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class POJOCommandMediatorFactory extends AbstractMediatorFactory {

    private static final QName POJO_COMMAND_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""pojoCommand"");
    protected static final QName ATT_ACTION = new QName(""action"");
    protected static final QName ATT_CTXNAME = new QName(""context-name"");

    protected static final String RM_ACTION = ""ReadMessage"";
    protected static final String UM_ACTION = ""UpdateMessage"";
    protected static final String RC_ACTION = ""ReadContext"";
    protected static final String UC_ACTION = ""UpdateContext"";
    protected static final String RAUM_ACTION = ""ReadAndUpdateMessage"";
    protected static final String RAUC_ACTION = ""ReadAndUpdateContext"";

    public Mediator createMediator(OMElement elem) {

        POJOCommandMediator pojoMediator = new POJOCommandMediator();

        
        OMAttribute name = elem.getAttribute(ATT_NAME);
        if (name == null) {
            String msg = ""The name of the actual POJO command implementation class"" +
                    "" is a required attribute"";
            log.error(msg);
            throw new SynapseException(msg);
        }

        
        try {
            pojoMediator.setCommand(
                    getClass().getClassLoader().loadClass(name.getAttributeValue()));
        } catch (ClassNotFoundException e) {
            handleException(""Unable to load the class specified as the command ""
                    + name.getAttributeValue(), e);
        }

        
        
        for (Iterator it = elem.getChildElements(); it.hasNext();) {
            OMElement child = (OMElement) it.next();
            if(""property"".equals(child.getLocalName())) {

                OMAttribute nameAttr = child.getAttribute(ATT_NAME);
                if (nameAttr != null && nameAttr.getAttributeValue() != null
                    && !"""".equals(nameAttr.getAttributeValue())) {

                    handlePropertyAction(nameAttr.getAttributeValue(), child, pojoMediator);
                } else {
                    handleException(""A POJO command mediator "" +
                        ""property must specify the name attribute"");
                }
            }
        }

        return pojoMediator;
    }

    private void handlePropertyAction(String name, OMElement propElem, POJOCommandMediator m) {

        OMAttribute valueAttr   = propElem.getAttribute(ATT_VALUE);
        OMAttribute exprAttr    = propElem.getAttribute(ATT_EXPRN);
        OMAttribute ctxNameAttr = propElem.getAttribute(ATT_CTXNAME);
        OMAttribute actionAttr  = propElem.getAttribute(ATT_ACTION);

        AXIOMXPath xpath = null;
        try {
            if (exprAttr != null) {
                xpath = new AXIOMXPath(exprAttr.getAttributeValue());
                OMElementUtils.addNameSpaces(xpath, propElem, log);
            }
        } catch (JaxenException e) {
            handleException(""Error in building the expression as an AXIOMXPath"" + e);
        }

        
        if (valueAttr != null) {
            String value = valueAttr.getAttributeValue();
            
            if (exprAttr != null && ctxNameAttr != null) {
                handleException(""Command properties can not contain all three 'value', "" +
                    ""'expression' and 'context-name' attributes. Only one or "" +
                    ""combination of two can be there."");
            } else {
                m.addStaticSetterProperty(name, value);
                if (exprAttr != null) {
                    
                    m.addMessageGetterProperty(name, xpath);
                } else if (ctxNameAttr != null) {
                    
                    m.addContextGetterProperty(name, ctxNameAttr.getAttributeValue());
                } 
            }
        } else if (propElem.getFirstElement() != null) {
            
            if (exprAttr != null && ctxNameAttr != null) {
                handleException(""Command properties can not contain all the "" +
                    ""'expression' and 'context-name' attributes with a child. Only one "" +
                    ""attribute of those can co-exists with a child"");
            } else {
                m.addStaticSetterProperty(name, propElem.getFirstElement());
                if (exprAttr != null) {
                    
                    m.addMessageGetterProperty(name, xpath);
                } else if (ctxNameAttr != null) {
                    
                    m.addContextGetterProperty(name, ctxNameAttr.getAttributeValue());
                } 
            }
        } else {
            
            if (exprAttr != null && ctxNameAttr != null) {
                if (actionAttr != null && actionAttr.getAttributeValue() != null) {
                    String action = actionAttr.getAttributeValue();
                    if (RM_ACTION.equals(action) || UC_ACTION.equals(action)) {
                        
                        m.addMessageSetterProperty(name, xpath);
                        m.addContextGetterProperty(name, ctxNameAttr.getAttributeValue());
                    } else if (RC_ACTION.equals(action) || UM_ACTION.equals(action)) {
                        
                        m.addContextSetterProperty(name, ctxNameAttr.getAttributeValue());
                        m.addMessageGetterProperty(name, xpath);
                    } else {
                        handleException(""Invalid action for "" +
                            ""the command property with the name "" + name);
                    }
                } else {
                    handleException(""Action attribute "" +
                        ""is required for the command property with name "" + name);
                }
            } else {
                
                if (actionAttr != null && actionAttr.getAttributeValue() != null) {
                    String action = actionAttr.getAttributeValue();
                    if (exprAttr != null) {
                        if (RM_ACTION.equals(action)) {
                            
                            m.addMessageSetterProperty(name, xpath);
                        } else if (UM_ACTION.equals(action)) {
                            
                            m.addMessageGetterProperty(name, xpath);
                        } else if (RAUM_ACTION.equals(action)) {
                            
                            m.addMessageSetterProperty(name, xpath);
                            m.addMessageGetterProperty(name, xpath);
                        } else {
                            handleException(""Invalid action for "" +
                                ""the command property with the name "" + name);
                        }
                    } else if (ctxNameAttr != null) {
                        String ctxName = ctxNameAttr.getAttributeValue();
                        if (RC_ACTION.equals(action)) {
                            
                            m.addContextSetterProperty(name, ctxName);
                        } else if (UC_ACTION.equals(action)) {
                            
                            m.addContextGetterProperty(name, ctxName);
                        } else if (RAUC_ACTION.equals(action)) {
                            
                            m.addContextSetterProperty(name, ctxName);
                            m.addContextGetterProperty(name, ctxName);
                        } else {
                            handleException(""Invalid action for "" +
                                ""the command property with the name "" + name);
                        }
                    } else {
                        handleException(""Unrecognized command property with the name "" + name);
                    }
                } else {
                    
                    if (exprAttr != null) {
                        m.addMessageSetterProperty(name, xpath);
                        m.addMessageGetterProperty(name, xpath);
                    } else if (ctxNameAttr != null) {
                        String ctxName = ctxNameAttr.getAttributeValue();
                        m.addContextSetterProperty(name, ctxName);
                        m.addContextGetterProperty(name, ctxName);
                    } else {
                        handleException(""Unrecognized command property with the name "" + name);
                    }
                }
            }
        }
    }

    public QName getTagQName() {
        return POJO_COMMAND_Q;
    }

}

"
synapse,1.1,org.apache.synapse.config.xml.RMSequenceMediatorFactory,4,2,0,10,29,2,0,10,3,0.666666667,274,1.0,0,0.6,0.666666667,0,0,66.25,19,5.0,0,"

package org.apache.synapse.config.xml;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.builtin.RMSequenceMediator;
import org.jaxen.JaxenException;


public class RMSequenceMediatorFactory extends AbstractMediatorFactory {

    private static final QName SEQUENCE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""RMSequence"");
    private static final QName ATT_CORR = new QName(""correlation"");
    private static final QName ATT_LASTMSG = new QName(""last-message"");
    private static final QName ATT_VERSION = new QName(""version"");
    private static final QName ATT_SINGLE = new QName(""single"");

    public Mediator createMediator(OMElement elem) {

        RMSequenceMediator sequenceMediator = new RMSequenceMediator();
        OMAttribute correlation = elem.getAttribute(ATT_CORR);
        OMAttribute lastMessage = elem.getAttribute(ATT_LASTMSG);
        OMAttribute single = elem.getAttribute(ATT_SINGLE);
        OMAttribute version = elem.getAttribute(ATT_VERSION);

        if (single == null && correlation == null) {
            String msg = ""The 'single' attribute value of true or a 'correlation' attribute is "" +
                ""required for the configuration of a RMSequence mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        }

        if (correlation != null) {
            if (correlation.getAttributeValue() != null &&
                correlation.getAttributeValue().trim().length() == 0) {
                String msg = ""Invalid attribute value specified for correlation"";
                log.error(msg);
                throw new SynapseException(msg);

            } else {
                try {
                    sequenceMediator.setCorrelation(new AXIOMXPath(correlation.getAttributeValue()));
                } catch (JaxenException e) {
                    String msg = ""Invalid XPath expression for attribute correlation : ""
                        + correlation.getAttributeValue();
                    log.error(msg);
                    throw new SynapseException(msg);
                }
            }
            OMElementUtils.addNameSpaces(sequenceMediator.getCorrelation(), elem, log);
        }

        if (single != null) {
            sequenceMediator.setSingle(Boolean.valueOf(single.getAttributeValue()));
        }

        if (sequenceMediator.isSingle() && sequenceMediator.getCorrelation() != null) {
            String msg = ""Invalid RMSequence mediator. A RMSequence can't have both a ""
                + ""single attribute value of true and a correlation attribute specified."";
            log.error(msg);
            throw new SynapseException(msg);

        } else if (!sequenceMediator.isSingle() && sequenceMediator.getCorrelation() == null) {
            String msg = ""Invalid RMSequence mediator. A RMSequence must have a ""
                + ""single attribute value of true or a correlation attribute specified."";
            log.error(msg);
            throw new SynapseException(msg);
        }

        if (lastMessage != null) {
            if (lastMessage.getAttributeValue() != null &&
                lastMessage.getAttributeValue().trim().length() == 0) {
                String msg = ""Invalid attribute value specified for last-message"";
                log.error(msg);
                throw new SynapseException(msg);

            } else {
                try {
                    sequenceMediator.setLastMessage(new AXIOMXPath(lastMessage.getAttributeValue()));
                } catch (JaxenException e) {
                    String msg = ""Invalid XPath expression for attribute last-message : ""
                        + lastMessage.getAttributeValue();
                    log.error(msg);
                    throw new SynapseException(msg);
                }
            }
            OMElementUtils.addNameSpaces(sequenceMediator.getLastMessage(), elem, log);
        }

        if (sequenceMediator.isSingle() && sequenceMediator.getLastMessage() != null) {
            String msg = ""Invalid RMSequence mediator. A RMSequence can't have both a ""
                + ""single attribute value of true and a last-message attribute specified."";
            log.error(msg);
            throw new SynapseException(msg);
        }

        if (version != null) {
            if (!XMLConfigConstants.SEQUENCE_VERSION_1_0.equals(version.getAttributeValue()) &&
                !XMLConfigConstants.SEQUENCE_VERSION_1_1.equals(version.getAttributeValue())) {
                String msg = ""Only '"" + XMLConfigConstants.SEQUENCE_VERSION_1_0 + ""' or '"" +
                    XMLConfigConstants.SEQUENCE_VERSION_1_1
                    + ""' values are allowed for attribute version for a RMSequence mediator""
                    + "", Unsupported version "" + version.getAttributeValue();
                log.error(msg);
                throw new SynapseException(msg);
            }
            sequenceMediator.setVersion(version.getAttributeValue());
        }

        
        
        processTraceState(sequenceMediator, elem);

        return sequenceMediator;
    }

    public QName getTagQName() {
        return SEQUENCE_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.CloneMediatorFactory,4,2,0,7,19,2,0,7,3,0.666666667,66,1.0,0,0.6,0.666666667,0,0,14.75,3,1.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.eip.splitter.CloneMediator;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class CloneMediatorFactory extends AbstractMediatorFactory {

    
    private static final QName CLONE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""clone"");
    private static final QName ATT_CONTPAR = new QName(""continueParent"");
    private static final QName TARGET_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""target"");

    
    public Mediator createMediator(OMElement elem) {

        CloneMediator mediator = new CloneMediator();
        processTraceState(mediator, elem);
        
        OMAttribute continueParent = elem.getAttribute(ATT_CONTPAR);
        if (continueParent != null) {
            mediator.setContinueParent(
                    Boolean.valueOf(continueParent.getAttributeValue()).booleanValue());
        }

        Iterator targetElements = elem.getChildrenWithName(TARGET_Q);
        while (targetElements.hasNext()) {
            mediator.addTarget(TargetFactory.createTarget((OMElement) targetElements.next()));
        }

        return mediator;
    }

    
    public QName getTagQName() {
        return CLONE_Q;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.algorithms.RoundRobin,3,1,0,6,7,0,3,3,3,0.25,76,1.0,0,0.0,0.555555556,0,0,23.66666667,4,1.6667,0,"

package org.apache.synapse.endpoints.algorithms;

import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;

import java.util.ArrayList;


public class RoundRobin implements LoadbalanceAlgorithm {

    private ArrayList endpoints = null;
    private int currentEPR = 0;

    public RoundRobin(ArrayList endpoints) {
        this.endpoints = endpoints;
    }

    
    public Endpoint getNextEndpoint(MessageContext synapseMessageContext) {

        Endpoint nextEndpoint;
        int attempts = 0;

        do {
            
            synchronized(this) {
                nextEndpoint = (Endpoint) endpoints.get(currentEPR);

                if(currentEPR == endpoints.size() - 1) {
                    currentEPR = 0;
                } else {
                    currentEPR++;
                }
            }

            attempts++;
            if (attempts > endpoints.size()) {
                return null;
            }

        } while (!nextEndpoint.isActive(synapseMessageContext));

        return nextEndpoint;
    }

    public void reset() {
        currentEPR = 0;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseDispatcher,4,3,0,9,13,6,0,9,4,2.0,39,0.0,0,0.8,0.583333333,2,2,8.75,1,0.75,0,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.description.AxisOperation;
import org.apache.axis2.description.AxisService;
import org.apache.axis2.description.HandlerDescription;
import org.apache.axis2.engine.AbstractDispatcher;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.synapse.SynapseConstants;

import javax.xml.namespace.QName;


public class SynapseDispatcher extends AbstractDispatcher {

    public void initDispatcher() {
        QName qn = new QName(""http:
        HandlerDescription hd = new HandlerDescription(qn.getLocalPart());
        super.init(hd);
    }

    public AxisService findService(MessageContext mc) throws AxisFault {
        AxisConfiguration ac = mc.getConfigurationContext().getAxisConfiguration();
        AxisService as = ac.getService(SynapseConstants.SYNAPSE_SERVICE_NAME);
        return as;
    }

    public AxisOperation findOperation(AxisService svc, MessageContext mc) throws AxisFault {
        AxisOperation ao = svc.getOperation(SynapseConstants.SYNAPSE_OPERATION_NAME);
        return ao;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.WSDLEndpoint,25,2,0,15,61,234,4,11,21,0.913194444,396,1.0,2,0.178571429,0.223958333,1,1,14.36,17,2.08,1,"

package org.apache.synapse.endpoints;

import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.axiom.om.OMElement;

import java.util.Stack;


public class WSDLEndpoint extends FaultHandler implements Endpoint {

    private static final Log log = LogFactory.getLog(AddressEndpoint.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    private String name = null;
    private String wsdlURI;
    private OMElement wsdlDoc;
    private String serviceName;
    private String portName;

    
    private long suspendOnFailDuration = -1;

    
    private long recoverOn = Long.MAX_VALUE;

    private boolean active = true;
    private Endpoint parentEndpoint = null;
    private EndpointDefinition endpoint = null;

    
    public void send(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Address Endpoint"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        String eprAddress = null;
        if (endpoint.getAddress() != null) {

            eprAddress = endpoint.getAddress();
            String endPointName = this.getName();
            if (endPointName == null) {
                endPointName = SynapseConstants.ANONYMOUS_ENDPOINT;
            }

            
            boolean statisticsEnable =
                (SynapseConstants.STATISTICS_ON == endpoint.getStatisticsState());
            
            if (statisticsEnable) {
                EndPointStatisticsStack endPointStatisticsStack = null;
                Object statisticsStackObj =
                    synCtx.getProperty(org.apache.synapse.SynapseConstants.ENDPOINT_STATS);
                if (statisticsStackObj == null) {
                    endPointStatisticsStack = new EndPointStatisticsStack();
                    synCtx.setProperty(org.apache.synapse.SynapseConstants.ENDPOINT_STATS,
                        endPointStatisticsStack);
                } else if (statisticsStackObj instanceof EndPointStatisticsStack) {
                    endPointStatisticsStack = (EndPointStatisticsStack) statisticsStackObj;
                }
                if (endPointStatisticsStack != null) {
                    boolean isFault = synCtx.getEnvelope().getBody().hasFault();
                    endPointStatisticsStack.put(endPointName, System.currentTimeMillis(),
                        !synCtx.isResponse(), statisticsEnable, isFault);
                }
            }
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Sending message to WSDL endpoint : "" +
                    endPointName + "" resolves to address = "" + eprAddress);
                traceOrDebug(traceOn, ""SOAPAction: "" + (synCtx.getSoapAction() != null ?
                    synCtx.getSoapAction() : ""null""));
                traceOrDebug(traceOn, ""WSA-Action: "" + (synCtx.getWSAAction() != null ?
                    synCtx.getWSAAction() : ""null""));

                if (traceOn && trace.isTraceEnabled()) {
                    trace.trace(""Envelope : 
"" + synCtx.getEnvelope());
                }
            }

            
            synCtx.pushFaultHandler(this);

            
            synCtx.setProperty(SynapseConstants.PROCESSED_ENDPOINT, this);

            synCtx.getEnvironment().send(endpoint, synCtx);
        }
    }

    public void onFault(MessageContext synCtx) {
        

        
        setActive(false, synCtx);        

        if (parentEndpoint != null) {
            parentEndpoint.onChildEndpointFail(this, synCtx);
        } else {
            Stack faultStack = synCtx.getFaultStack();
            if (!faultStack.isEmpty()) {
                ((FaultHandler) faultStack.pop()).handleFault(synCtx);
            }
        }
    }

    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
        
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name.trim();
    }

    public long getSuspendOnFailDuration() {
        return suspendOnFailDuration;
    }

    public void setSuspendOnFailDuration(long suspendOnFailDuration) {
        this.suspendOnFailDuration = suspendOnFailDuration;
    }

    public String getWsdlURI() {
        return wsdlURI;
    }

    public void setWsdlURI(String wsdlURI) {
        this.wsdlURI = wsdlURI;
    }

    public OMElement getWsdlDoc() {
        return wsdlDoc;
    }

    public void setWsdlDoc(OMElement wsdlDoc) {
        this.wsdlDoc = wsdlDoc;
    }

    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }

    public String getPortName() {
        return portName;
    }

    public void setPortName(String portName) {
        this.portName = portName;
    }

    
    public boolean isActive(MessageContext synMessageContext) {

        if (!active) {
            if (System.currentTimeMillis() > recoverOn) {
                active = true;
            }
        }

        return active;
    }

    
    public void setActive(boolean active, MessageContext synMessageContext) {

        if (!active) {
            if (suspendOnFailDuration != -1) {
                recoverOn = System.currentTimeMillis() + suspendOnFailDuration;
            } else {
                recoverOn = Long.MAX_VALUE;
            }
        }

        this.active = active;
    }

    public void setParentEndpoint(Endpoint parentEndpoint) {
        this.parentEndpoint = parentEndpoint;
    }

    public EndpointDefinition getEndpoint() {
        return endpoint;
    }

    public void setEndpoint(EndpointDefinition endpoint) {
        this.endpoint = endpoint;
    }

    
    protected boolean isTraceOn(MessageContext msgCtx) {
        return
            (endpoint.getTraceState() == SynapseConstants.TRACING_ON) ||
            (endpoint.getTraceState() == SynapseConstants.TRACING_UNSET &&
                msgCtx.getTracingState() == SynapseConstants.TRACING_ON);
    }

    
    protected boolean isTraceOrDebugOn(boolean isTraceOn) {
        return isTraceOn || log.isDebugEnabled();
    }

    
    protected void traceOrDebug(boolean traceOn, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.EntrySerializer,4,1,0,13,22,2,1,12,2,0.583333333,126,1.0,0,0.0,0.333333333,0,0,29.5,6,1.75,0,"

package org.apache.synapse.config.xml;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.config.Entry;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.impl.llom.OMTextImpl;
import javax.xml.stream.XMLStreamConstants;
import java.net.URL;

public class EntrySerializer {

    private static Log log = LogFactory.getLog(EntrySerializer.class);

    protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
    protected static final OMNamespace synNS = fac.createOMNamespace(
            XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");
    protected static final OMNamespace nullNS = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, """");

    
    public static OMElement serializeEntry(Entry entry, OMElement parent) {
        OMElement propertyElement = fac.createOMElement(""localEntry"", synNS);
        propertyElement.addAttribute(fac.createOMAttribute(
                ""key"", nullNS, entry.getKey().trim()));
        int type = entry.getType();
        if (type == Entry.URL_SRC) {
            URL srcUrl = entry.getSrc();
            if (srcUrl != null) {
                propertyElement.addAttribute(fac.createOMAttribute(
                        ""src"", nullNS, srcUrl.toString().trim()));
            }
        } else if (type == Entry.INLINE_XML) {
            Object value = entry.getValue();
            if (value != null && value instanceof OMElement) {
                propertyElement.addChild((OMElement) value);
            }
        } else if (type == Entry.INLINE_TEXT) {
            Object value = entry.getValue();
            if (value != null && value instanceof String) {
                OMTextImpl textData = (OMTextImpl) fac.createOMText(((String) value).trim());
                textData.setType(XMLStreamConstants.CDATA);
                propertyElement.addChild(textData);
            }
        } else if (type == Entry.REMOTE_ENTRY) {
            
            return null;
        } else {
            handleException(""Entry type undefined"");
        }
        if (parent != null) {
            parent.addChild(propertyElement);
        }
        return propertyElement;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.AddressEndpointSerializer,5,1,0,15,37,2,1,14,3,0.625,372,1.0,0,0.0,0.375,0,0,73.0,22,5.4,3,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.AddressEndpoint;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class AddressEndpointSerializer implements EndpointSerializer {

    private static Log log = LogFactory.getLog(AddressEndpointSerializer.class);

    private OMFactory fac = null;

    public OMElement serializeEndpoint(Endpoint endpoint) {

        if (!(endpoint instanceof AddressEndpoint)) {
            throw new SynapseException(""Invalid endpoint type."");
        }

        fac = OMAbstractFactory.getOMFactory();
        OMElement endpointElement = fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        AddressEndpoint addressEndpoint = (AddressEndpoint) endpoint;
        String name = addressEndpoint.getName();
        if (name != null) {
            endpointElement.addAttribute(""name"", name, null);
        }

        EndpointDefinition epAddress = addressEndpoint.getEndpoint();
        OMElement addressElement = serializeEndpointDefinition(epAddress);
        endpointElement.addChild(addressElement);

        long suspendDuration = addressEndpoint.getSuspendOnFailDuration();
        if (suspendDuration != -1) {
            

            OMElement suspendElement = fac.createOMElement(
                    org.apache.synapse.config.xml.XMLConfigConstants.SUSPEND_DURATION_ON_FAILURE,
                    SynapseConstants.SYNAPSE_OMNAMESPACE);

            suspendElement.setText(Long.toString(suspendDuration / 1000));
            addressElement.addChild(suspendElement);
        }

        return endpointElement;
    }

    public OMElement serializeEndpointDefinition(EndpointDefinition endpt) {

        OMElement address = fac.createOMElement(""address"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        if (SynapseConstants.FORMAT_POX.equals(endpt.getFormat())) {
        	address.addAttribute(fac.createOMAttribute(""format"", null, ""pox""));
        	
        } else if (SynapseConstants.FORMAT_GET.equals(endpt.getFormat())) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""get""));

        } else if (SynapseConstants.FORMAT_SOAP11.equals(endpt.getFormat())) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""soap11""));
        	
        } else if (SynapseConstants.FORMAT_SOAP12.equals(endpt.getFormat())) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""soap12""));
        
        	
        } else if (endpt.isForcePOX()) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""get""));
            
        } else if (endpt.isForceGET()) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""pox""));

        } else if (endpt.isForceSOAP11()) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""soap11""));
        } else if (endpt.isForceSOAP12()) {
            address.addAttribute(fac.createOMAttribute(""format"", null, ""soap12""));
        }
        
        if (endpt.isUseSwa()) {
            address.addAttribute(fac.createOMAttribute(""optimize"", null, ""swa""));
        } else if (endpt.isUseMTOM()) {
            address.addAttribute(fac.createOMAttribute(""optimize"", null, ""mtom""));
        }
        if (endpt.getAddress() != null) {
            address.addAttribute(fac.createOMAttribute(
                    ""uri"", null, endpt.getAddress()));


        }

        int isEnableStatistics = endpt.getStatisticsState();
        String statisticsValue = null;
        if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_ON) {
            statisticsValue = org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ENABLE;
        } else if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_OFF) {
            statisticsValue = org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_DISABLE;
        }
        if (statisticsValue != null) {
            address.addAttribute(fac.createOMAttribute(
                    org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ATTRIB_NAME, null, statisticsValue));
        }
        if (endpt.isAddressingOn()) {
            OMElement addressing = fac.createOMElement(""enableAddressing"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpt.isUseSeparateListener()) {
                addressing.addAttribute(fac.createOMAttribute(
                        ""separateListener"", null, ""true""));
            }
            address.addChild(addressing);
        }

        if (endpt.isReliableMessagingOn()) {
            OMElement rm = fac.createOMElement(""enableRM"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpt.getWsRMPolicyKey() != null) {
                rm.addAttribute(fac.createOMAttribute(
                        ""policy"", null, endpt.getWsRMPolicyKey()));
            }
            address.addChild(rm);
        }

        if (endpt.isSecurityOn()) {
            OMElement sec = fac.createOMElement(""enableSec"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpt.getWsSecPolicyKey() != null) {
                sec.addAttribute(fac.createOMAttribute(
                        ""policy"", null, endpt.getWsSecPolicyKey()));
            }
            address.addChild(sec);
        }

        if (endpt.getTimeoutAction() != SynapseConstants.NONE) {
            OMElement timeout = fac.createOMElement(""timeout"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            address.addChild(timeout);

            OMElement duration = fac.createOMElement(""duration"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            duration.setText(Long.toString(endpt.getTimeoutDuration() / 1000));
            timeout.addChild(duration);

            OMElement action = fac.createOMElement(""action"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpt.getTimeoutAction() == SynapseConstants.DISCARD) {
                action.setText(""discard"");
            } else if (endpt.getTimeoutAction() == SynapseConstants.DISCARD_AND_FAULT) {
                action.setText(""fault"");
            }
            timeout.addChild(action);
        }

        return address;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.WSDLEndpointSerializer,5,1,0,15,38,2,1,14,3,0.625,374,1.0,0,0.0,0.35,0,0,73.4,19,5.6,2,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.WSDLEndpoint;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class WSDLEndpointSerializer implements EndpointSerializer {

    private static Log log = LogFactory.getLog(WSDLEndpointSerializer.class);

    private OMFactory fac = null;

    public OMElement serializeEndpoint(Endpoint endpoint) {

        if (!(endpoint instanceof WSDLEndpoint)) {
            throw new SynapseException(""Invalid endpoint type."");
        }

        fac = OMAbstractFactory.getOMFactory();
        OMElement endpointElement = fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        WSDLEndpoint wsdlEndpoint = (WSDLEndpoint) endpoint;
        String name = wsdlEndpoint.getName();
        if (name != null) {
            endpointElement.addAttribute(""name"", name, null);
        }

        OMElement wsdlElement = fac.createOMElement(""wsdl"", SynapseConstants.SYNAPSE_OMNAMESPACE);
        String serviceName = wsdlEndpoint.getServiceName();
        if (serviceName != null) {
            wsdlElement.addAttribute(""service"", serviceName, null);
        }

        String portName = wsdlEndpoint.getPortName();
        if (portName != null) {
            wsdlElement.addAttribute(""port"", portName, null);
        }

        String uri = wsdlEndpoint.getWsdlURI();
        if (uri != null) {
            wsdlElement.addAttribute(""uri"", uri, null);
        }

        OMElement wsdlDoc = wsdlEndpoint.getWsdlDoc();
        if (wsdlDoc != null) {
            wsdlElement.addChild(wsdlDoc);
        }

        long suspendDuration = wsdlEndpoint.getSuspendOnFailDuration();
        if (suspendDuration != -1) {
            

            OMElement suspendElement = fac.createOMElement(
                    org.apache.synapse.config.xml.XMLConfigConstants.SUSPEND_DURATION_ON_FAILURE,
                    SynapseConstants.SYNAPSE_OMNAMESPACE);

            suspendElement.setText(Long.toString(suspendDuration / 1000));
            wsdlElement.addChild(suspendElement);
        }

        
        
        
        EndpointDefinition epAddress = wsdlEndpoint.getEndpoint();
        serializeQOSInformation(epAddress, wsdlElement);

        endpointElement.addChild(wsdlElement);

        return endpointElement;
    }

    public void serializeQOSInformation
            (EndpointDefinition endpointDefinition, OMElement wsdlElement) {

        if (SynapseConstants.FORMAT_POX.equals(endpointDefinition.getFormat())) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""pox""));
            
        } else if (SynapseConstants.FORMAT_GET.equals(endpointDefinition.getFormat())) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""get""));

        } else if (SynapseConstants.FORMAT_SOAP11.equals(endpointDefinition.getFormat())) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""soap11""));
            
        } else if (SynapseConstants.FORMAT_SOAP12.equals(endpointDefinition.getFormat())) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""soap12""));
        
            
        } else if (endpointDefinition.isForcePOX()) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""pox""));
        } else if (endpointDefinition.isForceGET()) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""get""));
        } else if (endpointDefinition.isForceSOAP11()) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""soap11""));
        } else if (endpointDefinition.isForceSOAP12()) {
            wsdlElement.addAttribute(fac.createOMAttribute(""format"", null, ""soap12""));
        }
        
        int isEnableStatistics = endpointDefinition.getStatisticsState();
        String statisticsValue = null;
        if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_ON) {
            statisticsValue = org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ENABLE;
        } else if (isEnableStatistics == org.apache.synapse.SynapseConstants.STATISTICS_OFF) {
            statisticsValue = org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_DISABLE;
        }
        if (statisticsValue != null) {
            wsdlElement.addAttribute(fac.createOMAttribute(
                    org.apache.synapse.config.xml.XMLConfigConstants.STATISTICS_ATTRIB_NAME, null, statisticsValue));
        }
        if (endpointDefinition.isAddressingOn()) {
            OMElement addressing = fac.createOMElement(""enableAddressing"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpointDefinition.isUseSeparateListener()) {
                addressing.addAttribute(fac.createOMAttribute(
                        ""separateListener"", null, ""true""));
            }
            wsdlElement.addChild(addressing);
        }

        if (endpointDefinition.isReliableMessagingOn()) {
            OMElement rm = fac.createOMElement(""enableRM"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpointDefinition.getWsRMPolicyKey() != null) {
                rm.addAttribute(fac.createOMAttribute(
                        ""policy"", null, endpointDefinition.getWsRMPolicyKey()));
            }
            wsdlElement.addChild(rm);
        }

        if (endpointDefinition.isSecurityOn()) {
            OMElement sec = fac.createOMElement(""enableSec"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpointDefinition.getWsSecPolicyKey() != null) {
                sec.addAttribute(fac.createOMAttribute(
                        ""policy"", null, endpointDefinition.getWsSecPolicyKey()));
            }
            wsdlElement.addChild(sec);
        }

        if (endpointDefinition.getTimeoutAction() != SynapseConstants.NONE) {
            OMElement timeout = fac.createOMElement(""timeout"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            wsdlElement.addChild(timeout);

            OMElement duration = fac.createOMElement(""duration"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            duration.setText(Long.toString(endpointDefinition.getTimeoutDuration() / 1000));
            timeout.addChild(duration);

            OMElement action = fac.createOMElement(""action"", SynapseConstants.SYNAPSE_OMNAMESPACE);
            if (endpointDefinition.getTimeoutAction() == SynapseConstants.DISCARD) {
                action.setText(""discard"");
            } else if (endpointDefinition.getTimeoutAction() == SynapseConstants.DISCARD_AND_FAULT) {
                action.setText(""fault"");
            }
            timeout.addChild(action);
        }
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.LoadbalanceEndpoint,14,1,0,8,27,35,3,5,14,0.743589744,165,1.0,2,0.0,0.255102041,0,0,10.35714286,5,1.5714,1,"

package org.apache.synapse.endpoints;

import org.apache.synapse.FaultHandler;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;

import java.util.List;


public class LoadbalanceEndpoint implements Endpoint {

    
    private String name = null;

    
    private List endpoints = null;

    
    private LoadbalanceAlgorithm algorithm = null;

    
    private volatile boolean active = true;

    
    private boolean failover = true;

    
    private Endpoint parentEndpoint = null;

    public void send(MessageContext synMessageContext) {

        Endpoint endpoint = algorithm.getNextEndpoint(synMessageContext);
        if (endpoint != null) {

            
            
            
            if (failover) {
                synMessageContext.getEnvelope().build();
            }

            endpoint.send(synMessageContext);

        } else {
            
            setActive(false, synMessageContext);

            if (parentEndpoint != null) {
                parentEndpoint.onChildEndpointFail(this, synMessageContext);
            } else {
                Object o = synMessageContext.getFaultStack().pop();
                if (o != null) {
                    ((FaultHandler) o).handleFault(synMessageContext);
                }
            }
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name.trim();
    }

    public LoadbalanceAlgorithm getAlgorithm() {
        return algorithm;
    }

    public void setAlgorithm(LoadbalanceAlgorithm algorithm) {
        this.algorithm = algorithm;
    }

    
    public boolean isActive(MessageContext synMessageContext) {

        if (!active && endpoints != null) {
            for (int i = 0; i < endpoints.size(); i++) {
                Endpoint endpoint = (Endpoint) endpoints.get(i);
                if (endpoint.isActive(synMessageContext)) {
                    active = true;

                    
                    
                    
                }
            }
        }

        return active;
    }

    public void setActive(boolean active, MessageContext synMessageContext) {
        
        this.active = active;
    }

    public boolean isFailover() {
        return failover;
    }

    public void setFailover(boolean failover) {
        this.failover = failover;
    }

    public List getEndpoints() {
        return endpoints;
    }

    public void setEndpoints(List endpoints) {
        this.endpoints = endpoints;
    }

    public void setParentEndpoint(Endpoint parentEndpoint) {
        this.parentEndpoint = parentEndpoint;
    }

    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {

        
        if (failover) {
            send(synMessageContext);
        } else {
            
            
            
            
            Object o = synMessageContext.getFaultStack().pop();
            if (o != null) {
                ((FaultHandler) o).handleFault(synMessageContext);
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.IndirectEndpointSerializer,2,1,0,11,8,0,1,10,2,0.0,42,1.0,0,0.0,0.75,0,0,19.5,3,1.5,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.IndirectEndpoint;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;


public class IndirectEndpointSerializer implements EndpointSerializer {

    private OMFactory fac = null;

    public OMElement serializeEndpoint(Endpoint endpoint) {

        if (!(endpoint instanceof IndirectEndpoint)) {
            throw new SynapseException(""Invalid endpoint type."");
        }

        fac = OMAbstractFactory.getOMFactory();
        OMElement endpointElement = fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        IndirectEndpoint indirectEndpoint = (IndirectEndpoint) endpoint;
        String ref = indirectEndpoint.getKey();
        if (ref != null) {
            endpointElement.addAttribute(""key"", ref, null);
        }

        return endpointElement;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.AbstractMediator,15,1,17,22,33,7,17,5,5,0.476190476,229,1.0,0,0.0,0.380952381,0,0,14.06666667,4,2.3333,0,"

package org.apache.synapse.mediators;

import org.apache.synapse.SynapseConstants;
import org.apache.synapse.Mediator;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public abstract class AbstractMediator implements Mediator {

    
    protected Log log;
    
    protected static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    
     protected int traceState = SynapseConstants.TRACING_UNSET;

    
    protected AbstractMediator() {
        log = LogFactory.getLog(this.getClass());
    }

    
    public String getType() {
        String cls = getClass().getName();
        int p = cls.lastIndexOf(""."");
        if (p == -1)
            return cls;
        else
            return cls.substring(p + 1);
    }

    
    public int getTraceState() {
        return traceState;
    }

    
    public void setTraceState(int traceState) {
        this.traceState = traceState;
    }

    
    public void setEffectiveTraceState(MessageContext synCtx) {
        
        
        if (traceState != SynapseConstants.TRACING_UNSET) {
            synCtx.setTracingState(traceState);
        }
    }

    
    public boolean shouldTrace(int parentTraceState){
        return
            (traceState == SynapseConstants.TRACING_ON) ||
            (traceState == SynapseConstants.TRACING_UNSET &&
                parentTraceState == SynapseConstants.TRACING_ON);
    }

    
    protected boolean isTraceOn(MessageContext msgCtx) {
        return
            (traceState == SynapseConstants.TRACING_ON) ||
            (traceState == SynapseConstants.TRACING_UNSET &&
                msgCtx.getTracingState() == SynapseConstants.TRACING_ON);
    }

    
    protected boolean isTraceOrDebugOn(boolean isTraceOn) {
        return isTraceOn || log.isDebugEnabled();
    }

    
    protected void traceOrDebug(boolean traceOn, String msg) {
        if (traceOn) {
            trace.info(msg);
        }
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
    }

    
    protected void traceOrDebugWarn(boolean traceOn, String msg) {
        if (traceOn) {
            trace.warn(msg);
        }
        if (log.isDebugEnabled()) {
            log.warn(msg);
        }
    }

    
    protected void auditLog(String msg, MessageContext msgContext) {
        log.info(msg);
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().info(msg);
        }
        if (shouldTrace(msgContext.getTracingState())) {
            trace.info(msg);
        }
    }

    
    protected void handleException(String msg, MessageContext msgContext) {
        log.error(msg);
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().error(msg);
        }
        if (shouldTrace(msgContext.getTracingState())) {
            trace.error(msg);
        }
        throw new SynapseException(msg);
    }

    
    protected void auditWarn(String msg, MessageContext msgContext) {
        log.warn(msg);
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().warn(msg);
        }
        if (shouldTrace(msgContext.getTracingState())) {
            trace.warn(msg);
        }
    }

    
    protected void handleException(String msg, Exception e, MessageContext msgContext) {
        log.error(msg, e);
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().error(msg, e);
        }
        if (shouldTrace(msgContext.getTracingState())) {
            trace.error(msg, e);
        }
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AnonymousListMediatorFactory,2,3,0,5,5,1,1,4,2,2.0,14,0.0,0,0.8,0.5,0,0,6.0,1,0.5,0,"
package org.apache.synapse.config.xml;

import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


import java.util.Iterator;



public abstract class AnonymousListMediatorFactory extends AbstractListMediatorFactory {

    
    public static AnonymousListMediator createAnonymousListMediator(OMElement el) {
        AnonymousListMediator mediator = new AnonymousListMediator();
        {
            addChildren(el, mediator);
        }
        return mediator;
    }

}
"
synapse,1.1,org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm,2,1,0,10,2,1,8,2,2,2.0,2,0.0,0,0.0,0.75,0,0,0.0,1,1.0,0,"

package org.apache.synapse.endpoints.algorithms;

import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;


public interface LoadbalanceAlgorithm {

    
    public Endpoint getNextEndpoint(MessageContext synapseMessageContext);

    
    public void reset();
}
"
synapse,1.1,org.apache.synapse.config.xml.ClassMediatorFactory,4,2,0,9,29,4,0,9,3,0.666666667,141,1.0,0,0.6,0.666666667,0,0,34.0,6,1.75,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.ext.ClassMediator;

import javax.xml.namespace.QName;
import java.util.Iterator;


public class ClassMediatorFactory extends AbstractMediatorFactory {

    private static final QName CLASS_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""class"");

    public Mediator createMediator(OMElement elem) {

        ClassMediator classMediator = new ClassMediator();

        OMAttribute name = elem.getAttribute(ATT_NAME);
        if (name == null) {
            String msg = ""The name of the actual mediator class is a required attribute"";
            log.error(msg);
            throw new SynapseException(msg);
        }
        Class clazz = null;
        Mediator m = null;
        try {
            clazz = getClass().getClassLoader().loadClass(
                    name.getAttributeValue());
            m = (Mediator) clazz.newInstance();
        } catch (Exception e) {
            String msg = ""Error : "" + name.getAttributeValue();
            log.error(msg, e);
            throw new SynapseException(msg, e);
        }

        for (Iterator it = elem.getChildrenWithName(PROP_Q); it.hasNext();) {
            OMElement child = (OMElement) it.next();

            String propName = child.getAttribute(ATT_NAME).getAttributeValue();
            if (propName == null) {
                handleException(
                    ""A Class mediator property must specify the name attribute"");
            } else {
                if (child.getAttribute(ATT_VALUE) != null) {
                    String value = child.getAttribute(ATT_VALUE).getAttributeValue();
                    classMediator.addProperty(propName, value);
                    PropertyHelper.setInstanceProperty(propName, value, m);
                } else {
                    OMNode omElt = child.getFirstElement();
                    if (omElt != null) {
                        classMediator.addProperty(propName, omElt);
                        PropertyHelper.setInstanceProperty(propName, omElt, m);
                    } else {
                        handleException(""A Class mediator property must specify "" +
                            ""name and value attributes, or a name and a child XML fragment"");
                    }
                }
            }
        }

        
        
        classMediator.setMediator(m);
        processTraceState(classMediator, elem);

        return classMediator;
    }

    public QName getTagQName() {
        return CLASS_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.DBReportMediatorFactory,4,3,0,5,9,4,0,5,3,0.666666667,31,1.0,0,0.818181818,0.666666667,0,0,6.5,1,0.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.db.DBReportMediator;

import javax.xml.namespace.QName;


public class DBReportMediatorFactory extends AbstractDBMediatorFactory {

    private static final QName DBREPORT_Q =
        new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""dbreport"");

    public Mediator createMediator(OMElement elem) {
        DBReportMediator mediator = new DBReportMediator();
        buildDataSource(elem, mediator);
        processStatements(elem, mediator);
        return mediator;
    }

    public QName getTagQName() {
        return DBREPORT_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.InMediatorSerializer,3,3,0,7,15,3,0,7,3,2.0,46,0.0,0,0.777777778,0.555555556,0,0,14.33333333,3,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.filters.InMediator;

public class InMediatorSerializer extends AbstractListMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof InMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        InMediator mediator = (InMediator) m;
        OMElement in = fac.createOMElement(""in"", synNS);
        saveTracingState(in,mediator);

        serializeChildren(in, mediator.getList());

        if (parent != null) {
            parent.addChild(in);
        }
        return in;
    }

    public String getMediatorClassName() {
        return InMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.IterateMediatorSerializer,3,2,0,11,24,3,0,11,3,2.0,108,0.0,0,0.75,0.555555556,0,0,35.0,8,3.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.eip.splitter.IterateMediator;


public class IterateMediatorSerializer extends AbstractMediatorSerializer {

    
    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof IterateMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }
        
        OMElement itrElem = fac.createOMElement(""iterate"", synNS);
        saveTracingState(itrElem, m);

        IterateMediator itrMed = (IterateMediator) m;
        if (itrMed.isContinueParent()) {
            itrElem.addAttribute(""continueParent"", Boolean.toString(true), nullNS);
        }

        if (itrMed.isPreservePayload()) {
            itrElem.addAttribute(""preservePayload"", Boolean.toString(true), nullNS);
        }

        if (itrMed.getAttachPath() != null && !""."".equals(itrMed.getAttachPath().toString())) {
            itrElem.addAttribute(""attachPath"", itrMed.getAttachPath().toString(), nullNS);
            serializeNamespaces(itrElem, itrMed.getAttachPath());
        }
        
        if (itrMed.getExpression() != null) {
            itrElem.addAttribute(""expression"", itrMed.getExpression().toString(), nullNS);
            serializeNamespaces(itrElem, itrMed.getExpression());
        } else {
            handleException(""Missing expression of the IterateMediator which is required."");
        }

        itrElem.addChild(TargetSerializer.serializeTarget(itrMed.getTarget()));

        
        if (parent != null) {
            parent.addChild(itrElem);
        }

        return itrElem;
    }

    
    public String getMediatorClassName() {
        return IterateMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.SALoadbalanceEndpoint,18,1,0,16,46,87,4,12,15,0.845588235,260,1.0,3,0.0,0.227941176,0,0,13.0,7,1.5,1,"

package org.apache.synapse.endpoints;

import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
import org.apache.synapse.endpoints.dispatch.Dispatcher;
import org.apache.synapse.MessageContext;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.SynapseException;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.axis2.context.OperationContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.ArrayList;
import java.util.List;


public class SALoadbalanceEndpoint implements Endpoint {

    private static final Log log = LogFactory.getLog(SALoadbalanceEndpoint.class);

    private static final String FIRST_MESSAGE_IN_SESSION = ""first_message_in_session"";

    
    private String name = null;

    
    private List endpoints = null;

    
    private LoadbalanceAlgorithm algorithm = null;

     
    private volatile boolean active = true;

    
    private Endpoint parentEndpoint = null;

    
    private Dispatcher dispatcher = null;

    public void send(MessageContext synMessageContext) {

        Endpoint endpoint = null;

        
        
        endpoint = dispatcher.getEndpoint(synMessageContext);
        if (endpoint == null) {

            
            
            endpoint = algorithm.getNextEndpoint(synMessageContext);

            
            if (dispatcher.isServerInitiatedSession()) {

                
                Axis2MessageContext axis2MsgCtx = (Axis2MessageContext) synMessageContext;
                OperationContext opCtx = axis2MsgCtx.getAxis2MessageContext().getOperationContext();
                Object o = opCtx.getProperty(""endpointList"");

                if (o != null) {
                    List endpointList = (List) o;
                    endpointList.add(this);

                    
                    
                    if (!(endpoint instanceof SALoadbalanceEndpoint)) {
                        endpointList.add(endpoint);
                    }

                } else {

                    
                    
                    List endpointList = new ArrayList();
                    endpointList.add(this);

                    
                    
                    if (!(endpoint instanceof SALoadbalanceEndpoint)) {
                        endpointList.add(endpoint);
                    }

                    opCtx.setProperty(""endpointList"", endpointList);
                }

            } else {
                dispatcher.updateSession(synMessageContext, endpoint);
            }

            
            
            
            synMessageContext.getEnvelope().build();

            
            
            synMessageContext.setProperty(FIRST_MESSAGE_IN_SESSION, Boolean.TRUE);
        }

        if (endpoint != null) {

            
            
            if (endpoint.isActive(synMessageContext)) {                
                endpoint.send(synMessageContext);
            } else {
                informFailure(synMessageContext);
            }

        } else {

            
            setActive(false, synMessageContext);
            informFailure(synMessageContext);
        }
    }

    
    public void updateSession(MessageContext responseMsgCtx, List endpointList) {

        Endpoint endpoint = (Endpoint) endpointList.remove(0);
        dispatcher.updateSession(responseMsgCtx, endpoint);
        if (endpoint instanceof SALoadbalanceEndpoint) {
            ((SALoadbalanceEndpoint) endpoint).updateSession(responseMsgCtx, endpointList);
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name.trim();
    }

    public LoadbalanceAlgorithm getAlgorithm() {
        return algorithm;
    }

    public void setAlgorithm(LoadbalanceAlgorithm algorithm) {
        this.algorithm = algorithm;
    }

    
    public boolean isActive(MessageContext synMessageContext) {
        

        return active;
    }

    public void setActive(boolean active, MessageContext synMessageContext) {
        this.active = active;
    }

    public List getEndpoints() {
        return endpoints;
    }

    public void setEndpoints(List endpoints) {
        this.endpoints = endpoints;
    }

    public void setParentEndpoint(Endpoint parentEndpoint) {
        this.parentEndpoint = parentEndpoint;
    }

    public Dispatcher getDispatcher() {
        return dispatcher;
    }

    public void setDispatcher(Dispatcher dispatcher) {
        this.dispatcher = dispatcher;
    }

    
    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {

        Object o = synMessageContext.getProperty(FIRST_MESSAGE_IN_SESSION);

        if (o != null && Boolean.TRUE.equals(o)) {

            
            
            dispatcher.unbind(synMessageContext);
            send(synMessageContext);

        } else {

            
            informFailure(synMessageContext);
        }
    }

    private void informFailure(MessageContext synMessageContext) {

        if (parentEndpoint != null) {
            parentEndpoint.onChildEndpointFail(this, synMessageContext);

        } else {

            Object o = synMessageContext.getFaultStack().pop();
            if (o != null) {
                ((FaultHandler) o).handleFault(synMessageContext);
            }
        }
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.PropertyMediatorFactory,4,2,0,10,23,4,0,10,3,0.666666667,182,1.0,0,0.6,0.666666667,0,0,44.0,15,4.0,0,"

package org.apache.synapse.config.xml;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.builtin.PropertyMediator;
import org.jaxen.JaxenException;


public class PropertyMediatorFactory extends AbstractMediatorFactory {
    private static final QName ATT_SCOPE = new QName(""scope"");
    private static final QName ATT_ACTION = new QName(""action"");

    public Mediator createMediator(OMElement elem) {

        PropertyMediator propMediator = new PropertyMediator();
        OMAttribute name = elem.getAttribute(ATT_NAME);
        OMAttribute value = elem.getAttribute(ATT_VALUE);
        OMAttribute expression = elem.getAttribute(ATT_EXPRN);
        OMAttribute scope = elem.getAttribute(ATT_SCOPE);
        OMAttribute action = elem.getAttribute(ATT_ACTION);

        if (name == null) {
            String msg = ""The 'name' attribute is required for the configuration of a property mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        } else if ((value == null && expression == null) && !(action != null && ""remove"".equals(action.getAttributeValue()))) {
            String msg = ""Either an 'value' or 'expression' attribute is required for a property mediator when action is SET"";
            log.error(msg);
            throw new SynapseException(msg);
        }
        propMediator.setName(name.getAttributeValue());
        if (value != null) {
            propMediator.setValue(value.getAttributeValue());
        } else if (expression != null) {
            try {
                AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
                OMElementUtils.addNameSpaces(xp, elem, log);
                propMediator.setExpression(xp);

            } catch (JaxenException e) {
                String msg = ""Invalid XPath expression for attribute 'expression' : "" + expression.getAttributeValue();
                log.error(msg);
                throw new SynapseException(msg);
            }
        }
        if (scope != null) {
            String valueStr = scope.getAttributeValue();
            if (!XMLConfigConstants.SCOPE_AXIS2.equals(valueStr) && !XMLConfigConstants.SCOPE_TRANSPORT.equals(valueStr)
                    && !XMLConfigConstants.SCOPE_DEFAULT.equals(valueStr) && !XMLConfigConstants.SCOPE_CLIENT.equals(valueStr)) {
                String msg = ""Only '"" + XMLConfigConstants.SCOPE_AXIS2 + ""' or '"" + XMLConfigConstants.SCOPE_TRANSPORT + ""' or '"" + XMLConfigConstants.SCOPE_CLIENT
                        + ""' values are allowed for attribute scope for a property mediator""
                        + "", Unsupported scope "" + valueStr;
                log.error(msg);
                throw new SynapseException(msg);
            }
            propMediator.setScope(valueStr);
        }
        
        
        processTraceState(propMediator, elem);
        
        
        if (action != null && ""remove"".equals(action.getAttributeValue())) {
            propMediator.setAction(PropertyMediator.ACTION_REMOVE);
        }
        return propMediator;
    }

    public QName getTagQName() {
        return PROP_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.StartupSerializer,1,1,0,4,1,0,2,2,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Startup;


public interface StartupSerializer {

    
    public OMElement serializeStartup(OMElement parent, Startup startup);
}"
synapse,1.1,org.apache.synapse.config.xml.FilterMediatorFactory,4,3,0,11,26,4,0,11,3,0.666666667,193,1.0,0,0.666666667,0.666666667,0,0,47.0,10,2.75,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.filters.FilterMediator;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;


public class FilterMediatorFactory extends AbstractListMediatorFactory {

    private static final QName FILTER_Q    = new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""filter"");

    public Mediator createMediator(OMElement elem) {
        FilterMediator filter = new FilterMediator();

        OMAttribute attXpath  = elem.getAttribute(ATT_XPATH);
        OMAttribute attSource = elem.getAttribute(ATT_SOURCE);
        OMAttribute attRegex  = elem.getAttribute(ATT_REGEX);

        if (attXpath != null) {
            if (attXpath.getAttributeValue() != null && attXpath.getAttributeValue().trim().length() == 0) {
                String msg = ""Invalid attribute value specified for xpath"";
                log.error(msg);
                throw new SynapseException(msg);

            } else {
                try {
                    filter.setXpath(new AXIOMXPath(attXpath.getAttributeValue()));
                } catch (JaxenException e) {
                    String msg = ""Invalid XPath expression for attribute xpath : "" + attXpath.getAttributeValue();
                    log.error(msg);
                    throw new SynapseException(msg);
                }
            }
            OMElementUtils.addNameSpaces(filter.getXpath(), elem, log);

        } else if (attSource != null && attRegex != null) {

            if (
                (attSource.getAttributeValue() != null && attSource.getAttributeValue().trim().length() == 0) ||
                (attRegex.getAttributeValue()  != null && attRegex.getAttributeValue().trim().length() == 0) ){
                String msg = ""Invalid attribute values for source and/or regex specified"";
                log.error(msg);
                throw new SynapseException(msg);

            } else {
                try {
                    filter.setSource(new AXIOMXPath(attSource.getAttributeValue()));
                } catch (JaxenException e) {
                    String msg = ""Invalid XPath expression for attribute source : "" + attSource.getAttributeValue();
                    log.error(msg);
                    throw new SynapseException(msg);
                }
                try {
                    filter.setRegex(Pattern.compile(attRegex.getAttributeValue()));
                } catch (PatternSyntaxException pse) {
                    String msg = ""Invalid Regular Expression for attribute regex : "" + attRegex.getAttributeValue();
                    log.error(msg);
                    throw new SynapseException(msg);
                }
            }
            OMElementUtils.addNameSpaces(filter.getSource(), elem, log);

        } else {
            String msg = ""An xpath or (source, regex) attributes are required for a filter"";
            log.error(msg);
            throw new SynapseException(msg);
        }
        
        
        processTraceState(filter,elem);
        addChildren(elem, filter);
        return filter;
    }

    public QName getTagQName() {
        return FILTER_Q;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.filters.InMediator,3,3,0,7,16,3,2,5,3,2.0,74,0.0,0,0.916666667,0.833333333,1,2,23.66666667,8,3.3333,0,"

package org.apache.synapse.mediators.filters;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.AbstractListMediator;


public class InMediator extends AbstractListMediator implements org.apache.synapse.mediators.FilterMediator {

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : In mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        boolean result = true;
        if (test(synCtx)) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Current message is incoming - executing child mediators"");
            }
            result = super.mediate(synCtx);

        } else {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Current message is a response - skipping child mediators"");
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : In mediator"");
        }

        return result;
    }

    
    public boolean test(MessageContext synCtx) {
        return !synCtx.isResponse();
    }
}
"
synapse,1.1,org.apache.synapse.mediators.MediatorWorker,5,1,0,10,21,0,1,9,3,0.5,159,1.0,2,0.0,0.5,0,0,30.0,4,1.6,0,"

package org.apache.synapse.mediators;

import org.apache.synapse.*;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class MediatorWorker implements Runnable {

    private static final Log log = LogFactory.getLog(MediatorWorker.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    
    private Mediator seq = null;

    
    private MessageContext synCtx = null;

    
    public MediatorWorker(Mediator seq, MessageContext synCtx) {
        this.seq = seq;
        this.synCtx = synCtx;
    }

    
    public MediatorWorker(MessageContext synCtx) {
        this.synCtx = synCtx;
        seq = synCtx.getMainSequence();
    }

    
    public void run() {
        try {
            seq.mediate(synCtx);
            

        } catch (SynapseException syne) {
            if (!synCtx.getFaultStack().isEmpty()) {
                warn(false, ""Executing fault handler due to exception encountered"", synCtx);
                ((FaultHandler) synCtx.getFaultStack().pop()).handleFault(synCtx, syne);

            } else {
                warn(false, ""Exception encountered but no fault handler found - "" +
                    ""message dropped"", synCtx);
            }

        } catch (Exception e) {
            String msg = ""Unexpected error executing task/async inject"";
            log.error(msg, e);
            if (synCtx.getServiceLog() != null) {
                synCtx.getServiceLog().error(msg, e);
            }
            if (!synCtx.getFaultStack().isEmpty()) {
                warn(false, ""Executing fault handler due to exception encountered"", synCtx);
                ((FaultHandler) synCtx.getFaultStack().pop()).handleFault(synCtx, e);

            } else {
                warn(false, ""Exception encountered but no fault handler found - "" +
                    ""message dropped"", synCtx);
            }
        }
        synCtx = null;
        seq = null;
    }

    private void warn(boolean traceOn, String msg, MessageContext msgContext) {
        if (traceOn) {
            trace.warn(msg);
        }
        if (log.isDebugEnabled()) {
            log.warn(msg);
        }
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().warn(msg);
        }
    }

}
"
synapse,1.1,org.apache.synapse.core.axis2.SOAPUtils,5,1,0,22,66,4,2,20,4,0.25,493,1.0,0,0.0,0.416666667,0,0,96.8,1,0.6,0,"

package org.apache.synapse.core.axis2;

import java.util.Iterator;
import java.util.List;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.soap.SOAP11Constants;
import org.apache.axiom.soap.SOAP12Constants;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPFactory;
import org.apache.axiom.soap.SOAPFault;
import org.apache.axiom.soap.SOAPFaultCode;
import org.apache.axiom.soap.SOAPFaultReason;
import org.apache.axiom.soap.SOAPFaultText;
import org.apache.axiom.soap.SOAPFaultValue;
import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axis2.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.util.MessageHelper;

public class SOAPUtils {

    private static final Log log = LogFactory.getLog(SOAPUtils.class);

    
    public static void convertSoapVersion(org.apache.axis2.context.MessageContext axisOutMsgCtx,
        String soapVersionURI) throws AxisFault {

        if (org.apache.axis2.namespace.Constants.URI_SOAP12_ENV.equals(soapVersionURI)) {
            convertSOAP11toSOAP12(axisOutMsgCtx);
        } else if (org.apache.axis2.namespace.Constants.URI_SOAP11_ENV.equals(soapVersionURI)) {
            convertSOAP12toSOAP11(axisOutMsgCtx);
        } else {
            throw new SynapseException(""Invalid soapVersionURI:"" + soapVersionURI);
        }
    }

    private static String SOAP_ATR_ACTOR = ""actor"";
    private static String SOAP_ATR_ROLE = ""role"";
    private static String SOAP_ATR_MUST_UNDERSTAND = ""mustUnderstand"";

    
    public static void convertSOAP11toSOAP12(
        org.apache.axis2.context.MessageContext axisOutMsgCtx) throws AxisFault {

        if(log.isDebugEnabled()) {
            log.debug(""convert SOAP11 to SOAP12"");
        }
        
        SOAPEnvelope oldEnvelope = MessageHelper.cloneSOAPEnvelope(axisOutMsgCtx.getEnvelope());

        SOAPFactory soap12Factory = OMAbstractFactory.getSOAP12Factory();
        SOAPEnvelope newEnvelope  = soap12Factory.getDefaultEnvelope();

        if (oldEnvelope.getHeader() != null) {
            Iterator itr = oldEnvelope.getHeader().getChildren();
            while (itr.hasNext()) {
                OMNode omNode = (OMNode) itr.next();

                if (omNode instanceof SOAPHeaderBlock) {
                    SOAPHeaderBlock soapHeader = (SOAPHeaderBlock) omNode;
                    SOAPHeaderBlock newSOAPHeader = soap12Factory.createSOAPHeaderBlock(
                        soapHeader.getLocalName(), soapHeader.getNamespace());
                    Iterator allAttributes = soapHeader.getAllAttributes();

                    while(allAttributes.hasNext()) {
                        OMAttribute attr = (OMAttribute) allAttributes.next();
                        if(attr.getNamespace() != null
                            && SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(
                            attr.getNamespace().getNamespaceURI())) {
                            String attrName = attr.getLocalName();

                            if(SOAP_ATR_ACTOR.equals(attrName)) {
                                OMAttribute newAtr = omNode.getOMFactory().createOMAttribute(
                                    SOAP_ATR_ROLE, newEnvelope.getNamespace(),
                                    attr.getAttributeValue());
                                newSOAPHeader.addAttribute(newAtr);

                            } else if(SOAP_ATR_MUST_UNDERSTAND.equals(attrName)) {
                                boolean isMustUnderstand = soapHeader.getMustUnderstand();
                                newSOAPHeader.setMustUnderstand(isMustUnderstand);

                            } else {
                                log.warn(""removed unsupported attribute from SOAP 1.1 "" +
                                    ""namespace when converting to SOAP 1.2:"" + attrName);
                            }

                        } else {
                            newSOAPHeader.addAttribute(attr);
                        }

                        Iterator itrChildren = soapHeader.getChildren();
                        while (itrChildren.hasNext()) {
                            newSOAPHeader.addChild(((OMNode) itrChildren.next()));
                        }

                        newEnvelope.getHeader().addChild(newSOAPHeader);
                    } 

                } else {
                    newEnvelope.getHeader().addChild(omNode);
                }

            } 

        } 

        if (oldEnvelope.getBody() != null) {

            Iterator itrBodyChildren = oldEnvelope.getBody().getChildren();
            while (itrBodyChildren.hasNext()) {
                OMNode omNode = (OMNode) itrBodyChildren.next();

                if (omNode instanceof SOAPFault) {
                    SOAPFault soapFault = (SOAPFault) omNode;
                    if(soapFault != null) {
                        SOAPFault newSOAPFault = soap12Factory.createSOAPFault();
                        newEnvelope.getBody().addChild(newSOAPFault);
                        
                        SOAPFaultCode code = soapFault.getCode();
                        if(code != null) {
                            SOAPFaultCode newSOAPFaultCode = soap12Factory.createSOAPFaultCode();
                            newSOAPFault.setCode(newSOAPFaultCode);

                            String value = code.getText();
                            if(value != null) {
                                SOAPFaultValue newSOAPFaultValue
                                    = soap12Factory.createSOAPFaultValue(newSOAPFaultCode);
                                newSOAPFaultValue.setText(value);
                            }

                        }

                        SOAPFaultReason reason = soapFault.getReason();
                        if(reason != null) {
                            SOAPFaultReason newSOAPFaultReason
                                = soap12Factory.createSOAPFaultReason(newSOAPFault);
                            String reasonText = reason.getText();
                            if(reasonText != null) {
                                SOAPFaultText newSOAPFaultText
                                    = soap12Factory.createSOAPFaultText(newSOAPFaultReason);
                                newSOAPFaultText.setLang(""en""); 
                                newSOAPFaultText.setText(reasonText);
                            }
                            newSOAPFault.setReason(newSOAPFaultReason);
                        }

                    } 

                } else {
                    newEnvelope.getBody().addChild(omNode);

                } 

            } 

        } 

        axisOutMsgCtx.setEnvelope(newEnvelope);
    }

    
    public static void convertSOAP12toSOAP11(
        org.apache.axis2.context.MessageContext axisOutMsgCtx) throws AxisFault {
        if (log.isDebugEnabled()) {
            log.debug(""convert SOAP12 to SOAP11"");
        }
        
        SOAPEnvelope oldEnvelope = MessageHelper.cloneSOAPEnvelope(axisOutMsgCtx.getEnvelope());

        SOAPFactory soap11Factory = OMAbstractFactory.getSOAP11Factory();
        SOAPEnvelope newEnvelope  = soap11Factory.getDefaultEnvelope();
        if (oldEnvelope.getHeader() != null) {
            Iterator itr = oldEnvelope.getHeader().getChildren();
            while (itr.hasNext()) {
                OMNode omNode = (OMNode) itr.next();

                if (omNode instanceof SOAPHeaderBlock) {
                    SOAPHeaderBlock soapHeaderBlock = (SOAPHeaderBlock) omNode;
                    SOAPHeaderBlock newSOAPHeader = soap11Factory.createSOAPHeaderBlock(
                        soapHeaderBlock.getLocalName(), soapHeaderBlock.getNamespace());

                    Iterator allAttributes = soapHeaderBlock.getAllAttributes();

                    while(allAttributes.hasNext()) {
                        OMAttribute attr = (OMAttribute) allAttributes.next();
                        if(attr.getNamespace() != null
                            && SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(
                            attr.getNamespace().getNamespaceURI())) {
                            String attrName = attr.getLocalName();

                            if(SOAP_ATR_ROLE.equals(attrName)) {
                                OMAttribute newAtr = omNode.getOMFactory().createOMAttribute(
                                    SOAP_ATR_ACTOR, newEnvelope.getNamespace(),
                                    attr.getAttributeValue());
                                newSOAPHeader.addAttribute(newAtr);

                            } else if(SOAP_ATR_MUST_UNDERSTAND.equals(attrName)) {
                                boolean isMustUnderstand = soapHeaderBlock.getMustUnderstand();
                                newSOAPHeader.setMustUnderstand(isMustUnderstand);

                            } else {
                                log.warn(""removed unsupported attribute from SOAP 1.2 "" +
                                    ""namespace when converting to SOAP 1.1:"" + attrName);
                            }

                        } else {
                            newSOAPHeader.addAttribute(attr);
                        }

                        Iterator itrChildren = soapHeaderBlock.getChildren();
                        while (itrChildren.hasNext()) {
                            newSOAPHeader.addChild(((OMNode) itrChildren.next()));
                        }

                        newEnvelope.getHeader().addChild(newSOAPHeader);
                    } 

                } else {
                    newEnvelope.getHeader().addChild(omNode);
                } 

            } 

        } 

        if (oldEnvelope.getBody() != null) {
            Iterator itr = oldEnvelope.getBody().getChildren();
            while (itr.hasNext()) {
                OMNode omNode = (OMNode) itr.next();

                if (omNode instanceof SOAPFault) {

                    SOAPFault soapFault = (SOAPFault) omNode;
                    if(soapFault != null) {
                        SOAPFault newSOAPFault = soap11Factory.createSOAPFault();
                        newEnvelope.getBody().addChild(newSOAPFault);

                        SOAPFaultCode code = soapFault.getCode();
                        if(code != null) {
                            SOAPFaultCode newSOAPFaultCode
                                = soap11Factory.createSOAPFaultCode(newSOAPFault);

                            SOAPFaultValue value = code.getValue();
                            if(value != null) {
                                soap11Factory.createSOAPFaultValue(newSOAPFaultCode);
                                if(value.getText() != null) {
                                    newSOAPFaultCode.setText(value.getText());
                                }
                            }
                        }

                        SOAPFaultReason reason = soapFault.getReason();
                        if(reason != null) {
                            SOAPFaultReason newSOAPFaultReason
                                = soap11Factory.createSOAPFaultReason(newSOAPFault);

                            List allSoapTexts = reason.getAllSoapTexts();
                            Iterator iterAllSoapTexts = allSoapTexts.iterator();
                            while(iterAllSoapTexts.hasNext()) {
                                SOAPFaultText soapFaultText
                                    = (SOAPFaultText) iterAllSoapTexts.next();
                                SOAPFaultText newSOAPFaultText
                                    = soap11Factory.createSOAPFaultText(newSOAPFaultReason);
                                newSOAPFaultReason.setText(soapFaultText.getText());
                                break;
                            }
                        }

                    } 

                } else {
                    newEnvelope.getBody().addChild(omNode);
                } 

            } 

        } 
        axisOutMsgCtx.setEnvelope(newEnvelope);
    }

}"
synapse,1.1,org.apache.synapse.config.xml.AnonymousListMediatorSerializer,3,3,0,5,12,3,1,4,3,2.0,33,0.0,0,0.777777778,0.555555556,0,0,10.0,2,1.0,0,"
package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;



public class AnonymousListMediatorSerializer extends AbstractListMediatorSerializer {

    
    public OMElement serializeMediator(OMElement parent, Mediator m) {
        if (!(m instanceof AnonymousListMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }
        AnonymousListMediator mediator = (AnonymousListMediator) m;
        serializeChildren(parent, mediator.getList());
        return parent;
    }

    public String getMediatorClassName() {
        return AnonymousListMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.utils.WSDL11EndpointBuilder,6,1,0,6,31,13,1,5,3,0.2,177,1.0,0,0.0,0.5,0,0,28.33333333,10,2.1667,0,"

package org.apache.synapse.config.xml.endpoints.utils;

import org.apache.axiom.om.OMElement;
import org.apache.axis2.util.XMLUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.core.axis2.CustomWSDLLocator;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.wsdl.Definition;
import javax.wsdl.Port;
import javax.wsdl.Service;
import javax.wsdl.WSDLException;
import javax.wsdl.extensions.soap.SOAPAddress;
import javax.wsdl.extensions.soap12.SOAP12Address;
import javax.wsdl.factory.WSDLFactory;
import javax.wsdl.xml.WSDLLocator;
import javax.wsdl.xml.WSDLReader;
import javax.xml.namespace.QName;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;


public class WSDL11EndpointBuilder {

    private static Log log = LogFactory.getLog(WSDL11EndpointBuilder.class);

    
    public EndpointDefinition createEndpointDefinitionFromWSDL
            (String baseUri, OMElement wsdl, String service, String port) {

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            wsdl.serialize(baos);
            InputStream in = new ByteArrayInputStream(baos.toByteArray());
            InputSource inputSource = new InputSource(in);
            WSDLLocator wsdlLocator = new CustomWSDLLocator(inputSource,baseUri);
            Document doc = null;
            try {
                doc = XMLUtils.newDocument(inputSource);
            } catch (ParserConfigurationException e) {
                handleException(""Parser Configuration Error"", e);
            } catch (SAXException e) {
                handleException(""Parser SAX Error"", e);
            } catch (IOException e) {
                handleException(WSDLException.INVALID_WSDL+ ""IO Error"",e);
            }
            if (doc != null) {
                WSDLFactory fac = WSDLFactory.newInstance();
                WSDLReader reader = fac.newWSDLReader();
                Definition definition = reader.readWSDL(wsdlLocator, doc.getDocumentElement());
                return createEndpointDefinitionFromWSDL(definition, service, port);
            }
        } catch (XMLStreamException e) {
            handleException(""Error retrieving the WSDL definition from the inline WSDL."");
        } catch (WSDLException e) {
            handleException(""Error retrieving the WSDL definition from the inline WSDL."");
        }

        return null;
    }

    
    private EndpointDefinition createEndpointDefinitionFromWSDL
            (String wsdlURI, String service, String port) {

        try {
            WSDLFactory fac = WSDLFactory.newInstance();
            WSDLReader reader = fac.newWSDLReader();
            Definition definition = reader.readWSDL(wsdlURI);

            return createEndpointDefinitionFromWSDL(definition, service, port);

        } catch (WSDLException e) {
            handleException(""Error retrieving the WSDL definition from the WSDL URI."");
        }

        return null;
    }

    private EndpointDefinition createEndpointDefinitionFromWSDL
            (Definition definition, String serviceName, String portName) {

        if (definition == null) {
            handleException(""WSDL is not specified."");
        }

        if (serviceName == null) {
            handleException(""Service of the WSDL document is not specified."");
        }

        if (portName == null) {
            handleException(""Port of the WSDL document is not specified."");
        }


        String serviceURL = null;
        
        
        String format = null; 
        String tns = definition.getTargetNamespace();
        Service service = definition.getService(new QName(tns, serviceName));
        if (service != null) {
            Port port = service.getPort(portName);
            if (port != null) {
                List ext = port.getExtensibilityElements();
                for (int i = 0; i < ext.size(); i++) {
                    Object o = ext.get(i);
                    if (o instanceof SOAPAddress) {
                        SOAPAddress address = (SOAPAddress) o;
                        serviceURL = address.getLocationURI();
                        format = SynapseConstants.FORMAT_SOAP11;
                        break;
                    } else if (o instanceof SOAP12Address) {
                        SOAP12Address address = (SOAP12Address) o;
                        serviceURL = address.getLocationURI();
                        format = SynapseConstants.FORMAT_SOAP12;
                        break;
                    }
                }
            }
        }

        if (serviceURL != null) {
            EndpointDefinition endpointDefinition = new EndpointDefinition();
            endpointDefinition.setAddress(serviceURL);
            endpointDefinition.setFormat(format);
            
            

            return endpointDefinition;

        } else {
            handleException(""Couldn't retrieve endpoint information from the WSDL."");
        }

        return null;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.MessageContextCreatorForAxis2,5,1,0,12,10,0,3,9,4,0.583333333,46,1.0,2,0.0,0.25,0,0,7.6,1,0.6,0,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;


public class MessageContextCreatorForAxis2 {

    private static final Log log = LogFactory.getLog(MessageContextCreatorForAxis2.class);

    private static SynapseConfiguration synCfg = null;
    private static SynapseEnvironment   synEnv = null;

    public static MessageContext getSynapseMessageContext(
            org.apache.axis2.context.MessageContext axisMsgCtx) throws AxisFault {

        if (synCfg == null || synEnv == null) {
            String msg = ""Synapse environment has not initialized properly.."";
            log.fatal(msg);
            throw new SynapseException(msg);
        }

        return new Axis2MessageContext(axisMsgCtx, synCfg, synEnv);
    }

    public static void setSynConfig(SynapseConfiguration synCfg) {
        MessageContextCreatorForAxis2.synCfg = synCfg;
    }

    public static void setSynEnv(SynapseEnvironment synEnv) {
        MessageContextCreatorForAxis2.synEnv = synEnv;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.DropMediatorFactory,4,2,0,4,8,4,0,4,3,0.666666667,27,1.0,0,0.6,0.666666667,0,0,5.5,1,0.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.DropMediator;

import javax.xml.namespace.QName;


public class DropMediatorFactory extends AbstractMediatorFactory  {

    private static final QName DROP_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""drop"");

    public Mediator createMediator(OMElement el) {

        Mediator dropMediator = new DropMediator();
        
        
        processTraceState(dropMediator,el);

        return dropMediator;
    }

    public QName getTagQName() {
        return DROP_Q;
    }
}
"
synapse,1.1,org.apache.synapse.Command,1,1,0,1,1,0,1,0,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,0,"

package org.apache.synapse;


public interface Command {

    
    public void execute();
}
"
synapse,1.1,org.apache.synapse.config.xml.SendMediatorFactory,4,2,0,8,13,2,0,8,3,0.666666667,61,1.0,0,0.6,0.666666667,0,0,13.75,3,1.0,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.endpoints.EndpointFactory;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
import org.apache.synapse.mediators.builtin.SendMediator;
import org.apache.synapse.endpoints.Endpoint;

import javax.xml.namespace.QName;


public class SendMediatorFactory extends AbstractMediatorFactory  {

    private static final QName SEND_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""send"");
    private static final QName ENDPOINT_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""endpoint"");

    public Mediator createMediator(OMElement elem) {

        SendMediator sm =  new SendMediator();

        
        
        processTraceState(sm,elem);

        OMElement epElement = elem.getFirstChildWithName(ENDPOINT_Q);
        if (epElement != null) {
            
            

            EndpointFactory fac = EndpointAbstractFactory.getEndpointFactroy(epElement);
            if (fac != null) {
                Endpoint endpoint = fac.createEndpoint(epElement, true);
                if (endpoint != null) {
                    sm.setEndpoint(endpoint);
                }
            } else {
                throw new SynapseException(""Invalid endpoint fromat."");
            }
        }

        return sm;
    }

    public QName getTagQName() {
        return SEND_Q;
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.dispatch.Dispatcher,4,1,0,8,4,6,6,2,4,2.0,4,0.0,0,0.0,0.666666667,0,0,0.0,1,1.0,0,"

package org.apache.synapse.endpoints.dispatch;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.MessageContext;


public interface Dispatcher {

    
    public Endpoint getEndpoint(MessageContext synCtx);
    
    
    public void updateSession(MessageContext synCtx, Endpoint endpoint);

    
    public void unbind(MessageContext synCtx);

    
    public boolean isServerInitiatedSession();
}
"
synapse,1.1,org.apache.synapse.endpoints.IndirectEndpoint,14,1,0,12,38,27,3,9,11,0.791208791,280,1.0,2,0.0,0.4,0,0,18.5,7,2.0,1,"

package org.apache.synapse.endpoints;

import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class IndirectEndpoint implements Endpoint {

    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);
    private static final Log log = LogFactory.getLog(IndirectEndpoint.class);

    private String name = null;
    private String key = null;
    private boolean active = true;
    private Endpoint parentEndpoint = null;

    
    private MessageContext currentMsgCtx = null;

    public void send(MessageContext synMessageContext) {
        
        Endpoint endpoint = synMessageContext.getEndpoint(key);
        if (endpoint == null) {
            handleException(""Reference to non-existent endpoint for key : "" + key);
        }

        if (endpoint.isActive(synMessageContext)) {
            endpoint.send(synMessageContext);

        } else {
            
            
            if (parentEndpoint != null) {
                auditWarn(""Endpoint : "" + endpoint.getName() + "" is currently inactive"" +
                    "" - invoking parent endpoint"", synMessageContext);
                parentEndpoint.onChildEndpointFail(this, synMessageContext);

            } else {
                auditWarn(""Endpoint : "" + endpoint.getName() + "" is currently inactive"" +
                    "" - invoking fault handler / assuming failure"", synMessageContext);

                Object o = synMessageContext.getFaultStack().pop();
                if (o != null) {
                    ((FaultHandler) o).handleFault(synMessageContext);
                }
            }
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name.trim();
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    
    public boolean isActive(MessageContext synMessageContext) {
        Endpoint endpoint = synMessageContext.getEndpoint(key);
        if (endpoint == null) {
            handleException(""Reference to non-existent endpoint for key : "" + key);
        }

        return endpoint.isActive(synMessageContext);
    }

    
    public void setActive(boolean active, MessageContext synMessageContext) {
        Endpoint endpoint = synMessageContext.getEndpoint(key);
        if (endpoint == null) {
            handleException(""Reference to non-existent endpoint for key : "" + key);
        }

        endpoint.setActive(active, synMessageContext);
    }

    public void setParentEndpoint(Endpoint parentEndpoint) {
        this.parentEndpoint = parentEndpoint;
    }

    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {        

        
        
        if (parentEndpoint != null) {
            parentEndpoint.onChildEndpointFail(this, synMessageContext);
        } else {
            Object o = synMessageContext.getFaultStack().pop();
            if (o != null) {
                ((FaultHandler) o).handleFault(synMessageContext);
            }
        }
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    protected void auditWarn(String msg, MessageContext msgContext) {
        log.warn(msg);
        if (msgContext.getServiceLog() != null) {
            msgContext.getServiceLog().warn(msg);
        }
        if (shouldTrace(msgContext)) {
            trace.warn(msg);
        }
    }

    public boolean shouldTrace(MessageContext synCtx){
        Endpoint endpoint = synCtx.getEndpoint(key);
        EndpointDefinition endptDefn = null;
        if (endpoint instanceof AddressEndpoint) {
            AddressEndpoint addEndpt = (AddressEndpoint) endpoint;
            endptDefn = addEndpt.getEndpoint();
        } else if (endpoint instanceof WSDLEndpoint) {
            WSDLEndpoint wsdlEndpt = (WSDLEndpoint) endpoint;
            endptDefn = wsdlEndpt.getEndpoint();
        }

        if (endptDefn != null) {
            return (endptDefn.getTraceState() == SynapseConstants.TRACING_ON) ||
                   (endptDefn.getTraceState() == SynapseConstants.TRACING_UNSET &&
                        synCtx.getTracingState() == SynapseConstants.TRACING_ON);
        }
        return false;
    }

}
"
synapse,1.1,org.apache.synapse.mediators.builtin.LogMediator,16,2,0,13,60,34,4,9,9,0.866666667,483,0.375,0,0.464285714,0.258928571,0,0,28.6875,8,2.4375,0,"

package org.apache.synapse.mediators.builtin;

import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.MediatorProperty;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;



public class LogMediator extends AbstractMediator {

    
    public static final int CUSTOM  = 0;
    
    public static final int SIMPLE  = 1;
    
    public static final int HEADERS = 2;
    
    public static final int FULL    = 3;

    public static final String DEFAULT_SEP = "", "";

    
    private int logLevel = SIMPLE;
    
    private String separator = DEFAULT_SEP;
    
    private List properties = new ArrayList();

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Log mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        String logMessage = getLogMessage(synCtx);
        synCtx.getServiceLog().info(logMessage);

        if (log.isInfoEnabled()) {
            log.info(logMessage);
        }
        if (traceOn) {
            trace.info(""Log message : "" + logMessage);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Log mediator"");
        }
        return true;
    }

    private String getLogMessage(MessageContext synCtx) {
        switch (logLevel) {
            case CUSTOM:
                return getCustomLogMessage(synCtx);
            case SIMPLE:
                return getSimpleLogMessage(synCtx);
            case HEADERS:
                return getHeadersLogMessage(synCtx);
            case FULL:
                return getFullLogMessage(synCtx);
            default:
                return ""Invalid log level specified"";
        }
    }

    private String getCustomLogMessage(MessageContext synCtx) {
        StringBuffer sb = new StringBuffer();
        setCustomProperties(sb, synCtx);
        return trimLeadingSeparator(sb);
    }

    private String getSimpleLogMessage(MessageContext synCtx) {
        StringBuffer sb = new StringBuffer();
        if (synCtx.getTo() != null)
            sb.append(""To: "" + synCtx.getTo().getAddress());
        else
            sb.append(""To: "");
        if (synCtx.getFrom() != null)
            sb.append(separator + ""From: "" + synCtx.getFrom().getAddress());
        if (synCtx.getWSAAction() != null)
            sb.append(separator + ""WSAction: "" + synCtx.getWSAAction());
        if (synCtx.getSoapAction() != null)
            sb.append(separator + ""SOAPAction: "" + synCtx.getSoapAction());
        if (synCtx.getReplyTo() != null)
            sb.append(separator + ""ReplyTo: "" + synCtx.getReplyTo().getAddress());
        if (synCtx.getMessageID() != null)
            sb.append(separator + ""MessageID: "" + synCtx.getMessageID());
        sb.append(separator + ""Direction: "" + (synCtx.isResponse() ? ""response"" : ""request""));
        setCustomProperties(sb, synCtx);
        return trimLeadingSeparator(sb);
    }

    private String getHeadersLogMessage(MessageContext synCtx) {
        StringBuffer sb = new StringBuffer();
        if (synCtx.getEnvelope() != null) {
            SOAPHeader header = synCtx.getEnvelope().getHeader();
            if (header != null) {
                for (Iterator iter = header.examineAllHeaderBlocks(); iter.hasNext();) {
                    Object o = iter.next();
                    if (o instanceof SOAPHeaderBlock) {
                        SOAPHeaderBlock headerBlk = (SOAPHeaderBlock) o;
                        sb.append(separator + headerBlk.getLocalName() + "" : "" +
                                headerBlk.getText());
                    } else if (o instanceof OMElement) {
                        OMElement headerElem = (OMElement) o;
                        sb.append(separator + headerElem.getLocalName() + "" : "" +
                                headerElem.getText());
                    }
                }
            }
        }
        setCustomProperties(sb, synCtx);
        return trimLeadingSeparator(sb);
    }

    private String getFullLogMessage(MessageContext synCtx) {
        StringBuffer sb = new StringBuffer();
        sb.append(getSimpleLogMessage(synCtx));
        if (synCtx.getEnvelope() != null)
            sb.append(separator + ""Envelope: "" + synCtx.getEnvelope());        
        return trimLeadingSeparator(sb);
    }

    private void setCustomProperties(StringBuffer sb, MessageContext synCtx) {
        if (properties != null && !properties.isEmpty()) {
            for (Iterator iter = properties.iterator(); iter.hasNext();) {
                MediatorProperty prop = (MediatorProperty) iter.next();
                sb.append(separator + prop.getName() + "" = "" +
                        (prop.getValue() != null ? prop.getValue() :
                                prop.getEvaluatedExpression(synCtx)));
            }
        }
    }

    public int getLogLevel() {
        return logLevel;
    }

    public void setLogLevel(int logLevel) {
        this.logLevel = logLevel;
    }

    public String getSeparator() {
        return separator;
    }

    public void setSeparator(String separator) {
        this.separator = separator;
    }

    public void addProperty(MediatorProperty p) {
        properties.add(p);
    }

    public void addAllProperties(List list) {
        properties.addAll(list);
    }

    public List getProperties() {
        return properties;
    }

    private String trimLeadingSeparator(StringBuffer sb) {
        String retStr = sb.toString();
        if (retStr.startsWith(separator)) {
            return retStr.substring(separator.length());
        } else {
            return retStr;
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.DBReportMediatorSerializer,3,3,0,8,14,3,0,8,3,2.0,45,0.0,0,0.777777778,0.555555556,0,0,14.0,3,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.db.DBReportMediator;


public class DBReportMediatorSerializer extends AbstractDBMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof DBReportMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        DBReportMediator mediator = (DBReportMediator) m;
        OMElement dbReport = fac.createOMElement(""dbreport"", synNS);
        saveTracingState(dbReport,mediator);
        serializeDBInformation(mediator, dbReport);

        if (parent != null) {
            parent.addChild(dbReport);
        }
        return dbReport;
    }

    public String getMediatorClassName() {
        return DBReportMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.SynapseConstants,2,1,0,11,6,1,8,3,1,1.969230769,81,0.0,0,0.0,1.0,0,0,7.0,0,0.0,3,"

package org.apache.synapse;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMNamespace;

import javax.xml.namespace.QName;


public final class SynapseConstants {

    
    public static final String SYNAPSE_NAMESPACE = ""http:
    
    public static final OMNamespace SYNAPSE_OMNAMESPACE =
            OMAbstractFactory.getOMFactory().createOMNamespace(SYNAPSE_NAMESPACE, ""syn"");

    
    public static final String MAIN_SEQUENCE_KEY  = ""main"";
    
    public static final String FAULT_SEQUENCE_KEY = ""fault"";

    
    public static final String SYNAPSE_SERVICE_NAME =""__SynapseService"";
    
    public static final QName SYNAPSE_OPERATION_NAME = new QName(""mediate"");

    
    
    public static final String SANDESHA2_MODULE_NAME = ""sandesha2"";
    
    public static final String ADDRESSING_MODULE_NAME = ""addressing"";
    
    public static final String RAMPART_MODULE_NAME = ""rampart"";

    
    
    public static final String HEADER_TO = ""To"";
    
    public static final String HEADER_FROM = ""From"";
    
    public static final String HEADER_FAULT = ""FaultTo"";
    
    public static final String HEADER_ACTION = ""Action"";
    
    public static final String HEADER_REPLY_TO = ""ReplyTo"";
    
    public static final String HEADER_MESSAGE_ID = ""MessageID"";
    
    public static final String PROPERTY_MESSAGE_FORMAT = ""MESSAGE_FORMAT"";
    
    public static final String PROPERTY_OPERATION_NAME = ""OperationName"";
    
    public static final String PROPERTY_OPERATION_NAMESPACE = ""OperationNamespace"";
    
    public static final String SYSTEM_TIME = ""SYSTEM_TIME"";
    
    public static final String SYSTEM_DATE = ""SYSTEM_DATE"";

    
    public static final String RAMPART_POLICY = ""rampartPolicy"";
    
	public static final String SANDESHA_POLICY = ""sandeshaPolicy"";

    
    public static final String SYNAPSE_CONFIG = ""synapse.config"";
    
    public static final String SYNAPSE_ENV = ""synapse.env"";

    
    public static final String SYNAPSE_HOME = ""synapse.home"";
    
    public static final String DEFAULT_PROP_PATH = ""synapse.properties"";
    
    public static final String SYNAPSE_XML = ""synapse.xml"";
    
    public static final String SYNAPSE_PROPERTIES = ""synapse.properties"";

    
        
        public static final String PROXY_SERVICE = ""proxy.name"";
        
        public static final String RESPONSE = ""RESPONSE"";
        
        public static final String OUT_ONLY = ""OUT_ONLY"";

        
        
        public static final String ERROR_CODE = ""ERROR_CODE"";
        
        public static final String ERROR_MESSAGE = ""ERROR_MESSAGE"";
        
        public static final String ERROR_DETAIL = ""ERROR_DETAIL"";
        
        public static final String ERROR_EXCEPTION = ""ERROR_EXCEPTION"";

        
        public static final String SANDESHA_LAST_MESSAGE = ""Sandesha2LastMessage"";
        
        public static final String SANDESHA_SEQUENCE_KEY = ""Sandesha2SequenceKey"";
        
        public static final String SANDESHA_SPEC_VERSION = ""Sandesha2RMSpecVersion"";

    
    
    public static final String RELATES_TO_FOR_POX = ""synapse.RelatesToForPox"";

    
    public static final String ISRESPONSE_PROPERTY = ""synapse.isresponse"";


    
        
        public static final String TRACE_LOGGER =""TRACE_LOGGER"";
        public static final String SERVICE_LOGGER_PREFIX =""SERVICE_LOGGER."";

        
        public static final int TRACING_OFF =0;
        
        public static final int TRACING_ON =1;
        
        public static final int TRACING_UNSET=2;

        
        public static final int STATISTICS_OFF =0;
        
        public static final int STATISTICS_ON =1;
        
        public static final int STATISTICS_UNSET=2;

        
        public static final String SEQUENCE_STATS =""synapse.sequence.stats"";

        
        public static final String PROXY_STATS =""synapse.proxy.stats"";

        
        public static final String SERVICE_STATS =""synapse.service.stats"";

        
        public static final String ENDPOINT_STATS =""synapse.endpoint.stats"";

        
        public static final int  SEQUENCE_STATISTICS = 0;

        
        public static final int  PROXYSERVICE_STATISTICS = 1;

        
        public static final int ENDPOINT_STATISTICS = 2;

    
        
        public static final String TIMEOUT_HANDLER_INTERVAL = ""synapse.timeout_handler_interval"";

        
        public static final long DEFAULT_TIMEOUT_HANDLER_INTERVAL = 15000;

        
        public static final String GLOBAL_TIMEOUT_INTERVAL = ""synapse.global_timeout_interval"";

        
        public static final long DEFAULT_GLOBAL_TIMEOUT = 24 * 60 * 60 * 1000;

        
        public static final int NONE = 100;

        
        public static final int DISCARD = 101;

        
        public static final int DISCARD_AND_FAULT = 102;

        
        public static final String TIME_OUT = ""504"";
        public static final String SENDING_FAULT = ""503"";

    
    
    public static final String PROCESSED_ENDPOINT = ""processed_endpoint"";
    
    
    public static final String ANONYMOUS_ENDPOINT = ""AnonymousEndpoint"";

    
    public static final String ANONYMOUS_SEQUENCE = ""AnonymousSequence"";
    
    
    public static final String FORMAT_POX = ""pox"";
    public static final String FORMAT_GET = ""get"";
    public static final String FORMAT_SOAP11 = ""soap11"";
    public static final String FORMAT_SOAP12 = ""soap12"";    
    
    
    public static final String SYNAPSE_SERVER_NAME = ""SynapseServerName"";

    public static final String SYNAPSE_DATASOURCES = ""synapse.datasources"";
    
    
    public static final String RESOLVE_ROOT = ""resolve.root"";

    

    public static final int DEFAULT_READTIMEOUT = 100000;

    public static final int DEFAULT_CONNECTTIMEOUT = 20000;

    public static final String READTIMEOUT = ""Connection.ReadTimeout"";

    public static final String CONNECTTIMEOUT = ""Connection.ConnectTimeout"";

}
"
synapse,1.1,org.apache.synapse.Mediator,4,1,0,74,4,6,74,1,4,2.0,4,0.0,0,0.0,0.5,0,0,0.0,1,1.0,0,"

package org.apache.synapse;

import org.apache.synapse.MessageContext;


public interface Mediator {

    
    public boolean mediate(MessageContext synCtx);

    
    public String getType();

    
    public int getTraceState();

    
    public void setTraceState(int traceState);
}
"
synapse,1.1,org.apache.synapse.statistics.StatisticsUtils,6,1,0,14,22,15,5,9,5,2.0,146,0.0,0,0.0,0.5,0,0,23.33333333,4,2.3333,0,"
package org.apache.synapse.statistics;

import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;



public class StatisticsUtils {

    
    public static void processProxyServiceStatistics(MessageContext synCtx) {

        StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
        boolean isFault = synCtx.getEnvelope().getBody().hasFault();
        ProxyServiceStatisticsStack proxyServiceStatisticsStack = (ProxyServiceStatisticsStack)
                synCtx.getProperty(SynapseConstants.PROXY_STATS);
        if (proxyServiceStatisticsStack != null) {
            proxyServiceStatisticsStack.reportToStatisticsCollector(statisticsCollector,isFault);
        }
        ProxyServiceStatisticsStack synapseServiceStatisticsStack = (ProxyServiceStatisticsStack)
                synCtx.getProperty(SynapseConstants.SERVICE_STATS);
        if (synapseServiceStatisticsStack != null) {
            synapseServiceStatisticsStack.reportToStatisticsCollector(statisticsCollector,isFault);
        }
    }

    
    public static void processEndPointStatistics(MessageContext synCtx) {
        StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
        boolean isFault = synCtx.getEnvelope().getBody().hasFault();
        EndPointStatisticsStack endPointStatisticsStack = (EndPointStatisticsStack)
                synCtx.getProperty(SynapseConstants.ENDPOINT_STATS);
        if (endPointStatisticsStack != null) {
            Object endpointObj = synCtx.getProperty(SynapseConstants.PROCESSED_ENDPOINT);
            if (endpointObj instanceof Endpoint) {
                Endpoint endpoint = (Endpoint) endpointObj;
                String name = endpoint.getName();
                if (name == null) {
                    endPointStatisticsStack.reportToStatisticsCollector(
                            statisticsCollector, isFault);
                } else {
                    endPointStatisticsStack.reportToStatisticsCollector(
                            statisticsCollector, isFault, name);
                }
                endPointStatisticsStack.reportAllToStatisticsCollector(statisticsCollector, true);
            }
        }
    }

    
    public static void processSequenceStatistics(MessageContext synCtx) {
        StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
        boolean isFault = synCtx.getEnvelope().getBody().hasFault();
        SequenceStatisticsStack sequenceStatisticsStack = (SequenceStatisticsStack)
                synCtx.getProperty(SynapseConstants.SEQUENCE_STATS);
        if (sequenceStatisticsStack != null) {
            sequenceStatisticsStack.reportToStatisticsCollector(statisticsCollector,isFault);
        }
    }

     
    public static void processAllSequenceStatistics(MessageContext synCtx) {
        StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
        boolean isFault = synCtx.getEnvelope().getBody().hasFault();
        SequenceStatisticsStack sequenceStatisticsStack = (SequenceStatisticsStack)
                synCtx.getProperty(SynapseConstants.SEQUENCE_STATS);
        if (sequenceStatisticsStack != null) {
            sequenceStatisticsStack.reportAllToStatisticsCollector(statisticsCollector,isFault);
        }
    }
    
    private static StatisticsCollector getStatisticsCollector(MessageContext synCtx) {
        SynapseEnvironment synEnv = synCtx.getEnvironment();
        StatisticsCollector statisticsCollector = null;
        if (synEnv != null) {
            statisticsCollector = synEnv.getStatisticsCollector();
            if (statisticsCollector == null) {
                statisticsCollector = new StatisticsCollector();
                synEnv.setStatisticsCollector(statisticsCollector);
            }
        }
        return statisticsCollector;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.SynapseXMLConfigurationSerializer,9,1,0,25,44,32,0,25,3,0.875,247,1.0,0,0.0,0.270833333,0,0,26.0,7,1.8889,1,"package org.apache.synapse.config.xml;

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Collection;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.Entry;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
import org.apache.synapse.core.axis2.ProxyService;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.Startup;

public class SynapseXMLConfigurationSerializer implements ConfigurationSerializer {

    private static final Log log = LogFactory
            .getLog(XMLConfigurationSerializer.class);

    private static final OMFactory fac = OMAbstractFactory.getOMFactory();

    private static final OMNamespace synNS = fac.createOMNamespace(
            XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");

    private static final OMNamespace nullNS = fac.createOMNamespace(
            XMLConfigConstants.NULL_NAMESPACE, """");

    

    public OMElement serializeConfiguration(SynapseConfiguration synCfg) {

        OMElement definitions = fac.createOMElement(""definitions"", synNS);

        
        if (synCfg.getRegistry() != null) {
            RegistrySerializer.serializeRegistry(definitions, synCfg
                    .getRegistry());
        }

        
        Iterator iter = synCfg.getProxyServices().iterator();
        while (iter.hasNext()) {
            ProxyService service = (ProxyService) iter.next();
            ProxyServiceSerializer.serializeProxy(definitions, service);
        }

        Map entries = new HashMap();
        Map endpoints = new HashMap();
        Map sequences = new HashMap();

        iter = synCfg.getLocalRegistry().keySet().iterator();
        while (iter.hasNext()) {
            Object key = iter.next();
            Object o = synCfg.getLocalRegistry().get(key);
            if (o instanceof Mediator) {
                sequences.put(key, o);
            } else if (o instanceof Endpoint) {
                endpoints.put(key, o);
            } else if (o instanceof Entry) {
                entries.put(key, o);
            } else {
                handleException(""Unknown object : "" + o.getClass()
                        + "" for serialization into Synapse configuration"");
            }
        }

        
        serializeEntries(definitions, entries);

        
        serializeEndpoints(definitions, endpoints);

        
        serializeSequences(definitions, sequences);

        
        serializeStartups(definitions, synCfg.getStartups());

        return definitions;
    }

    private static void serializeEntries(OMElement definitions, Map entries) {
        Iterator iter = entries.keySet().iterator();
        while (iter.hasNext()) {
            String key = (String) iter.next();
            EntrySerializer.serializeEntry((Entry) entries.get(key),
                    definitions);
        }
    }

    private static void serializeStartups(OMElement definitions, Collection startups) {
        Iterator it = startups.iterator();
        while (it.hasNext()) {
            Startup s = (Startup) it.next();
            StartupFinder.getInstance().serializeStartup(definitions, s);
        }
    }

    private static void serializeEndpoints(OMElement definitions, Map endpoints) {
        Iterator iter = endpoints.keySet().iterator();
        while (iter.hasNext()) {
            String key = (String) iter.next();
            Object o = endpoints.get(key);
            if (o instanceof Endpoint) {
                Endpoint endpoint = (Endpoint) o;
                OMElement epElement = EndpointAbstractSerializer
                        .getEndpointSerializer(endpoint).serializeEndpoint(
                        endpoint);
                definitions.addChild(epElement);
            }

        }
    }

    private static void serializeSequences(OMElement definitions, Map sequences) {
        Iterator iter = sequences.keySet().iterator();
        while (iter.hasNext()) {
            String key = (String) iter.next();
            Mediator mediator = (Mediator) sequences.get(key);
            MediatorSerializerFinder.getInstance().getSerializer(mediator)
                    .serializeMediator(definitions, mediator);
        }
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    public QName getTagQName() {
        return XMLConfigConstants.DEFINITIONS_ELT;
	}

}
"
synapse,1.1,org.apache.synapse.core.axis2.MediatorDeployer,9,1,0,11,45,22,0,11,6,0.75,343,1.0,0,0.0,0.4,0,0,36.88888889,1,0.7778,0,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.deployment.Deployer;
import org.apache.axis2.deployment.DeploymentClassLoader;
import org.apache.axis2.deployment.DeploymentException;
import org.apache.axis2.deployment.repository.util.DeploymentFileData;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.config.xml.MediatorFactory;
import org.apache.synapse.config.xml.MediatorFactoryFinder;
import org.apache.synapse.config.xml.MediatorSerializer;
import org.apache.synapse.config.xml.MediatorSerializerFinder;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;


public class MediatorDeployer implements Deployer {

    
    private static final Log log = LogFactory.getLog(MediatorDeployer.class);

    
    private ConfigurationContext cfgCtx = null;

    
    public void init(ConfigurationContext configurationContext) {
        this.cfgCtx = configurationContext;
    }

    
    public void deploy(DeploymentFileData deploymentFileData) throws DeploymentException {

        log.info(""Loading mediator from: "" + deploymentFileData.getAbsolutePath());

        
        ClassLoader prevCl = Thread.currentThread().getContextClassLoader();

        try {

            DeploymentClassLoader urlCl = new DeploymentClassLoader(
                    new URL[]{deploymentFileData.getFile().toURL()}, null, prevCl);
            Thread.currentThread().setContextClassLoader(urlCl);

            
            URL facURL = urlCl.findResource(
                    ""META-INF/services/org.apache.synapse.config.xml.MediatorFactory"");
            if (facURL != null) {
                InputStream facStream = facURL.openStream();
                InputStreamReader facreader = new InputStreamReader(facStream);

                StringBuffer facSB = new StringBuffer();
                int c;
                while ((c = facreader.read()) != -1) {
                    facSB.append((char) c);
                }

                String[] facClassName = facSB.toString().split(""
"");
                for (int i=0; i<facClassName.length; i++) {
                    log.info(""Registering the Mediator factory: "" + facClassName[i]);
                    Class facClass = urlCl.loadClass(facClassName[i]);
                    MediatorFactory facInst = (MediatorFactory) facClass.newInstance();
                    MediatorFactoryFinder.getInstance()
                            .getFactoryMap().put(facInst.getTagQName(), facClass);
                    log.info(""Mediator loaded and registered for "" +
                            ""the tag name: "" + facInst.getTagQName());
                }
            } else {
                handleException(""Unable to find the MediatorFactory implementation. "" +
                        ""Unable to register the MediatorFactory with the FactoryFinder"");
            }

            
            URL serURL = urlCl.findResource(
                    ""META-INF/services/org.apache.synapse.config.xml.MediatorSerializer"");
            if (serURL != null) {
                InputStream serStream = serURL.openStream();
                InputStreamReader serReader = new InputStreamReader(serStream);

                StringBuffer serSB = new StringBuffer();
                int c;
                while ((c = serReader.read()) != -1) {
                    serSB.append((char) c);
                }

                String[] serClassName = serSB.toString().split(""
"");
                for (int i=0; i<serClassName.length; i++) {
                    log.info(""Registering the Mediator serializer: "" + serClassName[i]);
                    Class serClass = urlCl.loadClass(serClassName[i]);
                    MediatorSerializer serInst = (MediatorSerializer) serClass.newInstance();
                    MediatorSerializerFinder.getInstance()
                            .getSerializerMap().put(serInst.getMediatorClassName(), serInst);
                    log.info(""Mediator loaded and registered for "" +
                            ""the serialization as: "" + serInst.getMediatorClassName());
                }
            } else {
                if (log.isDebugEnabled()) {
                    log.debug(""Unable to find the MediatorSerializer implementation. "" +
                            ""Unable to register the MediatorSerializer with the SerializerFinder"");
                }
            }

        } catch (IOException e) {
            handleException(""I/O error in reading the mediator jar file"", e);
        } catch (ClassNotFoundException e) {
            handleException(""Unable to find the specified class on the path or in the jar file"", e);
        } catch (IllegalAccessException e) {
            handleException(""Unable to load the class from the jar"", e);
        } catch (InstantiationException e) {
            handleException(""Unable to instantiate the class specified"", e);
        } finally {
            
            if (log.isDebugEnabled()) {
                log.debug(""Restoring the context class loader to the original"");
            }
            Thread.currentThread().setContextClassLoader(prevCl);
        }
    }

    
    public void setDirectory(String string) {
        
    }

    
    public void setExtension(String string) {
        
    }

    
    public void unDeploy(String string) throws DeploymentException {
        
    }

    private void handleException(String message, Exception e) throws DeploymentException {
        if (log.isDebugEnabled()) {
            log.debug(message, e);
        }
        throw new DeploymentException(message, e);
    }

    private void handleException(String message) throws DeploymentException {
        if (log.isDebugEnabled()) {
            log.debug(message);
        }
        throw new DeploymentException(message);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.LoadbalanceEndpointSerializer,2,1,0,14,16,0,1,14,2,0.0,102,1.0,0,0.0,0.75,0,0,49.5,6,3.0,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.endpoints.LoadbalanceEndpoint;
import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
import org.apache.synapse.endpoints.algorithms.RoundRobin;
import org.apache.synapse.SynapseException;
import org.apache.synapse.SynapseConstants;

import java.util.List;


public class LoadbalanceEndpointSerializer implements EndpointSerializer {

    private OMFactory fac = null;

    public OMElement serializeEndpoint(Endpoint endpoint) {

        if (!(endpoint instanceof LoadbalanceEndpoint)) {
            throw new SynapseException(""Invalid endpoint type."");
        }

        fac = OMAbstractFactory.getOMFactory();
        OMElement endpointElement = fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);

        LoadbalanceEndpoint loadbalanceEndpoint = (LoadbalanceEndpoint) endpoint;

        String name = loadbalanceEndpoint.getName();
        if (name != null) {
            endpointElement.addAttribute(""name"", name, null);
        }

        OMElement loadbalanceElement = fac.createOMElement(""loadbalance"", SynapseConstants.SYNAPSE_OMNAMESPACE);
        endpointElement.addChild(loadbalanceElement);

        LoadbalanceAlgorithm algorithm = loadbalanceEndpoint.getAlgorithm();
        String algorithmName = ""roundRobin"";
        if (algorithm instanceof RoundRobin) {
             algorithmName = ""roundRobin"";
        }
        loadbalanceElement.addAttribute
                (org.apache.synapse.config.xml.XMLConfigConstants.ALGORITHM_NAME, algorithmName, null);

        
        if (!loadbalanceEndpoint.isFailover()) {
            loadbalanceElement.addAttribute(""failover"", ""false"", null);
        }

        List endpoints = loadbalanceEndpoint.getEndpoints();
        for (int i = 0; i < endpoints.size(); i++) {
            Endpoint childEndpoint = (Endpoint) endpoints.get(i);
            EndpointSerializer serializer = EndpointAbstractSerializer.
                    getEndpointSerializer(childEndpoint);
            OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
            loadbalanceElement.addChild(aeElement);
        }

        return endpointElement;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.eip.aggregator.AggregateMediator,30,2,0,14,74,299,2,12,28,0.898706897,594,1.0,2,0.317073171,0.172413793,0,0,18.26666667,22,2.0333,3,"

package org.apache.synapse.mediators.eip.aggregator;

import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.SOAP11Constants;
import org.apache.axiom.soap.SOAP12Constants;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.eip.EIPUtils;
import org.apache.synapse.mediators.eip.EIPConstants;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.jaxen.JaxenException;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Collections;


public class AggregateMediator extends AbstractMediator {

    private static final Log log = LogFactory.getLog(AggregateMediator.class);
    private static final Log trace = LogFactory.getLog(SynapseConstants.TRACE_LOGGER);

    
    private long completionTimeoutMillis = 0;
    
    private int minMessagesToComplete = -1;
    
    private int maxMessagesToComplete = -1;

    
    private AXIOMXPath correlateExpression = null;
    
    private AXIOMXPath aggregationExpression = null;

    
    private String onCompleteSequenceRef = null;
    
    private SequenceMediator onCompleteSequence = null;

    
    private Map<String, Aggregate> activeAggregates =
        Collections.synchronizedMap(new HashMap<String, Aggregate>());

    public AggregateMediator() {
        try {
            aggregationExpression = new AXIOMXPath(""s11:Body/child::*[position()=1] | "" +
                ""s12:Body/child::*[position()=1]"");
            aggregationExpression.addNamespace(""s11"", SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI);
            aggregationExpression.addNamespace(""s12"", SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        } catch (JaxenException e) {
            if (log.isDebugEnabled()) {
                handleException(""Unable to set the default "" +
                    ""aggregationExpression for the aggregation"", e, null);
            }
        }
    }

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Aggregate mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        try {
            Aggregate aggregate = null;

            
            
            if (correlateExpression != null
                && correlateExpression.evaluate(synCtx.getEnvelope()) != null) {

                if (activeAggregates.containsKey(correlateExpression.toString())) {
                    aggregate = activeAggregates.get(correlateExpression.toString());

                } else {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Creating new Aggregator - expires in : "" +
                            (completionTimeoutMillis / 1000) + ""secs"");
                    }

                    aggregate = new Aggregate(
                        correlateExpression.toString(),
                        completionTimeoutMillis,
                        minMessagesToComplete,
                        maxMessagesToComplete, this);
                    synCtx.getConfiguration().getSynapseTimer().
                        schedule(aggregate, completionTimeoutMillis);
                    activeAggregates.put(correlateExpression.toString(), aggregate);
                }

            } else if (synCtx.getProperty(EIPConstants.AGGREGATE_CORRELATION) != null) {
                
                
                
                

                Object o = synCtx.getProperty(EIPConstants.AGGREGATE_CORRELATION);
                String correlation = null;

                if (o != null && o instanceof String) {
                    correlation = (String) o;

                    if (activeAggregates.containsKey(correlation)) {
                        aggregate = activeAggregates.get(correlation);

                    } else {
                        if (traceOrDebugOn) {
                            traceOrDebug(traceOn, ""Creating new Aggregator - expires in : "" +
                                (completionTimeoutMillis / 1000) + ""secs"");
                        }
                        
                        aggregate = new Aggregate(
                            correlation,
                            completionTimeoutMillis,
                            minMessagesToComplete,
                            maxMessagesToComplete, this);
                        synCtx.getConfiguration().getSynapseTimer().
                            schedule(aggregate, completionTimeoutMillis);
                        activeAggregates.put(correlation, aggregate);
                    }

                } else {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Unable to find aggrgation correlation property"");
                    }
                    return true;
                }
            } else {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Unable to find aggrgation correlation XPath or property"");
                }
                return true;
            }

            
            if (aggregate != null) {
                boolean collected = aggregate.addMessage(synCtx);
                if (traceOrDebugOn) {
                    if (collected) {
                        traceOrDebug(traceOn, ""Collected a message during aggregation"");
                        if (traceOn && trace.isTraceEnabled()) {
                            trace.trace(""Collected message : "" + synCtx);
                        }
                    }
                }
                
                
                

                if (aggregate.isComplete(traceOn, traceOrDebugOn, trace, log)) {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Aggregation completed - invoking onComplete"");
                    }
                    completeAggregate(aggregate);
                    
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""End : Aggregate mediator"");
                    }
                    return true;
                }

            } else {
                
                

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Unable to find an aggregate for this message - skip"");
                }
                return true;
            }

        } catch (JaxenException e) {
            handleException(""Unable to execute the XPATH over the message"", e, synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Aggregate mediator"");
        }

        return false;
    }

    
    public void completeAggregate(Aggregate aggregate) {

        if (log.isDebugEnabled()) {
            log.debug(""Aggregation completed or timed out"");
        }

        
        aggregate.cancel();

        MessageContext newSynCtx = getAggregatedMessage(aggregate);
        if (newSynCtx == null) {
            log.warn(""An aggregation of messages timed out with no aggregated messages"", null);
            return;
        }

        activeAggregates.remove(aggregate);

        if ((correlateExpression != null &&
            !correlateExpression.toString().equals(aggregate.getCorrelation())) ||
            correlateExpression == null) {

            if (onCompleteSequence != null) {
                onCompleteSequence.mediate(newSynCtx);

            } else if (onCompleteSequenceRef != null
                && newSynCtx.getSequence(onCompleteSequenceRef) != null) {
                newSynCtx.getSequence(onCompleteSequenceRef).mediate(newSynCtx);

            } else {
                handleException(""Unable to find the sequence for the mediation "" +
                    ""of the aggregated message"", newSynCtx);
            }
        }
    }

    
    private MessageContext getAggregatedMessage(Aggregate aggregate) {

        MessageContext newCtx = null;
        Iterator<MessageContext> itr = aggregate.getMessages().iterator();

        while (itr.hasNext()) {
            MessageContext synCtx = itr.next();
            if (newCtx == null) {
                newCtx = synCtx;

                if (log.isDebugEnabled()) {
                    log.debug(""Generating Aggregated message from : "" + newCtx.getEnvelope());
                }

            } else {
                try {
                    if (log.isDebugEnabled()) {
                        log.debug(""Merging message : "" + synCtx.getEnvelope() + "" using XPath : "" +
                            aggregationExpression);
                    }

                    EIPUtils.enrichEnvelope(
                        newCtx.getEnvelope(), synCtx.getEnvelope(), aggregationExpression);

                    if (log.isDebugEnabled()) {
                        log.debug(""Merged result : "" + newCtx.getEnvelope());    
                    }

                } catch (JaxenException e) {
                    handleException(""Error merging aggregation results using XPath : "" +
                        aggregationExpression.toString(), e, synCtx);
                }
            }
        }
        return newCtx;
    }

    public AXIOMXPath getCorrelateExpression() {
        return correlateExpression;
    }

    public void setCorrelateExpression(AXIOMXPath correlateExpression) {
        this.correlateExpression = correlateExpression;
    }

    public long getCompletionTimeoutMillis() {
        return completionTimeoutMillis;
    }

    public void setCompletionTimeoutMillis(long completionTimeoutMillis) {
        this.completionTimeoutMillis = completionTimeoutMillis;
    }

    public int getMinMessagesToComplete() {
        return minMessagesToComplete;
    }

    public void setMinMessagesToComplete(int minMessagesToComplete) {
        this.minMessagesToComplete = minMessagesToComplete;
    }

    public int getMaxMessagesToComplete() {
        return maxMessagesToComplete;
    }

    public void setMaxMessagesToComplete(int maxMessagesToComplete) {
        this.maxMessagesToComplete = maxMessagesToComplete;
    }

    public AXIOMXPath getAggregationExpression() {
        return aggregationExpression;
    }

    public void setAggregationExpression(AXIOMXPath aggregationExpression) {
        this.aggregationExpression = aggregationExpression;
    }

    public String getOnCompleteSequenceRef() {
        return onCompleteSequenceRef;
    }

    public void setOnCompleteSequenceRef(String onCompleteSequenceRef) {
        this.onCompleteSequenceRef = onCompleteSequenceRef;
    }

    public SequenceMediator getOnCompleteSequence() {
        return onCompleteSequence;
    }

    public void setOnCompleteSequence(SequenceMediator onCompleteSequence) {
        this.onCompleteSequence = onCompleteSequence;
    }

    public Map getActiveAggregates() {
        return activeAggregates;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.TimeoutHandler,5,2,0,6,33,2,1,5,2,0.55,206,1.0,0,0.5,0.625,0,0,39.2,5,1.6,0,"

package org.apache.synapse.core.axis2;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseConstants;

import java.util.Iterator;
import java.util.Map;
import java.util.Stack;
import java.util.TimerTask;


public class TimeoutHandler extends TimerTask {

    private static final Log log = LogFactory.getLog(TimeoutHandler.class);

    
    private Map callbackStore = null;
    
    private Object lock = new Object();
    private boolean alreadyExecuting = false;
    
    private long globalTimeout = SynapseConstants.DEFAULT_GLOBAL_TIMEOUT;

    public TimeoutHandler(Map callbacks) {
        this.callbackStore = callbacks;
        try {
            globalTimeout = Long.parseLong(
                System.getProperty(SynapseConstants.GLOBAL_TIMEOUT_INTERVAL));
        } catch (Exception ignore) {}
        log.info(""This engine will expire all callbacks after : "" + (globalTimeout /1000) +
            "" seconds, irrespective of the timeout action, after the specified or optional timeout"");
    }

    
    public void run() {
        if (alreadyExecuting) return;

        synchronized(lock) {
            alreadyExecuting = true;
            try {
                processCallbacks();
            } catch (Exception ignore) {}
            alreadyExecuting = false;
        }
    }

    private void processCallbacks() {

        
        

        
        
        synchronized(callbackStore) {

            if (callbackStore.size() > 0) {

                long currentTime = currentTime();
                Iterator i = callbackStore.keySet().iterator();

                while (i.hasNext()) {

                    Object key = i.next();
                    AsyncCallback callback = (AsyncCallback) callbackStore.get(key);

                    if (callback.getTimeOutAction() != SynapseConstants.NONE) {

                        if (callback.getTimeOutOn() <= currentTime) {
                            callbackStore.remove(key);

                            if (callback.getTimeOutAction() == SynapseConstants.DISCARD_AND_FAULT) {

                                
                                MessageContext msgContext = callback.getSynapseOutMsgCtx();

                                
                                
                                msgContext.setProperty(SynapseConstants.ERROR_CODE, SynapseConstants.TIME_OUT);
                                msgContext.setProperty(SynapseConstants.ERROR_MESSAGE, ""Send timeout"");

                                Stack faultStack = msgContext.getFaultStack();

                                for (int j = 0; j < faultStack.size(); j++) {
                                    Object o = faultStack.pop();
                                    if (o instanceof FaultHandler) {
                                        ((FaultHandler) o).handleFault(msgContext);
                                    }
                                }

                            }
                        }

                    } else if (currentTime > globalTimeout + callback.getTimeOutOn()) {
                        log.warn(""Expiring message ID : "" + key + ""; dropping message after "" +
                            ""global timeout of : "" + (globalTimeout/1000) + "" seconds"");
                        callbackStore.remove(key);
                    }
                }
            }
        }
    }

    
    private long currentTime() {
        return System.currentTimeMillis();
    }
}
"
synapse,1.1,org.apache.synapse.util.FixedByteArrayOutputStream,3,3,0,2,7,1,1,1,3,2.0,43,0.0,0,0.882352941,0.777777778,2,2,13.33333333,2,1.3333,0,"

package org.apache.synapse.util;

import org.apache.synapse.SynapseException;
import java.io.ByteArrayOutputStream;

public class FixedByteArrayOutputStream extends ByteArrayOutputStream {

    public FixedByteArrayOutputStream(int size) {
        super(size);
    }

    public synchronized void write(int b) {
        if (count+1 > buf.length) {
            throw new SynapseException(""Fixed size of internal byte array exceeded"");
        }
        super.write(b);
    }

    public synchronized void write(byte b[], int off, int len) {
        if (count+len > buf.length) {
            throw new SynapseException(""Fixed size of internal byte array exceeded"");
        }
        super.write(b, off, len);
    }
}
"
synapse,1.1,org.apache.synapse.endpoints.Endpoint,7,1,0,46,7,21,46,1,7,2.0,7,0.0,0,0.0,0.428571429,0,0,0.0,1,1.0,0,"

package org.apache.synapse.endpoints;

import org.apache.synapse.MessageContext;


public interface Endpoint {

    
    public void send(MessageContext synMessageContext);

    
    public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext);

    
    public void setParentEndpoint(Endpoint parentEndpoint);

    
    public String getName();

    
    public void setName(String name);

    
    public boolean isActive(MessageContext synMessageContext);

    
    public void setActive(boolean active, MessageContext synMessageContext);
}
"
synapse,1.1,org.apache.synapse.config.xml.StartupFinder,11,1,0,11,38,0,2,9,7,0.56,336,1.0,1,0.0,0.28,0,0,29.09090909,3,1.3636,0,"

package org.apache.synapse.config.xml;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.xml.namespace.QName;

import org.apache.axiom.om.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Startup;
import org.apache.synapse.startup.quartz.SimpleQuartzFactory;

import sun.misc.Service;

public class StartupFinder {

    private static final Log log = LogFactory
            .getLog(ConfigurationFactoryAndSerializerFinder.class);

    private static StartupFinder instance = null;

    
    private static Map factoryMap = new HashMap(),
            serializerMap = new HashMap();

    public static synchronized StartupFinder getInstance() {
        if (instance == null) {
            instance = new StartupFinder();
        }
        return instance;
    }

    
    public synchronized void reset() {
        factoryMap.clear();
        instance = null;
    }

    private static final Class[] builtins = {SimpleQuartzFactory.class};

    private StartupFinder() {
        
        for (int i = 0; i < builtins.length; i++) {
            Class b = builtins[i];
            StartupFactory sf;
            try {
                sf = (StartupFactory) b.newInstance();
            } catch (Exception e) {
                throw new SynapseException(""cannot instantiate "" + b.getName(), e);

            }
            factoryMap.put(sf.getTagQName(), b);
            serializerMap.put(sf.getTagQName(), sf.getSerializerClass());

        }

        registerExtensions();
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    
    private void registerExtensions() {

        
        

        
        Iterator it = Service.providers(StartupFactory.class);
        while (it.hasNext()) {
            StartupFactory sf = (StartupFactory) it.next();
            QName tag = sf.getTagQName();
            factoryMap.put(tag, sf.getClass());
            serializerMap.put(tag, sf.getSerializerClass());
            if (log.isDebugEnabled()) {
                log.debug(""Added StartupFactory "" + sf.getClass()
                        + "" to handle "" + tag);
            }
        }
    }

    
    public Startup getStartup(OMElement element) {

        QName qName = element.getQName();
        if (log.isDebugEnabled()) {
            log.debug(""Creating the Startup for : "" + qName);
        }

        Class cls = (Class) factoryMap.get(qName);
        if (cls == null) {
            String msg = ""Unknown Startup type referenced by startup element : "" + qName;
            log.error(msg);
            throw new SynapseException(msg);
        }

        try {
            StartupFactory sf = (StartupFactory) cls.newInstance();
            return sf.createStartup(element);

        } catch (InstantiationException e) {
            String msg = ""Error initializing configuration factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);

        } catch (IllegalAccessException e) {
            String msg = ""Error initializing configuration factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);
        }
    }

    
    public OMElement serializeStartup(OMElement parent, Startup startup) {

        Class cls = (Class) serializerMap.get(startup.getTagQName());
        if (cls == null) {
            String msg = ""Unknown startup type referenced by startup element : ""
                    + startup.getTagQName();
            log.error(msg);
            throw new SynapseException(msg);
        }

        try {
            StartupSerializer ss = (StartupSerializer) cls.newInstance();
            return ss.serializeStartup(parent, startup);

        } catch (InstantiationException e) {
            String msg = ""Error initializing startup serializer: "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);

        } catch (IllegalAccessException e) {
            String msg = ""Error initializing startup ser: "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);
        }
    }

    
    public Map getFactoryMap() {
        return factoryMap;
    }

    
    public Map getSerializerMap() {
        return serializerMap;
    }

    
    public Startup getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return getStartup((OMElement) om);
        } else {
			handleException(""Invalid configuration XML : "" + om);
		}
		return null;
	}

}
"
synapse,1.1,org.apache.synapse.startup.quartz.SimpleQuartzFactory,7,1,0,9,44,5,1,9,4,0.708333333,285,0.75,0,0.0,0.416666667,0,0,39.14285714,20,3.4286,0,"

package org.apache.synapse.startup.quartz;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.config.xml.XMLConfigConstants;
import org.apache.synapse.config.xml.PropertyHelper;
import org.apache.synapse.config.xml.StartupFactory;
import org.apache.synapse.Startup;
import org.apache.synapse.SynapseException;


public class SimpleQuartzFactory implements StartupFactory {

    public final static QName TASK
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""task"");

    private final static QName TRIGGER
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""trigger"");

    private final static QName PROPERTY
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""property"");

    private final static Log log = LogFactory.getLog(SimpleQuartzFactory.class);

    public Startup createStartup(OMElement el) {
        
        if (log.isDebugEnabled()) {
            log.debug(""Creating SimpleQuartz Task"");
        }
        
        if (el.getQName().equals(TASK)) {
            
            SimpleQuartz q = new SimpleQuartz();

            String name = el.getAttributeValue(
                new QName(XMLConfigConstants.NULL_NAMESPACE, ""name""));
            if (name != null) {
                q.setName(name);
            } else {
                handleException(""Name for a task is required, missing name in the task"");
            }

            
            OMAttribute classAttr = el.getAttribute(new QName(""class""));
            if (classAttr != null && classAttr.getAttributeValue() != null) {
                String classname = classAttr.getAttributeValue();
                try {
                    Class.forName(classname).newInstance();
                } catch (Exception e) {
                    handleException(""Failed to load task class "" + classname, e);
                }
                q.setJobClass(classname);
            } else {
                handleException(""Syntax error in the Task : no task class specified"");
            }
            
            
            OMAttribute pinnedServers = el.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""pinnedServers""));
            if (pinnedServers != null) {
                String pinnedServersValue = pinnedServers.getAttributeValue();
                if (pinnedServersValue == null) {
                    
                } else {
                    StringTokenizer st = new StringTokenizer(pinnedServersValue, "" ,"");
                    List pinnedServersList = new ArrayList();
                    while (st.hasMoreTokens()) {
                        String token = st.nextToken();
                        if (token.length() != 0) {
                          pinnedServersList.add(token);
                        }
                    }
                    q.setPinnedServers(pinnedServersList);
                }
            }

            
            Iterator it = el.getChildrenWithName(PROPERTY);
            while (it.hasNext()) {
                OMElement prop = (OMElement) it.next();
                if (PropertyHelper.isStaticProperty(prop)) {
                    q.addProperty(prop);
                } else {
                    handleException(""Tasks does not support dynamic properties"");
                }
            }

            
            OMElement trigger = el.getFirstChildWithName(TRIGGER);
            if (trigger != null) {

                OMAttribute count = trigger.getAttribute(new QName(""count""));
                if (count != null) {
                    try {
                        q.setCount(Integer.parseInt(count.getAttributeValue()));
                    } catch (Exception e) {
                        handleException(""Failed to parse trigger count as an integer"", e);
                    }
                }

                OMAttribute once = trigger.getAttribute(new QName(""once""));
                if (once != null && Boolean.TRUE.toString().equals(once.getAttributeValue())) {
                    q.setCount(1);
                    q.setInterval(1);
                }

                OMAttribute repeatInterval = trigger.getAttribute(new QName(""interval""));
                if (repeatInterval == null && q.getCount() > 1) {
                    handleException(""Trigger seems to be "" +
                        ""a simple trigger, but no interval specified"");
                } else if (repeatInterval != null && repeatInterval.getAttributeValue() != null) {
                    try {
                        long repeatIntervalInSeconds = Long.parseLong(repeatInterval.getAttributeValue());
                        long repeatIntervalInMillis = repeatIntervalInSeconds * 1000;
                        q.setInterval(repeatIntervalInMillis);
                    } catch (Exception e) {
                        handleException(""Failed to parse trigger interval as a long value"", e);
                    }
                }

                OMAttribute expr = trigger.getAttribute(new QName(""cron""));
                if (expr == null && q.getInterval() == 0) {
                    q.setCount(1);
                    q.setInterval(1);
                } else if (expr != null && q.getInterval() > 0) {
                    handleException(""Trigger syntax error : "" +
                        ""both cron and simple trigger attributes are present"");
                } else if (expr != null && expr.getAttributeValue() != null) {
                    q.setCron(expr.getAttributeValue());
                }

            } else {
                q.setCount(1);
                q.setInterval(1);
            }

            return q;
        } else {
            handleException(""Syntax error in the task : wrong QName for the task"");
            return null;
        }
    }

    public Class getSerializerClass() {
        return SimpleQuartzSerializer.class;
    }

    public QName getTagQName() {
        return TASK;
    }

    private void handleException(String message, Exception e) {
        log.error(message);
        throw new SynapseException(message, e);
    }

    private void handleException(String message) {
        log.error(message);
        throw new SynapseException(message);
    }

}
"
synapse,1.1,org.apache.synapse.ServerManager,8,1,0,16,55,14,4,12,6,0.828571429,379,1.0,1,0.0,0.333333333,0,0,45.75,12,3.0,0,"
package org.apache.synapse;

import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.ConfigurationContextFactory;
import org.apache.axis2.description.TransportInDescription;
import org.apache.axis2.description.Parameter;
import org.apache.axis2.engine.ListenerManager;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.util.ClasspathURLStreamHandler;
import org.apache.synapse.transport.nhttp.NhttpConstants;

import java.io.File;
import java.net.*;
import java.util.Iterator;
import java.util.Collection;



public class ServerManager {

    private static ServerManager instance;
    private static final Log log = LogFactory.getLog(ServerManager.class);
    private String axis2Repolocation;
    private ListenerManager listenerManager;
    private ConfigurationContext configctx;

    
    public static ServerManager getInstance() {
        if (instance == null) {
            instance = new ServerManager();
        }
        return instance;
    }

    public void setAxis2Repolocation(String axis2Repolocation) {
        this.axis2Repolocation = axis2Repolocation;
    }

    
    public void start() {

        
		try {
			URL.setURLStreamHandlerFactory(new URLStreamHandlerFactoryImpl());
		} catch (Throwable t) {
			log.warn(""Unable to register a URLStreamHandlerFactory - "" +
					""Custom URL protocols may not work properly (e.g. classpath:
		}

        if (axis2Repolocation == null) {
            log.fatal(""The Axis2 Repository must be provided"");
            return;
        }
        log.info(""Using the Axis2 Repository ""
                           + new File(axis2Repolocation).getAbsolutePath());
        try {
            configctx = ConfigurationContextFactory.
                    createConfigurationContextFromFileSystem(axis2Repolocation, null);
            
            listenerManager = configctx.getListenerManager();
            if (listenerManager == null) {
                listenerManager = new ListenerManager();
                listenerManager.init(configctx);
            }
            
            selectPort(configctx);

            Iterator iter = configctx.getAxisConfiguration().
                    getTransportsIn().keySet().iterator();
            while (iter.hasNext()) {
                String trp = (String) iter.next();
                TransportInDescription trsIn = (TransportInDescription)
                        configctx.getAxisConfiguration().getTransportsIn().get(trp);
                listenerManager.addListener(trsIn, false);
                String msg = ""Starting transport "" + trsIn.getName();
                if (trsIn.getParameter(""port"") != null) {
                    msg += "" on port "" + trsIn.getParameter(""port"").getValue();
                }
                log.info(msg);
            }

            
            Parameter synEnv
                = configctx.getAxisConfiguration().getParameter(SynapseConstants.SYNAPSE_ENV);
            Parameter synCfg
                = configctx.getAxisConfiguration().getParameter(SynapseConstants.SYNAPSE_CONFIG);
            String message = ""Unable to initialize the Synapse Configuration : Can not find the "";
            if (synCfg == null || synCfg.getValue() == null
                || !(synCfg.getValue() instanceof SynapseConfiguration)) {
                log.fatal(message + ""Synapse Configuration"");
                throw new SynapseException(message + ""Synapse Configuration"");
            }

            if (synEnv == null || synEnv.getValue() == null
                || !(synEnv.getValue() instanceof SynapseEnvironment)) {
                log.fatal(message + ""Synapse Environment"");
                throw new SynapseException(message + ""Synapse Environment"");
            } else {
                ((SynapseEnvironment) synEnv.getValue()).setInitialized(true);
                
                Collection startups = ((SynapseConfiguration) synCfg.getValue()).getStartups();
                for (Iterator it = startups.iterator(); it.hasNext();) {
                    Object o = it.next();
                    if (o instanceof ManagedLifecycle) {
                        ManagedLifecycle m = (ManagedLifecycle) o;
                        m.init((SynapseEnvironment) synEnv.getValue());
                    }
                }
            }
            log.info(""Ready for processing"");

        } catch (Throwable t) {
            t.printStackTrace();
            log.fatal(""Startup failed..."");
            System.exit(1); 
        }
    }

    
    public void stop() {
        try {
            if (listenerManager != null) {
                listenerManager.stop();
                listenerManager.destroy();
            }
            
            if (configctx != null) {
                configctx.terminate();
            }
        } catch (Exception ignored) {
        }
    }

    
    private static void selectPort(ConfigurationContext configCtx) {
        
        TransportInDescription trsIn = (TransportInDescription)
                configCtx.getAxisConfiguration().getTransportsIn().get(""http"");

        if (trsIn != null) {

            int port = 8080;
            String bindAddress = null;

            String strPort = System.getProperty(""port"");
            if (strPort != null) {
                
                try {
                    port = new Integer(strPort).intValue();
                } catch (NumberFormatException e) {
                    
                    log.error(""System property 'port' does not provide a valid integer"");
                }
            }

            Parameter param = trsIn.getParameter(""port"");
            if (param != null && param.getValue() != null) {
                port = Integer.parseInt(param.getValue().toString());
            }

            param = trsIn.getParameter(NhttpConstants.BIND_ADDRESS);
            if (param != null && param.getValue() != null) {
                bindAddress = ((String) param.getValue()).trim();
            }

            while (true) {
                ServerSocket sock = null;
                try {
                    if (bindAddress == null) {
                        sock = new ServerSocket(port);
                    } else {
                        sock = new ServerSocket(port, 50, InetAddress.getByName(bindAddress));
                    }
                    trsIn.getParameter(""port"").setValue(Integer.toString(port));
                    break;
                } catch (Exception e) {
                    log.warn(""Port "" + port + "" already in use. Trying alternate"");
                    if (port == 8080) {
                        port = 8008;
                    } else {
                        port++;
                    }
                } finally {
                    if (sock != null) {
                        try {
                            sock.close();
                        } catch (Exception e) {
                        }
                    }
                }
            }
        }
    }

    public ConfigurationContext getConfigurationContext() {
        return configctx;
    }

    private static final class URLStreamHandlerFactoryImpl implements URLStreamHandlerFactory {

        public URLStreamHandler createURLStreamHandler(String protocol) {

            if (protocol == null) {
                throw new IllegalArgumentException(""'protocol' cannot be null"");
            }
            URLStreamHandler urlSH = null;
            if (protocol.equals(""classpath"")) {
                urlSH = new ClasspathURLStreamHandler();
            }
            return urlSH;
        }
    }
}"
synapse,1.1,org.apache.synapse.mediators.ext.ClassMediator,8,2,0,10,29,0,2,8,8,0.5,169,1.0,1,0.65,0.270833333,0,0,19.875,6,2.125,0,"

package org.apache.synapse.mediators.ext;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.*;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.mediators.AbstractMediator;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;


public class ClassMediator extends AbstractMediator implements ManagedLifecycle {

    
    private Mediator mediator = null;
    
    private Map properties = new HashMap();

    
	public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Class mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        if (traceOrDebugOn) {
			traceOrDebug(traceOn, ""invoking : "" + mediator.getClass() + "".mediate()"");
		}

        boolean result = true;
        try {
			result = mediator.mediate(synCtx);
        } catch (Exception e) {
            
            
            throw new SynapseException(""Error occured in the mediation of the class mediator"", e);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Class mediator"");
        }
        return result;
    }

	public void destroy() {
        if (log.isDebugEnabled()) {
            log.debug(""Destroying class mediator instance for : "" + mediator.getClass());
        }
        if (mediator instanceof ManagedLifecycle) {
			((ManagedLifecycle) mediator).destroy();
		}
	}

	public void init(SynapseEnvironment se) {
        if (log.isDebugEnabled()) {
            log.debug(""Initializing class mediator instance for : "" + mediator.getClass());
        }
        if (mediator == null) {
            log.warn(""init() called before mediator reference set"");
            return;
		}

		if (mediator instanceof ManagedLifecycle) {
			((ManagedLifecycle) mediator).init(se);
		}
	}

	public void setMediator(Mediator mediator) {
		this.mediator = mediator;
	}

	public Mediator getMediator() {
		return mediator;
	}

    public void addProperty(String name, Object value) {
        properties.put(name, value);
    }

    public Map getProperties() {
        return this.properties;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.AsyncCallback,10,1,0,6,11,35,3,3,10,0.851851852,46,0.666666667,1,0.0,0.266666667,0,0,3.3,1,0.9,0,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.client.async.Callback;
import org.apache.axis2.client.async.AsyncResult;
import org.apache.axis2.client.async.AxisCallback;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;


public class AsyncCallback implements AxisCallback {

    
    MessageContext synapseOutMsgCtx = null;

    
    private long timeOutOn;

    
    private int timeOutAction = SynapseConstants.NONE;

    public AsyncCallback(MessageContext synapseOutMsgCtx) {
        this.synapseOutMsgCtx = synapseOutMsgCtx;
    }

    public void onMessage(org.apache.axis2.context.MessageContext messageContext) {}

    public void onFault(org.apache.axis2.context.MessageContext messageContext) {}

    public void onError(Exception e) {}

    public void onComplete() {}

    public org.apache.synapse.MessageContext getSynapseOutMsgCtx() {
        return synapseOutMsgCtx;
    }

    public long getTimeOutOn() {
        return timeOutOn;
    }

    public void setTimeOutOn(long timeOutOn) {
        this.timeOutOn = timeOutOn;
    }

    public int getTimeOutAction() {
        return timeOutAction;
    }

    public void setTimeOutAction(int timeOutAction) {
        this.timeOutAction = timeOutAction;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory,2,1,0,15,14,1,8,10,2,2.0,91,0.0,0,0.0,0.5,0,0,44.5,7,3.5,1,"

package org.apache.synapse.config.xml.endpoints;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;

import javax.xml.namespace.QName;


public class EndpointAbstractFactory {

    
    public static EndpointFactory getEndpointFactroy(OMElement configElement) {

        if (configElement.getAttribute(new QName(""key"")) != null) {
            IndirectEndpointFactory endpointFactory = IndirectEndpointFactory.getInstance();
            return endpointFactory;
        }

        OMElement addressElement = configElement.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""address""));
        if (addressElement != null) {
            EndpointFactory endpointFactory = AddressEndpointFactory.getInstance();
            return endpointFactory;
        }

        OMElement wsdlElement = configElement.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""wsdl""));
        if (wsdlElement != null) {
            EndpointFactory endpointFactory = WSDLEndpointFactory.getInstance();
            return endpointFactory;
        }

        OMElement lbElement = configElement.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""loadbalance""));
        if (lbElement != null) {
            OMElement sessionElement = configElement.
                    getFirstChildWithName(new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""session""));
            if (sessionElement != null) {
                EndpointFactory endpointFactory = SALoadbalanceEndpointFactory.getInstance();
                return endpointFactory;
            } else {
                EndpointFactory endpointFactory = LoadbalanceEndpointFactory.getInstance();
                return endpointFactory;
            }            
        }

        OMElement foElement = configElement.getFirstChildWithName
                (new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""failover""));
        if (foElement != null) {
            EndpointFactory endpointFactory = FailoverEndpointFactory.getInstance();
            return endpointFactory;
        }

        throw new SynapseException(""Invalid endpoint configuration."");
    }
}
"
synapse,1.1,org.apache.synapse.util.PayloadHelper,23,1,0,18,70,143,2,17,22,0.878787879,537,0.0,0,0.0,0.181818182,0,0,21.95652174,5,2.2174,0,"package org.apache.synapse.util;

import java.util.Iterator;

import javax.activation.DataHandler;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamReader;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.OMText;
import org.apache.axiom.om.impl.builder.StAXOMBuilder;
import org.apache.axiom.soap.SOAP11Version;
import org.apache.axiom.soap.SOAPBody;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPVersion;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.util.SimpleMap;

public class PayloadHelper {
	
	
	
	public final static String AXIOMPAYLOADNS = ""http:

	public final static QName BINARYELT = new QName(AXIOMPAYLOADNS, ""binary"",
			""ax"");

	public final static QName TEXTELT = new QName(AXIOMPAYLOADNS, ""text"", ""ax"");

	public final static QName MAPELT = new QName(AXIOMPAYLOADNS, ""map"", ""ax"");

	public final static int XMLPAYLOADTYPE = 0, BINARYPAYLOADTYPE = 1,
			TEXTPAYLOADTYPE = 2, MAPPAYLOADTYPE = 3;

	public static final Log log = LogFactory.getLog(PayloadHelper.class);

	
	
	
	public static int getPayloadType(SOAPEnvelope envelope) {
		OMElement el = getXMLPayload(envelope);
		if (el.getQName().equals(BINARYELT))
			return BINARYPAYLOADTYPE;
		else if (el.getQName().equals(TEXTELT))
			return TEXTPAYLOADTYPE;
		else if (el.getQName().equals(MAPELT))
			return MAPPAYLOADTYPE;
		else
			return XMLPAYLOADTYPE; 
	}

	public static int getPayloadType(MessageContext mc) {
		if (mc.getEnvelope() == null)
			return 0;
		return getPayloadType(mc.getEnvelope());
	}

	
	public static OMElement getXMLPayload(SOAPEnvelope envelope) {
		SOAPBody body = envelope.getBody();
		if (body == null) {
			log.error(""No body found"");
			return null;
		}
		OMElement bodyEl = body.getFirstElement();
		if (bodyEl == null) {
			log.error(""No body child found"");
			return null;
		}
		return bodyEl;
	}

	public static void setXMLPayload(SOAPEnvelope envelope, OMElement element) {
		SOAPBody body = envelope.getBody();
		if (body == null) {

			SOAPVersion version = envelope.getVersion();
			if (version.getEnvelopeURI().equals(
					SOAP11Version.SOAP_ENVELOPE_NAMESPACE_URI)) {
				body = OMAbstractFactory.getSOAP11Factory().createSOAPBody();
			} else {
				body = OMAbstractFactory.getSOAP12Factory().createSOAPBody();
			}
			if (envelope.getHeader() != null) {
				envelope.getHeader().insertSiblingAfter(body);
			} else {
				envelope.addChild(body);
			}
		} else {
			for (Iterator it = body.getChildren(); it.hasNext();) {
				OMNode node = (OMNode) it.next();
				node.discard();
			}
		}
		body.addChild(element);
	}

	public static void setXMLPayload(MessageContext mc, OMElement element) {
		if (mc.getEnvelope() == null) {
			try {
				mc.setEnvelope(OMAbstractFactory.getSOAP12Factory()
						.createSOAPEnvelope());
			} catch (Exception e) {
				throw new SynapseException(e);
			}
		}
		setXMLPayload(mc.getEnvelope(), element);
	}

	
	public static DataHandler getBinaryPayload(SOAPEnvelope envelope) {
		OMElement el = getXMLPayload(envelope);
		if (el == null)
			return null;
		if (!el.getQName().equals(BINARYELT)) {
			log.error(""Wrong QName"" + el.getQName());
			return null;
		}
		OMNode textNode = el.getFirstOMChild();
		if (textNode.getType() != OMNode.TEXT_NODE) {
			log.error(""Text Node not found"");
			return null;
		}
		OMText text = (OMText) textNode;
		DataHandler dh = null;
		try {
			dh = (DataHandler) text.getDataHandler();
		} catch (ClassCastException ce) {
			log.error(""cannot get DataHandler"" + ce.getMessage());
			return null;
		}
		return dh;

	}

	public static DataHandler getBinaryPayload(MessageContext mc) {
		if (mc.getEnvelope() == null) {
			log.error(""null envelope"");
			return null;
		}
		return getBinaryPayload(mc.getEnvelope());
	}

	public static void setBinaryPayload(SOAPEnvelope envelope, DataHandler dh) {
		OMFactory fac = envelope.getOMFactory();
		OMElement binaryElt = envelope.getOMFactory()
				.createOMElement(BINARYELT);
		OMText text = fac.createOMText(dh, true);
		binaryElt.addChild(text);
		setXMLPayload(envelope, binaryElt);
	}

	public static void setBinaryPayload(MessageContext mc, DataHandler dh) {
		if (mc.getEnvelope() == null) {
			try {
				mc.setEnvelope(OMAbstractFactory.getSOAP12Factory()
						.createSOAPEnvelope());
			} catch (Exception e) {
				throw new SynapseException(e);
			}
		}
		setBinaryPayload(mc.getEnvelope(), dh);

	}

	
	public static String getTextPayload(SOAPEnvelope envelope) {
		OMElement el = getXMLPayload(envelope);
		if (el == null)
			return null;
		if (!el.getQName().equals(TEXTELT)) {
			log.error(""Wrong QName"" + el.getQName());
			return null;
		}
		OMNode textNode = el.getFirstOMChild();
		if (textNode.getType() != OMNode.TEXT_NODE) {
			log.error(""Text Node not found"");
			return null;
		}
		OMText text = (OMText) textNode;
		return text.getText();
	}

	public static String getTextPayload(MessageContext mc) {
		if (mc.getEnvelope() == null) {
			log.error(""null envelope"");
			return null;
		}
		return getTextPayload(mc.getEnvelope());
	}

	public static void setTextPayload(SOAPEnvelope envelope, String text) {
		OMFactory fac = envelope.getOMFactory();
		OMElement textElt = envelope.getOMFactory().createOMElement(TEXTELT);
		OMText textNode = fac.createOMText(text);
		textElt.addChild(textNode);
		setXMLPayload(envelope, textElt);
	}

	public static void setTextPayload(MessageContext mc, String text) {
		if (mc.getEnvelope() == null) {
			try {
				mc.setEnvelope(OMAbstractFactory.getSOAP12Factory()
						.createSOAPEnvelope());
			} catch (Exception e) {
				throw new SynapseException(e);
			}
		}
		setTextPayload(mc.getEnvelope(), text);
	}

	
	
	public static SimpleMap getMapPayload(SOAPEnvelope envelope) {
		OMElement el = getXMLPayload(envelope);
		if (el == null)
			return null;
		if (!el.getQName().equals(MAPELT)) {
			log.error(""Wrong QName"" + el.getQName());
			return null;
		}
		SimpleMap map = new SimpleMapImpl(el);
		return map;
	}

	public static SimpleMap getMapPayload(MessageContext mc) {
		if (mc.getEnvelope() == null) {
			log.error(""null envelope"");
			return null;
		}
		return getMapPayload(mc.getEnvelope());
	}

	public static void setMapPayload(SOAPEnvelope envelope, SimpleMap map) {

		if (map instanceof SimpleMapImpl) {
			SimpleMapImpl impl = (SimpleMapImpl) map;
			OMElement mapElt = impl.getOMElement(envelope.getOMFactory());
			if (mapElt == null) {
				log.debug(""null map element returned"");
				return;
			}
			setXMLPayload(envelope, mapElt);
		} else {
			throw new SynapseException(""cannot handle any other instance of SimpleMap at this point TODO"");
		}
	}

	public static void setMapPayload(MessageContext mc, SimpleMap map) {
		if (mc.getEnvelope() == null) {
			try {
				mc.setEnvelope(OMAbstractFactory.getSOAP12Factory()
						.createSOAPEnvelope());
			} catch (Exception e) {
				throw new SynapseException(e);
			}
		}
		setMapPayload(mc.getEnvelope(), map);
	}
	
	public static XMLStreamReader getStAXPayload(SOAPEnvelope envelope) {
		 
		OMElement el = getXMLPayload(envelope);
		if (el==null) {
			return null;
		}
		return el.getXMLStreamReader();
	}
	public static XMLStreamReader getStAXPayload(MessageContext mc) {
		if (mc.getEnvelope() == null) {
			log.error(""null envelope"");
			return null;
		}
		return getStAXPayload(mc.getEnvelope());
	}
	public static void setStAXPayload(SOAPEnvelope envelope, XMLStreamReader streamReader) {
		StAXOMBuilder builder = new StAXOMBuilder(envelope.getOMFactory(), streamReader);
		OMElement el = builder.getDocumentElement();
		setXMLPayload(envelope, el);
	}
	public static void setStAXPayload(MessageContext mc, XMLStreamReader streamReader) {
		if (mc.getEnvelope() == null) {
			try {
				mc.setEnvelope(OMAbstractFactory.getSOAP12Factory()
						.createSOAPEnvelope());
			} catch (Exception e) {
				throw new SynapseException(e);
			}
			setStAXPayload(mc.getEnvelope(), streamReader);
		}
	
	}
	
	
}
"
synapse,1.1,org.apache.synapse.config.xml.ProxyServiceFactory,5,1,0,12,60,0,1,11,2,0.25,566,1.0,0,0.0,0.3125,0,0,112.0,39,8.2,4,"

package org.apache.synapse.config.xml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axis2.wsdl.WSDLConstants;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
import org.apache.synapse.config.xml.endpoints.EndpointFactory;
import org.apache.synapse.core.axis2.ProxyService;


public class ProxyServiceFactory {

    private static final Log log = LogFactory.getLog(ProxyServiceFactory.class);

    public static ProxyService createProxy(OMElement elem) {

        ProxyService proxy = null;

        OMAttribute name = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""name""));
        if (name == null) {
            handleException(""The 'name' attribute is required for a Proxy service definition"");
        } else {
            proxy = new ProxyService(name.getAttributeValue());
        }

        OMAttribute statistics = elem.getAttribute(
                new QName(XMLConfigConstants.NULL_NAMESPACE, XMLConfigConstants.STATISTICS_ATTRIB_NAME));
        if (statistics != null) {
            String statisticsValue = statistics.getAttributeValue();
            if (statisticsValue != null) {
                if (XMLConfigConstants.STATISTICS_ENABLE.equals(statisticsValue)) {
                    proxy.setStatisticsState(org.apache.synapse.SynapseConstants.STATISTICS_ON);
                } else if (XMLConfigConstants.STATISTICS_DISABLE.equals(statisticsValue)) {
                    proxy.setStatisticsState(org.apache.synapse.SynapseConstants.STATISTICS_OFF);
                }
            }
        }

        OMAttribute trans = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""transports""));
        if (trans != null) {
            String transports = trans.getAttributeValue();
            if (transports == null || ProxyService.ALL_TRANSPORTS.equals(transports)) {
                
            } else {
                StringTokenizer st = new StringTokenizer(transports, "" ,"");
                ArrayList transportList = new ArrayList();
                while (st.hasMoreTokens()) {
                    String token = st.nextToken();
                    if (token.length() != 0) {
                        transportList.add(token);
                    }
                }
                proxy.setTransports(transportList);
            }
        }

        OMAttribute pinnedServers = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""pinnedServers""));
        if (pinnedServers != null) {
            String pinnedServersValue = pinnedServers.getAttributeValue();
            if (pinnedServersValue == null) {
                
            } else {
                StringTokenizer st = new StringTokenizer(pinnedServersValue, "" ,"");
                List pinnedServersList = new ArrayList();
                while (st.hasMoreTokens()) {
                    String token = st.nextToken();
                    if (token.length() != 0) {
                      pinnedServersList.add(token);
                    }
                }
                proxy.setPinnedServers(pinnedServersList);
            }
        }
        
        OMAttribute trace = elem.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, XMLConfigConstants.TRACE_ATTRIB_NAME));
        if (trace != null) {
            String traceValue = trace.getAttributeValue();
            if (traceValue != null) {
                if (traceValue.equals(XMLConfigConstants.TRACE_ENABLE)) {
                    proxy.setTraceState(org.apache.synapse.SynapseConstants.TRACING_ON);
                } else if (traceValue.equals(XMLConfigConstants.TRACE_DISABLE)) {
                    proxy.setTraceState(org.apache.synapse.SynapseConstants.TRACING_OFF);
                }
            }
        }
        OMAttribute startOnLoad = elem.getAttribute(
                new QName(XMLConfigConstants.NULL_NAMESPACE, ""startOnLoad""));
        if (startOnLoad != null) {
            proxy.setStartOnLoad(Boolean.valueOf(startOnLoad.getAttributeValue()).booleanValue());
        } else {
            proxy.setStartOnLoad(true);
        }

        
        OMElement descriptionElement = elem.getFirstChildWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""description""));
        if (descriptionElement != null) {
            proxy.setDescription(descriptionElement.getText().trim());
        }

        
        
        
        OMElement target = elem.getFirstChildWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""target""));
        if (target != null) {
            boolean isTargetOk = false;
            SequenceMediatorFactory mediatorFactory = new SequenceMediatorFactory();
            OMAttribute inSequence = target.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""inSequence""));
            if (inSequence != null) {
                proxy.setTargetInSequence(inSequence.getAttributeValue());
                isTargetOk = true;
            } else {
                OMElement inSequenceElement = target.getFirstChildWithName(new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""inSequence""));
                if (inSequenceElement != null) {
                    proxy.setTargetInLineInSequence(mediatorFactory.createAnonymousSequence(inSequenceElement));
                    isTargetOk = true;
                }
            }
            OMAttribute outSequence = target.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""outSequence""));
            if (outSequence != null) {
                proxy.setTargetOutSequence(outSequence.getAttributeValue());
            } else {
                OMElement outSequenceElement = target.getFirstChildWithName(new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""outSequence""));
                if (outSequenceElement != null) {
                    proxy.setTargetInLineOutSequence(mediatorFactory.createAnonymousSequence(outSequenceElement));
                } else {
                    handleException(""Target for the proxy service must declare an out sequence"");
                }
            }
            OMAttribute faultSequence = target.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""faultSequence""));
            if (faultSequence != null) {
                proxy.setTargetFaultSequence(faultSequence.getAttributeValue());
            } else {
                OMElement faultSequenceElement = target.getFirstChildWithName(new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""faultSequence""));
                if (faultSequenceElement != null) {
                    proxy.setTargetInLineFaultSequence(mediatorFactory.createAnonymousSequence(faultSequenceElement));
                }
            }
            OMAttribute tgtEndpt = target.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""endpoint""));
            if (tgtEndpt != null) {
                proxy.setTargetEndpoint(tgtEndpt.getAttributeValue());
                isTargetOk = true;
            } else {
                OMElement endpointElement = target.getFirstChildWithName(new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""endpoint""));
                if (endpointElement != null) {
                    EndpointFactory fac = EndpointAbstractFactory.getEndpointFactroy(endpointElement);
                    proxy.setTargetInLineEndpoint(fac.createEndpoint(endpointElement, true));
                    isTargetOk = true;
                }
            }
            if(!isTargetOk) {
                handleException(""Target of the proxy service must declare either an inSequence or endpoint or both"");
            }
        } else {
            handleException(""Target is required for a Proxy service definition"");
        }

        
        OMElement wsdl = elem.getFirstChildWithName(new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""publishWSDL""));
        if (wsdl != null) {
            OMAttribute wsdlkey = wsdl.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""key""));
            if (wsdlkey != null) {
                proxy.setWSDLKey(wsdlkey.getAttributeValue());
            } else {
                OMAttribute wsdlURI = wsdl.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""uri""));
                if (wsdlURI != null) {
                    try {
                        proxy.setWsdlURI(new URI(wsdlURI.getAttributeValue()));
                    } catch (URISyntaxException e) {
                        String msg = ""Error creating uri for proxy service wsdl"";
                        log.error(msg);
                        handleException(msg, e);
                    }
                } else {
                    OMElement wsdl11 = wsdl.getFirstChildWithName(new QName(WSDLConstants.WSDL1_1_NAMESPACE, ""definitions""));
                    if (wsdl11 != null) {
                        proxy.setInLineWSDL(wsdl11);
                    } else {
                        OMElement wsdl20 = wsdl.getFirstChildWithName(new QName(WSDLConstants.WSDL2_0_NAMESPACE, ""descriptions""));
                        if (wsdl20 != null) {
                            proxy.setInLineWSDL(wsdl20);
                        }
                    }
                }
            }
            proxy.setResourceMap(ResourceMapFactory.createResourceMap(wsdl));
        }



        Iterator policies = elem.getChildrenWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""policy""));
        while (policies.hasNext()) {
            Object o = policies.next();
            if (o instanceof OMElement) {
                OMElement policy = (OMElement) o;
                OMAttribute key = policy.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""key""));
                if (key != null) {
                    proxy.addServiceLevelPolicy(key.getAttributeValue());
                } else {
                    handleException(""Policy element does not specify the policy key"");
                }
            } else {
                handleException(""Invalid 'policy' element found under element 'policies'"");
            }
        }

        Iterator props = elem.getChildrenWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""parameter""));
        while (props.hasNext()) {
            Object o = props.next();
            if (o instanceof OMElement) {
                OMElement prop = (OMElement) o;
                OMAttribute pname = prop.getAttribute(new QName(XMLConfigConstants.NULL_NAMESPACE, ""name""));
                OMElement propertyValue = prop.getFirstElement();
                if (pname != null) {
                    if (propertyValue != null) {
                        proxy.addParameter(pname.getAttributeValue(), propertyValue);
                    } else {
                        proxy.addParameter(pname.getAttributeValue(), prop.getText().trim());
                    }
                } else {
                    handleException(""Invalid property specified for proxy service : "" + name);
                }
            } else {
                handleException(""Invalid property specified for proxy service : "" + name);
            }
        }

        if (elem.getFirstChildWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableRM"")) != null) {
            proxy.setWsRMEnabled(true);
        }

        if (elem.getFirstChildWithName(
                new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""enableSec"")) != null) {
            proxy.setWsSecEnabled(true);
        }

        return proxy;
    }

    private static void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }

}
"
synapse,1.1,org.apache.synapse.endpoints.utils.EndpointDefinition,35,1,0,13,36,493,13,0,35,0.941176471,225,1.0,0,0.0,0.297142857,0,0,4.942857143,1,0.9714,1,"

package org.apache.synapse.endpoints.utils;

import org.apache.synapse.SynapseConstants;



public class EndpointDefinition {

    
    private String address = null;
    
    private boolean reliableMessagingOn = false;
    
    private boolean addressingOn = false;
    
    private boolean securityOn = false;
    
    private String wsRMPolicyKey = null;
    
    private String wsSecPolicyKey = null;
    
	private boolean useSeparateListener = false;
	
	private boolean forcePOX = false;
    
    private boolean forceGET = false;
    
	private boolean forceSOAP11 = false;
    
	private boolean forceSOAP12 = false;
    
    private boolean useMTOM = false;
    
    private boolean useSwa = false;
    
    private String format = null;

    
    private long timeoutDuration = 0;

    
    private int timeoutAction = SynapseConstants.NONE;

    
    private int statisticsState = SynapseConstants.STATISTICS_UNSET;

    
    private int traceState = SynapseConstants.TRACING_UNSET;

    
    public String getAddress() {
        return address;
    }

    
    public void setAddress(String address) {
        this.address = address;
    }

    
    public boolean isReliableMessagingOn() {
        return reliableMessagingOn;
    }

    
    public void setReliableMessagingOn(boolean reliableMessagingOn) {
        this.reliableMessagingOn = reliableMessagingOn;
    }

    
    public boolean isAddressingOn() {
        return addressingOn;
    }

    
    public void setAddressingOn(boolean addressingOn) {
        this.addressingOn = addressingOn;
    }

    
    public boolean isSecurityOn() {
        return securityOn;
    }

    
    public void setSecurityOn(boolean securityOn) {
        this.securityOn = securityOn;
    }

    
    public String getWsSecPolicyKey() {
        return wsSecPolicyKey;
    }

    
    public void setWsSecPolicyKey(String wsSecPolicyKey) {
        this.wsSecPolicyKey = wsSecPolicyKey;
    }

    
    public String getWsRMPolicyKey() {
        return wsRMPolicyKey;
    }

    
    public void setWsRMPolicyKey(String wsRMPolicyKey) {
        this.wsRMPolicyKey = wsRMPolicyKey;
    }

	public void setUseSeparateListener(boolean b) {
		this.useSeparateListener = b;
	}
	public boolean isUseSeparateListener() {
		return useSeparateListener;
	}

	public void setForcePOX(boolean forcePOX) {
		this.forcePOX = forcePOX;
	}

	public boolean isForcePOX() {
		return forcePOX;
	}

    public boolean isForceGET() {
        return forceGET;
    }

    public void setForceGET(boolean forceGET) {
        this.forceGET = forceGET;
    }

    public void setForceSOAP11(boolean forceSOAP11) {
		this.forceSOAP11 = forceSOAP11;
	}

	public boolean isForceSOAP11() {
		return forceSOAP11;
	}

    public void setForceSOAP12(boolean forceSOAP12) {
		this.forceSOAP12 = forceSOAP12;
	}

	public boolean isForceSOAP12() {
		return forceSOAP12;
	}

    public boolean isUseMTOM() {
        return useMTOM;
    }

    public void setUseMTOM(boolean useMTOM) {
        this.useMTOM = useMTOM;
    }

    public boolean isUseSwa() {
        return useSwa;
    }

    public void setUseSwa(boolean useSwa) {
        this.useSwa = useSwa;
    }

    public long getTimeoutDuration() {
        return timeoutDuration;
    }

    public void setTimeoutDuration(long timeoutDuration) {
        this.timeoutDuration = timeoutDuration;
    }

    public int getTimeoutAction() {
        return timeoutAction;
    }

    public void setTimeoutAction(int timeoutAction) {
        this.timeoutAction = timeoutAction;
    }
    
    public String getFormat() {
        return format;
	}

	public void setFormat(String format) {
		this.format = format;
	}

	
    public int getStatisticsState() {
        return statisticsState;
    }

    
    public void setStatisticsState(int statisticsState) {
        this.statisticsState = statisticsState;
    }

    public int getTraceState() {
        return traceState;
    }

    public void setTraceState(int traceState) {
        this.traceState = traceState;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.Axis2Sender,5,1,0,20,33,8,2,18,3,0.25,105,1.0,0,0.0,0.3,0,0,19.8,8,2.0,1,"

package org.apache.synapse.core.axis2;

import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.util.Utils;
import org.apache.synapse.transport.nhttp.NhttpConstants;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.engine.AxisEngine;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.statistics.StatisticsUtils;
import org.apache.synapse.util.UUIDGenerator;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.soap.SOAPFactory;
import org.apache.rampart.handler.WSSHandlerConstants;


public class Axis2Sender {

    private static final Log log = LogFactory.getLog(Axis2Sender.class);

    
    public static void sendOn(EndpointDefinition endpoint,
        org.apache.synapse.MessageContext synapseInMessageContext) {

        try {
            Axis2FlexibleMEPClient.send(
                
                endpoint,
                
                synapseInMessageContext);

        } catch (Exception e) {
            handleException(""Unexpected error during sending message out"", e);
        }
    }

    
    public static void sendBack(org.apache.synapse.MessageContext smc) {

        MessageContext messageContext = ((Axis2MessageContext) smc).getAxis2MessageContext();

        
        
        if (messageContext.isPropertyTrue(NhttpConstants.SC_ACCEPTED) &&
            messageContext.getTransportOut() != null &&
            !messageContext.getTransportOut().getName().startsWith(Constants.TRANSPORT_HTTP)) {
                return;
        }

        AxisEngine ae = new AxisEngine(messageContext.getConfigurationContext());

        try {
            messageContext.setProperty(SynapseConstants.ISRESPONSE_PROPERTY, Boolean.TRUE);
            
            
            if (smc.isResponse()) {
                
                StatisticsUtils.processEndPointStatistics(smc);
                StatisticsUtils.processProxyServiceStatistics(smc);
                StatisticsUtils.processAllSequenceStatistics(smc);
            }
            Axis2FlexibleMEPClient.removeAddressingHeaders(messageContext);
            messageContext.setMessageID(UUIDGenerator.getUUID());

            
            if (messageContext.isEngaged(WSSHandlerConstants.SECURITY_MODULE_NAME) &&
                messageContext.getEnvelope().getHeader() == null) {
                SOAPFactory fac = messageContext.isSOAP11() ?
                    OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
                fac.createSOAPHeader(messageContext.getEnvelope());
            }
            ae.send(messageContext);

        } catch (AxisFault e) {
            handleException(""Unexpected error sending message back"", e);
        }
    }

    private static void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.registry.url.URLRegistryEntry,18,1,0,2,28,87,1,1,18,0.852941176,200,1.0,0,0.0,0.361111111,0,0,9.666666667,1,0.9444,0,"

package org.apache.synapse.registry.url;

import org.apache.synapse.registry.RegistryEntry;

import java.net.URI;
import java.util.Date;

public class URLRegistryEntry implements RegistryEntry {

    private String key = null;
    private String name = null;
    private long version = Long.MIN_VALUE;
    private URI type = null;
    private String description;
    private long created;
    private long lastModified;
    private long cachableDuration;

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getVersion() {
        return version;
    }

    public void setVersion(long version) {
        this.version = version;
    }

    public URI getType() {
        return type;
    }

    public void setType(URI type) {
        this.type = type;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public long getCreated() {
        return created;
    }

    public void setCreated(long created) {
        this.created = created;
    }

    public long getLastModified() {
        return lastModified;
    }

    public void setLastModified(long lastModified) {
        this.lastModified = lastModified;
    }

    public long getCachableDuration() {
        return cachableDuration;
    }

    public void setCachableDuration(long cachableDuration) {
        this.cachableDuration = cachableDuration;
    }

    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(""RegistryEntry {"")
            .append("" Key : "" + key)
            .append("" Name : "" + name)
            .append("" Ver : "" + version)
            .append("" Type : "" + type)
            .append("" Desc : "" + description)
            .append("" Created : "" + new Date(created))
            .append("" Modified : "" + new Date(lastModified))
            .append("" Cacheable for : "" + (cachableDuration / 1000) + ""sec"")
            .append(""}"");
        return sb.toString();
    }
}
"
synapse,1.1,org.apache.synapse.mediators.eip.splitter.IterateMediator,12,2,0,18,46,14,2,16,12,0.727272727,304,1.0,1,0.541666667,0.3,0,0,23.91666667,17,2.25,0,"

package org.apache.synapse.mediators.eip.splitter;

import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.eip.EIPUtils;
import org.apache.synapse.mediators.eip.Target;
import org.apache.synapse.mediators.eip.EIPConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.util.MessageHelper;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.context.OperationContext;
import org.jaxen.JaxenException;

import java.util.List;
import java.util.Iterator;


public class IterateMediator extends AbstractMediator implements ManagedLifecycle {

    
    private boolean continueParent = false;

    
    private boolean preservePayload = false;

    
    private AXIOMXPath expression = null;

    
    private AXIOMXPath attachPath = null;

    
    private Target target = null;

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Iterate mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        try {
            
            
            
            SOAPEnvelope envelope = MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope());

            
            
            List splitElements = EIPUtils.getDetachedMatchingElements(envelope, expression);

            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Splitting with XPath : "" + expression + "" resulted in "" +
                    splitElements.size() + "" elements"");
            }

            
            if (!preservePayload && envelope.getBody() != null) {
                for (Iterator itr = envelope.getBody().getChildren(); itr.hasNext();) {
                    ((OMNode) itr.next()).detach();
                }
            }

            int msgCount = splitElements.size();
            int msgNumber = 0;

            
            for (Object o : splitElements) {

                
                if (!(o instanceof OMNode)) {
                    handleException(""Error splitting message with XPath : ""
                        + expression + "" - result not an OMNode"", synCtx);
                }

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Submitting "" + (msgNumber+1) + "" of "" + msgNumber +
                        "" messages for processing in parallel"");
                }

                target.mediate(
                    getIteratedMessage(synCtx, msgNumber++, msgCount, envelope, (OMNode) o));
            }

        } catch (JaxenException e) {
            handleException(""Error evaluating split XPath expression : "" + expression, e, synCtx);
        } catch (AxisFault af) {
            handleException(""Error creating an iterated copy of the message"", af, synCtx);
        }

        
        
        OperationContext opCtx
            = ((Axis2MessageContext) synCtx).getAxis2MessageContext().getOperationContext();
        if (!continueParent && opCtx != null) {
            opCtx.setProperty(Constants.RESPONSE_WRITTEN,""SKIP"");
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Iterate mediator"");
        }

        
        return continueParent;
    }

    
    private MessageContext getIteratedMessage(MessageContext synCtx, int msgNumber, int msgCount,
        SOAPEnvelope envelope, OMNode o) throws AxisFault, JaxenException {
        
        
        MessageContext newCtx = MessageHelper.cloneMessageContext(synCtx);

        
        newCtx.setProperty(
            EIPConstants.MESSAGE_SEQUENCE,
            msgNumber + EIPConstants.MESSAGE_SEQUENCE_DELEMITER + msgCount);

        
        SOAPEnvelope newEnvelope = MessageHelper.cloneSOAPEnvelope(envelope);

        
        
        if (preservePayload) {

            Object attachElem = attachPath.evaluate(newEnvelope);
            if (attachElem != null &&
                attachElem instanceof List && !((List) attachElem).isEmpty()) {
                attachElem = ((List) attachElem).get(0);
            }

            
            if (attachElem != null && attachElem instanceof OMElement) {
                ((OMElement) attachElem).addChild(o);
            } else {
                handleException(""Error in attaching the splitted elements :: "" +
                    ""Unable to get the attach path specified by the expression "" +
                    attachPath, synCtx);
            }

        } else if (newEnvelope.getBody() != null) {
            
            newEnvelope.getBody().addChild(o);
        }

        
        newCtx.setEnvelope(newEnvelope);

        return newCtx;
    }

    
    
    

    public boolean isContinueParent() {
        return continueParent;
    }

    public void setContinueParent(boolean continueParent) {
        this.continueParent = continueParent;
    }

    public boolean isPreservePayload() {
        return preservePayload;
    }

    public void setPreservePayload(boolean preservePayload) {
        this.preservePayload = preservePayload;
    }

    public AXIOMXPath getExpression() {
        return expression;
    }

    public void setExpression(AXIOMXPath expression) {
        this.expression = expression;
    }

    public AXIOMXPath getAttachPath() {
        return attachPath;
    }

    public void setAttachPath(AXIOMXPath attachPath) {
        this.attachPath = attachPath;
    }

    public Target getTarget() {
        return target;
    }

    public void setTarget(Target target) {
        this.target = target;
    }

    public void init(SynapseEnvironment se) {
        if (target.getSequence() != null) {
            target.getSequence().init(se);
        }
    }

    public void destroy() {
        if (target.getSequence() != null) {
            target.getSequence().destroy();
        }
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AbstractDBMediatorFactory,8,2,2,13,60,12,4,10,1,0.75,727,0.0,0,0.333333333,0.678571429,0,0,88.375,23,5.125,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.dbcp.BasicDataSource;
import org.apache.synapse.mediators.db.AbstractDBMediator;
import org.apache.synapse.mediators.db.Statement;
import org.jaxen.JaxenException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import javax.xml.namespace.QName;
import java.sql.Connection;
import java.util.Hashtable;
import java.util.Iterator;


public abstract class AbstractDBMediatorFactory extends AbstractMediatorFactory {

    public static final QName URL_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""url"");
    static final QName DRIVER_Q   = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""driver"");
    static final QName USER_Q     = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""user"");
    static final QName PASS_Q     = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""password"");

    static final QName DSNAME_Q   = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""dsName"");
    static final QName ICCLASS_Q  = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""icClass"");

    static final QName STMNT_Q    = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""statement"");
    static final QName SQL_Q      = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""sql"");
    static final QName PARAM_Q    = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""parameter"");
    static final QName RESULT_Q   = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""result"");

    static final QName ATT_COLUMN = new QName(""column"");
    static final QName ATT_TYPE   = new QName(""type"");

    protected void buildDataSource(OMElement elem, AbstractDBMediator mediator) {

        OMElement pool = null;
        
        
        try {
            AXIOMXPath xpath = new AXIOMXPath(""self::node()/syn:connection/syn:pool"");
            xpath.addNamespace(""syn"", XMLConfigConstants.SYNAPSE_NAMESPACE);
            pool = (OMElement) xpath.selectSingleNode(elem);

            if (pool.getFirstChildWithName(DRIVER_Q) != null) {
                mediator.setDataSource(createCustomDataSource(pool, mediator));

            } else if (
                pool.getFirstChildWithName(ICCLASS_Q) != null &&
                pool.getFirstChildWithName(DSNAME_Q) != null) {
                mediator.setDataSource(lookupDataSource(pool, mediator));
            } else {
                handleException(""The DataSource connection information must be specified for "" +
                    ""using a custom DataSource connection pool or for a JNDI lookup"");
            }

        } catch (JaxenException e) {
            handleException(""Error looking up DataSource connection information"", e);
        }
    }

    
    private DataSource lookupDataSource(OMElement pool, AbstractDBMediator mediator) {

        Hashtable props = new Hashtable();
        
        props.put(Context.INITIAL_CONTEXT_FACTORY, (getValue(pool, ICCLASS_Q)));
        props.put(Context.SECURITY_PRINCIPAL, getValue(pool, USER_Q));
        props.put(Context.SECURITY_CREDENTIALS, getValue(pool, PASS_Q));
        props.put(Context.PROVIDER_URL, getValue(pool, URL_Q));
        String dsName = getValue(pool, DSNAME_Q);

        
        mediator.addDataSourceProperty(ICCLASS_Q, getValue(pool, ICCLASS_Q));
        mediator.addDataSourceProperty(DSNAME_Q,  getValue(pool, DSNAME_Q));
        mediator.addDataSourceProperty(URL_Q,  getValue(pool, URL_Q));
        mediator.addDataSourceProperty(USER_Q, getValue(pool, USER_Q));
        mediator.addDataSourceProperty(PASS_Q, getValue(pool, PASS_Q));

        try {
            Context ctx = new InitialContext(props);
            if (ctx != null) {
                Object ds = ctx.lookup(dsName);
                if (ds != null && ds instanceof DataSource) {
                    return (DataSource) ds;
                } else {
                    handleException(""DataSource : "" + dsName + "" not found when looking up"" +
                        "" using JNDI properties : "" + props);
                }
            } else {
                handleException(""Error getting InitialContext using JNDI properties : "" + props);
            }
        } catch (NamingException e) {
            handleException(""Error looking up DataSource : "" + dsName +
                "" using JNDI properties : "" + props, e);
        }
        return null;
    }

    
    private DataSource createCustomDataSource(OMElement pool, AbstractDBMediator mediator) {

        BasicDataSource ds = new BasicDataSource();

        
        ds.setDriverClassName(getValue(pool, DRIVER_Q));
        ds.setUsername(getValue(pool, USER_Q));
        ds.setPassword(getValue(pool, PASS_Q));
        ds.setUrl(getValue(pool, URL_Q));

        
        mediator.addDataSourceProperty(DRIVER_Q, getValue(pool, DRIVER_Q));
        mediator.addDataSourceProperty(URL_Q,  getValue(pool, URL_Q));
        mediator.addDataSourceProperty(USER_Q, getValue(pool, USER_Q));
        mediator.addDataSourceProperty(PASS_Q, getValue(pool, PASS_Q));

        Iterator props = pool.getChildrenWithName(PROP_Q);
        while (props.hasNext()) {

            OMElement prop = (OMElement) props.next();
            String name  = prop.getAttribute(ATT_NAME).getAttributeValue();
            String value = prop.getAttribute(ATT_VALUE).getAttributeValue();
            
            mediator.addDataSourceProperty(name, value);

            if (""autocommit"".equals(name)) {
                if (""true"".equals(value)) {
                    ds.setDefaultAutoCommit(true);
                } else if (""false"".equals(value)) {
                    ds.setDefaultAutoCommit(false);
                }
            } else if (""isolation"".equals(name)) {
                try {
                    if (""Connection.TRANSACTION_NONE"".equals(value)) {
                        ds.setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);
                    } else if (""Connection.TRANSACTION_READ_COMMITTED"".equals(value)) {
                        ds.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
                    } else if (""Connection.TRANSACTION_READ_UNCOMMITTED"".equals(value)) {
                        ds.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
                    } else if (""Connection.TRANSACTION_REPEATABLE_READ"".equals(value)) {
                        ds.setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
                    } else if (""Connection.TRANSACTION_SERIALIZABLE"".equals(value)) {
                        ds.setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
                    }
                } catch (NumberFormatException ignore) {}
            } else if (""initialsize"".equals(name)) {
                try {
                    ds.setInitialSize(Integer.parseInt(value));
                } catch (NumberFormatException ignore) {}
            } else if (""maxactive"".equals(name)) {
                try {
                    ds.setMaxActive(Integer.parseInt(value));
                } catch (NumberFormatException ignore) {}
            } else if (""maxidle"".equals(name)) {
                try {
                    ds.setMaxIdle(Integer.parseInt(value));
                } catch (NumberFormatException ignore) {}
            } else if (""maxopenstatements"".equals(name)) {
                try {
                    ds.setMaxOpenPreparedStatements(Integer.parseInt(value));
                } catch (NumberFormatException ignore) {}
            } else if (""maxwait"".equals(name)) {
                try {
                    ds.setMaxWait(Long.parseLong(value));
                } catch (NumberFormatException ignore) {}
            } else if (""minidle"".equals(name)) {
                try {
                    ds.setMinIdle(Integer.parseInt(value));
                } catch (NumberFormatException ignore) {}
            } else if (""poolstatements"".equals(name)) {
                if (""true"".equals(value)) {
                    ds.setPoolPreparedStatements(true);
                } else if (""false"".equals(value)) {
                    ds.setPoolPreparedStatements(false);
                }
            } else if (""testonborrow"".equals(name)) {
                if (""true"".equals(value)) {
                    ds.setTestOnBorrow(true);
                } else if (""false"".equals(value)) {
                    ds.setTestOnBorrow(false);
                }
            } else if (""testonreturn"".equals(name)) {
                if (""true"".equals(value)) {
                    ds.setTestOnReturn(true);
                } else if (""false"".equals(value)) {
                    ds.setTestOnReturn(false);
                }
            } else if (""testwhileidle"".equals(name)) {
                if (""true"".equals(value)) {
                    ds.setTestWhileIdle(true);
                } else if (""false"".equals(value)) {
                    ds.setTestWhileIdle(false);
                }
            } else if (""validationquery"".equals(name)) {
                ds.setValidationQuery(value);
            }
        }
        return ds;
    }

    protected void processStatements(OMElement elem, AbstractDBMediator mediator) {

        Iterator iter = elem.getChildrenWithName(STMNT_Q);
        while (iter.hasNext()) {

            OMElement stmntElt = (OMElement) iter.next();
            Statement statement = new Statement(getValue(stmntElt, SQL_Q));

            Iterator paramIter = stmntElt.getChildrenWithName(PARAM_Q);
            while (paramIter.hasNext()) {

                OMElement paramElt = (OMElement) paramIter.next();
                String xpath = getAttribute(paramElt, ATT_EXPRN);
                String value = getAttribute(paramElt, ATT_VALUE);

                if (xpath != null || value != null) {
                    
                    AXIOMXPath xp = null;
                    if (xpath != null) {
                        try {
                            xp = new AXIOMXPath(xpath);
                            OMElementUtils.addNameSpaces(xp, paramElt, log);

                        } catch (JaxenException e) {
                            handleException(""Invalid XPath specified for the source attribute : "" +
                                    xpath);
                        }
                    }
                    statement.addParameter(
                            value,
                            xp,
                            getAttribute(paramElt, ATT_TYPE));
                }
            }

            Iterator resultIter = stmntElt.getChildrenWithName(RESULT_Q);
            while (resultIter.hasNext()) {

                OMElement resultElt = (OMElement) resultIter.next();
                statement.addResult(
                    getAttribute(resultElt, ATT_NAME),
                    getAttribute(resultElt, ATT_COLUMN));
            }

            mediator.addStatement(statement);
        }
    }

    protected String getValue(OMElement elt, QName qName) {
        OMElement e = elt.getFirstChildWithName(qName);
        if (e != null) {
            return e.getText();
        } else {
            handleException(""Unable to read configuration value for : "" + qName);
        }
        return null;
    }

    protected String getAttribute(OMElement elt, QName qName) {
        OMAttribute a = elt.getAttribute(qName);
        if (a != null) {
            return a.getAttributeValue();
        }
        return null;
    }
}

"
synapse,1.1,org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher,5,1,0,8,18,0,2,6,5,0.25,143,1.0,0,0.0,0.6,0,0,27.4,5,3.0,0,"

package org.apache.synapse.endpoints.dispatch;

import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.MessageContext;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.om.OMElement;

import javax.xml.namespace.QName;
import java.util.HashMap;
import java.util.Map;
import java.util.Collections;

public class SoapSessionDispatcher implements Dispatcher {

    
    private Map sessionMap = Collections.synchronizedMap(new HashMap());

    
    public Endpoint getEndpoint(MessageContext synCtx) {
        Endpoint endpoint = null;

        SOAPHeader header = synCtx.getEnvelope().getHeader();

        if (header != null) {
            OMElement sgcElm = header.getFirstChildWithName(
                new QName(""http:

            if (sgcElm != null) {
                String sgcID = sgcElm.getText();

                if (sgcID != null) {
                    Object e = sessionMap.get(sgcID);

                    if (e != null) {
                        endpoint = (Endpoint) e;
                    }
                }
            }
        }

        return endpoint;
    }

    
    public void updateSession(MessageContext synCtx, Endpoint endpoint) {
        
        
        


        SOAPHeader header = synCtx.getEnvelope().getHeader();

        if (header != null) {
            OMElement replyTo = header.getFirstChildWithName
                (new QName(""http:

            if (replyTo != null) {
                OMElement referenceParameters = replyTo.getFirstChildWithName(new QName(
                    ""http:

                if (referenceParameters != null) {
                    OMElement sgcElm = referenceParameters.getFirstChildWithName(new QName(
                        ""http:

                    
                    synchronized (sessionMap) {
                        String sgcID = sgcElm.getText();
                        
                        if (!sessionMap.containsKey(sgcID)) {
                            sessionMap.put(sgcID, endpoint);
                        }
                    }
                }
            }
        }
    }

    public void unbind(MessageContext synCtx) {

        SOAPHeader header = synCtx.getEnvelope().getHeader();

        if (header != null) {
            OMElement sgcIDElm = header.getFirstChildWithName(
                new QName(""http:

            if (sgcIDElm != null) {
                String sgcID = sgcIDElm.getText();

                if (sgcID != null) {
                    sessionMap.remove(sgcID);
                }
            }
        }
    }

    
    public boolean isServerInitiatedSession() {
        return true;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AbstractMediatorSerializer,8,1,17,31,36,22,17,14,0,0.771428571,190,1.0,0,0.0,0.346938776,0,0,22.125,5,1.75,1,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseException;
import org.apache.synapse.mediators.MediatorProperty;

import javax.xml.namespace.QName;
import java.util.Collection;
import java.util.Iterator;

public abstract class AbstractMediatorSerializer implements MediatorSerializer {

    
    protected static Log log;

    protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
    protected static final OMNamespace synNS
            = fac.createOMNamespace(XMLConfigConstants.SYNAPSE_NAMESPACE, ""syn"");
    protected static final OMNamespace nullNS
            = fac.createOMNamespace(XMLConfigConstants.NULL_NAMESPACE, """");
    protected static final QName PROP_Q
        = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""property"", ""syn"");

    
    protected AbstractMediatorSerializer() {
        log = LogFactory.getLog(this.getClass());
    }

    
    protected static void saveTracingState(OMElement mediatorOmElement, Mediator mediator) {
        int traceState = mediator.getTraceState();
        String traceValue = null;
        if (traceState == org.apache.synapse.SynapseConstants.TRACING_ON) {
            traceValue = XMLConfigConstants.TRACE_ENABLE;
        } else if (traceState == org.apache.synapse.SynapseConstants.TRACING_OFF) {
            traceValue = XMLConfigConstants.TRACE_DISABLE;
        }
        if (traceValue != null) {
            mediatorOmElement.addAttribute(fac.createOMAttribute(
                XMLConfigConstants.TRACE_ATTRIB_NAME, nullNS, traceValue));
        }

    }

    protected void serializeMediatorProperties(OMElement parent, Collection props) {

        Iterator iter = props.iterator();
        while (iter.hasNext()) {
            MediatorProperty mp = (MediatorProperty) iter.next();
            OMElement prop = fac.createOMElement(""property"", synNS, parent);
            if (mp.getName() != null) {
                prop.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
            } else {
                handleException(""Mediator property name missing"");
            }

            if (mp.getValue() != null) {
                prop.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue()));

            } else if (mp.getExpression() != null) {
                prop.addAttribute(fac.createOMAttribute(""expression"", nullNS,
                    mp.getExpression().toString()));
                serializeNamespaces(prop, mp.getExpression());

            } else {
                handleException(""Mediator property must have a literal value or be an expression"");
            }
        }
    }

    protected void serializeProperties(OMElement parent, Collection props) {
        serializeMediatorProperties(parent, props);
    }

    protected void serializeNamespaces(OMElement elem, AXIOMXPath xpath) {
        Iterator iter = xpath.getNamespaces().keySet().iterator();
        while (iter.hasNext()) {
            String prefix = (String) iter.next();
            String uri = xpath.getNamespaceContext().translateNamespacePrefixToUri(prefix);
            if (!XMLConfigConstants.SYNAPSE_NAMESPACE.equals(uri)) {
                elem.declareNamespace(uri, prefix);
            }
        }
    }

    protected void handleException(String msg) {
        LogFactory.getLog(this.getClass()).error(msg);
        throw new SynapseException(msg);
    }

    protected void handleException(String msg, Exception e) {
        LogFactory.getLog(this.getClass()).error(msg, e);
        throw new SynapseException(msg, e);
    }
}
"
synapse,1.1,org.apache.synapse.startup.Task,1,1,0,2,1,0,2,0,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,0,"

package org.apache.synapse.startup;


public interface Task {

    
    public void execute();
}
"
synapse,1.1,org.apache.synapse.Startup,3,1,0,10,3,3,9,1,3,2.0,3,0.0,0,0.0,0.666666667,0,0,0.0,1,1.0,0,"

package org.apache.synapse;

import javax.xml.namespace.QName;


public interface Startup extends ManagedLifecycle {

    
    public abstract QName getTagQName();

    
    public String getName();

    
    public void setName(String id);
}
"
synapse,1.1,org.apache.synapse.config.xml.MediatorFactoryFinder,10,1,0,14,41,0,4,10,5,0.527777778,407,1.0,1,0.0,0.288888889,0,0,39.3,7,1.7,0,"


package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.config.XMLToObjectMapper;
import sun.misc.Service;

import javax.xml.namespace.QName;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;



public  class MediatorFactoryFinder implements XMLToObjectMapper {

	private static final Log log = LogFactory.getLog(MediatorFactoryFinder.class);

	private static final Class[] mediatorFactories = {
        SequenceMediatorFactory.class,
        LogMediatorFactory.class,
        SendMediatorFactory.class,         
        FilterMediatorFactory.class,
        SynapseMediatorFactory.class,
        DropMediatorFactory.class,
        HeaderMediatorFactory.class,
        FaultMediatorFactory.class,
        PropertyMediatorFactory.class,
        SwitchMediatorFactory.class,
        InMediatorFactory.class,
        OutMediatorFactory.class,
        RMSequenceMediatorFactory.class,          
        ClassMediatorFactory.class,
        ValidateMediatorFactory.class,
        XSLTMediatorFactory.class,
        AnnotatedCommandMediatorFactory.class,
        POJOCommandMediatorFactory.class,
        CloneMediatorFactory.class,
        IterateMediatorFactory.class,
        AggregateMediatorFactory.class,
        DBReportMediatorFactory.class,
        DBLookupMediatorFactory.class,
        CacheMediatorFactory.class,
        CalloutMediatorFactory.class
    };

    private static MediatorFactoryFinder instance = null;

    
    private static Map factoryMap = new HashMap();

    public static synchronized MediatorFactoryFinder getInstance() {
        if (instance == null) {
            instance = new MediatorFactoryFinder();
        }
        return instance;
    }

    
    public synchronized void reset() {
        factoryMap.clear();
        instance = null;
    }

    private MediatorFactoryFinder() {

        factoryMap = new HashMap();

        for (int i = 0; i < mediatorFactories.length; i++) {
			Class c = mediatorFactories[i];
			try {
                MediatorFactory fac = (MediatorFactory) c.newInstance();
                factoryMap.put(fac.getTagQName(), c);
            } catch (Exception e) {
				throw new SynapseException(""Error instantiating "" + c.getName(), e);
			}
		}
        
        registerExtensions();
    }

    private void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    
    private void registerExtensions() {

        

        
        Iterator it = Service.providers(MediatorFactory.class);
        while (it.hasNext()) {
            MediatorFactory mf = (MediatorFactory) it.next();
            QName tag = mf.getTagQName();
            factoryMap.put(tag, mf.getClass());
            if (log.isDebugEnabled()) {
                log.debug(""Added MediatorFactory "" + mf.getClass() + "" to handle "" + tag);
            }
        }
    }

    
	public Mediator getMediator(OMElement element) {

        String localName = element.getLocalName();
        QName qName = null;
        if (element.getNamespace() != null) {
            qName = new QName(element.getNamespace().getNamespaceURI(), localName);
        } else {
            qName = new QName(localName);
        }
        if (log.isDebugEnabled()) {
            log.debug(""getMediator("" + qName + "")"");
        }
        Class cls = (Class) factoryMap.get(qName);

        if (cls == null && localName.indexOf('.') > -1) {
            String newLocalName = localName.substring(0, localName.indexOf('.'));
            qName = new QName(element.getNamespace().getNamespaceURI(), newLocalName);
            if (log.isDebugEnabled()) {
                log.debug(""getMediator.2("" + qName + "")"");
            }
            cls = (Class) factoryMap.get(qName);
        }

        if (cls == null) {
            String msg = ""Unknown mediator referenced by configuration element : "" + qName;
            log.error(msg);
            throw new SynapseException(msg);
        }

        try {
			MediatorFactory mf = (MediatorFactory) cls.newInstance();
			return mf.createMediator(element);

        } catch (InstantiationException e) {
            String msg = ""Error initializing mediator factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);

        } catch (IllegalAccessException e) {
            String msg = ""Error initializing mediator factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);
		}
	}
    
    public Map getFactoryMap() {
        return factoryMap;
    }

    
    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return getMediator((OMElement) om);
        } else {
            handleException(""Invalid mediator configuration XML : "" + om);
        }
        return null;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.AbstractListMediatorSerializer,2,2,7,12,14,1,7,5,1,2.0,40,0.0,0,0.857142857,0.666666667,0,0,19.0,3,1.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;

import java.util.Iterator;
import java.util.List;

public abstract class AbstractListMediatorSerializer extends AbstractMediatorSerializer {

    protected void serializeChildren(OMElement parent, List list) {
        Iterator iter = list.iterator();
        while (iter.hasNext()) {
            Mediator child = (Mediator) iter.next();
            MediatorSerializer medSer = MediatorSerializerFinder.getInstance().getSerializer(child);
            if (medSer != null) {
                medSer.serializeMediator(parent, child);
            } else {
                handleException(""Unable to find a serializer for mediator : "" + child.getType());
            }
        }
    }
}
"
synapse,1.1,org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack,7,1,0,8,17,9,3,5,5,0.5,139,1.0,0,0.0,0.566666667,0,0,17.85714286,5,1.8571,0,"
package org.apache.synapse.statistics.impl;

import org.apache.synapse.statistics.StatisticsStack;
import org.apache.synapse.statistics.StatisticsCollector;
import org.apache.synapse.SynapseException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;



public class ProxyServiceStatisticsStack implements StatisticsStack {

    private static final Log log = LogFactory.getLog(ProxyServiceStatisticsStack.class);
    
    private String proxyServiceName;
    
    private boolean isStatisticsEnable = false;
    
    private long inTimeForInFlow = -1;
    
    private long inTimeForOutFlow = -1;
    
    private boolean isINFault;
    
    private boolean isOUTFault;

    
    public void put(String key, long initTime, boolean isInFlow, boolean isStatisticsEnable,
                    boolean isFault) {
        if (isInFlow) {
            this.proxyServiceName = key;
            this.isStatisticsEnable = isStatisticsEnable;
            this.inTimeForInFlow = initTime;
            this.isINFault = isFault;
        }
    }

    
    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault) {
        synchronized (this) {
            if (proxyServiceName != null && isStatisticsEnable && inTimeForInFlow != -1) {
                inTimeForOutFlow = System.currentTimeMillis();
                isOUTFault = isFault;
                statisticsCollector.reportForProxyService(proxyServiceName, false,
                    inTimeForInFlow, inTimeForOutFlow, isINFault);
                inTimeForInFlow = -1;
            } else if (inTimeForOutFlow != -1) {
                statisticsCollector.reportForProxyService(proxyServiceName, true,
                    inTimeForOutFlow, System.currentTimeMillis(), isFault);
                inTimeForOutFlow = -1;
            }
        }
    }

    
    public void reportToStatisticsCollector(StatisticsCollector statisticsCollector,
                                            boolean isFault, String name) {
        if (name != null && proxyServiceName != null && proxyServiceName.equals(name)) {
            reportToStatisticsCollector(statisticsCollector, isFault);
        } else {
            handleException(""Invalid ProxyService Name "" + name + "" expected "" + proxyServiceName);
        }
    }

    
    public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector,
                                               boolean isFault) {
        reportToStatisticsCollector(statisticsCollector, isFault);
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }
}
"
synapse,1.1,org.apache.synapse.config.XMLToObjectMapper,1,1,0,10,1,0,9,1,1,2.0,1,0.0,0,0.0,1.0,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config;

import org.apache.axiom.om.OMNode;


public interface XMLToObjectMapper {

    
    public Object getObjectFromOMNode(OMNode om);
}
"
synapse,1.1,org.apache.synapse.statistics.StatisticsHolder,9,1,0,2,12,22,1,1,9,0.8125,75,1.0,2,0.0,0.288888889,0,0,6.888888889,4,1.2222,0,"
package org.apache.synapse.statistics;



public class StatisticsHolder {

    private int statisticsCategory ;

    private String key ;

    
    private Statistics inFlowStatistics;

    
    private Statistics outFlowStatistics;

    
    public synchronized void update(boolean isResponse, long inTime, long outTime,
                                    boolean isFault) {
        if (isResponse) {
            if (outFlowStatistics == null) {
                outFlowStatistics = new Statistics();
            }
            outFlowStatistics.update(inTime, outTime, isFault);
        } else {
            if (inFlowStatistics == null) {
                inFlowStatistics = new Statistics();
            }
            inFlowStatistics.update(inTime, outTime, isFault);
        }

    }

    
    public synchronized Statistics getInFlowStatistics() {
        return inFlowStatistics;
    }

    
    public synchronized Statistics getOutFlowStatistics() {
        return outFlowStatistics;
    }

    
    public int getStatisticsCategory() {
        return statisticsCategory;
    }

    
    public void setStatisticsCategory(int statisticsCategory) {
        this.statisticsCategory = statisticsCategory;
    }

    
    public String getKey() {
        return key;
    }

    
    public void setKey(String key) {
        this.key = key;
    }

    
    public synchronized void clearStatistics(){
        this.inFlowStatistics =null;
        this.outFlowStatistics=null;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.ConfigurationSerializer,2,1,0,4,2,1,2,2,2,2.0,2,0.0,0,0.0,0.75,0,0,0.0,1,1.0,0,"

package org.apache.synapse.config.xml;

import java.io.OutputStream;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

import org.apache.synapse.config.SynapseConfiguration;
import org.apache.axiom.om.OMElement;


public interface ConfigurationSerializer {

    
    OMElement serializeConfiguration(SynapseConfiguration synCfg);

    
    QName getTagQName();

}
"
synapse,1.1,org.apache.synapse.mediators.db.AbstractDBMediator,14,2,2,19,70,53,8,13,11,0.666666667,421,0.666666667,0,0.5,0.255102041,0,0,28.85714286,7,1.4286,0,"

package org.apache.synapse.mediators.db;

import org.apache.commons.dbcp.BasicDataSource;
import org.apache.commons.logging.Log;
import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.MessageContext;
import org.apache.synapse.config.xml.AbstractDBMediatorFactory;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;

import javax.sql.DataSource;
import javax.xml.namespace.QName;
import java.math.BigDecimal;
import java.sql.*;
import java.sql.Date;
import java.util.*;


public abstract class AbstractDBMediator extends AbstractMediator implements ManagedLifecycle {

    
    protected Map dataSourceProps = new HashMap();
    
    private DataSource dataSource = null;
    
    List statementList = new ArrayList();

    
    public void init(SynapseEnvironment se) {
        
    }

    
    public void destroy() {
        if (getDataSource() instanceof BasicDataSource) {
            try {
                ((BasicDataSource) getDataSource()).close();
                log.info(""Successfully shut down DB connection pool for URL : "" + getDSName());
            } catch (SQLException e) {
                log.warn(""Error shutting down DB connection pool for URL : "" + getDSName());
            }
        }
    }

    
    public boolean mediate(MessageContext synCtx) {

        String name = (this instanceof DBLookupMediator ? ""DBLookup"" : ""DBReport"");
        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : "" + name + "" mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        for (Iterator iter = statementList.iterator(); iter.hasNext(); ) {
            processStatement((Statement) iter.next(), synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : "" + name + "" mediator"");
        }
        return true;
    }

    
    abstract protected void processStatement(Statement query, MessageContext msgCtx);

    
    protected String getDSName() {
        return (String) dataSourceProps.get(AbstractDBMediatorFactory.URL_Q);
    }

    public DataSource getDataSource() {
        return dataSource;
    }

    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public void addDataSourceProperty(QName name, String value) {
        dataSourceProps.put(name, value);
    }

    public void addDataSourceProperty(String name, String value) {
        dataSourceProps.put(name, value);
    }

    public Map getDataSourceProps() {
        return dataSourceProps;
    }

    public void addStatement(Statement stmnt) {
        statementList.add(stmnt);
    }

    public List getStatementList() {
        return statementList;
    }

    
    protected PreparedStatement getPreparedStatement(Statement stmnt, MessageContext msgCtx) throws SQLException {

        boolean traceOn = isTraceOn(msgCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        Log serviceLog = msgCtx.getServiceLog();

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Getting a connection from DataSource "" + getDSName() +
                "" and preparing statement : "" + stmnt.getRawStatement());
        }
        Connection con = getDataSource().getConnection();
        PreparedStatement ps = con.prepareStatement(stmnt.getRawStatement());

        
        List params = stmnt.getParameters();
        int column = 1;

        for (Iterator pi = params.iterator(); pi.hasNext(); ) {

            Statement.Parameter param = (Statement.Parameter) pi.next();
            String value = (param.getPropertyName() != null ?
                param.getPropertyName() :
                Axis2MessageContext.getStringValue(param.getXpath(), msgCtx));

            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Setting as parameter : "" + column + "" value : "" + value +
                    "" as JDBC Type : "" + param.getType() + ""(see java.sql.Types for valid types)"");
            }

            switch (param.getType()) {
                
                case Types.CHAR:
                case Types.VARCHAR:
                case Types.LONGVARCHAR: {
                    ps.setString(column++, value);
                    break;
                }
                case Types.NUMERIC:
                case Types.DECIMAL: {
                    ps.setBigDecimal(column++, new BigDecimal(value));
                    break;
                }
                case Types.BIT: {
                    ps.setBoolean(column++, Boolean.parseBoolean(value));
                    break;
                }
                case Types.TINYINT: {
                    ps.setByte(column++, Byte.parseByte(value));
                    break;
                }
                case Types.SMALLINT: {
                    ps.setShort(column++, Short.parseShort(value));
                    break;
                }
                case Types.INTEGER: {
                    ps.setInt(column++, Integer.parseInt(value));
                    break;
                }
                case Types.BIGINT: {
                    ps.setLong(column++, Long.parseLong(value));
                    break;
                }
                case Types.REAL: {
                    ps.setFloat(column++, Float.parseFloat(value));
                    break;
                }
                case Types.FLOAT: {
                    ps.setDouble(column++, Double.parseDouble(value));
                    break;
                }
                case Types.DOUBLE: {
                    ps.setDouble(column++, Double.parseDouble(value));
                    break;
                }
                
                case Types.DATE: {
                    ps.setDate(column++, Date.valueOf(value));
                    break;
                }
                case Types.TIME: {
                    ps.setTime(column++, Time.valueOf(value));
                    break;
                }
                case Types.TIMESTAMP: {
                    ps.setTimestamp(column++, Timestamp.valueOf(value));
                    break;
                }
                
                default: {
                    String msg = ""Trying to set an un-supported JDBC Type : "" + param.getType() +
                        "" against column : "" + column + "" and statement : "" + stmnt.getRawStatement() +
                        "" used by a DB mediator against DataSource : "" + getDSName() +
                        "" (see java.sql.Types for valid type values)"";
                    handleException(msg, msgCtx);
                }
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Successfully prepared statement : "" + stmnt.getRawStatement() +
                "" against DataSource : "" + getDSName());
        }
        return ps;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.transform.HeaderMediator,12,2,0,16,49,6,2,14,10,0.803030303,406,0.666666667,0,0.541666667,0.226190476,0,0,32.33333333,25,3.4167,0,"

package org.apache.synapse.mediators.transform;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPFactory;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.mediators.AbstractMediator;

import javax.xml.namespace.QName;
import java.util.Iterator;
import java.util.List;


public class HeaderMediator extends AbstractMediator {

    public static final int ACTION_SET = 0;
    public static final int ACTION_REMOVE = 1;

    
    private QName qName = null;
    
    private String value = null;
    
    private int action = ACTION_SET;
    
    private AXIOMXPath expression = null;

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Header mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        if (action == ACTION_SET) {

            String value = (getValue() != null ? getValue() :
                    Axis2MessageContext.getStringValue(expression, synCtx));

            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Set SOAP header : "" + qName + "" to : "" + value);
            }

            if (qName.getNamespaceURI() == null || """".equals(qName.getNamespaceURI())) {

                
                if (SynapseConstants.HEADER_TO.equals(qName.getLocalPart())) {
                    synCtx.setTo(new EndpointReference(value));
                } else if (SynapseConstants.HEADER_FROM.equals(qName.getLocalPart())) {
                    synCtx.setFrom(new EndpointReference(value));
                } else if (SynapseConstants.HEADER_ACTION.equals(qName.getLocalPart())) {
                    synCtx.setWSAAction(value);
                } else if (SynapseConstants.HEADER_FAULT.equals(qName.getLocalPart())) {
                    synCtx.setFaultTo(new EndpointReference(value));
                } else if (SynapseConstants.HEADER_REPLY_TO.equals(qName.getLocalPart())) {
                    synCtx.setReplyTo(new EndpointReference(value));
                } else {
                    addCustomHeader(synCtx);
                }
            } else {
                addCustomHeader(synCtx);
            }

        } else {

             if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Removing SOAP Header : "" + qName);
            }

            if (qName.getNamespaceURI() == null || """".equals(qName.getNamespaceURI())) {

                
                if (SynapseConstants.HEADER_TO.equals(qName.getLocalPart())) {
                    synCtx.setTo(null);
                } else if (SynapseConstants.HEADER_FROM.equals(qName.getLocalPart())) {
                    synCtx.setFrom(null);
                } else if (SynapseConstants.HEADER_ACTION.equals(qName.getLocalPart())) {
                    synCtx.setWSAAction(null);
                } else if (SynapseConstants.HEADER_FAULT.equals(qName.getLocalPart())) {
                    synCtx.setFaultTo(null);
                } else if (SynapseConstants.HEADER_REPLY_TO.equals(qName.getLocalPart())) {
                    synCtx.setReplyTo(null);
                } else {
                    SOAPEnvelope envelope = synCtx.getEnvelope();
                    if (envelope != null) {
                        SOAPHeader header = envelope.getHeader();
                        if (header != null) {
                            removeFromHeaderList(header.
                                getHeaderBlocksWithNSURI(""""));
                        }
                    }
                }

            } else {
                SOAPEnvelope envelope = synCtx.getEnvelope();
                if (envelope != null) {
                    SOAPHeader header = envelope.getHeader();
                    if (header != null) {
                        removeFromHeaderList(header.
                            getHeaderBlocksWithNSURI(qName.getNamespaceURI()));
                    }
                }
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Header mediator"");
        }
        return true;
    }

    private void addCustomHeader(MessageContext synCtx) {
        SOAPEnvelope env = synCtx.getEnvelope();
        if (env == null) {
            return;
        }
        SOAPFactory fac = (SOAPFactory) env.getOMFactory();
        SOAPHeader header = env.getHeader();
        if (header == null) {
            header = fac.createSOAPHeader(env);
        }
        SOAPHeaderBlock hb = header.addHeaderBlock(qName.getLocalPart(),
                fac.createOMNamespace(qName.getNamespaceURI(), qName.getPrefix()));
        hb.setText(value);
    }

    private void removeFromHeaderList(List headersList) {
        if (headersList == null || headersList.isEmpty()) {
            return;
        }
        for ( Iterator iter = headersList.iterator();iter.hasNext();) {
            Object o = iter.next();
            if (o instanceof SOAPHeaderBlock) {
                SOAPHeaderBlock header = (SOAPHeaderBlock) o;
                if (header.getLocalName().equals(qName.getLocalPart())) {
                    header.detach();
                }
            } else if (o instanceof OMElement) {
                OMElement omElem = (OMElement) o;
                if (omElem.getLocalName().equals(qName.getLocalPart())) {
                    omElem.detach();
                }
            }
        }
    }

    public int getAction() {
        return action;
    }

    public void setAction(int action) {
        this.action = action;
    }

    public QName getQName() {
        return qName;
    }

    public void setQName(QName qName) {
        this.qName = qName;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public AXIOMXPath getExpression() {
        return expression;
    }

    public void setExpression(AXIOMXPath expression) {
        this.expression = expression;
    }
}
"
synapse,1.1,org.apache.synapse.util.SimpleMapImpl,27,3,0,11,92,349,1,11,26,1.030769231,865,1.0,0,0.619047619,0.164835165,1,2,30.48148148,11,1.6296,0,"package org.apache.synapse.util;

import java.io.ByteArrayOutputStream;

import java.util.HashMap;
import java.util.Iterator;

import javax.activation.DataHandler;
import javax.xml.namespace.QName;

import org.apache.axiom.attachments.ByteArrayDataSource;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMFactory;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.OMNode;
import org.apache.axiom.om.OMText;


public class SimpleMapImpl extends HashMap implements SimpleMap {
	private static final OMNamespace attrNS = OMAbstractFactory.getOMFactory().createOMNamespace("""", """");
	private static final String TYPE = ""type"";

	private static final String NAME = ""name"";

	private static final String ENTRY = ""entry"";

	private static final String SHORT = ""short"";

	private static final String LONG = ""long"";

	private static final String DOUBLE = ""double"";
	private static final String INTEGER = ""int"";
	private static final String FLOAT = ""float"";

	private static final String BYTEARRAY = ""byte[]"";

	private static final String BYTE = ""byte"";

	private static final String STRING = ""string"";

	private static final String BOOLEAN = ""boolean"";

	private static final String CHAR = ""char"";

	private static final long serialVersionUID = 1L;

	public SimpleMapImpl() {
		super();
	}

	public Object get(String name) {
		return this.get((Object) name);
	}

	public boolean getBoolean(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Boolean) {
			return ((Boolean) o).booleanValue();
		} else {
			throw new RuntimeException(""getBoolean("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Boolean"");
		}
	}

	public byte getByte(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Byte) {
			return ((Byte) o).byteValue();
		} else {
			throw new RuntimeException(""getByte("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Byte"");
		}
	}

	public byte[] getBytes(String name) {
		Object o = this.get((Object) name);
		if (o instanceof byte[]) {
			return (byte[]) o;
		} else {
			throw new RuntimeException(""getByteArray("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of byte[]"");
		}
	}

	public char getChar(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Character) {
			return ((Character) o).charValue();
		} else {
			throw new RuntimeException(""getChar("" + name + ""): ""
					+ o.getClass().getName()
					+ "" is not an instance of Character"");
		}
	}

	public double getDouble(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Double) {
			return ((Double) o).doubleValue();
		} else {
			throw new RuntimeException(""getDouble("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Double"");
		}
	}

	public float getFloat(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Float) {
			return ((Float) o).floatValue();
		} else {
			throw new RuntimeException(""getFloat("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Float"");
		}
	}

	public int getInt(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Integer) {
			return ((Integer) o).intValue();
		} else {
			throw new RuntimeException(""getInt("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Integer"");
		}
	}

	public long getLong(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Long) {
			return ((Long) o).longValue();
		} else {
			throw new RuntimeException(""getLong("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Long"");
		}
	}

	public short getShort(String name) {
		Object o = this.get((Object) name);
		if (o instanceof Short) {
			return ((Short) o).shortValue();
		} else {
			throw new RuntimeException(""getShort("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of Short"");
		}
	}

	public String getString(String name) {
		Object o = this.get((Object) name);
		if (o instanceof String) {
			return ((String) o);
		} else {
			throw new RuntimeException(""getString("" + name + ""): ""
					+ o.getClass().getName() + "" is not an instance of String"");
		}
	}

	public void put(String name, Object value) {
		this.put((Object) name, value);
	}

	public void putBoolean(String name, boolean b) {
		this.put((Object) name, new Boolean(b));

	}

	public void putByte(String name, byte b) {
		this.put((Object) name, new Byte(b));

	}

	public void putBytes(String name, byte[] bytes) {
		this.put((Object) name, bytes);

	}

	public void putChar(String name, char c) {
		this.put((Object) name, new Character(c));

	}

	public void putDouble(String name, double d) {
		this.put((Object) name, new Double(d));

	}

	public void putFloat(String name, float fl) {
		this.put((Object) name, new Float(fl));

	}

	public void putInt(String name, int i) {
		this.put((Object) name, new Integer(i));

	}

	public void putLong(String name, long l) {
		this.put((Object) name, new Long(l));

	}

	public void putShort(String name, short s) {
		this.put((Object) name, new Short(s));

	}

	public void putString(String name, String value) {
		this.put((Object) name, value);

	}

	public OMElement getOMElement() {
		return getOMElement(OMAbstractFactory.getOMFactory());
	}

	public OMElement getOMElement(OMFactory fac) {
		OMElement mapElement = fac.createOMElement(PayloadHelper.MAPELT);
		
		for (Iterator it = this.keySet().iterator(); it.hasNext();) {
			OMElement entry = fac.createOMElement(new QName(
					PayloadHelper.AXIOMPAYLOADNS, ENTRY), mapElement);
			
			
			Object key = it.next();
			if (key instanceof String) {
				Object o = this.get(key);
				entry.addAttribute(NAME, (String) key, attrNS);
				if (o instanceof Character) {
					entry.addAttribute(TYPE, CHAR, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof Boolean) {
					entry.addAttribute(TYPE, BOOLEAN, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof String) {
					entry.addAttribute(TYPE, STRING, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof Byte) {
					entry.addAttribute(TYPE, BYTE, attrNS);
					entry.setText(((Byte) o).toString());
				} else if (o instanceof byte[]) {
					entry.addAttribute(TYPE, BYTEARRAY, attrNS);
					OMText text = fac.createOMText(new DataHandler(
							new ByteArrayDataSource((byte[]) o)), true);
					entry.addChild(text);
				} else if (o instanceof Float) {
					entry.addAttribute(TYPE, FLOAT, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof Double) {
					entry.addAttribute(TYPE, DOUBLE, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof Long) {
					entry.addAttribute(TYPE, LONG, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof Short) {
					entry.addAttribute(TYPE, SHORT, attrNS);
					entry.setText(o.toString());
				} else if (o instanceof Integer) {
					entry.addAttribute(TYPE, INTEGER, attrNS);
					entry.setText(o.toString());
				}

			} else {
				
			}
		}

		return mapElement;
	}

	
	public SimpleMapImpl(OMElement el) {
		super();
		if (el.getQName().equals(PayloadHelper.MAPELT)) {
			for (Iterator it = el.getChildElements(); it.hasNext(); ) {
				OMElement child = (OMElement)it.next();
				if (child.getLocalName().equals(ENTRY)) {
					String name = child.getAttributeValue(new QName("""",NAME));
					String type = child.getAttributeValue(new QName("""", TYPE));
					try {
					if (type==null || name == null) {
						
						continue;
					}
					OMNode data = child.getFirstOMChild();
					if (data.getType()!=OMNode.TEXT_NODE) {
						continue; 
					}
					OMText text = (OMText)data;
					 if (type.equals(INTEGER)) {
						this.put((Object)name, new Integer(text.getText()));
					} else if (type.equals(CHAR)) {
						this.put((Object)name, new Character((text.getText().charAt(0))));
					} else if (type.equals(DOUBLE)) {
						this.put((Object)name, new Double(text.getText()));
					} else if (type.equals(FLOAT)) {
						this.put((Object)name, new Float(text.getText()));
					} else if (type.equals(BYTE)) {
						this.put((Object)name, new Byte(text.getText().getBytes()[0]));
					} else if (type.equals(SHORT)) {
						this.put((Object)name, new Short(text.getText()));
					} else if (type.equals(LONG)) {
						this.put((Object)name, new Long(text.getText()));
					} else if (type.equals(STRING)) {
						this.put((Object)name, text.getText());
					} else if (type.equals(BYTEARRAY)) {
						DataHandler dh = (DataHandler)text.getDataHandler();
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						dh.writeTo(baos);
						this.put((Object)name, baos.toByteArray());
					}
					} catch (Exception e) {
						e.printStackTrace();
						
					}
					 
				}
			}
		}
	}

}
"
synapse,1.1,org.apache.synapse.config.xml.DropMediatorSerializer,3,2,0,7,13,3,0,7,3,2.0,41,0.0,0,0.75,0.555555556,0,0,12.66666667,3,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.DropMediator;

public class DropMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof DropMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        DropMediator mediator = (DropMediator) m;
        OMElement drop = fac.createOMElement(""drop"", synNS);
        saveTracingState(drop,mediator);

        if (parent != null) {
            parent.addChild(drop);
        }
        return drop;
    }

    public String getMediatorClassName() {
        return DropMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.DBLookupMediatorSerializer,3,3,0,8,14,3,0,8,3,2.0,45,0.0,0,0.777777778,0.555555556,0,0,14.0,3,1.3333,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.db.DBLookupMediator;


public class DBLookupMediatorSerializer extends AbstractDBMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof DBLookupMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        DBLookupMediator mediator = (DBLookupMediator) m;
        OMElement dbLookup = fac.createOMElement(""dblookup"", synNS);
        saveTracingState(dbLookup,mediator);
        serializeDBInformation(mediator, dbLookup);

        if (parent != null) {
            parent.addChild(dbLookup);
        }
        return dbLookup;
    }

    public String getMediatorClassName() {
        return DBLookupMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.SynapseMediatorFactory,4,3,0,5,9,4,0,5,3,0.666666667,30,1.0,0,0.666666667,0.666666667,0,0,6.25,1,0.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.mediators.base.SynapseMediator;

import javax.xml.namespace.QName;


public class SynapseMediatorFactory extends AbstractListMediatorFactory {

    private final static QName RULES_Q = new QName(SynapseConstants.SYNAPSE_NAMESPACE, ""rules"");

    public QName getTagQName() {
        return RULES_Q;
    }

    public Mediator createMediator(OMElement elem) {
        SynapseMediator sm = new SynapseMediator();

        
        
        processTraceState(sm,elem);

        addChildren(elem, sm);
        return sm;
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.LogMediatorSerializer,3,2,0,8,19,3,0,8,3,2.0,88,0.0,0,0.75,0.555555556,0,0,28.33333333,8,3.0,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.builtin.LogMediator;


public class LogMediatorSerializer extends AbstractMediatorSerializer {

    public OMElement serializeMediator(OMElement parent, Mediator m) {

        if (!(m instanceof LogMediator)) {
            handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
        }

        LogMediator mediator = (LogMediator) m;
        OMElement log = fac.createOMElement(""log"", synNS);
        saveTracingState(log,mediator);

        if (mediator.getLogLevel() != LogMediator.SIMPLE) {
            log.addAttribute(fac.createOMAttribute(
                ""level"", nullNS,
                    mediator.getLogLevel() == LogMediator.HEADERS ? ""headers"" :
                    mediator.getLogLevel() == LogMediator.FULL ? ""full"" :
                    mediator.getLogLevel() == LogMediator.CUSTOM ? ""custom"" : ""simple""
                ));
        }

        if (mediator.getSeparator() != LogMediator.DEFAULT_SEP) {
            log.addAttribute(fac.createOMAttribute(
                ""separator"", nullNS, mediator.getSeparator()));
        }

        super.serializeProperties(log, mediator.getProperties());

        if (parent != null) {
            parent.addChild(log);
        }
        return log;
    }

    public String getMediatorClassName() {
        return LogMediator.class.getName();
    }
}
"
synapse,1.1,org.apache.synapse.metrics.MetricsConstants,2,1,0,2,3,1,2,0,1,1.0,12,0.0,0,0.0,1.0,0,0,4.0,0,0.0,0,"

package org.apache.synapse.metrics;


public final class MetricsConstants {
    public static final String GLOBAL_REQUEST_COUNTER = ""__GLOBAL_REQUEST_COUNTER__"";
    public static final String REQUEST_RECEIVED_TIME = ""__REQUEST_RECEIVED_TIME__"";
}

"
synapse,1.1,org.apache.synapse.config.xml.XMLConfigurationBuilder,3,1,0,8,11,1,2,6,2,0.5,26,1.0,0,0.0,0.5,0,0,7.333333333,1,0.3333,0,"

package org.apache.synapse.config.xml;

import java.io.InputStream;

import org.apache.axiom.om.*;
import org.apache.axiom.om.impl.builder.StAXOMBuilder;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.config.SynapseConfiguration;

import javax.xml.stream.XMLStreamException;


public class XMLConfigurationBuilder {

    private static Log log = LogFactory.getLog(XMLConfigurationBuilder.class);

    public static SynapseConfiguration getConfiguration(InputStream is) throws XMLStreamException {

        log.info(""Generating the Synapse configuration model by parsing the XML configuration"");
        
        OMElement definitions = new StAXOMBuilder(is).getDocumentElement();
        definitions.build();

        return ConfigurationFactoryAndSerializerFinder.getInstance().getConfiguration(definitions);
        
    }
}"
synapse,1.1,org.apache.synapse.config.xml.ConfigurationFactoryAndSerializerFinder,13,1,0,14,45,10,2,12,8,0.583333333,382,1.0,1,0.0,0.19047619,0,0,28.0,4,1.4615,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNode;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.config.XMLToObjectMapper;
import sun.misc.Service;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;


public class ConfigurationFactoryAndSerializerFinder implements XMLToObjectMapper {

    private static final Log log = LogFactory
            .getLog(ConfigurationFactoryAndSerializerFinder.class);

    private static final Class[] configurationFactories = {
            SynapseXMLConfigurationFactory.class,
    };


    private static ConfigurationFactoryAndSerializerFinder instance = null;

    
    private static Map factoryMap = new HashMap();

    private static Map serializerMap = new HashMap();

    public static synchronized ConfigurationFactoryAndSerializerFinder getInstance() {
        if (instance == null) {
            instance = new ConfigurationFactoryAndSerializerFinder();
        }
        return instance;
    }

    
    public synchronized void reset() {
        factoryMap.clear();
        instance = null;
    }

    private ConfigurationFactoryAndSerializerFinder() {

        factoryMap = new HashMap();

        for (int i = 0; i < configurationFactories.length; i++) {
            Class c = configurationFactories[i];
            try {
                ConfigurationFactory fac = (ConfigurationFactory) c.newInstance();
                factoryMap.put(fac.getTagQName(), c);
                serializerMap.put(fac.getTagQName(), fac.getSerializerClass());
            } catch (Exception e) {
                throw new SynapseException(""Error instantiating "" + c.getName(), e);
            }
        }
        
        registerExtensions();
    }

    private void handleException(String msg, Exception e) {
        log.error(msg, e);
        throw new SynapseException(msg, e);
    }

    private void handleException(String msg) {
        log.error(msg);
        throw new SynapseException(msg);
    }

    
    private void registerExtensions() {

        
        Iterator it = Service.providers(ConfigurationFactory.class);
        while (it.hasNext()) {
            ConfigurationFactory cf = (ConfigurationFactory) it.next();
            QName tag = cf.getTagQName();
            factoryMap.put(tag, cf.getClass());
            serializerMap.put(tag, cf.getSerializerClass());
            if (log.isDebugEnabled()) {
                log.debug(""Added MediatorFactory "" + cf.getClass() + "" to handle "" + tag);
            }
        }
    }

    
    public SynapseConfiguration getConfiguration(OMElement element) {

        String localName = element.getLocalName();
        QName qName = null;
        if (element.getNamespace() != null) {
            qName = new QName(element.getNamespace().getNamespaceURI(), localName);
        } else {
            qName = new QName(localName);
        }
        if (log.isDebugEnabled()) {
            log.debug(""getConfiguration("" + qName + "")"");
        }
        Class cls = (Class) factoryMap.get(qName);


        if (cls == null) {
            String msg = ""Unknown Configuration type "" +
                    ""referenced by configuration element : "" + qName;
            log.error(msg);
            throw new SynapseException(msg);
        }

        try {
            ConfigurationFactory cf = (ConfigurationFactory) cls.newInstance();
            return cf.getConfiguration(element);

        } catch (InstantiationException e) {
            String msg = ""Error initializing configuration factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);

        } catch (IllegalAccessException e) {
            String msg = ""Error initializing configuration factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);
        }
    }

    
    public static OMElement serializeConfiguration(SynapseConfiguration synCfg) {
        if (synCfg.getDefaultQName() == null) {
            return serializeConfiguration(synCfg, XMLConfigConstants.DEFINITIONS_ELT);
        } else {
            return serializeConfiguration(synCfg, synCfg.getDefaultQName());
        }
    }

    
    public static OMElement serializeConfiguration(SynapseConfiguration synCfg, QName qName) {

        Class cls = (Class) serializerMap.get(qName);
        if (cls == null) {
            String msg = ""Unknown Configuration type "" +
                    ""referenced by configuration element : "" + qName;
            log.error(msg);
            throw new SynapseException(msg);
        }

        try {
            ConfigurationSerializer cs = (ConfigurationSerializer) cls.newInstance();
            return cs.serializeConfiguration(synCfg);

        } catch (InstantiationException e) {
            String msg = ""Error initializing configuration factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);

        } catch (IllegalAccessException e) {
            String msg = ""Error initializing configuration factory : "" + cls;
            log.error(msg);
            throw new SynapseException(msg, e);
        }
    }

    
    public Map getFactoryMap() {
        return factoryMap;
    }

    
    public static Map getSerializerMap() {
        return serializerMap;
    }

    
    public Object getObjectFromOMNode(OMNode om) {
        if (om instanceof OMElement) {
            return getConfiguration((OMElement) om);
        } else {
            handleException(""Invalid configuration XML : "" + om);
        }
        return null;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.builtin.CacheMediator,21,2,0,21,73,110,2,19,18,0.84,594,1.0,1,0.393939394,0.185714286,0,0,26.80952381,15,2.4286,0,"

package org.apache.synapse.mediators.builtin;

import org.apache.axis2.AxisFault;
import org.apache.axis2.clustering.ClusteringFault;
import org.apache.axis2.clustering.context.Replicator;
import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.saaj.util.SAAJUtil;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.core.axis2.Axis2Sender;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.util.FixedByteArrayOutputStream;
import org.apache.synapse.util.MessageHelper;
import org.wso2.caching.CacheManager;
import org.wso2.caching.CachedObject;
import org.wso2.caching.CachingConstants;
import org.wso2.caching.CachingException;
import org.wso2.caching.digest.DigestGenerator;

import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;
import javax.xml.stream.XMLStreamException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;


public class CacheMediator extends AbstractMediator {

    private String id = null;
    private String scope = CachingConstants.SCOPE_PER_HOST;
    private boolean collector = false;
    private DigestGenerator digestGenerator = CachingConstants.DEFAULT_XML_IDENTIFIER;
    private int inMemoryCacheSize = CachingConstants.DEFAULT_CACHE_SIZE;
    
    
    private int diskCacheSize = 0;
    private long timeout = 0L;
    private SequenceMediator onCacheHitSequence = null;
    private String onCacheHitRef = null;
    private int maxMessageSize = 0;
    private String cacheManagerKey = CachingConstants.CACHE_MANAGER; 
    private static final String CACHE_MANAGER_PREFIX = ""synapse.cache_manager_"";

    public boolean mediate(MessageContext synCtx) {

        
        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Cache mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        
        FixedByteArrayOutputStream fbaos = null;
        if (maxMessageSize > 0) {
            fbaos = new FixedByteArrayOutputStream(maxMessageSize);
            try {
                MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope()).serialize(fbaos);
            } catch (XMLStreamException e) {
                handleException(""Error in checking the message size"", e, synCtx);
            } catch (SynapseException syne) {
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Message size exceeds the upper bound for caching, "" +
                            ""request will not be cached"");
                    return true;
                }
            }
        }

        ConfigurationContext cfgCtx =
            ((Axis2MessageContext) synCtx).getAxis2MessageContext().getConfigurationContext();
        if (cfgCtx == null) {
            handleException(""Unable to perform caching, ""
                + "" ConfigurationContext cannot be found"", synCtx);
            return false; 
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn,
                ""Looking up cache at scope : "" + scope + "" with ID : "" + cacheManagerKey);
        }

        
        Object prop = cfgCtx.getPropertyNonReplicable(cacheManagerKey);
        CacheManager cacheManager;
        if (prop != null && prop instanceof CacheManager) {
            cacheManager = (CacheManager) prop;
        } else {
            synchronized (cfgCtx) {
                
                prop = cfgCtx.getPropertyNonReplicable(cacheManagerKey);
                if (prop != null && prop instanceof CacheManager) {
                    cacheManager = (CacheManager) prop;

                } else {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Creating/recreating the cache object"");
                    }
                    cacheManager = new CacheManager();
                    cfgCtx.setProperty(cacheManagerKey, cacheManager);
                }
            }
        }

        boolean result = true;
        try {
            
            if (synCtx.isResponse()) {
                processResponseMessage(synCtx, cfgCtx, traceOrDebugOn, traceOn, cacheManager);

            } else {
                result = processRequestMessage(
                    synCtx, cfgCtx, traceOrDebugOn, traceOn, cacheManager);
            }
            
        } catch (ClusteringFault clusteringFault) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Unable to replicate Cache mediator state among the cluster"");
            }
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Cache mediator"");
        }
        
        return result;
    }

    
    private void processResponseMessage(MessageContext synCtx, ConfigurationContext cfgCtx,
        boolean traceOrDebugOn, boolean traceOn, CacheManager cacheManager) throws ClusteringFault {

        if (!collector) {
            handleException(""Response messages cannot be handled in a non collector cache"", synCtx);
        }

        String requestHash = (String) synCtx.getProperty(CachingConstants.REQUEST_HASH);

        if (requestHash != null) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Storing the response message into the cache at scope : "" +
                    scope + "" with ID : "" + cacheManagerKey + "" for request hash : "" + requestHash);
            }

            CachedObject cachedObj = cacheManager.getResponseForKey(requestHash, cfgCtx);
            if (cachedObj != null) {

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Storing the response for the message with ID : "" +
                        synCtx.getMessageID() + "" with request hash ID : "" +
                        cachedObj.getRequestHash() + "" in the cache : "" + cacheManagerKey);
                }

                ByteArrayOutputStream outStream = new ByteArrayOutputStream();
                try {
                    MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope()).serialize(outStream);
                    cachedObj.setResponseEnvelope(outStream.toByteArray());
                } catch (XMLStreamException e) {
                    handleException(""Unable to set the response to the Cache"", e, synCtx);
                }

                
                
                

                if (cachedObj.getTimeout() > 0) {
                    cachedObj.setExpireTimeMillis(System.currentTimeMillis() + cachedObj.getTimeout());
                }

                cfgCtx.setProperty(cacheManagerKey, cacheManager);
                Replicator.replicate(cfgCtx);

            } else {
                auditWarn(""A response message without a valid mapping to the "" +
                    ""request hash found. Unable to store the response in cache"", synCtx);
            }

        } else {
            auditWarn(""A response message without a mapping to the "" +
                ""request hash found. Unable to store the response in cache"", synCtx);
        }
    }

    
    private boolean processRequestMessage(MessageContext synCtx, ConfigurationContext cfgCtx,
        boolean traceOrDebugOn, boolean traceOn, CacheManager cacheManager) throws ClusteringFault {

        if (collector) {
            handleException(""Request messages cannot be handled in a collector cache"", synCtx);
        }

        String requestHash = null;
        try {  
            requestHash = digestGenerator.getDigest(
                ((Axis2MessageContext) synCtx).getAxis2MessageContext());
            synCtx.setProperty(CachingConstants.REQUEST_HASH, requestHash);
        } catch (CachingException e) {
            handleException(""Error in calculating the hash value of the request"", e, synCtx);
        }

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Generated request hash : "" + requestHash);
        }

        if (cacheManager.containsKey(requestHash) &&
            cacheManager.getResponseForKey(requestHash, cfgCtx) != null) {

            
            
            CachedObject cachedObj = cacheManager.getResponseForKey(requestHash, cfgCtx);

            if (!cachedObj.isExpired() && cachedObj.getResponseEnvelope() != null) {

                if (traceOrDebugOn) {
                    traceOrDebug(traceOn, ""Cache-hit for message ID : "" + synCtx.getMessageID());
                }

                
                synCtx.setResponse(true);
                try {
                    MessageFactory mf = MessageFactory.newInstance();
                    SOAPMessage smsg = mf.createMessage(new MimeHeaders(),
                        new ByteArrayInputStream(cachedObj.getResponseEnvelope()));

                    org.apache.axiom.soap.SOAPEnvelope omSOAPEnv =
                        SAAJUtil.toOMSOAPEnvelope(smsg.getSOAPPart().getDocumentElement());

                    

                    synCtx.setEnvelope(omSOAPEnv);
                } catch (AxisFault axisFault) {
                    handleException(""Error setting response envelope from cache : ""
                        + cacheManagerKey, synCtx);
                } catch (IOException ioe) {
                    handleException(""Error setting response envelope from cache : ""
                        + cacheManagerKey, ioe, synCtx);
                } catch (SOAPException soape) {
                    handleException(""Error setting response envelope from cache : ""
                        + cacheManagerKey, soape, synCtx);
                }

                
                if (onCacheHitSequence != null) {
                    
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn,
                            ""Delegating message to the onCachingHit "" + ""Anonymous sequence"");
                    }
                    onCacheHitSequence.mediate(synCtx);

                } else if (onCacheHitRef != null) {

                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Delegating message to the onCachingHit "" +
                            ""sequence : "" + onCacheHitRef);
                    }
                    synCtx.getSequence(onCacheHitRef).mediate(synCtx);

                } else {

                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""Request message "" + synCtx.getMessageID() +
                            "" was served from the cache : "" + cacheManagerKey);
                    }
                    
                    synCtx.setTo(null);
                    Axis2Sender.sendBack(synCtx);
                }
                
                return false;

            } else {
                
                cachedObj.expire();
                cachedObj.setTimeout(timeout);
                if (traceOrDebugOn) {
                    traceOrDebug(traceOn,
                        ""Existing cached response has expired. Reset cache element"");
                }

                cfgCtx.setProperty(cacheManagerKey, cacheManager);
                Replicator.replicate(cfgCtx);
            }

        } else {

            
            if (cacheManager.getCacheKeys().size() == inMemoryCacheSize) {
                cacheManager.removeExpiredResponses(cfgCtx);
                if (cacheManager.getCacheKeys().size() == inMemoryCacheSize) {
                    if (traceOrDebugOn) {
                        traceOrDebug(traceOn, ""In-memory cache is full. Unable to cache"");
                    }
                } else {
                    storeRequestToCache(cfgCtx, requestHash, cacheManager);
                }
            } else {
                storeRequestToCache(cfgCtx, requestHash, cacheManager);
            }
        }
        return true;
    }

    
    private void storeRequestToCache(ConfigurationContext cfgCtx,
        String requestHash, CacheManager cacheManager) throws ClusteringFault {
        
        CachedObject cachedObj = new CachedObject();
        cachedObj.setRequestHash(requestHash);
        
        
        cachedObj.setTimeout(timeout);
        cacheManager.addResponseWithKey(requestHash, cachedObj, cfgCtx);

        cfgCtx.setProperty(cacheManagerKey, cacheManager);
        Replicator.replicate(cfgCtx);
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
        if (CachingConstants.SCOPE_PER_MEDIATOR.equals(scope)) {
            cacheManagerKey = CACHE_MANAGER_PREFIX + id;
        }
    }

    public boolean isCollector() {
        return collector;
    }

    public void setCollector(boolean collector) {
        this.collector = collector;
    }

    public DigestGenerator getDigestGenerator() {
        return digestGenerator;
    }

    public void setDigestGenerator(DigestGenerator digestGenerator) {
        this.digestGenerator = digestGenerator;
    }

    public int getInMemoryCacheSize() {
        return inMemoryCacheSize;
    }

    public void setInMemoryCacheSize(int inMemoryCacheSize) {
        this.inMemoryCacheSize = inMemoryCacheSize;
    }

    public int getDiskCacheSize() {
        return diskCacheSize;
    }

    public void setDiskCacheSize(int diskCacheSize) {
        this.diskCacheSize = diskCacheSize;
    }

    
    public long getTimeout() {
        return timeout / 1000;
    }

    public void setTimeout(long timeout) {
        this.timeout = timeout * 1000;
    }

    public SequenceMediator getOnCacheHitSequence() {
        return onCacheHitSequence;
    }

    public void setOnCacheHitSequence(SequenceMediator onCacheHitSequence) {
        this.onCacheHitSequence = onCacheHitSequence;
    }

    public String getOnCacheHitRef() {
        return onCacheHitRef;
    }

    public void setOnCacheHitRef(String onCacheHitRef) {
        this.onCacheHitRef = onCacheHitRef;
    }

    public int getMaxMessageSize() {
        return maxMessageSize;
    }

    public void setMaxMessageSize(int maxMessageSize) {
        this.maxMessageSize = maxMessageSize;
    }
}
"
synapse,1.1,org.apache.synapse.core.axis2.SynapseCallbackReceiver,6,1,0,35,101,3,2,33,3,0.6,550,1.0,0,0.0,0.371428571,0,0,90.33333333,7,1.6667,3,"

package org.apache.synapse.core.axis2;

import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPFault;
import org.apache.axiom.soap.SOAPFaultReason;
import org.apache.axis2.AxisFault;
import org.apache.axis2.addressing.AddressingConstants;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.addressing.RelatesTo;
import org.apache.axis2.client.Options;
import org.apache.axis2.client.async.AxisCallback;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.engine.MessageReceiver;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.sandesha2.client.SandeshaClientConstants;
import org.apache.synapse.FaultHandler;
import org.apache.synapse.SynapseConstants;
import org.apache.synapse.SynapseException;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.endpoints.Endpoint;
import org.apache.synapse.transport.nhttp.NhttpConstants;

import java.util.*;


public class SynapseCallbackReceiver implements MessageReceiver {

    private static final Log log = LogFactory.getLog(SynapseCallbackReceiver.class);

    
    private Map callbackStore;  

    
    public SynapseCallbackReceiver(SynapseConfiguration synCfg) {

        callbackStore = Collections.synchronizedMap(new HashMap());

        
        TimeoutHandler timeoutHandler = new TimeoutHandler(callbackStore);
        
        Timer timeOutTimer = synCfg.getSynapseTimer();
        long timeoutHandlerInterval = SynapseConstants.DEFAULT_TIMEOUT_HANDLER_INTERVAL;
        try {
            timeoutHandlerInterval = Long.parseLong(
                System.getProperty(SynapseConstants.TIMEOUT_HANDLER_INTERVAL));
        } catch (Exception ignore) {}

        
        timeOutTimer.schedule(timeoutHandler, 0, timeoutHandlerInterval);
    }


    public void addCallback(String MsgID, AxisCallback callback) {
        callbackStore.put(MsgID, callback);
    }

    
    public void receive(MessageContext messageCtx) throws AxisFault {

        String messageID = null;

        if (messageCtx.getOptions() != null && messageCtx.getOptions().getRelatesTo() != null) {
            
            Options options = messageCtx.getOptions();
            if (options != null) {
                RelatesTo relatesTo = options.getRelatesTo();
                if (relatesTo != null) {
                    messageID = relatesTo.getValue();
                }
            }
        } else if (messageCtx.getProperty(SandeshaClientConstants.SEQUENCE_KEY) == null) {
            messageID = (String) messageCtx.getProperty(SynapseConstants.RELATES_TO_FOR_POX);
        }

        if (messageID != null) {
            AxisCallback callback = (AxisCallback) callbackStore.remove(messageID);

            RelatesTo[] relates = messageCtx.getRelationships();
            if (relates != null && relates.length > 1) {
                
                
                
                removeDuplicateRelatesTo(messageCtx, relates);
            }
            
            if (callback != null) {
                handleMessage(messageCtx, ((AsyncCallback) callback).getSynapseOutMsgCtx());
                
            } else {
                
                log.warn(""Synapse received a response for the request with message Id : "" +
                    messageID + "" But a callback is not registered (anymore) to process this response"");
            }

        } else if (!messageCtx.isPropertyTrue(NhttpConstants.SC_ACCEPTED)){
            
            log.warn(""Synapse received a response message without a message Id"");
        }
    }

    
    private void handleMessage(MessageContext response,
        org.apache.synapse.MessageContext synapseOutMsgCtx) throws AxisFault {

        Object o = response.getProperty(NhttpConstants.SENDING_FAULT);
        if (o != null && Boolean.TRUE.equals(o)) {

            

            Stack faultStack = synapseOutMsgCtx.getFaultStack();
            if (faultStack != null && !faultStack.isEmpty()) {
                SOAPEnvelope envelope = response.getEnvelope();
                if (envelope != null) {
                    SOAPFault fault = envelope.getBody().getFault();
                    if (fault != null) {
                        Exception e = fault.getException();
                        if (e == null) {
                            e = new Exception(fault.toString());
                        }
                        
                        
                        synapseOutMsgCtx.setProperty(SynapseConstants.ERROR_CODE,
                            SynapseConstants.SENDING_FAULT);
                        SOAPFaultReason faultReason = fault.getReason();
                        if (faultReason != null) {
                            synapseOutMsgCtx.setProperty(SynapseConstants.ERROR_MESSAGE,
                                    faultReason.getText());
                        }
                        if (fault.getException() != null) {
                            synapseOutMsgCtx.setProperty(SynapseConstants.ERROR_EXCEPTION,
                                    fault.getException());
                        }
                        ((FaultHandler) faultStack.pop()).handleFault(synapseOutMsgCtx, e);
                    }
                }
            }

        } else {

            
            
            Stack faultStack = synapseOutMsgCtx.getFaultStack();
            if (faultStack !=null && !faultStack.isEmpty()
                && faultStack.peek() instanceof Endpoint) {
                faultStack.pop();
            }
            if (log.isDebugEnabled()) {
                log.debug(""Synapse received an asynchronous response message"");
                log.debug(""Received To: "" +
                        (response.getTo() != null ? response.getTo().getAddress() : ""null""));
                log.debug(""SOAPAction: "" +
                        (response.getSoapAction() != null ? response.getSoapAction() : ""null""));
                log.debug(""WSA-Action: "" +
                        (response.getWSAAction() != null ? response.getWSAAction() : ""null""));
                String[] cids = response.getAttachmentMap().getAllContentIDs();
                if (cids != null && cids.length > 0) {
                    for (int i = 0; i < cids.length; i++) {
                        log.debug(""Attachment : "" + cids[i]);
                    }
                }
                log.debug(""Body : 
"" + response.getEnvelope());
            }
            MessageContext axisOutMsgCtx =
                    ((Axis2MessageContext) synapseOutMsgCtx).getAxis2MessageContext();

            response.setServiceContext(null);
            response.setOperationContext(axisOutMsgCtx.getOperationContext());
            response.getAxisMessage().setParent(
                axisOutMsgCtx.getOperationContext().getAxisOperation());
            response.setAxisService(axisOutMsgCtx.getAxisService());

            
            response.setServerSide(true);
            response.setProperty(SynapseConstants.ISRESPONSE_PROPERTY, Boolean.TRUE);
            response.setProperty(MessageContext.TRANSPORT_OUT,
                    axisOutMsgCtx.getProperty(MessageContext.TRANSPORT_OUT));
            response.setProperty(org.apache.axis2.Constants.OUT_TRANSPORT_INFO,
                    axisOutMsgCtx.getProperty(org.apache.axis2.Constants.OUT_TRANSPORT_INFO));
            response.setTransportIn(axisOutMsgCtx.getTransportIn());
            response.setTransportOut(axisOutMsgCtx.getTransportOut());

            
            response.setDoingREST(axisOutMsgCtx.isDoingREST());
            if (axisOutMsgCtx.isDoingMTOM()) {
                response.setDoingMTOM(true);
                response.setProperty(
                        org.apache.axis2.Constants.Configuration.ENABLE_MTOM,
                        org.apache.axis2.Constants.VALUE_TRUE);
            }
            if (axisOutMsgCtx.isDoingSwA()) {
                response.setDoingSwA(true);
                response.setProperty(
                        org.apache.axis2.Constants.Configuration.ENABLE_SWA,
                        org.apache.axis2.Constants.VALUE_TRUE);
            }

            
            
            response.removeProperty(org.apache.axis2.Constants.Configuration.MESSAGE_TYPE);
            
            
            
            if(axisOutMsgCtx.isSOAP11() != response.isSOAP11()) {
            	if(axisOutMsgCtx.isSOAP11()) {
            		SOAPUtils.convertSOAP12toSOAP11(response);
            	} else {
            		SOAPUtils.convertSOAP11toSOAP12(response);
            	}
            }

            if (axisOutMsgCtx.getMessageID() != null) {
                response.setRelationships(
                        new RelatesTo[]{new RelatesTo(axisOutMsgCtx.getMessageID())});
            }

            
            Axis2MessageContext synapseInMessageContext =
                    new Axis2MessageContext(
                            response,
                            synapseOutMsgCtx.getConfiguration(),
                            synapseOutMsgCtx.getEnvironment());

            synapseInMessageContext.setResponse(true);
            synapseInMessageContext.setTo(
                new EndpointReference(AddressingConstants.Final.WSA_ANONYMOUS_URL));
            synapseInMessageContext.setTracingState(synapseOutMsgCtx.getTracingState());

            
            Iterator iter = synapseOutMsgCtx.getPropertyKeySet().iterator();

            while (iter.hasNext()) {
                Object key = iter.next();
                synapseInMessageContext.setProperty(
                        (String) key, synapseOutMsgCtx.getProperty((String) key));
            }

            
            try {
                synapseOutMsgCtx.getEnvironment().injectMessage(synapseInMessageContext);
            } catch (SynapseException syne) {
                Stack stack = synapseInMessageContext.getFaultStack();
                if (stack != null &&
                        !stack.isEmpty()) {
                    ((FaultHandler) stack.pop()).handleFault(synapseInMessageContext, syne);
                } else {
                    log.error(""Synapse encountered an exception, "" +
                            ""No error handlers found - [Message Dropped]
"" + syne.getMessage());
                }
            }
        }
    }

    
    private void removeDuplicateRelatesTo(MessageContext mc, RelatesTo[] relates) {

        int insertPos = 0;
        RelatesTo[] newRelates = new RelatesTo[relates.length];

        for (int i = 0; i < relates.length; i++) {
            RelatesTo current = relates[i];
            boolean found = false;
            for (int j = 0; j < newRelates.length && j < insertPos; j++) {
                if (newRelates[j].equals(current) ||
                        newRelates[j].getValue().equals(current.getValue())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                newRelates[insertPos++] = current;
            }
        }

        RelatesTo[] trimmedRelates = new RelatesTo[insertPos];
        System.arraycopy(newRelates, 0, trimmedRelates, 0, insertPos);
        mc.setRelationships(trimmedRelates);
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.SwitchMediatorFactory,4,2,0,13,28,2,0,13,3,0.666666667,175,1.0,0,0.6,0.666666667,0,0,42.0,5,1.5,0,"

package org.apache.synapse.config.xml;

import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.SynapseException;
import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.filters.SwitchMediator;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;


public class SwitchMediatorFactory extends AbstractMediatorFactory {

    private static final QName SWITCH_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""switch"");
    private static final QName CASE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""case"");
    private static final QName DEFAULT_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""default"");

    public Mediator createMediator(OMElement elem) {

        SwitchMediator switchMediator = new SwitchMediator();
        OMAttribute source = elem.getAttribute(ATT_SOURCE);
        if (source == null) {
            String msg = ""A 'source' XPath attribute is required for a switch mediator"";
            log.error(msg);
            throw new SynapseException(msg);
        } else {
            try {
                AXIOMXPath sourceXPath = new AXIOMXPath(source.getAttributeValue());
                org.apache.synapse.config.xml.OMElementUtils.addNameSpaces(sourceXPath, elem, log);
                switchMediator.setSource(sourceXPath);

            } catch (JaxenException e) {
                String msg = ""Invalid XPath for attribute 'source' : "" + source.getAttributeValue();
                log.error(msg);
                throw new SynapseException(msg);
            }
        }
        
        
        processTraceState(switchMediator, elem);
        Iterator iter = elem.getChildrenWithName(CASE_Q);
        while (iter.hasNext()) {
            OMElement caseElem = (OMElement) iter.next();
            SwitchCase aCase = new SwitchCase();
            OMAttribute regex = caseElem.getAttribute(ATT_REGEX);
            if (regex == null) {
                String msg = ""The 'regex' attribute is required for a switch case definition"";
                log.error(msg);
                throw new SynapseException(msg);
            }
            try {
                aCase.setRegex(Pattern.compile(regex.getAttributeValue()));
            } catch (PatternSyntaxException pse) {
                String msg = ""Invalid Regular Expression for attribute 'regex' : "" + regex.getAttributeValue();
                log.error(msg);
                throw new SynapseException(msg);
            }
            aCase.setCaseMediator(AnonymousListMediatorFactory.createAnonymousListMediator(caseElem));
            switchMediator.addCase(aCase);
        }
        iter = elem.getChildrenWithName(DEFAULT_Q);
        while (iter.hasNext()) {
            SwitchCase aCase = new SwitchCase();
            aCase.setCaseMediator(AnonymousListMediatorFactory.createAnonymousListMediator((OMElement) iter.next()));
            switchMediator.setDefaultCase(aCase);
            break; 
        }
        return switchMediator;
    }

    public QName getTagQName() {
        return SWITCH_Q;
    }
}
"
synapse,1.1,org.apache.synapse.util.MessageHelper,8,1,0,31,96,28,4,27,7,2.0,430,0.0,0,0.0,0.2,0,0,52.75,6,2.875,1,"package org.apache.synapse.util;

import org.apache.synapse.MessageContext;
import org.apache.synapse.mediators.eip.EIPConstants;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axiom.soap.SOAPHeaderBlock;
import org.apache.axiom.soap.SOAP11Constants;
import org.apache.axiom.attachments.Attachments;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMNamespace;
import org.apache.axiom.om.OMAbstractFactory;
import org.apache.axiom.om.OMNode;
import org.apache.axis2.addressing.AddressingConstants;
import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;

import java.util.Iterator;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;


public class MessageHelper {

    
    public static MessageContext cloneMessageContext(MessageContext synCtx) throws AxisFault {

        
        
        MessageContext newCtx = synCtx.getEnvironment().createMessageContext();
        Axis2MessageContext axis2MC = (Axis2MessageContext) newCtx;
        axis2MC.setAxis2MessageContext(
            cloneAxis2MessageContext(((Axis2MessageContext) synCtx).getAxis2MessageContext()));

        newCtx.setConfiguration(synCtx.getConfiguration());
        newCtx.setEnvironment(synCtx.getEnvironment());
        newCtx.setContextEntries(synCtx.getContextEntries());

        
        
        newCtx.setProperty(EIPConstants.AGGREGATE_CORRELATION, synCtx.getMessageID());

        
        newCtx.setTo(synCtx.getTo());
        newCtx.setReplyTo(synCtx.getReplyTo());
        newCtx.setSoapAction(synCtx.getSoapAction());
        newCtx.setWSAAction(synCtx.getWSAAction());
        newCtx.setResponse(synCtx.isResponse());

        
        for (Object o : synCtx.getPropertyKeySet()) {
            
            if (o instanceof String) {
                newCtx.setProperty((String) o, synCtx.getProperty((String) o));
            }
        }

        return newCtx;
    }

    
    public static org.apache.axis2.context.MessageContext cloneAxis2MessageContext(
        org.apache.axis2.context.MessageContext mc) throws AxisFault {

        org.apache.axis2.context.MessageContext newMC = clonePartially(mc);
        newMC.setEnvelope(cloneSOAPEnvelope(mc.getEnvelope()));
        
        newMC.setServiceContext(mc.getServiceContext());
        newMC.setOperationContext(mc.getOperationContext());
        newMC.setAxisMessage(mc.getAxisMessage());
        if (newMC.getAxisMessage() != null) {
            newMC.getAxisMessage().setParent(mc.getAxisOperation());
        }
        newMC.setAxisService(mc.getAxisService());

        
        newMC.setTransportIn(mc.getTransportIn());
        newMC.setTransportOut(mc.getTransportOut());
        newMC.setProperty(org.apache.axis2.Constants.OUT_TRANSPORT_INFO,
            mc.getProperty(org.apache.axis2.Constants.OUT_TRANSPORT_INFO));

        newMC.setProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS,
            getClonedTransportHeaders(mc));

        return newMC;
    }

    public static Map getClonedTransportHeaders(org.apache.axis2.context.MessageContext msgCtx) {
        
        Map headers = (Map) msgCtx.
            getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);
        Map clonedHeaders = new HashMap();

        if (headers != null && headers.isEmpty()) {
            for (Object o : headers.keySet()) {
                String headerName = (String) o;
                clonedHeaders.put(headerName, headers.get(headerName));
            }
        }

        return clonedHeaders;
    }

    public static org.apache.axis2.context.MessageContext clonePartially(
        org.apache.axis2.context.MessageContext ori) throws AxisFault {

        org.apache.axis2.context.MessageContext newMC
            = new org.apache.axis2.context.MessageContext();
        
        
        newMC.setConfigurationContext(ori.getConfigurationContext());
        newMC.setMessageID(UUIDGenerator.getUUID());
        newMC.setTo(ori.getTo());
        newMC.setSoapAction(ori.getSoapAction());

        newMC.setProperty(org.apache.axis2.Constants.Configuration.CHARACTER_SET_ENCODING,
                ori.getProperty(org.apache.axis2.Constants.Configuration.CHARACTER_SET_ENCODING));
        newMC.setProperty(org.apache.axis2.Constants.Configuration.ENABLE_MTOM,
                ori.getProperty(org.apache.axis2.Constants.Configuration.ENABLE_MTOM));
        newMC.setProperty(org.apache.axis2.Constants.Configuration.ENABLE_SWA,
                ori.getProperty(org.apache.axis2.Constants.Configuration.ENABLE_SWA));
        newMC.setProperty(Constants.Configuration.HTTP_METHOD,
            ori.getProperty(Constants.Configuration.HTTP_METHOD));

        newMC.setDoingREST(ori.isDoingREST());
        newMC.setDoingMTOM(ori.isDoingMTOM());
        newMC.setDoingSwA(ori.isDoingSwA());

        
        
        Attachments attachments = ori.getAttachmentMap();
        if (attachments != null && attachments.getAllContentIDs().length > 0) {
            String[] cIDs = attachments.getAllContentIDs();
            String soapPart = attachments.getSOAPPartContentID();
            for (String cID : cIDs) {
                if (!cID.equals(soapPart)) {
                    newMC.addAttachment(cID, attachments.getDataHandler(cID));
                }
            }
        }

        for (Object o : ori.getOptions().getProperties().keySet()) {
            String key = (String) o;
            newMC.getOptions().setProperty(key, ori.getOptions().getProperty(key));
        }

        for (Object o1 : ori.getProperties().keySet()) {
            String key = (String) o1;
            if (key != null) {
                
                
                
                newMC.setNonReplicableProperty(key, ori.getPropertyNonReplicable(key));
            }
        }

        newMC.setServerSide(false);

        return newMC;
    }

    
    public static SOAPEnvelope cloneSOAPEnvelope(SOAPEnvelope envelope) {
        SOAPEnvelope newEnvelope;
        if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI
            .equals(envelope.getBody().getNamespace().getNamespaceURI())) {
            newEnvelope = OMAbstractFactory.getSOAP11Factory().getDefaultEnvelope();
        } else {
            newEnvelope = OMAbstractFactory.getSOAP12Factory().getDefaultEnvelope();
        }

        if (envelope.getHeader() != null) {
            Iterator itr = envelope.getHeader().cloneOMElement().getChildren();
            while (itr.hasNext()) {
                newEnvelope.getHeader().addChild((OMNode) itr.next());
            }
        }

        if (envelope.getBody() != null) {
            Iterator itr = envelope.getBody().cloneOMElement().getChildren();
            while (itr.hasNext()) {
                newEnvelope.getBody().addChild((OMNode) itr.next());
            }
        }

        return newEnvelope;
    }

    
    public static SOAPEnvelope removeAddressingHeaders(
        org.apache.axis2.context.MessageContext axisMsgCtx) {

        SOAPEnvelope env = axisMsgCtx.getEnvelope();
        SOAPHeader soapHeader = env.getHeader();
        ArrayList addressingHeaders;

        if (soapHeader != null) {
            addressingHeaders =
                soapHeader.getHeaderBlocksWithNSURI(AddressingConstants.Submission.WSA_NAMESPACE);

            if (addressingHeaders != null && addressingHeaders.size() != 0) {
                detachAddressingInformation(addressingHeaders);

            } else {
                addressingHeaders =
                    soapHeader.getHeaderBlocksWithNSURI(AddressingConstants.Final.WSA_NAMESPACE);
                if (addressingHeaders != null && addressingHeaders.size() != 0) {
                    detachAddressingInformation(addressingHeaders);
                }
            }
        }
        return env;
    }

    
    private static void detachAddressingInformation(ArrayList headerInformation) {
        for (Object o : headerInformation) {
            if (o instanceof SOAPHeaderBlock) {
                SOAPHeaderBlock headerBlock = (SOAPHeaderBlock) o;
                headerBlock.detach();
            } else if (o instanceof OMElement) {
                
                OMElement om = (OMElement) o;
                OMNamespace ns = om.getNamespace();
                if (ns != null && (
                    AddressingConstants.Submission.WSA_NAMESPACE.equals(ns.getNamespaceURI()) ||
                        AddressingConstants.Final.WSA_NAMESPACE.equals(ns.getNamespaceURI()))) {
                    om.detach();
                }
            }
        }
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.AggregateMediatorFactory,4,2,0,13,34,2,0,13,3,0.69047619,314,1.0,0,0.6,0.666666667,0,0,74.0,17,4.5,0,"

package org.apache.synapse.config.xml;

import org.apache.synapse.Mediator;
import org.apache.synapse.mediators.eip.aggregator.AggregateMediator;
import org.apache.synapse.mediators.builtin.DropMediator;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jaxen.JaxenException;

import javax.xml.namespace.QName;


public class AggregateMediatorFactory extends AbstractMediatorFactory {

    private static final Log log = LogFactory.getLog(AggregateMediatorFactory.class);

    private static final QName AGGREGATE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""aggregate"");
    private static final QName CORELATE_ON_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""correlateOn"");
    private static final QName COMPLETE_CONDITION_Q
            = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""completeCondition"");
    private static final QName MESSAGE_COUNT_Q
            = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""messageCount"");
    private static final QName ON_COMPLETE_Q = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""onComplete"");
    private static final QName EXPRESSION_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""expression"");
    private static final QName TIMEOUT_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""timeout"");
    private static final QName MIN_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""min"");
    private static final QName MAX_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""max"");
    private static final QName SEQUENCE_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""sequence"");

    public Mediator createMediator(OMElement elem) {

        AggregateMediator mediator = new AggregateMediator();
        processTraceState(mediator, elem);

        OMElement corelateOn = elem.getFirstChildWithName(CORELATE_ON_Q);
        if (corelateOn != null) {
            OMAttribute corelateExpr = corelateOn.getAttribute(EXPRESSION_Q);
            if (corelateExpr != null) {
                try {
                    AXIOMXPath xp = new AXIOMXPath(corelateExpr.getAttributeValue());
                    OMElementUtils.addNameSpaces(xp, corelateOn, log);
                    mediator.setCorrelateExpression(xp);
                } catch (JaxenException e) {
                    handleException(""Unable to load the corelate XPATH expression"", e);
                }
            }
        }

        OMElement completeCond = elem.getFirstChildWithName(COMPLETE_CONDITION_Q);
        if (completeCond != null) {
            OMAttribute completeTimeout = completeCond.getAttribute(TIMEOUT_Q);
            if (completeTimeout != null) {
                mediator.setCompletionTimeoutMillis(
                        Long.parseLong(completeTimeout.getAttributeValue()) * 1000);
            }

            OMElement messageCount = completeCond.getFirstChildWithName(MESSAGE_COUNT_Q);
            if (messageCount != null) {
                OMAttribute min = messageCount.getAttribute(MIN_Q);
                if (min != null) {
                    mediator.setMinMessagesToComplete(Integer.parseInt(min.getAttributeValue()));
                }

                OMAttribute max = messageCount.getAttribute(MAX_Q);
                if (max != null) {
                    mediator.setMaxMessagesToComplete(Integer.parseInt(max.getAttributeValue()));
                }
            }
        }

        OMElement onComplete = elem.getFirstChildWithName(ON_COMPLETE_Q);
        if (onComplete != null) {

            OMAttribute aggregateExpr = onComplete.getAttribute(EXPRESSION_Q);
            if (aggregateExpr != null) {
                try {
                    AXIOMXPath xp = new AXIOMXPath(aggregateExpr.getAttributeValue());
                    OMElementUtils.addNameSpaces(xp, onComplete, log);
                    mediator.setAggregationExpression(xp);
                } catch (JaxenException e) {
                    handleException(""Unable to load the aggregating XPATH"", e);
                }
            }

            OMAttribute onCompleteSequence = onComplete.getAttribute(SEQUENCE_Q);
            if (onCompleteSequence != null) {
                mediator.setOnCompleteSequenceRef(onCompleteSequence.getAttributeValue());
            } else if (onComplete.getFirstElement() != null) {
                mediator.setOnCompleteSequence(
                        (new SequenceMediatorFactory()).createAnonymousSequence(onComplete));
            } else {
                SequenceMediator sequence = new SequenceMediator();
                sequence.addChild(new DropMediator());
                mediator.setOnCompleteSequence(sequence);
            }
        }
        return mediator;
    }

    public QName getTagQName() {
        return AGGREGATE_Q;
    }
}
"
synapse,1.1,org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory,2,1,0,6,8,1,2,4,2,2.0,33,0.0,0,0.0,0.5,0,0,15.5,3,1.5,0,"

package org.apache.synapse.config.xml.endpoints.utils;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.OMAttribute;
import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
import org.apache.synapse.endpoints.algorithms.RoundRobin;
import org.apache.synapse.config.xml.XMLConfigConstants;

import javax.xml.namespace.QName;
import java.util.ArrayList;


public class LoadbalanceAlgorithmFactory {

    public static LoadbalanceAlgorithm createLoadbalanceAlgorithm(OMElement loadbalanceElement, ArrayList endpoints) {

        LoadbalanceAlgorithm algorithm = null;

        String algorithmName = ""roundRobin"";
        OMAttribute algoAttribute = loadbalanceElement.getAttribute(new QName(null, XMLConfigConstants.ALGORITHM_NAME));
        if(algoAttribute != null) {
            algorithmName = algoAttribute.getAttributeValue();
        }

        if(algorithmName.equalsIgnoreCase(""roundRobin"")) {
                algorithm = new RoundRobin(endpoints);
        }

        return algorithm;
    }
}
"
synapse,1.1,org.apache.synapse.mediators.MediatorProperty,9,1,0,10,12,26,7,3,8,0.928571429,70,0.428571429,0,0.0,0.375,0,0,6.0,1,0.7778,0,"

package org.apache.synapse.mediators;

import org.apache.axiom.om.xpath.AXIOMXPath;
import org.apache.synapse.MessageContext;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.config.xml.XMLConfigConstants;

import javax.xml.namespace.QName;


public class MediatorProperty {

    public static final QName PROPERTY_Q  = new QName(XMLConfigConstants.SYNAPSE_NAMESPACE, ""property"");
    public static final QName ATT_NAME_Q  = new QName(XMLConfigConstants.NULL_NAMESPACE, ""name"");
    public static final QName ATT_VALUE_Q = new QName(XMLConfigConstants.NULL_NAMESPACE, ""value"");
    public static final QName ATT_EXPR_Q  = new QName(XMLConfigConstants.NULL_NAMESPACE, ""expression"");

    private String name;
    private String value;
    private AXIOMXPath expression;

    public MediatorProperty() {}

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public AXIOMXPath getExpression() {
        return expression;
    }

    public void setExpression(AXIOMXPath expression) {
        this.expression = expression;
    }

    public String getEvaluatedExpression(MessageContext synCtx) {
        return Axis2MessageContext.getStringValue(expression, synCtx);
    }

}
"
synapse,1.1,org.apache.synapse.mediators.eip.splitter.CloneMediator,8,2,0,12,32,0,2,10,7,0.5,157,1.0,0,0.65,0.291666667,0,0,18.375,10,2.0,0,"

package org.apache.synapse.mediators.eip.splitter;

import org.apache.synapse.MessageContext;
import org.apache.synapse.ManagedLifecycle;
import org.apache.synapse.core.axis2.Axis2MessageContext;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.util.MessageHelper;
import org.apache.synapse.mediators.AbstractMediator;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.mediators.eip.Target;
import org.apache.synapse.mediators.eip.EIPConstants;
import org.apache.axis2.AxisFault;
import org.apache.axis2.Constants;
import org.apache.axis2.context.OperationContext;

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;


public class CloneMediator extends AbstractMediator implements ManagedLifecycle {

    
    private boolean continueParent = false;

    
    private List<Target> targets = new ArrayList<Target>();

    
    public boolean mediate(MessageContext synCtx) {

        boolean traceOn = isTraceOn(synCtx);
        boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);

        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""Start : Clone mediator"");

            if (traceOn && trace.isTraceEnabled()) {
                trace.trace(""Message : "" + synCtx.getEnvelope());
            }
        }

        
        
        Iterator<Target> iter = targets.iterator();
        int i = 0;
        while (iter.hasNext()) {
            if (traceOrDebugOn) {
                traceOrDebug(traceOn, ""Submitting "" + (i+1) + "" of "" + targets.size() +
                    "" messages for processing in parallel"");
            }

            iter.next().mediate(getClonedMessageContext(synCtx, i++, targets.size()));
        }

        
        
        OperationContext opCtx
            = ((Axis2MessageContext) synCtx).getAxis2MessageContext().getOperationContext();
        if (!continueParent && opCtx != null) {
            opCtx.setProperty(Constants.RESPONSE_WRITTEN, ""SKIP"");
        }

        
        if (traceOrDebugOn) {
            traceOrDebug(traceOn, ""End : Clone mediator"");
        }

        
        
        return continueParent;
    }

    
    private MessageContext getClonedMessageContext(MessageContext synCtx, int messageSequence,
        int messageCount) {

        MessageContext newCtx = null;
        try {
            newCtx = MessageHelper.cloneMessageContext(synCtx);

            
            newCtx.setProperty(EIPConstants.MESSAGE_SEQUENCE,
                String.valueOf(messageSequence) + EIPConstants.MESSAGE_SEQUENCE_DELEMITER +
                messageCount);            
        } catch (AxisFault axisFault) {
            handleException(""Error cloning the message context"", axisFault, synCtx);
        }

        return newCtx;
    }

    
    
    

    public boolean isContinueParent() {
        return continueParent;
    }

    public void setContinueParent(boolean continueParent) {
        this.continueParent = continueParent;
    }

    public List<Target> getTargets() {
        return targets;
    }

    public void setTargets(List<Target> targets) {
        this.targets = targets;
    }

    public void addTarget(Target target) {
        this.targets.add(target);
    }

    public void init(SynapseEnvironment se) {
        Iterator<Target> iter = targets.iterator();
        while (iter.hasNext()) {
            SequenceMediator seq = iter.next().getSequence();
            if (seq != null) {
                seq.init(se);
            }
        }
    }

    public void destroy() {
        Iterator<Target> iter = targets.iterator();
        while (iter.hasNext()) {
            SequenceMediator seq = iter.next().getSequence();
            if (seq != null) {
                seq.destroy();
            }
        }
    }

}
"
synapse,1.1,org.apache.synapse.config.xml.SwitchCase,7,1,0,5,11,3,3,2,7,0.583333333,53,1.0,1,0.0,0.314285714,0,0,6.285714286,2,1.1429,0,"
package org.apache.synapse.config.xml;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.synapse.MessageContext;
import org.apache.synapse.SynapseException;

import java.util.regex.Matcher;
import java.util.regex.Pattern;



public class SwitchCase {

    
    private Pattern regex = null;
    
    private AnonymousListMediator caseMediator;

    
    public boolean mediate(MessageContext synCtx) {
        if (caseMediator != null) {
            return caseMediator.mediate(synCtx);
        }
        return true;
    }

    
    public AnonymousListMediator getCaseMediator() {
        return caseMediator;
    }

    
    public void setCaseMediator(AnonymousListMediator caseMediator) {
        this.caseMediator = caseMediator;
    }

    
    public Pattern getRegex() {
        return regex;
    }

    
    public void setRegex(Pattern regex) {
        this.regex = regex;
    }

    
    public boolean matches(String value) {
        Matcher matcher = regex.matcher(value);
        if(matcher == null){
            return false;
        }
        boolean retVal = matcher.matches();
        return retVal;
    }
}
"
